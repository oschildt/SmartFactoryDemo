<?php
$old = set_include_path(get_include_path() . PATH_SEPARATOR . app_path());
require_once app_path() . "Zend/Http/Client.php";

function hmac($key, $data) 
{
  // RFC 2104 HMAC implementation for php.
  // Creates an SHA-1 HMAC.
  $b = 64; // byte length for SHA-1
  // if the key has more than 64 bytes, hash it
  //if (strlen($key) > $b) {
  // $key = pack("H*",sha1($key));
  //}
  $key = str_pad($key, $b, chr(0x00));
  $ipad = str_pad('', $b, chr(0x36));
  $opad = str_pad('', $b, chr(0x5c));
  $k_ipad = $key ^ $ipad;
  $k_opad = $key ^ $opad;
  
  return sha1($k_opad . pack("H*",sha1($k_ipad . $data)));
}

function aux_calc_round_price($price, $rate, &$settings)
{
  $price = $price*$rate;
  
  if(!empty($settings["round_recalculations"]) ||
     (!empty($settings["round_foreign_currencies"]) && ifnull($_SESSION["booking"]["data"]["current_currency"]) != ifnull($_SESSION["booking"]["data"]["default_currency"]))
    )
  {
    $fraction = $price - floor($price);
    if($fraction == 0) $fraction = 0;
    elseif($fraction <= 0.5) $fraction = 0.5;
    else                 $fraction = 1;

    $price = floor($price) + $fraction;
  }
  else
  {
    $price = round($price*$rate, 2);
  }
  
  return $price;
}
//-------------------------------------------------------------------
// class Hotel
//-------------------------------------------------------------------
abstract class Hotel extends Module
{
  //-----------------------------------------------------------------
  abstract function get_where_card_date($prfx);
  abstract function get_query_rating_list($prfx, $begin, $end, $where_appendix);
  abstract function get_query_protocol($prfx);
  abstract function get_query_save_rating_data($prfx, $bid, $lid, $is_active, $url, $picture, $title);
  //-----------------------------------------------------------------
  static $rooms_list=array();
  static $seasons_list=array();
  static $currency_list=array();
  static $currency_signs=array('usd'=>'$','eur'=>'&#8364;','gbp'=>'&pound;','jpy'=>'&yen;');
  static $pricelist_list=array();
  static $pricelist_data=array();
  static $words=array();
  static $current_season;



  static $lang_list=array();
  static $lang_rooms_list=array();
  static $lang_name_list=array();
  static $data=array();

  private $settings = array();
  private $ext_js_included = false;
  //-----------------------------------------------------------------

  function get_caption()
  {
    $caption = try_translate("HotelManager");
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["fewo"])) $caption = try_translate("ApartmentManager");
    
    if(empty($caption)) $caption = "hotel";

    return $caption;
  } // get_caption
  //-----------------------------------------------------------------
  function get_caption2()
  {
    return "CM Studio .HOTEL";
  }
  function parse_internal_css(&$css)
  {
  } // parse_internal_css
  //-----------------------------------------------------------------
  function make_internal_css(&$css_contents)
  {
  } // make_internal_css
  //-----------------------------------------------------------------
  function get_rooms_lang_list()
  {
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    hotel::$lang_rooms_list=array();

    $query="SELECT DISTINCT ${prfx}_LANGUAGE.ID, ${prfx}_LANGUAGE.LANG_KEY FROM ${prfx}_HTL_ROOMS_PROPS
                          INNER JOIN ${prfx}_LANGUAGE ON (LANGUAGE_ID = ${prfx}_LANGUAGE.ID)";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$lang_rooms_list[$dbw->row["ID"]] = $dbw->row["LANG_KEY"];
    }
    $dbw->free_result();
  }
  /*-----------------------------------------------*/
  function get_common_lang()
  {


  }
  //-----------------------------------------------------------------
  function get_rooms_list(&$ROWS_PER_PAGE, &$page)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;
    global $INFO_MESSAGE;
    global $row_count;
    global $page_count;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $pass=true;
    if(!empty($_REQUEST["action"]))
    {
      if($_REQUEST["action"]=="navigate")
      {
         $pass=false;
      }
    }
     if(!empty($_REQUEST["room_id"]) &&  $pass)
     {
      $query="SELECT ID FROM ${prfx}_HTL_ROOMS ORDER BY SORT_ORDER";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $row_count=$dbw->fetched_count();
      $cnt=1;
      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("ID")==reqvar("room_id"))
        {

          $page=ceil($cnt/$ROWS_PER_PAGE);

          break;
        }
        $cnt++;
      }
    }
    else
    {
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_ROOMS";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      $row_count=$dbw->row["CNT"];
    }


    $page_count=ceil($row_count/$ROWS_PER_PAGE);
    $start=$page*$ROWS_PER_PAGE-$ROWS_PER_PAGE;
    if(!$row_count)
    {
      $INFO_MESSAGE=text("NoOneRoom");
      return false;
    }
    $dbw->free_result();
    $end = ($page-1)*$ROWS_PER_PAGE + $ROWS_PER_PAGE;

    $lang_list=array_flip(hotel::$lang_list);
    $lang_list_hotel = $this->get_lang_list_hotel("_HTL_ROOMS_PROPS");

    if(!empty($lang_list[$_SESSION["lang"]]))
    {
      $LANG_ID = $lang_list[$_SESSION["lang"]];
    }
    else
    {
      foreach($lang_list_hotel as $lang_hotel_id)
      {
        if(!empty(hotel::$lang_list[$lang_hotel_id]))
        {
          $LANG_ID = $lang_hotel_id;
          break;
        }
      }
    }

    $currency = $this->fetch_default_currency();

    $query=$this->get_room_list_query($prfx, $start, $end, $ROWS_PER_PAGE, $LANG_ID);

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$rooms_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$rooms_list[$dbw->row["ID"]]["ROOMS_COUNT"] = $dbw->row["ROOMS_COUNT"];
      hotel::$rooms_list[$dbw->row["ID"]]["MIN_PERSONS"] = $dbw->row["MIN_PERSONS"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_PERSONS"] = $dbw->row["MAX_PERSONS"];
      hotel::$rooms_list[$dbw->row["ID"]]["STANDARD_ALLOCATION"] = $dbw->row["STANDARD_ALLOCATION"];
      switch($dbw->row["WITH_CHILDREN"])
      {
        case 0:
          hotel::$rooms_list[$dbw->row["ID"]]["WITH_CHILDREN"] = "";
        break;

        case 1:
          hotel::$rooms_list[$dbw->row["ID"]]["WITH_CHILDREN"] = "&#10003;";
        break;
      }
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE"] = $dbw->row["MAX_CHILD_AGE"]." ".text("YearsOld");
      if(hotel::$rooms_list[$dbw->row["ID"]]["WITH_CHILDREN"] == "")
        hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE"] = "";
      if(hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE"] == 0)
        hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE"] = '';

      switch($dbw->row["PRICING_TYPE"])
      {
        case 0:
          hotel::$rooms_list[$dbw->row["ID"]]["PRICING_TYPE"] = text("PricePerRoom");
        break;

        case 1:
          hotel::$rooms_list[$dbw->row["ID"]]["PRICING_TYPE"] = text("PricePerPerson");
        break;
      }

      switch($dbw->row["DISCOUNT_FLAG"])
      {
        case 0:
          if($dbw->row["STANDARD_ALLOCATION"] == 1)
            hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = "";
          else
            hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = $currency["sign"];
        break;

        case 1:
          if($dbw->row["STANDARD_ALLOCATION"] == 1)
            hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = "";
          else
            hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = "%";
        break;

        default:
          $currency = $this->fetch_default_currency();
          hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = $currency["sign"];
        break;
      }

      switch($dbw->row["CHILD_DISCOUNT_FLAG"])
      {
        case 0:
          if($dbw->row["WITH_CHILDREN"] == 0)
            hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG"] = "";
          else
            hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG"] = $currency["sign"];
        break;

        case 1:
          if($dbw->row["WITH_CHILDREN"] == 0)
            hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG"] = "";
          else
            hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG"] = "%";
        break;

        default:
          $currency = $this->fetch_default_currency();
          hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = $currency["sign"];
        break;
      }

      hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT"] = $dbw->row["DISCOUNT"];
      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT"] = $dbw->row["CHILD_DISCOUNT"];
      hotel::$rooms_list[$dbw->row["ID"]]["SORT_ORDER"] = $dbw->row["SORT_ORDER"];
      hotel::$rooms_list[$dbw->row["ID"]]["TYPE"] = escape_html($dbw->row["TYPE"]);
      hotel::$rooms_list[$dbw->row["ID"]]["ROOM_TYPE"] = escape_html($dbw->row["ROOM_TYPE"]);
      hotel::$rooms_list[$dbw->row["ID"]]["CATEGORY"] = escape_html($dbw->row["CATEGORY"]);
      hotel::$rooms_list[$dbw->row["ID"]]["DESCRIPTION"] = escape_html($dbw->row["DESCRIPTION"]);
    }


    $dbw->free_result();
    return true;
  }
  //-----------------------------------------------------------------
  function fetch_hotel_names(&$hotel_names)
  {
    global $ERROR;
    global $ERR_DETAILS;

    // some logic for filling list
    $hotel_names[1] = "hotel_john";
    $hotel_names[2] = "hotel_sandra";
    $hotel_names[3] = "hotel_mike";

    return true;
  } // fetch_hotel_names
  //-----------------------------------------------------------------
  function is_active()
  {
    return preg_match("/\\/hotel\\/(currency|htl_results|pricelist|rooms|seasons|specialoffer)\\.php/i", $_SERVER["REQUEST_URI"]);

  } // is_active
  //-----------------------------------------------------------------
  function get_my_tables()
  {
    return array(
      "HTL_CURRENCY",
      "HTL_CURRENCY_PROPS",
      "HTL_ROOMS",
      "HTL_ROOMS_PROPS",
      "HTL_ROOM_DISCOUNT_PERIODS",
      "HTL_SEASON",
      "HTL_SEASON_PROPS",
      "HTL_SEASON_PERIODS",
      "HTL_PRICELIST",
      "HTL_PRICELIST_PROPS",
      "HTL_PRICE",
      "HTL_SPECIAL_OFFER",
      "HTL_ROOM_AVAILABILITY",
      "HTL_EXTRA_SERVICES",
      "HTL_EXTRA_SERVICES_PROP",
      "HTL_EXTRA_SERVICES_ROOMS",
      "HTL_ORDER",
      "HTL_ORDER_PROP",
      "HTL_ORDER_GUESTS",
      "HTL_ORDER_PRICES",
      "HTL_ORDER_SERVICES",
      "HTL_PAYMENT_DATA",
      "HTL_RATING",
      "HTL_RATING_PROP",
      "HTL_BOOKING_SETTINGS",
      "HTL_BOOKING_SETTINGS_PROP",
      "HTL_EXT_SERVICE_SETTINGS",
      "HTL_EXT_SERVICE_SETTINGS2",
      "HTL_BOOKING_SETTINGS_SPEC",
      "HTL_TA_SETTINGS",
      "HTL_TA_HOTELS",
      "HTL_VOUCHER_SETTINGS",
      "HTL_VOUCHER_SETTINGS_PROP",
      "HTL_VOUCHER",
      "HTL_VOUCHER_PROP",
      "HTL_VOUCHER_ORDER",
      "HTL_VOUCHER_PAYMENT_DATA",
      "HTL_VOUCHER_ORDER_ITEMS",
      "HTL_RATE_PLAN",
      "HTL_RATE_PLAN_GROUP",
      "HTL_RATE_PRICE",
      "HTL_RATE_PLAN_INFO",
      "HTL_RATE_PLAN_SERVICE",
      "HTL_RATE_PLAN_ROOM",
      "HTL_RATE_DISCOUNTS",
      "HTL_PAYMENT_SORT"
    );
  } // get_my_tables
  //-----------------------------------------------------------------
  function get_tabs_for_templates()
  {
    return array(
/*       array("tab_id" => "HotelTab",
             "tab_name" => text("HotelDesign"),
             "tab_content_file" => "../modules/Hotel/view/Hotel_designer.php"
            )            */
                );
  } // get_tabs_for_templates
  //-----------------------------------------------------------------
  function add_my_placeholders()
  {
    // {BN:google}
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_PRICELIST(?-i)"] = "(?i)HTL_PRICELIST(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)FOLLOW_PAYMENT_FORM(?-i)"] = "(?i)FOLLOW_PAYMENT_FORM(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)QUICKBOOKING_BACKGROUND(?-i)"] = "(?i)QUICKBOOKING_BACKGROUND(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)QUICKBOOKING_LOGO(?-i)"] = "(?i)QUICKBOOKING_LOGO(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_PRICELIST_ALL(?-i)"] = "(?i)HTL_PRICELIST_ALL(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)ROOM_OVERVIEW(?-i)"] = "(?i)ROOM_OVERVIEW(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_ADDITIONAL_INFO(?-i)"] = "(?i)HTL_ADDITIONAL_INFO(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_SPECIALOFFERS_ALL(?-i)"] = "(?i)HTL_SPECIALOFFERS_ALL(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_BOOKING(?-i)"] = "(?i)HTL_BOOKING(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_CANCELLATION(?-i)"] = "(?i)HTL_CANCELLATION(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_EXT_BOOKING((\slc)?)(?-i)"] = "(?i)HOTEL_EXT_BOOKING((\slc)?)(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_BOOKING_FORM(\spage:([^\s]+))((\slc)?)(?-i)"] = "(?i)HOTEL_BOOKING_FORM(\spage:([^\s]+))((\slc)?)(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_IBOOKING_FORM((\slc)?)(?-i)"] = "(?i)HOTEL_IBOOKING_FORM((\slc)?)(?-i)";

    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_ROOM_BOOKING_FORM\spage:([^\s]+)(\sroom:([^\s]+))?(\slc)?(?-i)"] = "(?i)HOTEL_ROOM_BOOKING_FORM\spage:([^\s]+)(\sroom:([^\s]+))?(\slc)?(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_ROOM_IBOOKING_FORM(\sroom:([^\s]+))?(\slc)?(?-i)"] = "(?i)HOTEL_ROOM_IBOOKING_FORM(\sroom:([^\s]+))?(\slc)?(?-i)";

    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_SO_BOOKING_FORM(\spage:([^\s]+))((\slc)?)(?-i)"] = "(?i)HOTEL_SO_BOOKING_FORM(\spage:([^\s]+))((\slc)?)(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_SO_IBOOKING_FORM((\slc)?)(?-i)"] = "(?i)HOTEL_SO_IBOOKING_FORM((\slc)?)(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_BOOKING_CALENDER(\spage:([^\s]+))(?-i)"] = "(?i)HOTEL_BOOKING_CALENDER(\spage:([^\s]+))(?-i)";
    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_BOOKING_CALENDER_EXT(\spage:([^\s]+))(?-i)"] = "(?i)HOTEL_BOOKING_CALENDER_EXT(\spage:([^\s]+))(?-i)";

    $_SESSION[S_CONTEXT]["place_holders"]["(?i)HOTEL_EXT_RATING(?-i)"] = "(?i)HOTEL_EXT_RATING(?-i)";

    //$_SESSION[S_CONTEXT]["place_holders"]["(?i)HTL_PRICELIST(?-i):([^\s\}]+)"] = "(?i)HTL_PRICELIST(?-i):([^\s\}]+)";
  } // add_my_placeholders
  //-----------------------------------------------------------------
  function gen_calender_view($lang, $langid, $template, $date_format, &$view_content)
  {
    if(empty(hotel::$words))
    {
      hotel::$words = array(); 
      $this->xml_to_array(hotel::$words, app_path() . "modules/hotel/dict/texts.xml", "/document");
      
      if(file_exists(app_path() . "modules/hotel/dict/user_texts.xml"))
        $this->xml_to_array(hotel::$words, app_path() . "modules/hotel/dict/user_texts.xml", "/document");
    }

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $sample = get_file_content(app_path() . "templates/$template/modules/calender_view_$lang.tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "templates/$template/modules/calender_view.tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "modules/hotel/include/tpl/calender_view.tpl");

    $month[1] = try_translate("January", $lang);
    $month[2] = try_translate("February", $lang);
    $month[3] = try_translate("March", $lang);
    $month[4] = try_translate("April", $lang);
    $month[5] = try_translate("May", $lang);
    $month[6] = try_translate("June", $lang);
    $month[7] = try_translate("July", $lang);
    $month[8] = try_translate("August", $lang);
    $month[9] = try_translate("September", $lang);
    $month[10] = try_translate("October", $lang);
    $month[11] = try_translate("November", $lang);
    $month[12] = try_translate("December", $lang);

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    if((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"]))
    {
      if(!empty($settings["arrival_weekday_flag"]))
      {
        $nextdates = array();
        
        if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
        if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
        if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
        if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
        if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
        if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
        if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
        
        $from_date = min($nextdates);
      }
      else
      {
        $from_date = strtotime("+ " . $settings["default_arrival"] . " days");
      }
    }
    else
    {
      $from_date = time();
    }
    
    if((string)$settings["default_departure"] !== "")
    {
      $to_date = strtotime("+ " . $settings["default_departure"] . " days", $from_date);
    }
    else
    {
      $to_date = $from_date + 1*24*3600;
    }

    if(!reqvar_empty("from_date_day") &&
       !reqvar_empty("from_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("from_date_month"));

      $from_date = mktime(0, 0, 0, $dy[0], reqvar("from_date_day"), $dy[1]);
    }

    if(!reqvar_empty("to_date_day") &&
       !reqvar_empty("to_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("to_date_month"));

      $to_date = mktime(0, 0, 0, $dy[0], reqvar("to_date_day"), $dy[1]);
    }

    if($from_date >= $to_date)
    {
      $to_date = $from_date + 1*24*3600;
    }

    $settings = array();
    $this->fetch_settings($settings);

    $rooms = array();

    $from_date_db = $dbw->escape($dbw->format_date($from_date));
    $to_date_db = $dbw->escape($dbw->format_date($to_date));

    $query = "
      select
      ID, I_NAME, TYPE, CATEGORY,
                    MIN(PRICE_ADULT) PRICE_ADULT,
                    MIN(PRICE_ADULT2) PRICE_ADULT2,
                    MIN(PRICE_ADULT3) PRICE_ADULT3,
                    MIN(PRICE_ADULT4) PRICE_ADULT4,
                    MIN(PRICE_ADULT_CHILD) PRICE_ADULT_CHILD,
                    MIN(PRICE_ADULT_CHILD2) PRICE_ADULT_CHILD2,
                    MIN(PRICE_ADULT_CHILD3) PRICE_ADULT_CHILD3,
                    MIN(PRICE_ADULT_CHILD4) PRICE_ADULT_CHILD4

      from
      ${prfx}_HTL_ROOMS
      LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID = $langid)
      LEFT JOIN ${prfx}_HTL_ROOM_AVAILABILITY ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOM_AVAILABILITY.ROOM_ID)
      WHERE
      DATE BETWEEN '$from_date_db' AND '$to_date_db'
      GROUP BY ID, I_NAME, TYPE, CATEGORY
      ORDER BY {$prfx}_HTL_ROOMS.SORT_ORDER
    ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $price = 1000000;

      if($dbw->field_by_name("PRICE_ADULT"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT"));
      if($dbw->field_by_name("PRICE_ADULT2"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT2"));
      if($dbw->field_by_name("PRICE_ADULT3"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT3"));
      if($dbw->field_by_name("PRICE_ADULT4"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT4"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD2"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD2"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD3"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD3"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD4"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD4"));

      if($price == 1000000) $price = 0;

      $id = $dbw->field_by_name("ID");
      $rooms[$id] = array("room_id" => $id,
                           "name" => $dbw->field_by_name("I_NAME"),
                           "type" => $dbw->field_by_name("TYPE"),
                           "category" => $dbw->field_by_name("CATEGORY"),
                           "price" => $price
                           );
    }

    $dbw->free_result();

    $room_list_dropdown = "<select name='room_name_filter' class='calender_room_list_dropdown' onchange='hotel_ajax_reload_calender(this.form)'>"; 
    $room_list_dropdown .= "<option value=''>-</option>"; 
    
    $room_list = "<input type='hidden' name='rooms[]' value=''>";
    $room_list .= "<table class='calender_room_list'>";

    $currency = $this->fetch_default_currency();

    $preselected_room_id = "";
    
    foreach($rooms as $room_id => $room)
    {
      $room_list .= "<tr>";

      $selected = "";
      $checked = "";
      if((!empty($_REQUEST["htl_rooms"]) && in_array($room_id, $_REQUEST["htl_rooms"])) ||
        reqvar("room_name_filter") == $room["name"])
      {
        $checked = " checked";
        $selected = " selected";
      }  

      if(reqvar("room_name_filter") == $room["name"]) $preselected_room_id = $room_id;  
        
      $room_list .= "<td><input type='checkbox' name='rooms[]' value='$room_id' onchange='hotel_ajax_reload_calender(this.form)' $checked></td>";
      
      $pict = "";
      $thumb = "";
      $room_image = "";
      $add_pictures = array();

      if($this->get_first_room_image($room_id, $pict, $thumb, $add_pictures) &&
         !empty($pict) && !empty($thumb))
      {
        $ipath = "resources/hotel/rooms/".$room_id."/";
        $room_image = '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room["type"]) . '" href="'.$ipath.$pict.'">';
        $room_image .= '<img class="room-thumb" src="'.$ipath.$thumb.'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" />';
        $room_image .= '</a>';
        
        $room_image .= '<div style="display:none">';
        foreach($add_pictures as $pinfo)
        {
          $room_image .= '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room["type"]) . '" href="'.$ipath.$pinfo["picture"].'">';
          $room_image .= '<img class="room-thumb" src="'.$ipath.$pinfo["thumb"].'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" /><br>';
          $room_image .= '</a>';
        }
        $room_image .= '</div>';     
        
        $room_image .= '<script type="text/javascript">';
        $room_image .= "$(document).ready(function() {
                        $(\"[rel='room$room_id']\").fancybox({
                          helpers : {
                            thumbs : true
                          }
                        });
                      });
                  ";
        $room_image .= '</script>';
      }

      $room_list .= "<td>$room_image</td>";

      $name = $room["type"];
      if(empty($name)) $name = $room["name"];

      if(!empty($room["category"])) $name .= " (" . $room["category"] . ")";

      if(!empty($room["price"])) $name .= ", " . hotel::$words["From"][$lang] . " " . number_format($room["price"], 2, ",", "") . " " . $currency["sign"];

      $room_list .= "<td>" . escape_html($name) . "</td>";

      $room_list .= "<tr>";

      $room_list_dropdown .= "<option value='" . escape_html($room["name"]) . "' $selected>" . escape_html($name) . "</option>"; 
    }

    $room_list .= "</table>";

    $room_list_dropdown .= "</select>"; 
    
    $dropdown_exists = stripos($sample, "{room_list_dropdown}");
    
    $sample = str_ireplace("{room_list}", $room_list, $sample);
    $sample = str_ireplace("{room_list_dropdown}", $room_list_dropdown, $sample);
    //----------------------------------------------------
    $from_date_selector = "<select id='from_date_day' name='from_date_day' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    for($i = 1; $i <= 31; $i++)
    {
      $selected = "";
      if(date("j", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='$i' $selected>$i</option>\n";
    }
    $from_date_selector .= "</select> ";

    $from_date_selector .= "<select id='from_date_month' name='from_date_month' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    $y = date("Y");
    for($i = date("n"); $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $from_date_selector .= "</select> ";

    $sample = str_ireplace("{from_date}", $from_date_selector, $sample);
    //----------------------------------------------------

    $to_date_selector = "<select id='to_date_day' name='to_date_day' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    for($i = 1; $i <= 31; $i++)
    {
      $selected = "";
      if(date("j", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='$i' $selected>$i</option>\n";
    }
    $to_date_selector .= "</select> ";

    $to_date_selector .= "<select id='to_date_month' name='to_date_month' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    $y = date("Y");
    for($i = date("n"); $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $to_date_selector .= "</select> ";

    $sample = str_ireplace("{to_date}", $to_date_selector, $sample);
    //----------------------------------------------------
    $sample = str_ireplace("{search_button}", "<input id='htl_calender_book_button' type='submit' value='".hotel::$words["CheckAvailability"][$lang]."' />", $sample);
    //----------------------------------------------------
    $calender_comment = '
    <table class="calendar_legend">
    <tr>
    <td class="item last_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendLastDays", $lang) . '</td>
    </tr>
    <tr>
    <td class="item not_available_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendNotAbailableDays", $lang) . '</td>
    </tr>
    <tr>
    <td class="item not_available_days2"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendNotAbailableDaysDepartureAllowed", $lang) . '</td>
    </tr>
    <tr>
    <td class="item available_days2"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendAvailableDaysNoDepAndArrive", $lang) . '</td>
    </tr>
    <tr>
    <td class="item available_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendAbailableDays", $lang) .'</td>
    </tr>
    </table>';
    $sample = str_ireplace("{calender_comment}", $calender_comment, $sample);
    //----------------------------------------------------
    $beginyear = "";
    $beginmonth = "";
    $beginday = "";

    $month = date("n", $from_date);
    $year = date("Y", $from_date);

    $skip = date("w", mktime(0, 0, 0, $month, 1, $year)) - 1;

    $skip = ($skip < 0) ? $skip = 6 : $skip;

    $daysInMonth = date("t", mktime(0, 0, 0, $month, 1, $year));

    $calendar_body = '';
    $day = 1;

    for($i = 0; $i < 6; $i++)
    {
      if($day > $daysInMonth)
        continue;

      $day_string = $day;
      $month_string = $month;
      $year_string = $year;
      if($day_string == 1)
      {
        $day_string = date("d", mktime(0, 0, 0, $month, $day - $skip, $year));
        $month_string = date("m", mktime(0, 0, 0, $month, $day - $skip, $year));
        $year_string = date("Y", mktime(0, 0, 0, $month, $day - $skip, $year));
      }

      $calendar_body .= '<tr>';

      for($j = 0; $j < 7; $j++)
      {
        if(($skip > 0) || ($day > $daysInMonth))
        {
          $another_month_day = date("j", mktime(0,0,0,$month,1-$skip,$year));
          $calendar_body .= '<td class="day another_month_day">&nbsp;</td>';
          $skip--;
          continue;
        }
        else
        {
          if((date('Y') == $year && date('m') == $month && date('d') > $day) || (date('Y') >= $year && date('m') > $month) || (ifnull($beginyear) == $year && $beginmonth == $month && $beginday >= $day) || (ifnull($beginyear) >= $year && $beginmonth > $month))
          {
            $onclick = '';
            $class = "last_days";
          }
          else
          {
            $day_str = $day;
            if($day < 9)
              $day_str = '0'.$day;

            $full_date = format_date($year.'-'.$month.'-'.$day_str, reqvar("format"));
            $onclick = ' onclick="hotel_set_calender_day(\'' . $day . '\', \'from_date_day\');"';
            $class = "available_day";

            $where = "";
            if(!empty($_REQUEST["htl_rooms"]) && is_array($_REQUEST["htl_rooms"]))
            {
              $where = implode(",", $_REQUEST["htl_rooms"]);
            }
            elseif(!empty($preselected_room_id))
            {
              $where = $preselected_room_id;
            }

            $price = "";
            $res = $this->check_day_availability($price, $day, $month, $year, 'arrive', $where);
            if($res == 0)
            {
              $class = "not_available_day";
              $onclick = '';
            }
            elseif($res == 2)
            {
              $class = "not_available_day2";
            }
            elseif($res == 3)
            {
              $class = "available_day2";
              $onclick = '';
            }
          }

          /*
          if(date('Y', $from_date) == $year && date('m', $from_date) == $month && $day >= date('j', $from_date) &&
             (date('m', $to_date) > $month || $day <= date('j', $to_date))
            )
          */

          if(date('Y', $from_date) == $year && date('m', $from_date) == $month && $day == date('j', $from_date))
          {
            $class .= " selected_day";
          }

          if ((date('j') == $day) && (date('m') == $month) && (date('Y') == $year))
            $calendar_body .= '<td class="day today '.$class.'"'.$onclick.'>'.$day.'</td>';
          else
            $calendar_body .= '<td class="day '.$class.'"'.$onclick.'>'.$day.'</td>';
        }

        $day++;
      }

      $calendar_body .= '</tr>';
    }

    $pmonth = $month-1;
    $nmonth = $month+1;
    $from_calender = '';
    $from_calender .= '<div class="embedded_calender calendar_body_background">';
    $from_calender .= "<table class='month_table month_wrapper'>
                <thead>
                <tr>
                <td colspan='7' class='adm_std_font month_caption'><span style='cursor:pointer' onclick='hotel_set_calender_month(\"$pmonth\", \"$year\", \"from_date_month\")'>&larr;</span>&nbsp;&nbsp;<span class='month'>".try_translate(date("F", $from_date), $lang)."</span><span class='year'>".date("Y", $from_date)."</span>&nbsp;&nbsp;<span style='cursor:pointer' onclick='hotel_set_calender_month(\"$nmonth\", \"$year\", \"from_date_month\")'>&rarr;</span></td>
                </tr>
                <tr class='week_day_names'>
                <td>".try_translate('Monday_min', $lang)."</td>
                <td>".try_translate('Tuesday_min', $lang)."</td>
                <td>".try_translate('Wednesday_min', $lang)."</td>
                <td>".try_translate('Thursday_min', $lang)."</td>
                <td>".try_translate('Friday_min', $lang)."</td>
                <td>".try_translate('Saturday_min', $lang)."</td>
                <td>".try_translate('Sunday_min', $lang)."</td>
                </tr>
                </thead><tbody class='calendar_body'>$calendar_body</tbody></table>";
    $from_calender .= '</div>';

    $sample = str_ireplace("{from_calender}", $from_calender, $sample);
    //----------------------------------------------------
    $beginyear = date("Y", $from_date);
    $beginmonth = date("n", $from_date);
    $beginday = date("j", $from_date);

    $month = date("n", $to_date);
    $year = date("Y", $to_date);

    $skip = date("w", mktime(0, 0, 0, $month, 1, $year)) - 1;

    $skip = ($skip < 0) ? $skip = 6 : $skip;

    $daysInMonth = date("t", mktime(0, 0, 0, $month, 1, $year));

    $calendar_body = '';
    $day = 1;

    for($i = 0; $i < 6; $i++)
    {
      if($day > $daysInMonth)
        continue;

      $day_string = $day;
      $month_string = $month;
      $year_string = $year;
      if($day_string == 1)
      {
        $day_string = date("d", mktime(0, 0, 0, $month, $day - $skip, $year));
        $month_string = date("m", mktime(0, 0, 0, $month, $day - $skip, $year));
        $year_string = date("Y", mktime(0, 0, 0, $month, $day - $skip, $year));
      }

      $calendar_body .= '<tr>';

      for($j = 0; $j < 7; $j++)
      {
        if(($skip > 0) || ($day > $daysInMonth))
        {
          $another_month_day = date("j", mktime(0,0,0,$month,1-$skip,$year));
          $calendar_body .= '<td class="day another_month_day">&nbsp;</td>';
          $skip--;
          continue;
        }
        else
        {
          if((date('Y') == $year && date('m') == $month && date('d') > $day) || (date('Y') >= $year && date('m') > $month) || (ifnull($beginyear) == $year && $beginmonth == $month && $beginday >= $day) || (ifnull($beginyear) >= $year && $beginmonth > $month))
          {
            $onclick = '';
            $class = "last_days";
          }
          else
          {
            $day_str = $day;
            if($day < 9)
              $day_str = '0'.$day;

            $full_date = format_date($year.'-'.$month.'-'.$day_str, reqvar("format"));
            $onclick = ' onclick="hotel_set_calender_day(\'' . $day . '\', \'to_date_day\');"';
            $class = "available_day";

            $where = "";
            if(!empty($_REQUEST["htl_rooms"]) && is_array($_REQUEST["htl_rooms"]))
            {
              $where = implode(",", $_REQUEST["htl_rooms"]);
            }
            elseif(!empty($preselected_room_id))
            {
              $where = $preselected_room_id;
            }

            $price = "";
            $res = $this->check_day_availability($price, $day, $month, $year, 'departure', $where);
            if($res == 0)
            {
              $class = "not_available_day";
              $onclick = '';
            }
            elseif($res == 2)
            {
              $class = "not_available_day2";
            }
            elseif($res == 3)
            {
              $class = "available_day2";
              $onclick = '';
            }
          }

          /*
          if(date('Y', $to_date) == $year && date('m', $to_date) == $month && $day <= date('j', $to_date) &&
             ($month > date('m', $from_date) || $day >= date('j', $from_date))
            )
          */

          if(date('Y', $to_date) == $year && date('m', $to_date) == $month && $day == date('j', $to_date))
          {
            $class .= " selected_day";
          }

          if ((date('j') == $day) && (date('m') == $month) && (date('Y') == $year))
            $calendar_body .= '<td class="day today '.$class.'"'.$onclick.'>'.$day.'</td>';
          else
            $calendar_body .= '<td class="day '.$class.'"'.$onclick.'>'.$day.'</td>';
        }

        $day++;
      }

      $calendar_body .= '</tr>';
    }

    $pmonth = $month-1;
    $nmonth = $month+1;
    $to_calender = '';
    $to_calender .= '<div class="embedded_calender calendar_body_background">';
    $to_calender .= "<table class='month_table month_wrapper'>
                <thead>
                <tr>
                <td colspan='7' class='adm_std_font month_caption'><span style='cursor:pointer' onclick='hotel_set_calender_month(\"$pmonth\", \"$year\", \"to_date_month\")'>&larr;</span>&nbsp;&nbsp;<span class='month'>".try_translate(date("F", $to_date), $lang)."</span><span class='year'>".date("Y", $to_date)."</span>&nbsp;&nbsp;<span style='cursor:pointer' onclick='hotel_set_calender_month(\"$nmonth\", \"$year\", \"to_date_month\")'>&rarr;</span></td>
                </tr>
                <tr class='week_day_names'>
                <td>".try_translate('Monday_min', $lang)."</td>
                <td>".try_translate('Tuesday_min', $lang)."</td>
                <td>".try_translate('Wednesday_min', $lang)."</td>
                <td>".try_translate('Thursday_min', $lang)."</td>
                <td>".try_translate('Friday_min', $lang)."</td>
                <td>".try_translate('Saturday_min', $lang)."</td>
                <td>".try_translate('Sunday_min', $lang)."</td>
                </tr>
                </thead><tbody class='calendar_body'>$calendar_body</tbody></table>";
    $to_calender .= '</div>';

    $sample = str_ireplace("{to_calender}", $to_calender, $sample);
    //----------------------------------------------------
    $persons_count = "<select name='persons' class='person_select'>";
    $selected = reqvar("htl_persons") == 1 ? " selected" : "";
    $persons_count .= "<option value='1' $selected>1</option>";
    $selected = reqvar("htl_persons") == 2 ? " selected" : "";
    $persons_count .= "<option value='2' $selected>2</option>";
    $selected = reqvar("htl_persons") == 3 ? " selected" : "";
    $persons_count .= "<option value='3' $selected>3</option>";
    $selected = reqvar("htl_persons") == 4 ? " selected" : "";
    $persons_count .= "<option value='4' $selected>4</option>";
    $selected = reqvar("htl_persons") == 5 ? " selected" : "";
    $persons_count .= "<option value='5' $selected>5</option>";
    $selected = reqvar("htl_persons") == 6 ? " selected" : "";
    $persons_count .= "<option value='6' $selected>6</option>";
    $selected = reqvar("htl_persons") == 7 ? " selected" : "";
    $persons_count .= "<option value='7' $selected>7</option>";
    $selected = reqvar("htl_persons") == 8 ? " selected" : "";
    $persons_count .= "<option value='8' $selected>8</option>";
    $selected = reqvar("htl_persons") == 9 ? " selected" : "";
    $persons_count .= "<option value='9' $selected>9</option>";
    $selected = reqvar("htl_persons") == 10 ? " selected" : "";
    $persons_count .= "<option value='10' $selected>10</option>";
    $persons_count .= "</select>";

    $sample = str_ireplace("{persons_count_input}", $persons_count, $sample);
    $sample = str_ireplace("{word:Persons}", hotel::$words["Persons"][$lang], $sample);

    $checked = reqvar_empty("show_not_available") ? "" : " checked";
    $show_not_available_flag = "<table class='not_available_flag'><tr><td><input type='checkbox' name='show_not_available' $checked></td><td>" . hotel::$words["DisplayNotAvailableAlso"][$lang] . "</td></tr></table>";
    
    $sample = str_ireplace("{show_not_available_flag}", $show_not_available_flag, $sample);
    
    //----------------------------------------------------

    $view_content .= $sample;
    $view_content .= "<input type='hidden' name='begin_date' value='" . date($date_format, $from_date) . "'>";
    $view_content .= "<input type='hidden' name='end_date' value='" . date($date_format, $to_date) . "'>";
    $view_content .= "<input type='hidden' name='htl_date_format' value='" . escape_html($date_format) . "'>";
    $view_content .= "<input type='hidden' name='htl_lang' value='" . escape_html($lang) . "'>";
    $view_content .= "<input type='hidden' name='htl_langid' value='" . escape_html($langid) . "'>";
    $view_content .= "<input type='hidden' name='htl_template' value='" . escape_html($template) . "'>";
    
    if(!$dropdown_exists)
      $view_content .= "<input type='hidden' name='room_name_filter' value='" . escape_html(reqvar("room_name_filter")) . "'>";

    return true;
  } // gen_calender_view
  //-----------------------------------------------------------------
  function gen_calender_view_ext($lang, $langid, $template, $date_format, &$view_content)
  {
    if(empty(hotel::$words))
    {
      hotel::$words = array(); 
      $this->xml_to_array(hotel::$words, app_path() . "modules/hotel/dict/texts.xml", "/document");
      
      if(file_exists(app_path() . "modules/hotel/dict/user_texts.xml"))
        $this->xml_to_array(hotel::$words, app_path() . "modules/hotel/dict/user_texts.xml", "/document");
    }

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $sample = get_file_content(app_path() . "templates/$template/modules/calender_view_ext_$lang.tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "templates/$template/modules/calender_view_ext.tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "modules/hotel/include/tpl/calender_view_ext.tpl");

    $month[1] = try_translate("January", $lang);
    $month[2] = try_translate("February", $lang);
    $month[3] = try_translate("March", $lang);
    $month[4] = try_translate("April", $lang);
    $month[5] = try_translate("May", $lang);
    $month[6] = try_translate("June", $lang);
    $month[7] = try_translate("July", $lang);
    $month[8] = try_translate("August", $lang);
    $month[9] = try_translate("September", $lang);
    $month[10] = try_translate("October", $lang);
    $month[11] = try_translate("November", $lang);
    $month[12] = try_translate("December", $lang);

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    if((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"]))
    {
      if(!empty($settings["arrival_weekday_flag"]))
      {
        $nextdates = array();
        
        if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
        if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
        if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
        if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
        if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
        if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
        if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
        
        $from_date = min($nextdates);
      }
      else
      {
        $from_date = strtotime("+ " . $settings["default_arrival"] . " days");
      }
    }
    else
    {
      $from_date = time();
    }

    if((string)$settings["default_departure"] !== "")
    {
      $to_date = strtotime("+ " . $settings["default_departure"] . " days", $from_date);
    }
    else
    {
      $to_date = $from_date + 1*24*3600;
    }

    if(!reqvar_empty("from_date_day") &&
       !reqvar_empty("from_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("from_date_month"));

      $from_date = mktime(0, 0, 0, $dy[0], reqvar("from_date_day"), $dy[1]);
    }

    if(!reqvar_empty("to_date_day") &&
       !reqvar_empty("to_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("to_date_month"));

      $to_date = mktime(0, 0, 0, $dy[0], reqvar("to_date_day"), $dy[1]);
    }

    if($from_date >= $to_date)
    {
      $to_date = $from_date + 1*24*3600;
    }

    $settings = array();
    $this->fetch_settings($settings);

    $rooms = array();

    $from_date_db = $dbw->escape($dbw->format_date($from_date));
    $to_date_db = $dbw->escape($dbw->format_date($to_date));

    $query = "
      select
      ID, I_NAME, TYPE, CATEGORY,
                    MIN(PRICE_ADULT) PRICE_ADULT,
                    MIN(PRICE_ADULT2) PRICE_ADULT2,
                    MIN(PRICE_ADULT3) PRICE_ADULT3,
                    MIN(PRICE_ADULT4) PRICE_ADULT4,
                    MIN(PRICE_ADULT_CHILD) PRICE_ADULT_CHILD,
                    MIN(PRICE_ADULT_CHILD2) PRICE_ADULT_CHILD2,
                    MIN(PRICE_ADULT_CHILD3) PRICE_ADULT_CHILD3,
                    MIN(PRICE_ADULT_CHILD4) PRICE_ADULT_CHILD4

      from
      ${prfx}_HTL_ROOMS
      LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID = $langid)
      LEFT JOIN ${prfx}_HTL_ROOM_AVAILABILITY ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOM_AVAILABILITY.ROOM_ID)
      WHERE
      DATE BETWEEN '$from_date_db' AND '$to_date_db'
      GROUP BY ID, I_NAME, TYPE, CATEGORY
      ORDER BY {$prfx}_HTL_ROOMS.SORT_ORDER
    ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $price = 1000000;

      if($dbw->field_by_name("PRICE_ADULT"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT"));
      if($dbw->field_by_name("PRICE_ADULT2"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT2"));
      if($dbw->field_by_name("PRICE_ADULT3"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT3"));
      if($dbw->field_by_name("PRICE_ADULT4"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT4"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD2"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD2"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD3"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD3"));
      if($dbw->field_by_name("PRICE_ADULT_CHILD4"))
        $price = min($price, $dbw->field_by_name("PRICE_ADULT_CHILD4"));

      if($price == 1000000) $price = 0;

      $id = $dbw->field_by_name("ID");
      $rooms[$id] = array("room_id" => $id,
                           "name" => $dbw->field_by_name("I_NAME"),
                           "type" => $dbw->field_by_name("TYPE"),
                           "category" => $dbw->field_by_name("CATEGORY"),
                           "price" => $price
                           );
    }

    $dbw->free_result();

    $room_list_dropdown = "<select name='room_name_filter' class='calender_room_list_dropdown' onchange='hotel_ajax_reload_calender(this.form)'>"; 
    $room_list_dropdown .= "<option value=''>-</option>"; 

    $room_list = "<input type='hidden' name='rooms[]' value=''>";
    $room_list .= "<table class='calender_room_list'>";

    $currency = $this->fetch_default_currency();

    $preselected_room_id = "";
    
    foreach($rooms as $room_id => $room)
    {
      $room_list .= "<tr>";

      $selected = "";
      $checked = "";
      if((!empty($_REQUEST["htl_rooms"]) && in_array($room_id, $_REQUEST["htl_rooms"])) ||
        reqvar("room_name_filter") == $room["name"])
      {
        $checked = " checked";
        $selected = " selected";
      }  

      if(reqvar("room_name_filter") == $room["name"]) $preselected_room_id = $room_id;  
        
      $room_list .= "<td><input type='checkbox' name='rooms[]' value='$room_id' onchange='hotel_ajax_reload_calender(this.form)' $checked></td>";

      $pict = "";
      $thumb = "";
      $room_image = "";
      $add_pictures = array();

      if($this->get_first_room_image($room_id, $pict, $thumb, $add_pictures) &&
         !empty($pict) && !empty($thumb))
      {
        $ipath = "resources/hotel/rooms/".$room_id."/";
        $room_image = '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room["type"]) . '" href="'.$ipath.$pict.'">';
        $room_image .= '<img class="room-thumb" src="'.$ipath.$thumb.'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" />';
        $room_image .= '</a>';
        
        $room_image .= '<div style="display:none">';
        foreach($add_pictures as $pinfo)
        {
          $room_image .= '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room["type"]) . '" href="'.$ipath.$pinfo["picture"].'">';
          $room_image .= '<img class="room-thumb" src="'.$ipath.$pinfo["thumb"].'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" /><br>';
          $room_image .= '</a>';
        }
        $room_image .= '</div>';     
        
        $room_image .= '<script type="text/javascript">';
        $room_image .= "$(document).ready(function() {
                        $(\"[rel='room$room_id']\").fancybox({
                          helpers : {
                            thumbs : true
                          }
                        });
                      });
                  ";
        $room_image .= '</script>';
      }

      $room_list .= "<td>$room_image</td>";

      $name = $room["type"];
      if(empty($name)) $name = $room["name"];

      if(!empty($room["category"])) $name .= " (" . $room["category"] . ")";

      if(!empty($room["price"])) $name .= ", " . hotel::$words["From"][$lang] . " " . number_format($room["price"], 2, ",", "") . " " . $currency["sign"];

      $room_list .= "<td>" . escape_html($name) . "</td>";

      $room_list .= "<tr>";

      $room_list_dropdown .= "<option value='" . escape_html($room["name"]) . "' $selected>" . escape_html($name) . "</option>"; 
    }

    $room_list .= "</table>";

    $room_list_dropdown .= "</select>"; 
    
    $dropdown_exists = stripos($sample, "{room_list_dropdown}");

    $sample = str_ireplace("{room_list}", $room_list, $sample);
    $sample = str_ireplace("{room_list_dropdown}", $room_list_dropdown, $sample);
    //----------------------------------------------------
    $from_date_selector = "<select id='from_date_day' name='from_date_day' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    for($i = 1; $i <= 31; $i++)
    {
      $selected = "";
      if(date("j", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='$i' $selected>$i</option>\n";
    }
    $from_date_selector .= "</select> ";

    $from_date_selector .= "<select id='from_date_month' name='from_date_month' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    $y = date("Y");
    for($i = date("n"); $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
      $from_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $from_date_selector .= "</select> ";

    $sample = str_ireplace("{from_date}", $from_date_selector, $sample);
    //----------------------------------------------------

    $to_date_selector = "<select id='to_date_day' name='to_date_day' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    for($i = 1; $i <= 31; $i++)
    {
      $selected = "";
      if(date("j", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='$i' $selected>$i</option>\n";
    }
    $to_date_selector .= "</select> ";

    $to_date_selector .= "<select id='to_date_month' name='to_date_month' onchange='hotel_ajax_reload_calender(this.form)'>\n";
    $y = date("Y");
    for($i = date("n"); $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $y++;
    for($i = 1; $i <= 12; $i++)
    {
      $selected = "";
      if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
      $to_date_selector .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
    }
    $to_date_selector .= "</select> ";

    $sample = str_ireplace("{to_date}", $to_date_selector, $sample);
    //----------------------------------------------------
    $sample = str_ireplace("{search_button}", "<input id='htl_calender_book_button' type='submit' value='".hotel::$words["CheckAvailability"][$lang]."' />", $sample);
    //----------------------------------------------------
    $calender_comment = '
    <table class="calendar_legend">
    <tr>
    <td class="item last_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendLastDays", $lang) . '</td>
    </tr>
    <tr>
    <td class="item not_available_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendNotAbailableDays", $lang) . '</td>
    </tr>
    <tr>
    <td class="item not_available_days2"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendNotAbailableDaysDepartureAllowed", $lang) . '</td>
    </tr>
    <tr>
    <td class="item available_days2"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendAvailableDaysNoDepAndArrive", $lang) . '</td>
    </tr>
    <tr>
    <td class="item available_days"><span class="block">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td>' . try_translate("CalendarLegendAbailableDays", $lang) .'</td>
    </tr>
    </table>';
    $sample = str_ireplace("{calender_comment}", $calender_comment, $sample);
    //----------------------------------------------------
    $beginyear = "";
    $beginmonth = "";
    $beginday = "";

    $month = date("n", $from_date);
    $year = date("Y", $from_date);

    $skip = date("w", mktime(0, 0, 0, $month, 1, $year)) - 1;

    $skip = ($skip < 0) ? $skip = 6 : $skip;

    $daysInMonth = date("t", mktime(0, 0, 0, $month, 1, $year));

    $calendar_body = '';
    $day = 1;

    for($i = 0; $i < 6; $i++)
    {
      if($day > $daysInMonth)
        continue;

      $day_string = $day;
      $month_string = $month;
      $year_string = $year;
      if($day_string == 1)
      {
        $day_string = date("d", mktime(0, 0, 0, $month, $day - $skip, $year));
        $month_string = date("m", mktime(0, 0, 0, $month, $day - $skip, $year));
        $year_string = date("Y", mktime(0, 0, 0, $month, $day - $skip, $year));
      }

      $calendar_body .= '<tr>';

      for($j = 0; $j < 7; $j++)
      {
        if(($skip > 0) || ($day > $daysInMonth))
        {
          $another_month_day = date("j", mktime(0,0,0,$month,1-$skip,$year));
          $calendar_body .= '<td class="day another_month_day">&nbsp;</td>';
          $skip--;
          continue;
        }
        else
        {
          $text = "";
          if((date('Y') == $year && date('m') == $month && date('d') > $day) || (date('Y') >= $year && date('m') > $month) || (ifnull($beginyear) == $year && $beginmonth == $month && $beginday >= $day) || (ifnull($beginyear) >= $year && $beginmonth > $month))
          {
            $onclick = '';
            $class = "last_days";
          }
          else
          {
            $day_str = $day;
            if($day < 9)
              $day_str = '0'.$day;

            $full_date = format_date($year.'-'.$month.'-'.$day_str, reqvar("format"));
            $onclick = ' onclick="hotel_set_calender_day(\'' . $day . '\', \'from_date_day\');"';
            $class = "available_day";

            $where = "";
            if(!empty($_REQUEST["htl_rooms"]) && is_array($_REQUEST["htl_rooms"]))
            {
              $where = implode(",", $_REQUEST["htl_rooms"]);
            }
            elseif(!empty($preselected_room_id))
            {
              $where = $preselected_room_id;
            }

            $price = "";
            $text = hotel::$words["RoomsAvailable"][$lang];
            $res = $this->check_day_availability($price, $day, $month, $year, 'arrive', $where);
            if($res == 0)
            {
              $class = "not_available_day";
              $onclick = '';
              $text = escape_html(hotel::$words["NoRoomsShort"][$lang]);
            }
            elseif($res == 2)
            {
              $class = "not_available_day2";
              $text = escape_html(hotel::$words["NoRoomsShort"][$lang]) . '<br>' . escape_html(hotel::$words["DeparturePossible"][$lang]);
            }
            elseif($res == 3)
            {
              $class = "available_day2";
              $text = escape_html(hotel::$words["RoomsAvailable"][$lang]) . '<br>' . escape_html(hotel::$words["NoArrival"][$lang]);
              $onclick = '';
            }
            
            if(empty($price)) $price = "&nbsp;";
            else              $price = hotel::$words["From"][$lang] . " " . number_format($price, 2, ",", "") . " " . $currency["sign"];

            $text = "<div class='calender_price_info'>" . $price . "</div><div class='calender_ext_info'>" . $text . "</div>";
          }

          /*
          if(date('Y', $from_date) == $year && date('m', $from_date) == $month && $day >= date('j', $from_date) &&
             (date('m', $to_date) > $month || $day <= date('j', $to_date))
            )
          */

          if(date('Y', $from_date) == $year && date('m', $from_date) == $month && $day == date('j', $from_date))
          {
            $class .= " selected_day";
          }

          if ((date('j') == $day) && (date('m') == $month) && (date('Y') == $year))
            $calendar_body .= '<td class="day today '.$class.'"'.$onclick.'>'.$day.$text.'</td>';
          else
            $calendar_body .= '<td class="day '.$class.'"'.$onclick.'>'.$day.$text.'</td>';
        }

        $day++;
      }

      $calendar_body .= '</tr>';
    }

    $pmonth = $month-1;
    $nmonth = $month+1;
    $from_calender = '';
    $from_calender .= '<div class="embedded_calender embedded_calender_ext calendar_body_background">';
    $from_calender .= "<table class='month_table month_wrapper'>
                <thead>
                <tr>
                <td colspan='7' class='adm_std_font month_caption'><span style='cursor:pointer' onclick='hotel_set_calender_month(\"$pmonth\", \"$year\", \"from_date_month\")'>&larr;</span>&nbsp;&nbsp;<span class='month'>".try_translate(date("F", $from_date), $lang)."</span><span class='year'>".date("Y", $from_date)."</span>&nbsp;&nbsp;<span style='cursor:pointer' onclick='hotel_set_calender_month(\"$nmonth\", \"$year\", \"from_date_month\")'>&rarr;</span></td>
                </tr>
                <tr class='week_day_names'>
                <td>".try_translate('Monday_min', $lang)."</td>
                <td>".try_translate('Tuesday_min', $lang)."</td>
                <td>".try_translate('Wednesday_min', $lang)."</td>
                <td>".try_translate('Thursday_min', $lang)."</td>
                <td>".try_translate('Friday_min', $lang)."</td>
                <td>".try_translate('Saturday_min', $lang)."</td>
                <td>".try_translate('Sunday_min', $lang)."</td>
                </tr>
                </thead><tbody class='calendar_body'>$calendar_body</tbody></table>";
    $from_calender .= '</div>';

    $sample = str_ireplace("{from_calender}", $from_calender, $sample);
    //----------------------------------------------------
    $beginyear = date("Y", $from_date);
    $beginmonth = date("n", $from_date);
    $beginday = date("j", $from_date);

    $month = date("n", $to_date);
    $year = date("Y", $to_date);

    $skip = date("w", mktime(0, 0, 0, $month, 1, $year)) - 1;

    $skip = ($skip < 0) ? $skip = 6 : $skip;

    $daysInMonth = date("t", mktime(0, 0, 0, $month, 1, $year));

    $calendar_body = '';
    $day = 1;

    for($i = 0; $i < 6; $i++)
    {
      if($day > $daysInMonth)
        continue;

      $day_string = $day;
      $month_string = $month;
      $year_string = $year;
      if($day_string == 1)
      {
        $day_string = date("d", mktime(0, 0, 0, $month, $day - $skip, $year));
        $month_string = date("m", mktime(0, 0, 0, $month, $day - $skip, $year));
        $year_string = date("Y", mktime(0, 0, 0, $month, $day - $skip, $year));
      }

      $calendar_body .= '<tr>';

      for($j = 0; $j < 7; $j++)
      {
        if(($skip > 0) || ($day > $daysInMonth))
        {
          $another_month_day = date("j", mktime(0,0,0,$month,1-$skip,$year));
          $calendar_body .= '<td class="day another_month_day">&nbsp;</td>';
          $skip--;
          continue;
        }
        else
        {
          $text = "";

          if((date('Y') == $year && date('m') == $month && date('d') > $day) || (date('Y') >= $year && date('m') > $month) || (ifnull($beginyear) == $year && $beginmonth == $month && $beginday >= $day) || (ifnull($beginyear) >= $year && $beginmonth > $month))
          {
            $onclick = '';
            $class = "last_days";
          }
          else
          {
            $day_str = $day;
            if($day < 9)
              $day_str = '0'.$day;

            $full_date = format_date($year.'-'.$month.'-'.$day_str, reqvar("format"));
            $onclick = ' onclick="hotel_set_calender_day(\'' . $day . '\', \'to_date_day\');"';
            $class = "available_day";

            $where = "";
            if(!empty($_REQUEST["htl_rooms"]) && is_array($_REQUEST["htl_rooms"]))
            {
              $where = implode(",", $_REQUEST["htl_rooms"]);
            }
            elseif(!empty($preselected_room_id))
            {
              $where = $preselected_room_id;
            }

            $price = "";
            $text = hotel::$words["RoomsAvailable"][$lang];
            $res = $this->check_day_availability($price, $day, $month, $year, 'departure', $where);
            if($res == 0)
            {
              $class = "not_available_day";
              $onclick = '';
              $text = escape_html(hotel::$words["NoRoomsShort"][$lang]);
            }
            elseif($res == 2)
            {
              $class = "not_available_day2";
              $text = escape_html(hotel::$words["NoRoomsShort"][$lang]) . '<br>' . escape_html(hotel::$words["DeparturePossible"][$lang]);
            }
            elseif($res == 3)
            {
              $class = "available_day2";
              $text = escape_html(hotel::$words["RoomsAvailable"][$lang]) . '<br>' . escape_html(hotel::$words["NoDeparture"][$lang]);
              $onclick = '';
            }
            
            if(empty($price)) $price = "&nbsp;";
            else              $price = hotel::$words["From"][$lang] . " " . number_format($price, 2, ",", "") . " " . $currency["sign"];
            
            $text = "<div class='calender_price_info'>" . $price . "</div><div class='calender_ext_info'>" . $text . "</div>";
          }

          /*
          if(date('Y', $to_date) == $year && date('m', $to_date) == $month && $day <= date('j', $to_date) &&
             ($month > date('m', $from_date) || $day >= date('j', $from_date))
            )
          */

          if(date('Y', $to_date) == $year && date('m', $to_date) == $month && $day == date('j', $to_date))
          {
            $class .= " selected_day";
          }

          if ((date('j') == $day) && (date('m') == $month) && (date('Y') == $year))
            $calendar_body .= '<td class="day today '.$class.'"'.$onclick.'>'.$day.$text.'</td>';
          else
            $calendar_body .= '<td class="day '.$class.'"'.$onclick.'>'.$day.$text.'</td>';
        }

        $day++;
      }

      $calendar_body .= '</tr>';
    }

    $pmonth = $month-1;
    $nmonth = $month+1;
    $to_calender = '';
    $to_calender .= '<div class="embedded_calender embedded_calender_ext calendar_body_background">';
    $to_calender .= "<table class='month_table month_wrapper'>
                <thead>
                <tr>
                <td colspan='7' class='adm_std_font month_caption'><span style='cursor:pointer' onclick='hotel_set_calender_month(\"$pmonth\", \"$year\", \"to_date_month\")'>&larr;</span>&nbsp;&nbsp;<span class='month'>".try_translate(date("F", $to_date), $lang)."</span><span class='year'>".date("Y", $to_date)."</span>&nbsp;&nbsp;<span style='cursor:pointer' onclick='hotel_set_calender_month(\"$nmonth\", \"$year\", \"to_date_month\")'>&rarr;</span></td>
                </tr>
                <tr class='week_day_names'>
                <td>".try_translate('Monday_min', $lang)."</td>
                <td>".try_translate('Tuesday_min', $lang)."</td>
                <td>".try_translate('Wednesday_min', $lang)."</td>
                <td>".try_translate('Thursday_min', $lang)."</td>
                <td>".try_translate('Friday_min', $lang)."</td>
                <td>".try_translate('Saturday_min', $lang)."</td>
                <td>".try_translate('Sunday_min', $lang)."</td>
                </tr>
                </thead><tbody class='calendar_body'>$calendar_body</tbody></table>";
    $to_calender .= '</div>';

    $sample = str_ireplace("{to_calender}", $to_calender, $sample);
    //----------------------------------------------------
    $persons_count = "<select name='persons' class='person_select'>";
    $selected = reqvar("htl_persons") == 1 ? " selected" : "";
    $persons_count .= "<option value='1' $selected>1</option>";
    $selected = reqvar("htl_persons") == 2 ? " selected" : "";
    $persons_count .= "<option value='2' $selected>2</option>";
    $selected = reqvar("htl_persons") == 3 ? " selected" : "";
    $persons_count .= "<option value='3' $selected>3</option>";
    $selected = reqvar("htl_persons") == 4 ? " selected" : "";
    $persons_count .= "<option value='4' $selected>4</option>";
    $selected = reqvar("htl_persons") == 5 ? " selected" : "";
    $persons_count .= "<option value='5' $selected>5</option>";
    $selected = reqvar("htl_persons") == 6 ? " selected" : "";
    $persons_count .= "<option value='6' $selected>6</option>";
    $selected = reqvar("htl_persons") == 7 ? " selected" : "";
    $persons_count .= "<option value='7' $selected>7</option>";
    $selected = reqvar("htl_persons") == 8 ? " selected" : "";
    $persons_count .= "<option value='8' $selected>8</option>";
    $selected = reqvar("htl_persons") == 9 ? " selected" : "";
    $persons_count .= "<option value='9' $selected>9</option>";
    $selected = reqvar("htl_persons") == 10 ? " selected" : "";
    $persons_count .= "<option value='10' $selected>10</option>";
    $persons_count .= "</select>";

    $sample = str_ireplace("{persons_count_input}", $persons_count, $sample);
    $sample = str_ireplace("{word:Persons}", hotel::$words["Persons"][$lang], $sample);

    $checked = reqvar_empty("show_not_available") ? "" : " checked";
    $show_not_available_flag = "<table class='not_available_flag'><tr><td><input type='checkbox' name='show_not_available' $checked></td><td>" . hotel::$words["DisplayNotAvailableAlso"][$lang] . "</td></tr></table>";
    
    $sample = str_ireplace("{show_not_available_flag}", $show_not_available_flag, $sample);
    
    //----------------------------------------------------

    $view_content .= $sample;
    $view_content .= "<input type='hidden' name='begin_date' value='" . date($date_format, $from_date) . "'>";
    $view_content .= "<input type='hidden' name='end_date' value='" . date($date_format, $to_date) . "'>";
    $view_content .= "<input type='hidden' name='htl_date_format' value='" . escape_html($date_format) . "'>";
    $view_content .= "<input type='hidden' name='htl_lang' value='" . escape_html($lang) . "'>";
    $view_content .= "<input type='hidden' name='htl_langid' value='" . escape_html($langid) . "'>";
    $view_content .= "<input type='hidden' name='htl_template' value='" . escape_html($template) . "'>";
    $view_content .= '<input type="hidden" name="extended" value="1" />';

    if(!$dropdown_exists)
      $view_content .= "<input type='hidden' name='room_name_filter' value='" . escape_html(reqvar("room_name_filter")) . "'>";
    
    return true;
  } // gen_calender_view_ext
  //-----------------------------------------------------------------
  function process_request(&$page_info, &$place_holders, &$patterns, &$replacements)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $JS_INCLUDES;
    global $CSS_INCLUDES;
    global $URL_PATH;
    $sname = "";

    if(empty($CSS_INCLUDES)) $CSS_INCLUDES = "";

    $CSS_INCLUDES .= '<link rel="stylesheet" href="modules/hotel/css/hotel.css" type="text/css"/>';

    $JS_INCLUDES .= '<script src="modules/hotel/js/hotel_frontend.js" type="text/javascript"></script>';
    $JS_INCLUDES .= '<script src="modules/hotel_extended/js/hotel_ajax.js" type="text/javascript"></script>';
    $JS_INCLUDES .= '<script type="text/javascript" src="https://js.stripe.com/v2/"></script>';

    //cancellation of booking
    if(!reqvar_empty("htl_cancel_order"))
    {
      $order_id = base64_decode(reqvar("htl_cancel_order"));
      $this->cancel_booking($order_id, $page_info);
    }

    foreach($place_holders as $holder)
    {
      $matches = array();

      if((preg_match("/(?i)HTL_PRICELIST_ALL(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HTL_PRICELIST(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)FOLLOW_PAYMENT_FORM(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)QUICKBOOKING_BACKGROUND(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)QUICKBOOKING_LOGO(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_EXT_RATING(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)ROOM_OVERVIEW(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HTL_ADDITIONAL_INFO(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HTL_SPECIALOFFERS_ALL(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HTL_BOOKING(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HTL_CANCELLATION(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_EXT_BOOKING((\slc)?)(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_BOOKING_CALENDER(\spage:([^\s]+))(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_BOOKING_CALENDER_EXT(\spage:([^\s]+))(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_IBOOKING_FORM((\slc)?)(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_BOOKING_FORM(\spage:([^\s]+))(\slc)?(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_ROOM_BOOKING_FORM\spage:([^\s]+)(\sroom:([^\s]+))?(\slc)?(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_ROOM_IBOOKING_FORM(\sroom:([^\s]+))?(\slc)?(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_SO_IBOOKING_FORM((\slc)?)(?-i)/", $holder, $matches) == 0) &&
      (preg_match("/(?i)HOTEL_SO_BOOKING_FORM(\spage:([^\s]+))(\slc)?(?-i)/", $holder, $matches) == 0))
        continue;

      if(count($matches)>1)
      {
        $sname = $matches[1];
        $sname = strtolower($sname);
      }
      $holder_name = strtolower($holder);
      $content = '';
      // logic for retrieving and processing content
      //$GLOBALS["debug"]->init_debug($vars=array('holder_name'=>$matches),'Debug');
      //SHOW PRICELIST ALL
      if(empty(hotel::$words))
      {
        hotel::$words = array();
        $this->xml_to_array(hotel::$words, "modules/hotel/dict/texts.xml", "/document");
        
        if(file_exists(app_path() . "modules/hotel/dict/user_texts.xml"))
          $this->xml_to_array(hotel::$words, app_path() . "modules/hotel/dict/user_texts.xml", "/document");
      }

      if($holder_name == "hotel_ext_rating")
      {
        $content = $this->render_external_rating($page_info);
      }
      if($holder_name == "htl_cancellation")
      {
        $content = "";
      }
      if($holder_name == "quickbooking_background")
      {
        $settings = array();
        $this->fetch_settings($settings);
        $content = "";
        if(!empty($settings["background"]))
        {
          $content = "<img src='" . $settings["background"] . "' alt='background'>";
        }
      }
      if($holder_name == "quickbooking_logo")
      {
        $settings = array();
        $this->fetch_settings($settings);
        $content = "";
        if(!empty($settings["logo"]))
        {
          $content = "<img src='" . $settings["logo"] . "' alt='logo'>";
        }
      }

      if($holder_name == "htl_booking")
      {
        $content = $this->pror_parse_room_order();
      }
      
      if($holder_name == "follow_payment_form")
      {
        if(!reqvar_empty("htl_follow_pay"))
        {
          $order_id = base64_decode(reqvar("htl_follow_pay"));
          
          $_SESSION["htl_follow_pay"] = $order_id;
        }
        
        $content = "";
        $this->process_stripe_follow_form($page_info, $content);
      }

      if($holder_name == "htl_pricelist_all" || $holder_name == "htl_specialoffers_all" )
      {
        if($holder_name == "htl_pricelist_all")
          $PRICELIST_TYPE = 1;
        else
          $PRICELIST_TYPE = 2;

        if($this->pror_get_pricelist_list($page_info["langid"], $PRICELIST_TYPE))
        {
          $sample="";
          if(empty($sample))
            $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/pricelist_all.tpl");
          if(empty($sample))
            $sample = get_file_content(app_path() . "modules/hotel/include/tpl/pricelist_all.tpl");

          $sample = preg_replace ("/<!--[\s]*pricelist_start[\s]*-->.+<!--[\s]*pricelist_end[\s]*-->/Us" , $this-> pror_parse_pricelist_all($sample, $page_info)  , $sample );
          $content = $sample;
        }
        else
        {
          if(!empty(hotel::$words["PriceListNotAvailable"][$_SESSION["ulang"]]))
            $content = '<p class="pricelist-empty">'.hotel::$words["PriceListNotAvailable"][$_SESSION["ulang"]].'</p>';
          else
            $content = '';

        }
      }
      //SHOW DEFINED PRICELIST
      if($holder_name == "htl_pricelist")
      {
        if(!empty($_REQUEST["pricelist"]))
        {
          $pricelist = $_REQUEST["pricelist"];
          $_SESSION[S_CONTEXT]["hotel"]["pricelist"] = $pricelist;
        }
        else if(!empty($_SESSION[S_CONTEXT]["hotel"]["pricelist"]))
        {
          $_REQUEST["pricelist"] = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
          $pricelist = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
        }
        else
        {
          continue;
        }
        if(!empty($_REQUEST["currency"]))
        {
          $currency = $_REQUEST["currency"];
          $_SESSION[S_CONTEXT]["hotel"]["currency"] = $currency;
        }
        else if(!empty($_SESSION[S_CONTEXT]["hotel"]["currency"]))
        {
          $_REQUEST["currency"] = $_SESSION[S_CONTEXT]["hotel"]["currency"];
        }

        if($this->pror_get_pricelist_data($page_info["langid"] , $pricelist))
        {
          $this->get_pricelist_currency();
          if(hotel::$pricelist_list["TYPE"] == 1)
          {
            //$appendix ="PRICE - LIST";
            $appendix = "";
          }
          else
          {
            $appendix = "";
          }

          $sample="";

          if(hotel::$pricelist_list["TYPE"] == 1)
          {
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/pricelist_".hotel::$pricelist_list["I_NAME"]."_".$page_info["lang"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/pricelist_".$page_info["lang"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/pricelist_".hotel::$pricelist_list["I_NAME"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/pricelist.tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "modules/hotel/include/tpl/pricelist.tpl");
          }
          elseif(hotel::$pricelist_list["TYPE"] == 2)
          {
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/special_offer_".hotel::$pricelist_list["I_NAME"]."_".$page_info["lang"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/special_offer_".$page_info["lang"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/special_offer_".hotel::$pricelist_list["I_NAME"].".tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/special_offer.tpl");
            if(empty($sample))
              $sample = get_file_content(app_path() . "modules/hotel/include/tpl/special_offer.tpl");
          }

             //$GLOBALS["debug"]->init_debug($vars=array('pricelist_list'=>hotel::$pricelist_list),'Debug');
          $sample = preg_replace ("/\{currency_switcher\}/", $this -> pror_parse_pricelist_currency($page_info) , $sample );
         // hotel::$pricelist_list["I_NAME"]

          $sample = preg_replace ("/\{booking_link\}/", $this->pror_parse_booking($page_info) , $sample );
          $sample = preg_replace ("/\{title\}/", $appendix." ".hotel::$pricelist_list["NAME"] , $sample );
          $sample = preg_replace ("/<!--[\s]*season_start[\s]*-->.+<!--[\s]*season_end[\s]*-->/Us" , $this-> pror_parse_pricelist_season(hotel::$pricelist_list["ID"], $page_info, $sample)  , $sample );
	        $sample = preg_replace ("/<!--[\s]*dates_start[\s]*-->.+<!--[\s]*dates_end[\s]*-->/Us" , $this-> pror_parse_pricelist_dates(hotel::$pricelist_list["ID"], $page_info, $sample)  , $sample );
          $sample = preg_replace ("/<!--[\s]*content_start[\s]*-->.+<!--[\s]*content_end[\s]*-->/Us" , $this-> pror_parse_pricelist(hotel::$pricelist_list["ID"], $page_info, $sample)  , $sample );
          $sample = $this->pror_parse_word($sample, $page_info);

          $content = $sample;
        }
        else
        {

          if(!empty(hotel::$words["PriceListNotAvailable"][$_SESSION["ulang"]]))
            $content = '<p class="pricelist-empty">'.hotel::$words["PriceListNotAvailable"][$_SESSION["ulang"]].'</p>';
          else
            $content = '';
        }
      }

      if($holder_name == "room_overview")
      {
        $sample="";
        if(empty($sample))
          $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/room_overview.tpl");
        if(empty($sample))
          $sample = get_file_content(app_path() . "modules/hotel/include/tpl/room_overview.tpl");
        if(!empty($_REQUEST["room"]))
        {
          $this -> pror_get_room_data($_REQUEST["room"], $page_info["langid"]);
          $sample = preg_replace ("/\{image\}/", 'resources/hotel/rooms/'.hotel::$rooms_list["id"].'.jpg', $sample);
          $content = $sample;
        }
      }

      if($holder_name == "htl_additional_info")
      {
        if(!empty($_REQUEST["pricelist"]))
        {
          $pricelist = $_REQUEST["pricelist"];
          $_SESSION[S_CONTEXT]["hotel"]["pricelist"] = $pricelist;
        }
        else if(!empty($_SESSION[S_CONTEXT]["hotel"]["pricelist"]))
        {
          $_REQUEST["pricelist"] = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
          $pricelist = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
        }
        else
        {
          continue;
        }

        if($this->pror_get_pricelist_data($page_info["langid"] , $pricelist))
        {
          if(!empty(hotel::$pricelist_list["INFO"]))
            $content = hotel::$pricelist_list["INFO"];
        }
      }

      if(preg_match("/hotel_ext_booking/i", $holder_name))
      {
        $light_calender = !empty($matches[1]);

        if($this->extended_module())
        {
          $content = '';
          $this->process_ext_booking_request($content, $page_info, $light_calender);
        }
      }

      if(preg_match("/HOTEL_BOOKING_CALENDER/i", $holder_name))
      {
        $page = $matches[2];

        $view_content = "";
        $this->gen_calender_view($page_info["lang"], $page_info["langid"], $page_info["template"], $page_info["date_format"], $view_content);

        $url = make_url($page_info["lang"], $page);

        $content = "<div id='hotel_calender_container'><form id='hotel_calender_from' action='$url' method='post'><div id='hotel_calender'>";
        $content .= $view_content;
        $content .= "</div></div><div style='clear:both'></form></div>";
      }

      if(preg_match("/HOTEL_BOOKING_CALENDER_EXT/i", $holder_name))
      {
        $page = $matches[2];

        $view_content = "";
        $this->gen_calender_view_ext($page_info["lang"], $page_info["langid"], $page_info["template"], $page_info["date_format"], $view_content);

        $url = make_url($page_info["lang"], $page);

        $content = "<div id='hotel_calender_container'><form id='hotel_calender_from' action='$url' method='post'><div id='hotel_calender'>";
        $content .= $view_content;
        $content .= "</div></div><div style='clear:both'></form></div>";

      }

      if(preg_match("/HOTEL_ROOM_BOOKING_FORM/i", $holder_name))
      {
        $page = $matches[1];
        $def_room = ifnull($matches[3]);
        $light_calender = !empty($matches[4]);
        
        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';
        //$content = "<pre>" . print_r($matches, true) . "</pre>";

        if(preg_match("/<!--[\s]*iframe_room_form:begin[\s]*-->.+<!--[\s]*iframe_room_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = make_url2($page_info["lang"], $page, $params);

          $is_ssl = false;
          $site = GetWebsite();
          if($site) $is_ssl = $site->is_ssl($page);

          if($is_ssl)
          {
            $url = str_replace("http://", "https://", get_host_address() . $url);
          }

          $content .= '<form id="room_booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="page" value="'.$page.'" />';
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $room_name_filter = "<select name='room_name_filter' class='room_name_filter' id='room_name_filter'>";
          $room_name_filter .= "<option value=''>-</option>";

          $room_list = array();
          $this->get_room_list_for_filter($room_list, $page_info);         
          
          foreach($room_list as $room_i_name => $room_name)
          {
            $selected = ($def_room == $room_i_name) ? " selected" : "";
            
            $room_name_filter .= "<option value='" . escape_html($room_i_name) . "' $selected>" . escape_html($room_name) . "</option>";
          }

          $room_name_filter .= "</select>";
          
          $children_select = "<select name='children'>";
          $children_select .= "<option value='0'>".escape_html(hotel::$words["No"][$_SESSION["ulang"]])."</option>";
          $children_select .= "<option value='1'>".escape_html(hotel::$words["Yes"][$_SESSION["ulang"]])."</option>";
          $children_select .= "</select>";

          $calendar_url = app_url_path("index.php");

          $settings = array();
          $this->fetch_settings($settings);
          if($settings["child_info_page"] == 0)
          {
              $content = str_ireplace("{children_link}", '', $content);
              $content = str_ireplace("{new_window}", '', $content);
          }
          else
          {
            $dbw = GetDBWorker();
            $prfx = $dbw->escape(GetConnection()->get_current_prefix());

            $id = $dbw->escape($settings["child_info_page"]);

            $query = "SELECT NAME FROM {$prfx}_SITE_OBJECT WHERE ID = $id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              return false;
            }

            while($dbw->fetch_row())
            {
              $page = $dbw->field_by_name("NAME");
            }

            $dbw->free_result();

            $url = make_url($page_info["lang"], $page);

            $content = str_ireplace("{children_link}", $url, $content);
            if($settings["in_new_window"] == 1)
              $content = str_ireplace("{new_window}", 'target="_blank"', $content);
            else
              $content = str_ireplace("{new_window}", '', $content);
          }
          
          if(reqvar_empty("begin_date") && ((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"])))
          {
            if(!empty($settings["arrival_weekday_flag"]))
            {
              $nextdates = array();
              
              if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
              if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
              if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
              if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
              if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
              if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
              if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
              
              $_REQUEST["begin_date"] = date("Y-m-d", min($nextdates));
            }
            else
            {
              $_REQUEST["begin_date"] = date("Y-m-d", strtotime("+ " . $settings["default_arrival"] . " days"));
            }
          }

          if(reqvar_empty("end_date") && (string)$settings["default_departure"] !== "" && !reqvar_empty("begin_date"))
          {
            $_REQUEST["end_date"] = date("Y-m-d", strtotime("+ " . $settings["default_departure"] . " days", strtotime(reqvar("begin_date"))));
          }
          
          $datefield = "<input onclick='htl_booking.open_calendar(\"arrive_roomb\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_begin_date_roomb' readonly='readonly' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_begin_date_roomb_hidden' name='begin_date' value='".reqvar("begin_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_begin_date_roomb' name='begin_date' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_begin_date_roomb', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }
          $content = str_ireplace("{arrive_date_input}", $datefield, $content);

          $datefield = "<input onclick='htl_booking.open_calendar(\"departure_roomb\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_end_date_roomb' readonly='readonly' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_end_date_roomb_hidden' name='end_date' value='".reqvar("end_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_end_date_roomb' name='end_date' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_end_date_roomb', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
                          ";
          }
          $content = str_ireplace("{departure_date_input}", $datefield, $content);

          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{children_select}", $children_select, $content);
          
          $content = str_ireplace("{room_name_input}", $room_name_filter, $content);
          
          
          $content = str_ireplace("{search_button}", "<input id='htl_book_button_roomb' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          $this->pror_parse_word($content, $page_info);
        }
      } // HOTEL_ROOM_BOOKING_FORM
      
      if(preg_match("/HOTEL_ROOM_IBOOKING_FORM/i", $holder_name))
      {
        $def_room = ifnull($matches[2]);
        $light_calender = !empty($matches[3]);
        
        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';
        //$content = "<pre>" . print_r($matches, true) . "</pre>";

        if(preg_match("/<!--[\s]*iframe_room_form:begin[\s]*-->.+<!--[\s]*iframe_room_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = get_host_address() . $URL_PATH . "modules/hotel_extended/ibooking.php";

          if(!empty($page_info["force_ssl"]))
          {
            $url = str_replace("http://", "https://", $url);
          }

          $content .= '<form target="_top" id="room_booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $room_name_filter = "<select name='room_name_filter' class='room_name_filter' id='room_name_filter'>";
          $room_name_filter .= "<option value=''>-</option>";

          $room_list = array();
          $this->get_room_list_for_filter($room_list, $page_info);         
          
          foreach($room_list as $room_i_name => $room_name)
          {
            $selected = ($def_room == $room_i_name) ? " selected" : "";
            
            $room_name_filter .= "<option value='" . escape_html($room_i_name) . "' $selected>" . escape_html($room_name) . "</option>";
          }

          $room_name_filter .= "</select>";
          
          $children_select = "<select name='children'>";
          $children_select .= "<option value='0'>".escape_html(hotel::$words["No"][$_SESSION["ulang"]])."</option>";
          $children_select .= "<option value='1'>".escape_html(hotel::$words["Yes"][$_SESSION["ulang"]])."</option>";
          $children_select .= "</select>";

          $calendar_url = app_url_path("index.php");

          $settings = array();
          $this->fetch_settings($settings);
          if($settings["child_info_page"] == 0)
          {
              $content = str_ireplace("{children_link}", '', $content);
              $content = str_ireplace("{new_window}", '', $content);
          }
          else
          {
            $dbw = GetDBWorker();
            $prfx = $dbw->escape(GetConnection()->get_current_prefix());

            $id = $dbw->escape($settings["child_info_page"]);

            $query = "SELECT NAME FROM {$prfx}_SITE_OBJECT WHERE ID = $id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              return false;
            }

            while($dbw->fetch_row())
            {
              $page = $dbw->field_by_name("NAME");
            }

            $dbw->free_result();

            $url = make_url($page_info["lang"], $page);

            $content = str_ireplace("{children_link}", $url, $content);
            if($settings["in_new_window"] == 1)
              $content = str_ireplace("{new_window}", 'target="_blank"', $content);
            else
              $content = str_ireplace("{new_window}", '', $content);
          }
          
          if(reqvar_empty("begin_date") && ((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"])))
          {
            if(!empty($settings["arrival_weekday_flag"]))
            {
              $nextdates = array();
              
              if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
              if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
              if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
              if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
              if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
              if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
              if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
              
              $_REQUEST["begin_date"] = date("Y-m-d", min($nextdates));
            }
            else
            {
              $_REQUEST["begin_date"] = date("Y-m-d", strtotime("+ " . $settings["default_arrival"] . " days"));
            }
          }

          if(reqvar_empty("end_date") && (string)$settings["default_departure"] !== "" && !reqvar_empty("begin_date"))
          {
            $_REQUEST["end_date"] = date("Y-m-d", strtotime("+ " . $settings["default_departure"] . " days", strtotime(reqvar("begin_date"))));
          }
          
          $datefield = "<input onclick='htl_booking.open_calendar(\"arrive_roomb\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_begin_date_roomb' readonly='readonly' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_begin_date_roomb_hidden' name='begin_date' value='".reqvar("begin_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_begin_date_roomb' name='begin_date' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_begin_date_roomb', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }
          $content = str_ireplace("{arrive_date_input}", $datefield, $content);

          $datefield = "<input onclick='htl_booking.open_calendar(\"departure_roomb\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_end_date_roomb' readonly='readonly' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_end_date_roomb_hidden' name='end_date' value='".reqvar("end_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_end_date_roomb' name='end_date' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_end_date_roomb', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
                          ";
          }
          $content = str_ireplace("{departure_date_input}", $datefield, $content);

          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{children_select}", $children_select, $content);
          
          $content = str_ireplace("{room_name_input}", $room_name_filter, $content);
          
          
          $content = str_ireplace("{search_button}", "<input id='htl_book_button_roomb' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          $this->pror_parse_word($content, $page_info);
        }
      } // HOTEL_ROOM_IBOOKING_FORM 
      
      if(preg_match("/HOTEL_BOOKING_FORM/i", $holder_name))
      {
        $light_calender = !empty($matches[3]);

        $page = $matches[2];

        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';

        if(preg_match("/<!--[\s]*iframe_form:begin[\s]*-->.+<!--[\s]*iframe_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = make_url2($page_info["lang"], $page, $params);

          $is_ssl = false;
          $site = GetWebsite();
          if($site) $is_ssl = $site->is_ssl($page);

          if($is_ssl)
          {
            $url = str_replace("http://", "https://", get_host_address() . $url);
          }

          $content .= '<form id="booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="page" value="'.$page.'" />';
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $children_select = "<select name='children'>";
          $children_select .= "<option value='0'>".escape_html(hotel::$words["No"][$_SESSION["ulang"]])."</option>";
          $children_select .= "<option value='1'>".escape_html(hotel::$words["Yes"][$_SESSION["ulang"]])."</option>";
          $children_select .= "</select>";

          $calendar_url = app_url_path("index.php");

          $settings = array();
          $this->fetch_settings($settings);
          if($settings["child_info_page"] == 0)
          {
              $content = str_ireplace("{children_link}", '', $content);
              $content = str_ireplace("{new_window}", '', $content);
          }
          else
          {
            $dbw = GetDBWorker();
            $prfx = $dbw->escape(GetConnection()->get_current_prefix());

            $id = $dbw->escape($settings["child_info_page"]);

            $query = "SELECT NAME FROM {$prfx}_SITE_OBJECT WHERE ID = $id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              return false;
            }

            while($dbw->fetch_row())
            {
              $page = $dbw->field_by_name("NAME");
            }

            $dbw->free_result();

            $url = make_url($page_info["lang"], $page);

            $content = str_ireplace("{children_link}", $url, $content);
            if($settings["in_new_window"] == 1)
              $content = str_ireplace("{new_window}", 'target="_blank"', $content);
            else
              $content = str_ireplace("{new_window}", '', $content);
          }
          
          if(reqvar_empty("begin_date") && ((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"])))
          {
            if(!empty($settings["arrival_weekday_flag"]))
            {
              $nextdates = array();
              
              if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
              if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
              if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
              if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
              if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
              if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
              if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
              
              $_REQUEST["begin_date"] = date("Y-m-d", min($nextdates));
            }
            else
            {
              $_REQUEST["begin_date"] = date("Y-m-d", strtotime("+ " . $settings["default_arrival"] . " days"));
            }
          }

          if(reqvar_empty("end_date") && (string)$settings["default_departure"] !== "" && !reqvar_empty("begin_date"))
          {
            $_REQUEST["end_date"] = date("Y-m-d", strtotime("+ " . $settings["default_departure"] . " days", strtotime(reqvar("begin_date"))));
          }
          
          $datefield = "<input onclick='htl_booking.open_calendar(\"arrive\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_begin_date' readonly='readonly' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_begin_date_hidden' name='begin_date' value='".reqvar("begin_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_begin_date' name='begin_date' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_begin_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }
          $content = str_ireplace("{arrive_date_input}", $datefield, $content);

          $datefield = "<input onclick='htl_booking.open_calendar(\"departure\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_end_date' readonly='readonly' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_end_date_hidden' name='end_date' value='".reqvar("end_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_end_date' name='end_date' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_end_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
                          ";
          }
          $content = str_ireplace("{departure_date_input}", $datefield, $content);

          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{children_select}", $children_select, $content);
          $content = str_ireplace("{search_button}", "<input id='htl_book_button' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          $this->pror_parse_word($content, $page_info);
        }
      } // BOOKING_FORM

      if(preg_match("/HOTEL_SO_BOOKING_FORM/i", $holder_name))
      {
        $light_calender = !empty($matches[3]);

        $page = $matches[2];

        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';

        if(preg_match("/<!--[\s]*iframe_so_form:begin[\s]*-->.+<!--[\s]*iframe_so_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = make_url2($page_info["lang"], $page, $params);

          $is_ssl = false;
          $site = GetWebsite();
          if($site) $is_ssl = $site->is_ssl($page);

          if($is_ssl)
          {
            $url = str_replace("http://", "https://", get_host_address() . $url);
          }

          $content .= '<form id="so_booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="specoffer_search" value="1" />';
          $content .= '<input type="hidden" name="specoffer_modus" value="1" />';
          $content .= '<input type="hidden" name="page" value="'.$page.'" />';
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $now = time();
          $spec_offer_list = array();
          $room_list = array();
          $person_list = array();
          $night_list = array();
          $this->get_total_spec_offer_list($now, $page_info, $spec_offer_list, $room_list, $person_list, $night_list);

          $special_offer = "<script>\n";
          $special_offer .= "var room_info = {};\n";
          
          foreach($spec_offer_list as $id => $soinfo)
          {
            $special_offer .= "room_info['$soinfo[iname]'] = {};\n";
            if(!empty($soinfo["rooms"]))
            {
              foreach($soinfo["rooms"] as $rid => $rname)
              {
                $special_offer .= "room_info['$soinfo[iname]']['$rid'] = '" . escape_js($rname) . "';\n";
              }
            }
          }
          
          $special_offer .= "</script>\n";
          
          $special_offer .= "<select id='special_offer_filter' name='specoffer' onchange='ajust_so_room_list(this.value)'>";
          $special_offer .= "<option value=''>-</option>";

          $cur_pricelist = "";
          if(!empty($_REQUEST["pricelist"]))
          {
            $cur_pricelist = $_REQUEST["pricelist"];
          }
          else if(!empty($_SESSION[S_CONTEXT]["hotel"]["pricelist"]))
          {
            $cur_pricelist = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
          }     
          
          $cur_pricelist_id = "";
          foreach($spec_offer_list as $id => $soinfo)
          {
            $selected = ($cur_pricelist == $soinfo["iname"]) ? "selected" : "";
            
            if($cur_pricelist == $soinfo["iname"])
              $cur_pricelist_id = $id;
            
            $special_offer .= "<option value='" . escape_html($soinfo["iname"]) . "' $selected>" . escape_html($soinfo["name"]) . "</option>";
          }

          $special_offer .= "</select>";

          if(!empty($cur_pricelist_id) &&
             !empty($spec_offer_list[$cur_pricelist_id]))
            $room_list = $spec_offer_list[$cur_pricelist_id]["rooms"];
          
          $room_filter = "<select id='so_room_filter' name='room_name_filter'>";
          $room_filter .= "<option value=''>-</option>";

          foreach($room_list as $id => $name)
          {
            $room_filter .= "<option value='" . escape_html($id) . "'>" . escape_html($name) . "</option>";
          }

          $room_filter .= "</select>";

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $calendar_url = app_url_path("index.php");

          $datefield = "<input onclick='htl_booking.open_calendar(\"specialoffers\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_so_begin_date' readonly='readonly' value='' /><input type='hidden' id='htl_so_begin_date_hidden' name='begin_date' value='' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_so_begin_date' name='begin_date' value='' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_so_begin_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }
          $content = str_ireplace("{arrive_date_input}", $datefield, $content);
          $content = str_ireplace("{special_offer_input}", $special_offer, $content);
          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{room_input}", $room_filter, $content);
          $content = str_ireplace("{search_button}", "<input id='htl_book_button' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          
          $this->pror_parse_word($content, $page_info);
        }
      } // SO_BOOKING_FORM

      if(preg_match("/HOTEL_IBOOKING_FORM/i", $holder_name))
      {
        $light_calender = !empty($matches[1]);

        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';

        if(preg_match("/<!--[\s]*iframe_form:begin[\s]*-->.+<!--[\s]*iframe_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = get_host_address() . $URL_PATH . "modules/hotel_extended/ibooking.php";

          if(!empty($page_info["force_ssl"]))
          {
            $url = str_replace("http://", "https://", $url);
          }

          $content .= '<form target="_top" id="booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $children_select = "<select name='children'>";
          $children_select .= "<option value='0'>".escape_html(hotel::$words["No"][$_SESSION["ulang"]])."</option>";
          $children_select .= "<option value='1'>".escape_html(hotel::$words["Yes"][$_SESSION["ulang"]])."</option>";
          $children_select .= "</select>";

          $calendar_url = app_url_path("index.php");

          $settings = array();
          $this->fetch_settings($settings);
//          if($settings["child_info_page"] == 0)
          if(true)
          {
              $content = str_ireplace("{children_link}", '', $content);
              $content = str_ireplace("{new_window}", '', $content);
          }
          else
          {
            $dbw = GetDBWorker();
            $prfx = $dbw->escape(GetConnection()->get_current_prefix());

            $id = $dbw->escape($settings["child_info_page"]);

            $query = "SELECT NAME FROM {$prfx}_SITE_OBJECT WHERE ID = $id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              return false;
            }

            while($dbw->fetch_row())
            {
              $page = $dbw->field_by_name("NAME");
            }

            $dbw->free_result();

            $url = get_host_address() . $URL_PATH . "modules/hotel_extended/ibooking.php?children_page=" . $page . "&ulang=" . $page_info["lang"];

            $content = str_ireplace("{children_link}", $url, $content);
            if($settings["in_new_window"] == 1)
              $content = str_ireplace("{new_window}", 'target="_blank"', $content);
            else
              $content = str_ireplace("{new_window}", 'target="_top"', $content);
          }

          if(reqvar_empty("begin_date") && ((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"])))
          {
            if(!empty($settings["arrival_weekday_flag"]))
            {
              $nextdates = array();
              
              if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
              if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
              if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
              if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
              if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
              if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
              if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
              
              $_REQUEST["begin_date"] = date("Y-m-d", min($nextdates));
            }
            else
            {
              $_REQUEST["begin_date"] = date("Y-m-d", strtotime("+ " . $settings["default_arrival"] . " days"));
            }
          }

          if(reqvar_empty("end_date") && (string)$settings["default_departure"] !== "" && !reqvar_empty("begin_date"))
          {
            $_REQUEST["end_date"] = date("Y-m-d", strtotime("+ " . $settings["default_departure"] . " days", strtotime(reqvar("begin_date"))));
          }
          
          $datefield = "<input onclick='htl_booking.open_calendar(\"arrive\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_begin_date' readonly='readonly' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_begin_date_hidden' name='begin_date' value='".reqvar("begin_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_begin_date' name='begin_date' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_begin_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }
          $content = str_ireplace("{arrive_date_input}", $datefield, $content);

          $datefield = "<input onclick='htl_booking.open_calendar(\"departure\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_end_date' readonly='readonly' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_end_date_hidden' name='end_date' value='".reqvar("end_date")."' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_end_date' name='end_date' value='".format_date(reqvar("end_date"), $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_end_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
                          ";
          }
          $content = str_ireplace("{departure_date_input}", $datefield, $content);

          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{children_select}", $children_select, $content);
          $content = str_ireplace("{search_button}", "<input id='htl_book_button' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          $this->pror_parse_word($content, $page_info);
        }
      } // HOTEL_IBOOKING_FORM

      if(preg_match("/HOTEL_SO_IBOOKING_FORM/i", $holder_name))
      {
        $light_calender = !empty($matches[1]);

        $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
        if(empty($template))
          $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");

        $content = '';

        if(preg_match("/<!--[\s]*iframe_so_form:begin[\s]*-->.+<!--[\s]*iframe_so_form:end[\s]*-->/Us", $template, $matches))
        {
          if(!$this->ext_js_included)
          {
            if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
            else
              $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

            $this->ext_js_included = true;
          }

          $params = array();
          $url = get_host_address() . $URL_PATH . "modules/hotel_extended/ibooking.php";

          if(!empty($page_info["force_ssl"]))
          {
            $url = str_replace("http://", "https://", $url);
          }

          $content .= '<form target="_top" id="so_booking_search_form" action="'.$url.'" method="post">';
          $content .= $matches[0];
          $content .= '<input type="hidden" name="specoffer_search" value="1" />';
          $content .= '<input type="hidden" name="specoffer_modus" value="1" />';
          $content .= '<input type="hidden" name="ulang" value="'.$page_info["lang"].'" />';
          $content .= '</form>';

          $now = time();
          $spec_offer_list = array();
          $room_list = array();
          $person_list = array();
          $night_list = array();
          $this->get_total_spec_offer_list($now, $page_info, $spec_offer_list, $room_list, $person_list, $night_list);

          $special_offer = "<script>\n";
          $special_offer .= "var room_info = {};\n";
          
          foreach($spec_offer_list as $id => $soinfo)
          {
            $special_offer .= "room_info['$soinfo[iname]'] = {};\n";
            if(!empty($soinfo["rooms"]))
            {
              foreach($soinfo["rooms"] as $rid => $rname)
              {
                $special_offer .= "room_info['$soinfo[iname]']['$rid'] = '" . escape_js($rname) . "';\n";
              }
            }
          }
          
          $special_offer .= "</script>\n";
          
          $special_offer .= "<select id='special_offer_filter' name='specoffer' onchange='ajust_so_room_list(this.value)'>";
          $special_offer .= "<option value=''>-</option>";
          
          $cur_pricelist = "";
          if(!empty($_REQUEST["pricelist"]))
          {
            $cur_pricelist = $_REQUEST["pricelist"];
          }
          else if(!empty($_SESSION[S_CONTEXT]["hotel"]["pricelist"]))
          {
            $cur_pricelist = $_SESSION[S_CONTEXT]["hotel"]["pricelist"];
          }     
          
          $cur_pricelist_id = "";
          foreach($spec_offer_list as $id => $soinfo)
          {
            $selected = ($cur_pricelist == $soinfo["iname"]) ? "selected" : "";
            
            if($cur_pricelist == $soinfo["iname"])
              $cur_pricelist_id = $id;
            
            $special_offer .= "<option value='" . escape_html($soinfo["iname"]) . "' $selected>" . escape_html($soinfo["name"]) . "</option>";
          }

          $special_offer .= "</select>";

          if(!empty($cur_pricelist_id) &&
             !empty($spec_offer_list[$cur_pricelist_id]))
            $room_list = $spec_offer_list[$cur_pricelist_id]["rooms"];
            
          $room_filter = "<select id='so_room_filter' name='room_name_filter'>";
          $room_filter .= "<option value=''>-</option>";

          foreach($room_list as $id => $name)
          {
            $room_filter .= "<option value='" . escape_html($id) . "'>" . escape_html($name) . "</option>";
          }

          $room_filter .= "</select>";

          $persons_count = "<select name='persons'>";
          $persons_count .= "<option value='1'>1</option>";
          $persons_count .= "<option value='2'>2</option>";
          $persons_count .= "<option value='3'>3</option>";
          $persons_count .= "<option value='4'>4</option>";
          $persons_count .= "<option value='5'>5</option>";
          $persons_count .= "<option value='6'>6</option>";
          $persons_count .= "<option value='7'>7</option>";
          $persons_count .= "<option value='8'>8</option>";
          $persons_count .= "<option value='9'>9</option>";
          $persons_count .= "<option value='10'>10</option>";
          $persons_count .= "</select>";

          $calendar_url = app_url_path("index.php");

          $datefield = "<input onclick='htl_booking.open_calendar(\"specialoffers\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_so_begin_date' readonly='readonly' value='".format_date(reqvar("begin_date"), $page_info["date_format"])."' /><input type='hidden' id='htl_so_begin_date_hidden' name='begin_date' value='' />";
          if($light_calender)
          {
            $datefield = "<input type='text' id='htl_so_begin_date' name='begin_date' value='' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_so_begin_date', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>";
          }

          $content = str_ireplace("{arrive_date_input}", $datefield, $content);

          $content = str_ireplace("{special_offer_input}", $special_offer, $content);
          $content = str_ireplace("{room_input}", $room_filter, $content);
          $content = str_ireplace("{persons_count_input}", $persons_count, $content);
          $content = str_ireplace("{search_button}", "<input id='htl_book_button' type='submit' value='".escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]])."' />", $content);
          $this->pror_parse_word($content, $page_info);
        }
      } // SO_IBOOKING_FORM

      // $content = "Content of the hotel with the name " . $sname;
      if(empty($content))
      {
        $content = '';
      }

      $patterns[] = "/" . preg_p_escape("{".$holder."}") . "/";
      $replacements[] = preg_r_escape( $content);
    } // foreach
  } // process_request
  /*-----------------------------------------------*/
  function pror_parse_pricelist_all($sample, &$page_info)
  {
    $pricelist_all_tpl = array();
    $pricelist_all_wrapper = array();
    $pricelist_all_items="";
    unset($_SESSION[S_CONTEXT]["params"]);
    preg_match("/<!--[\s]*pricelist_start[\s]*-->(.+)<!--[\s]*pricelist_end[\s]*-->/Us", $sample, $pricelist_all_tpl);

    $sub_sample = $pricelist_all_tpl[1];

    preg_match("/(.+)\{pricelist\}(.+)/s", $pricelist_all_tpl[1], $pricelist_all_wrapper);
    $left_wrapper = trim (  $pricelist_all_wrapper[1],"\n\r ");
    $right_wrapper = trim (  $pricelist_all_wrapper[2],"\n\r ");

    $_SESSION[S_CONTEXT]["params"][] = "pricelist";

    foreach(hotel::$pricelist_list as $pricelist_id => $key_arr)
    {
      $iname = hotel::$pricelist_list[$pricelist_id]["I_NAME"];
      $name = hotel::$pricelist_list[$pricelist_id]["NAME"];
      $page = hotel::$pricelist_list[$pricelist_id]["PAGE"];

      $current_line = $sub_sample;

      $current_line = str_ireplace("{pricelist}", '<a href="'. make_url2($page_info["lang"], $page, array('pricelist'=>$iname)) .'">'.$name.'</a>', $current_line);
      $current_line = str_ireplace("{pricelist_id}", $pricelist_id, $current_line);
      $current_line = str_ireplace("{pricelist_info}", hotel::$pricelist_list[$pricelist_id]["INFO"], $current_line);

      //$pricelist_all_items .= $left_wrapper.'<a href="'. make_url2($page_info["lang"], $page, array('pricelist'=>$iname)) .'">'.$name.'</a>'.$right_wrapper."\n";

      $pricelist_all_items .= $current_line;
    }

    unset($_SESSION[S_CONTEXT]["params"]);
    return $pricelist_all_items;
 }
  /*-----------------------------------------------*/
  function pror_parse_pricelist_currency(&$page_info)
  {
    unset($_SESSION[S_CONTEXT]["params"]);
    $code = "";
        if(isset(hotel::$currency_list) && count(hotel::$currency_list) > 0)
        {
          if(empty($_REQUEST["currency"]))
          {
            $pass = false;
            $cnt = false;
            foreach(hotel::$currency_list as $key => $rate)
            {
              if(!$cnt)
                $first_currency = $key;

              if($key == ifnull($_SESSION[S_CONTEXT]["hotel"]["default_currency"]))
              {
                $currency = $key;
                $_SESSION[S_CONTEXT]["hotel"]["currency"] = $key;
                $pass = true;
              }

              $cnt = true;
            }
            if(!$pass)
              $_SESSION[S_CONTEXT]["hotel"]["currency"] = $first_currency;
          }
          else
          {
            $currency = $_REQUEST["currency"];
          }

          if(empty($currency))
          {
            foreach(hotel::$currency_list as $key => $rate)
            {
              $currency = $key;
              break;
            }
          }

          $code ='<select class="adm_std_font adm_select_field adm_name_field" onchange="change_currency(this)">';
          $sign = "";
          foreach(hotel::$currency_list as $key => $rate)
          {
            $selected ="";
              if($currency == $key )
              {
               $selected = "selected";
              }
            if(!empty(hotel::$currency_signs[strtolower($key)]))
            {
              $sign = hotel::$currency_signs[strtolower($key)];
            }
            else
            {
              $sign = $key ;
            }

            $_SESSION[S_CONTEXT]["params"] = array("pricelist", "currency");
            $code .=' <option value="'.make_url2($page_info["lang"], hotel::$pricelist_list["PAGE"], array('pricelist'=>hotel::$pricelist_list["I_NAME"], 'currency'=>$key)).'" '.$selected.'>'.$sign.'</option>';
            unset($_SESSION[S_CONTEXT]["params"]);
          }

          $code .='</select>';

$js ='
<script type="text/JavaScript">
function change_currency(el)
{
  for(var i=0; i<el.options.length;i++)
  {
    if(el.options[i].selected)
    {
      location = el.options[i].value;
    }
  }
}
</script>' ;
         unset($_SESSION[S_CONTEXT]["params"]);
         return $code.$js;
        }
        else
        {
          return "";
        }
  }
/*-----------------------------------------------*/
  function pror_parse_pricelist_season($pricelist_id, &$page_info, $sample)
  {
    $this -> pror_get_pricelist_periods($pricelist_id, $page_info);
    $seasons_list = array();
    if(empty(hotel::$pricelist_list["seasons"]))
      return false;
    foreach(hotel::$pricelist_list["seasons"] as $season_id=>$value)
    {
     $seasons_list[$season_id]  = hotel::$seasons_list[$season_id];
    }


    $code = array();
    $cnt = 0;
    preg_match("/<!--[\s]*season_start[\s]*-->(.+)<!--[\s]*season_end[\s]*-->/Us", $sample, $season_code);
    $season_code_str = "";
    foreach(hotel::$seasons_list as $season_id => $season_info)
    {
      if(empty($seasons_list[$season_id])) continue;

      $code[$cnt] ="";
      $season_name = $season_info["NAME"];


      if(!empty($season_name))
        $season_name = '<p class="caption">'.$season_name.'</p>';
      else
       $season_name = '';

      foreach($season_info["FROM_DATE"] as $key => $value1)
      {
        $from_date = $season_info["FROM_DATE"][$key];
        $to_date = $season_info["TO_DATE"][$key];
        $code[$cnt] .= "<nobr>$from_date</nobr> - <nobr>$to_date</nobr><br/>";
      }
      $tmp_str =  preg_replace ("/\{season\}/",$season_name . "&nbsp;" , ifnull($season_code[1]));
      $tmp_str =  preg_replace ("/\{n\}/",$cnt, $tmp_str);

      $season_code_str .=  preg_replace ("/\{dates\}/", $code[$cnt] , $tmp_str);
      $cnt++;
    }

    return $season_code_str;
  }
  /*-----------------------------------------------*/
	function pror_parse_pricelist_dates($pricelist_id, &$page_info, $sample)
  {
    $this -> pror_get_pricelist_periods($pricelist_id, $page_info);
    $seasons_list = array();
    if(empty(hotel::$pricelist_list["seasons"]))
      return false;
    foreach(hotel::$pricelist_list["seasons"] as $season_id=>$value)
    {
     $seasons_list[$season_id]  = hotel::$seasons_list[$season_id];
    }


    $code = array();
    $cnt = 0;
    preg_match("/<!--[\s]*dates_start[\s]*-->(.+)<!--[\s]*dates_end[\s]*-->/Us", $sample, $season_code);
    $season_code_str = "";
    foreach(hotel::$seasons_list as $season_id => $season_info)
    {
      if(empty($seasons_list[$season_id])) continue;

      $code[$cnt] ="";
      $season_name = $season_info["NAME"];


      if(!empty($season_name))
        $season_name = '<p class="caption">'.$season_name.'</p>';
      else
       $season_name = '';

      foreach($season_info["FROM_DATE"] as $key => $value1)
      {
        $from_date = $season_info["FROM_DATE"][$key];
        $to_date = $season_info["TO_DATE"][$key];
        $code[$cnt] .= "<p class='period'><nobr>$from_date</nobr> - <nobr>$to_date</nobr></p>";
      }
      $tmp_str =  preg_replace ("/\{season\}/",$season_name , ifnull($season_code[1]));

      $season_code_str .=  preg_replace ("/\{dates\}/", $code[$cnt] , $tmp_str);
      $cnt++;
    }

    return $season_code_str;
  }
  /*-----------------------------------------------*/
  function pror_get_pricelist_periods(&$pricelist_id, &$page_info)
  {
    if(empty($pricelist_id))
      return false;
    global $ERROR;
    global $ERR_DETAILS;
    $LANG_ID = $page_info["langid"];
    $dbw = GetDBWorker();
    hotel::$seasons_list = array();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query="SELECT ${prfx}_HTL_SEASON.ID, FROM_DATE, TO_DATE, I_NAME SEASON_I_NAME, NAME FROM ${prfx}_HTL_SEASON_PERIODS
                INNER JOIN ${prfx}_HTL_SEASON ON (${prfx}_HTL_SEASON.ID = ${prfx}_HTL_SEASON_PERIODS.SEASON_ID)
                LEFT JOIN ${prfx}_HTL_SEASON_PROPS ON (${prfx}_HTL_SEASON.ID = ${prfx}_HTL_SEASON_PROPS.SEASON_ID AND LANGUAGE_ID = $LANG_ID)
                WHERE ${prfx}_HTL_SEASON_PERIODS.SEASON_ID IN (SELECT DISTINCT ${prfx}_HTL_PRICE.SEASON_ID FROM ${prfx}_HTL_PRICE WHERE PRICELIST_ID = $pricelist_id)
                  ORDER BY FROM_DATE";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      while($dbw->fetch_row())
      {
        $seasons_id = $dbw->row["ID"];
        hotel::$seasons_list[$seasons_id]["I_NAME"] = $dbw->row["SEASON_I_NAME"];
        hotel::$seasons_list[$seasons_id]["NAME"] = escape_html($dbw->row["NAME"]);
        hotel::$seasons_list[$seasons_id]["FROM_DATE"][] = format_date($dbw->row["FROM_DATE"], $page_info["date_format"]);
        hotel::$seasons_list[$seasons_id]["TO_DATE"][] = format_date($dbw->row["TO_DATE"], $page_info["date_format"]);
      }
      $dbw->free_result();
  }
  //-----------------------------------------------------------------
  function pror_get_pricelist_list( $LANG_ID, $PRICELIST_TYPE)
  {
    global $ERROR;
    global $ERR_DETAILS;


    hotel::$pricelist_list = array();
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());


    //GET DATA
    $query="SELECT ID, I_NAME, PAGE, NAME, DESCRIPTION, INFO FROM ${prfx}_HTL_PRICELIST
                 INNER JOIN ${prfx}_HTL_PRICELIST_PROPS ON (PRICELIST_ID = ID AND LANGUAGE_ID = $LANG_ID)
                 WHERE TYPE = $PRICELIST_TYPE AND ${prfx}_HTL_PRICELIST.ACTIVE = 1 AND ${prfx}_HTL_PRICELIST_PROPS.ACTIVE = '1'
                 ORDER BY ID";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $tmp_str = "";
    while($dbw->fetch_row())
    {
      hotel::$pricelist_list[$dbw->row["ID"]]["ID"] = $dbw->row["ID"];
      hotel::$pricelist_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$pricelist_list[$dbw->row["ID"]]["PAGE"] = $dbw->row["PAGE"];
      hotel::$pricelist_list[$dbw->row["ID"]]["NAME"] = escape_html($dbw->row["NAME"]);
      hotel::$pricelist_list[$dbw->row["ID"]]["DESCRIPTION"] = escape_html($dbw->row["DESCRIPTION"]);
      hotel::$pricelist_list[$dbw->row["ID"]]["INFO"] = $dbw->row["INFO"];
      if(!empty($dbw->row["NAME"]))
        $tmp_str = $dbw->row["NAME"];
    }

    if(empty($tmp_str))
    {
      return false;
    }
    return true;
  }
  //-----------------------------------------------------------------
  function pror_get_pricelist_data($LANG_ID, $I_NAME)
  {

    global $ERROR;
    global $ERR_DETAILS;
    hotel::$pricelist_list = array();
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //GET DATA
    $query="SELECT ID, I_NAME, ${prfx}_HTL_PRICELIST.ACTIVE, TYPE, BOOKING_PAGE, PAGE, NAME, DESCRIPTION, INFO, BOOKING_LINK
                 FROM ${prfx}_HTL_PRICELIST
                 INNER JOIN ${prfx}_HTL_PRICELIST_PROPS ON (PRICELIST_ID = ID)
                 WHERE
                  I_NAME = '$I_NAME'
                 AND
                  LANGUAGE_ID = $LANG_ID
                 AND
                  ${prfx}_HTL_PRICELIST.ACTIVE = 1
                 AND
                  ${prfx}_HTL_PRICELIST_PROPS.ACTIVE = '1'
                 ORDER BY ID";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$pricelist_list["ID"] = $dbw->row["ID"];
      hotel::$pricelist_list["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$pricelist_list["ACTIVE"] = $dbw->row["ACTIVE"];
      hotel::$pricelist_list["TYPE"] = $dbw->row["TYPE"];
      hotel::$pricelist_list["PAGE"] = $dbw->row["PAGE"];
      hotel::$pricelist_list["BOOKING_PAGE"] = $dbw->row["BOOKING_PAGE"];
      hotel::$pricelist_list["NAME"] = escape_html($dbw->row["NAME"]);
      hotel::$pricelist_list["DESCRIPTION"] = escape_html($dbw->row["DESCRIPTION"]);
      hotel::$pricelist_list["INFO"] = htmlspecialchars_decode($dbw->row["INFO"]);
      hotel::$pricelist_list["BOOKING_LINK"] = $dbw->row["BOOKING_LINK"];
    }
    if(empty(hotel::$pricelist_list["NAME"]))
      return false;
    $PRICELIST_ID =hotel::$pricelist_list["ID"];
      $dbw->free_result();


      //GET PRICE
       $query="SELECT ${prfx}_HTL_PRICE.ROOM_ID, ${prfx}_HTL_PRICE.SEASON_ID, PRICE1, PRICE2,
       STANDARD_ALLOCATION,
       SHOW_PRICE_PER_PERSON
       FROM ${prfx}_HTL_PRICE
       INNER JOIN ${prfx}_HTL_ROOMS ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_PRICE.ROOM_ID)
       INNER JOIN ${prfx}_HTL_ROOMS_PROPS ON (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID AND ${prfx}_HTL_ROOMS_PROPS.LANGUAGE_ID = $LANG_ID  AND ${prfx}_HTL_ROOMS_PROPS.ACTIVE = '1')
       INNER JOIN ${prfx}_HTL_SEASON_PROPS ON (${prfx}_HTL_SEASON_PROPS.SEASON_ID = ${prfx}_HTL_PRICE.SEASON_ID AND ${prfx}_HTL_SEASON_PROPS.LANGUAGE_ID = $LANG_ID AND ${prfx}_HTL_SEASON_PROPS.ACTIVE = '1')
                    WHERE PRICELIST_ID = $PRICELIST_ID
                    ORDER BY SORT_ORDER";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $cnt=0;
      while($dbw->fetch_row())
      {
        $factor = 1;
        if(!empty($dbw->row["SHOW_PRICE_PER_PERSON"]))
        {
          $factor = $dbw->row["STANDARD_ALLOCATION"];
        }

        if(empty($factor)) $factor = 1;

        hotel::$pricelist_list["seasons"][$dbw->row["SEASON_ID"]] = $dbw->row["SEASON_ID"];
        hotel::$pricelist_list["price1"][$dbw->row["ROOM_ID"]][$dbw->row["SEASON_ID"]]=$dbw->row["PRICE1"]/$factor;
        hotel::$pricelist_list["price2"][$dbw->row["ROOM_ID"]][$dbw->row["SEASON_ID"]]=$dbw->row["PRICE2"]/$factor;
        $cnt++;
      }
      $dbw->free_result();

    if(empty(hotel::$pricelist_list["price1"]) && empty(hotel::$pricelist_list["price2"]))
    {
      return false;
    }

    return true;
  }
/*-----------------------------------------------*/
  function pror_get_room_data($i_name, $lang_id)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    if(!empty($i_name))
    {
      $query = "SELECT ID, I_NAME, ROOMS_COUNT, SORT_ORDER, PAGE, TYPE, DESCRIPTION, CATEGORY, LANGUAGE_ID  FROM ${prfx}_HTL_ROOMS
                    INNER JOIN ${prfx}_HTL_ROOMS_PROPS  ON (ID = ROOM_ID AND LANGUAGE_ID = $lang_id)
                    WHERE
                      I_NAME = '$i_name'
                    AND
                      ACTIVE = '1'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      while($dbw->fetch_row())
      {
        hotel::$rooms_list["id"] = $dbw->row["ID"];
        hotel::$rooms_list["internal_name"] = $dbw->row["I_NAME"];
        hotel::$rooms_list["count"] = $dbw->row["ROOMS_COUNT"];
        hotel::$rooms_list["page"] = $dbw->row["PAGE"];
        hotel::$rooms_list["type"] = escape_html( $dbw->row["TYPE"]);
        hotel::$rooms_list["category"] = escape_html ($dbw->row["CATEGORY"]);
        hotel::$rooms_list["description"] = escape_html ($dbw->row["DESCRIPTION"]);
      }


      $dbw->free_result();
    }
  }
/*-----------------------------------------------*/
  function pror_parse_pricelist(&$PRICELIST_ID, &$page_info, &$sample)
  {
    unset($_SESSION[S_CONTEXT]["params"]);
    $LANG_ID = $page_info["langid"];
    if(!empty($_SESSION[S_CONTEXT]["hotel"]["currency"]))
    {
      $CURRENCY = $_SESSION[S_CONTEXT]["hotel"]["currency"];
    }
    else
    {
      $CURRENCY = "";
    }
    $content = "";
    $match = array();
    preg_match("/<!--[\s]*content_start[\s]*-->(.+)<!--[\s]*content_end[\s]*-->/Us", $sample, $match);


    $this->get_pricelist_rooms($LANG_ID);
    $this->get_pricelist_seasons();

    $match2 = array();
    preg_match("/<!--[\s]*price_start[\s]*-->(.+)<!--[\s]*price_end[\s]*-->/Us", $sample, $match2);

    $pricelist_grid = array();

    $pricelist_array = array();
    foreach(hotel::$seasons_list as $season_id => $season_name)
    {
      foreach(hotel::$pricelist_list as $price_id => $prices)
      {
        if($price_id == 'price1' || $price_id == 'price2')
        {
          foreach($prices as $room_id => $season_arr)
          {
            $pricelist_grid[$price_id][$room_id][$season_id] = "-";

            if(empty(hotel::$pricelist_list["seasons"][$season_id]))  continue;

            if(empty($season_arr[$season_id]))
              $pricelist_array[$price_id][$room_id][$season_id] = "-";
            else
              $pricelist_array[$price_id][$room_id][$season_id] = $season_arr[$season_id];
          }
        }
      }
    }

    foreach($pricelist_array["price1"] as $room_id => $season_arr)
    {
      if(!empty($match[1]) ? $example = $match[1] : $example = "");

      $_SESSION[S_CONTEXT]["params"] = array("room");
      $example = preg_replace ("/\{room_url\}/",make_url2($page_info["lang"], hotel::$rooms_list[$room_id]["PAGE"], array('room'=>hotel::$rooms_list[$room_id]["I_NAME"])) , $example);

      /*
      $thumb_img = '';
      if(file_exists("resources/hotel/rooms/".$room_id."_thumb.gif"))
        $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.gif";
      if(file_exists("resources/hotel/rooms/".$room_id."_thumb.png"))
        $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.png";
      if(file_exists("resources/hotel/rooms/".$room_id."_thumb.jpg"))
        $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.jpg";

      $image = '';
      if(file_exists("resources/hotel/rooms/".$room_id.".gif"))
        $image = "resources/hotel/rooms/".$room_id.".gif";
      if(file_exists("resources/hotel/rooms/".$room_id.".png"))
        $image = "resources/hotel/rooms/".$room_id.".png";
      if(file_exists("resources/hotel/rooms/".$room_id.".jpg"))
        $image = "resources/hotel/rooms/".$room_id.".jpg";

      $thumb_img2 = '';
      if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.gif"))
        $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.gif";
      if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.png"))
        $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.png";
      if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.jpg"))
        $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.jpg";

      $image2 = '';
      if(file_exists("resources/hotel/rooms/".$room_id."_num2.gif"))
        $image2 = "resources/hotel/rooms/".$room_id."_num2.gif";
      if(file_exists("resources/hotel/rooms/".$room_id."_num2.png"))
        $image2 = "resources/hotel/rooms/".$room_id."_num2.png";
      if(file_exists("resources/hotel/rooms/".$room_id."_num2.jpg"))
        $image2 = "resources/hotel/rooms/".$room_id."_num2.jpg";



      $example = preg_replace ("/\{thumb_image\}/", $thumb_img, $example);
      $example = preg_replace ("/\{image\}/", $image, $example);

      $example = preg_replace ("/\{thumb_image1\}/", $thumb_img, $example);
      $example = preg_replace ("/\{image1\}/", $image, $example);

      $example = preg_replace ("/\{thumb_image2\}/", $thumb_img2, $example);
      $example = preg_replace ("/\{image2\}/", $image2, $example);

      $room_img_slideshow = '<a class="lightbox_image room_image" href="'.$image.'"><img class="room-thumb" src="'.$thumb_img.'" alt="" title="" /></a>';
      $this->render_room_img_slideshow($room_img_slideshow, $room_id);

      $example = preg_replace ("/\{room_img_slideshow\}/", $room_img_slideshow, $example);
      */

      $pict = "";
      $thumb = "";
      $room_image = "";
      $add_pictures = array();
      
      if($this->get_first_room_image($room_id, $pict, $thumb, $add_pictures) &&
         !empty($pict) && !empty($thumb))
      {
        $ipath = "resources/hotel/rooms/".$room_id."/";
        $room_image = '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html(hotel::$rooms_list[$room_id]["TYPE"]) . '" href="'.$ipath.$pict.'">';
        $room_image .= '<img class="room-thumb" src="'.$ipath.$thumb.'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html(hotel::$rooms_list[$room_id]["TYPE"] . " (" . hotel::$rooms_list[$room_id]["CATEGORY"] . ")") .'" title="'. escape_html(hotel::$rooms_list[$room_id]["TYPE"]) .'" /><br>';
        $room_image .= hotel::$words["MorePictures"][$_SESSION["ulang"]];
        $room_image .= '</a>';
        
        $room_image .= '<div style="display:none">';
        foreach($add_pictures as $pinfo)
        {
          $room_image .= '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html(hotel::$rooms_list[$room_id]["TYPE"]) . '" href="'.$ipath.$pinfo["picture"].'">';
          $room_image .= '<img class="room-thumb" src="'.$ipath.$pinfo["thumb"].'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html(hotel::$rooms_list[$room_id]["TYPE"] . " (" . hotel::$rooms_list[$room_id]["CATEGORY"] . ")") .'" title="'. escape_html(hotel::$rooms_list[$room_id]["TYPE"]) .'" /><br>';
          $room_image .= '</a>';
        }
        $room_image .= '</div>';        
        
        $room_image .= '<script type="text/javascript">';
        $room_image .= "$(document).ready(function() {
                        $(\"[rel='room$room_id']\").fancybox({
                          helpers : {
                            thumbs : true
                          }
                        });
                      });
                  ";
        $room_image .= '</script>';
      }

      $example = preg_replace ("/\{room_image\}/", $room_image, $example);

			//$example = preg_replace ("/\{image\}/", 'resources/hotel/rooms/'.$room_id.'_thumb.jpg', $example);

      $example = preg_replace ("/\{type\}/",hotel::$rooms_list[$room_id]["TYPE"], $example);
      $example = preg_replace ("/\{description\}/",hotel::$rooms_list[$room_id]["DESCRIPTION"], $example);
      $example = preg_replace ("/\{category\}/",hotel::$rooms_list[$room_id]["CATEGORY"], $example);
      $example = preg_replace ("/\{standard_allocation\}/",hotel::$rooms_list[$room_id]["STANDARD_ALLOCATION"], $example);
      $example2_str ="";
      unset($_SESSION[S_CONTEXT]["params"]);
      if(empty(hotel::$currency_list[$CURRENCY]))
      {
        $CURRENCY_RATE = 1;
      }
      else
      {
        $CURRENCY_RATE = hotel::$currency_list[$CURRENCY];
      }
      foreach($season_arr as $season_id=>$pr)
      {
        $example2 = $match2[1];
        if(!empty(hotel::$currency_signs[strtolower($CURRENCY)]))
        {
          $sign = hotel::$currency_signs[strtolower($CURRENCY)];
        }
        else
        {
          $sign = $CURRENCY ;
        }

        if(!empty(hotel::$pricelist_list["price1"][$room_id][$season_id]))
        {
          $p = hotel::$pricelist_list["price1"][$room_id][$season_id]*$CURRENCY_RATE;
          if(ifnull($_SESSION[S_CONTEXT]["hotel"]["default_currency"]) != $CURRENCY)
          {
            $p = round($p);
          }

          $price1 =  number_format($p, 2, ',', '');

        }
        else
        {
          $price1 =  "";
        }
        if(!empty(hotel::$pricelist_list["price2"][$room_id][$season_id]))
        {
          $p = hotel::$pricelist_list["price2"][$room_id][$season_id]*$CURRENCY_RATE;
          if(ifnull($_SESSION[S_CONTEXT]["hotel"]["default_currency"]) != $CURRENCY)
          {
            $p = round($p);
          }

          $price2 =  number_format($p, 2, ',', '');
        }
        else
        {
          $price2 =  "";
        }

        if(empty($price1) && empty($price2))
          $sign = "";

				$sign1 = $sign;
				$sign2 = $sign;

				if(empty($price1))
				{
					$sign1 = '';
				}
				if(empty($price2))
				{
					$sign2 = '';
				}
        if(!empty($price1) && !empty($price2))
         $price_total = $price1." / ".$price2;
        else if(!empty($price1))
         $price_total = $price1;
        else if(!empty($price2))
          $price_total = $price1;
        else
          $price_total ="";

				$example2 = preg_replace ("/\{currency_sign\}/", $sign , $example2);
				$example2 = preg_replace ("/\{currency_sign1\}/", $sign1 , $example2);
				$example2 = preg_replace ("/\{currency_sign2\}/", $sign2 , $example2);

        $example2 = preg_replace ("/\{price_total\}/", $price_total , $example2);
        $example2 = preg_replace ("/\{price1\}/", $price1 , $example2);
        $example2 = preg_replace ("/\{price2\}/", $price2 , $example2);
        unset($_SESSION[S_CONTEXT]["params"]);
        $_SESSION[S_CONTEXT]["params"] = array("offer", "room", "season");
        $booking_room_link = '<a href="'. make_url2($page_info["lang"], hotel::$pricelist_list["BOOKING_PAGE"], array('offer'=>hotel::$pricelist_list["I_NAME"], 'room'=>hotel::$rooms_list[$room_id]["I_NAME"], 'season'=>hotel::$seasons_list[$season_id])) .'">'. hotel::$pricelist_list["BOOKING_LINK"] .'</a>';
        $example2 = preg_replace ("/\{booking_room_link\}/",$booking_room_link , $example2);
        $example2_str .= $example2;
      }
      $example = preg_replace("/<!--[\s]*price_start[\s]*-->.+<!--[\s]*price_end[\s]*-->/Us", $example2_str, $example);
      $content .= $example;
    }
    preg_match("/<!--[\s]*content_start[\s]*-->(.+)<!--[\s]*content_end[\s]*-->/Us", $sample, $match);



    return $content;
  }
  //-----------------------------------------------------------------
  function render_room_img_slideshow(&$room_img_slideshow, &$room_id)
  {
    $thumb_img = '';
    if(file_exists("resources/hotel/rooms/".$room_id."_thumb.gif"))
      $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.gif";
    if(file_exists("resources/hotel/rooms/".$room_id."_thumb.png"))
      $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.png";
    if(file_exists("resources/hotel/rooms/".$room_id."_thumb.jpg"))
      $thumb_img = "resources/hotel/rooms/".$room_id."_thumb.jpg";

    $image = '';
    if(file_exists("resources/hotel/rooms/".$room_id.".gif"))
      $image = "resources/hotel/rooms/".$room_id.".gif";
    if(file_exists("resources/hotel/rooms/".$room_id.".png"))
      $image = "resources/hotel/rooms/".$room_id.".png";
    if(file_exists("resources/hotel/rooms/".$room_id.".jpg"))
      $image = "resources/hotel/rooms/".$room_id.".jpg";

    $image2 = '';
    if(file_exists("resources/hotel/rooms/".$room_id."_num2.gif"))
      $image2 = "resources/hotel/rooms/".$room_id."_num2.gif";
    if(file_exists("resources/hotel/rooms/".$room_id."_num2.png"))
      $image2 = "resources/hotel/rooms/".$room_id."_num2.png";
    if(file_exists("resources/hotel/rooms/".$room_id."_num2.jpg"))
      $image2 = "resources/hotel/rooms/".$room_id."_num2.jpg";

		$thumb_img2 = '';
    if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.gif"))
      $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.gif";
    if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.png"))
      $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.png";
    if(file_exists("resources/hotel/rooms/".$room_id."_num2_thumb.jpg"))
      $thumb_img2 = "resources/hotel/rooms/".$room_id."_num2_thumb.jpg";

    if(empty($image2) || empty($thumb_img2))
      return false;

    $room_img_slideshow = '
		<a href="#" class="room_image_slideshow" onclick="show_lightbox_slideshow(this); return false;">
		<div class="room_thumbs_'.$room_id.'">
			<img class="room-thumb" src="'.$thumb_img.'" alt="" title=""  />
			<img class="room-thumb" src="'.$thumb_img2.'" alt="" title=""  style="display:none;"/>
		</div>
    <div class="room_images" style="display:none;">
      <div class="image1"><img src="'.$image.'"  alt="" title=""/></div>
      <div class="image2"><img src="'.$image2.'" alt="" title=""/></div>
    </div>
    </a>
		<script type="text/javascript">
			$(window).load(function(){
				setInterval(function(){
					var imgIndex_'.$room_id.' = $(".room_image_slideshow .room_thumbs_'.$room_id.' img").index($(".room_image_slideshow .room_thumbs_'.$room_id.' img:visible"));
					$(".room_image_slideshow .room_thumbs_'.$room_id.' img").eq(imgIndex_'.$room_id.').hide();

					imgIndex_'.$room_id.'++;
					if($(".room_image_slideshow .room_thumbs_'.$room_id.' img").eq(imgIndex_'.$room_id.').length == 0)
					imgIndex_'.$room_id.' = 0;

					$(".room_image_slideshow .room_thumbs_'.$room_id.' img").eq(imgIndex_'.$room_id.').show();
				}, 3000)
			});
		</script>
		';

    $room_img_slideshow .= '
      <script type="text/javascript">
        var room_img_slideshow_interval_id = null;

        function show_lightbox_slideshow(elm)
        {

          var img_src1 = $(elm).find(".room_images .image1").find("img").attr("src");
          var img_src2 = $(elm).find(".room_images .image2").find("img").attr("src");

          $("body").css("overflow", "hidden");

          $("<div id=\'lightbox_overlay\'></div>")
            .css({
              "position" : "absolute",
              "width" : "100%",
              "height" : "100%",
              "top" : $(document).scrollTop(),
              "left" : "0",
              "z-index" : "9999",
              "opacity" : "0"
            })
            .animate({"opacity": "0.7"}, "slow")
            .appendTo("body");

          $("<div id=\'lightbox_container\'></div>")
            .css({
              "position" : "absolute",
              "z-index" : "9990"
            })
            .appendTo("body");

          $("<a id=\'close_lighbox\' href=\'#\'>&times;</a>").click(function(){
            $("#lightbox_overlay, #lightbox_container").fadeOut("normal", function(){
              $(this).remove();
              clearInterval(room_img_slideshow_interval_id)
              $("body").css("overflow", "auto");
            });

            return false;
          }).appendTo("#lightbox_container");

          $("<img class=\'image1\' />")
            .attr("src", img_src1+"?r="+Math.random())
              .load(function(){
                $(this).appendTo("#lightbox_container");
                $("#lightbox_container").css({
                  "left" : ($(window).width() - $(this).width())/2,
                  "top" : $(document).scrollTop() + (($(window).height() - $(this).height())/2),
                  "position" : "absolute",
                  "z-index" : "9999"
                });
              });

          $("<img class=\'image2\' />")
            .attr("src", img_src2+"?r="+Math.random())
            .css({
              "display" : "none"
            })
            .load(function(){
                $(this).appendTo("#lightbox_container");
            });

          room_img_slideshow_interval_id = setInterval(change_room_img, 5000);

          $("#lightbox_container").fadeIn();
        }

        function change_room_img()
        {
          slideshow_length = $("#lightbox_container").find("img").length;

          imgIndex = $("#lightbox_container img").index($("#lightbox_container img:visible"));


          $("#lightbox_container img").eq(imgIndex).hide();
					$("#lightbox_container").hide();

          imgIndex++;

          if($("#lightbox_container img").eq(imgIndex).length == 0)
            imgIndex = 0;


					$("#lightbox_container img").eq(imgIndex).fadeIn(function(){
						$("#lightbox_container").show();
					});
        }
      </script>
    ';
  }
  //-----------------------------------------------------------------
  function analyze_serial(&$serial_info, $sum)
  {
    // trial Hotel
    if($sum == "159")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL Trial";
      $serial_info["period"] = 30;

      $serial_info["product"] =
      "CM Studio .CM Studio .HOTEL Trial\n" .
      "CM Studio .HOTEL VOUCHERS\n" .
      "CM Studio .SOCIAL NETWORK\n" .
      "CM Studio .ARCHIVE\n" .
      "CM Studio .FORM\n" .
      "CM Studio .BANNER-AD\n" .
      "CM Studio .PHOTO-GALLERY\n" .
      "CM Studio .STATISTIC\n" .
      "CM Studio .DB-Server Base\n" .
      "CM Studio .Update Support (within the trial period)";
      ;
      $serial_info["activated"] = 1;

      $serial_info["expire_date"] = date("Y-m-d", strtotime($serial_info["date"]) + 30*24*3600);

      if(check_trial("hotel", $serial_info, text("ErrModuleSerialExpired"), text("TrialExpirationWarn")))
      {
        if($_SESSION[S_CONTEXT]["serial_info"]["product"] < 2) $_SESSION[S_CONTEXT]["serial_info"]["product"] = 2;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel_vouchers"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel_vouchers"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["archive"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["blog"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["blog"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["forms"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms_full"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["banners"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["banners"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["galleries"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["galleries"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["statistics"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["statistics"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["mail_management"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["crm"] = 1;
        if(empty($_SESSION[S_CONTEXT]["serial_info"]["crm_type"])) $_SESSION[S_CONTEXT]["serial_info"]["crm_type"] = "base";

        $_SESSION[S_CONTEXT]["serial_info"]["update_support"] = 1;
      }

      return;
    }

    // Hotel Year
    if($sum == "268")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL (Jahreslizenz)";
      $serial_info["period"] = 365;

      $serial_info["product"] =
      "CM Studio .HOTEL (Jahreslizenz)\n" .
      "CM Studio .HOTEL VOUCHERS\n" .
      "CM Studio .SOCIAL NETWORK\n" .
      "CM Studio .ARCHIVE\n" .
      "CM Studio .FORM\n" .
      "CM Studio .BANNER-AD\n" .
      "CM Studio .PHOTO-GALLERY\n" .
      "CM Studio .STATISTIC\n" .
      "CM Studio .DB-Server Base\n" .
      "CM Studio .Update Support (Jahr)"
      ;

      $serial_info["expire_date"] = date("Y-m-d", strtotime($serial_info["date"]) + 365*24*3600);

      if(check_trial("hotel", $serial_info, text("LicencseExpired"), text("LicencseExpirationWarn")))
      {
        if($_SESSION[S_CONTEXT]["serial_info"]["product"] < 2) $_SESSION[S_CONTEXT]["serial_info"]["product"] = 2;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel_vouchers"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel_vouchers"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["archive"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["blog"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["blog"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms_full"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["forms"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["banners"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["banners"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["galleries"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["galleries"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["statistics"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["statistics"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["mail_management"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["crm"] = 1;
        if(empty($_SESSION[S_CONTEXT]["serial_info"]["crm_type"])) $_SESSION[S_CONTEXT]["serial_info"]["crm_type"] = "base";

        $_SESSION[S_CONTEXT]["serial_info"]["update_support"] = 1;
      }

      return;
    }

    // normal Hotel
    if($sum == "145")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL";

      $serial_info["product"] =
      "CM Studio .HOTEL\n" .
      "CM Studio .HOTEL VOUCHERS\n" .
      "CM Studio .SOCIAL NETWORK\n" .
      "CM Studio .ARCHIVE\n" .
      "CM Studio .FORM\n" .
      "CM Studio .BANNER-AD\n" .
      "CM Studio .PHOTO-GALLERY\n" .
      "CM Studio .STATISTIC\n" .
      "CM Studio .DB-Server Base"
      ;
      if($_SESSION[S_CONTEXT]["serial_info"]["product"] < 2) $_SESSION[S_CONTEXT]["serial_info"]["product"] = 2;
      $_SESSION[S_CONTEXT]["serial_info"]["hotel_vouchers"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["hotel_vouchers"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["archive"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["blog"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["blog"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["forms"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["forms_full"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["forms"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["banners"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["banners"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["galleries"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["galleries"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["statistics"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["statistics"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["hotel"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["hotel"]["licensed"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["mail_management"] = 1;
      $_SESSION[S_CONTEXT]["serial_info"]["crm"] = 1;
      if(empty($_SESSION[S_CONTEXT]["serial_info"]["crm_type"])) $_SESSION[S_CONTEXT]["serial_info"]["crm_type"] = "base";

      $diff = (time() - strtotime($serial_info["date"]))/(24*3600);
      if($diff <= 365)
      {
        $_SESSION[S_CONTEXT]["serial_info"]["update_support"] = 1;
      }
      $dt = date("d.m.Y", strtotime($serial_info["date"]) + 365*24*3600);
      $serial_info["product"] .= "\nCM Studio .Update Support (bis $dt)";

      return;
    }

    // NFR One Year Hotel
    if($sum == "255")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL NFR (Jahreslizenz)";
      $serial_info["period"] = 365;

      $serial_info["product"] =
      "CM Studio .HOTEL NFR (Jahreslizenz)\n" .
      "CM Studio .HOTEL VOUCHERS\n" .
      "CM Studio .SOCIAL NETWORK\n" .
      "CM Studio .ARCHIVE\n" .
      "CM Studio .FORM\n" .
      "CM Studio .BANNER-AD\n" .
      "CM Studio .PHOTO-GALLERY\n" .
      "CM Studio .STATISTIC\n" .
      "CM Studio .DB-Server Base\n" .
      "CM Studio .Update Support (Jahr)"
      ;

      $serial_info["expire_date"] = date("Y-m-d", strtotime($serial_info["date"]) + 365*24*3600);

      if(check_trial("hotel", $serial_info, text("LicencseExpired"), text("LicencseExpirationWarn")))
      {
        $_SESSION[S_CONTEXT]["nfr"] = 1;

        if($_SESSION[S_CONTEXT]["serial_info"]["product"] < 2) $_SESSION[S_CONTEXT]["serial_info"]["product"] = 2;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel_vouchers"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel_vouchers"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["blog"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["blog"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["archive"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["forms_full"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["forms"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["banners"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["banners"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["galleries"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["galleries"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["statistics"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["statistics"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["hotel"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel"]["licensed"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["mail_management"] = 1;
        $_SESSION[S_CONTEXT]["serial_info"]["crm"] = 1;
        if(empty($_SESSION[S_CONTEXT]["serial_info"]["crm_type"])) $_SESSION[S_CONTEXT]["serial_info"]["crm_type"] = "base";

        $_SESSION[S_CONTEXT]["serial_info"]["update_support"] = 1;
      }

      return;
    }
    
    // trial RatePlans
    if($sum == "318")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL RatePlans Trial";
      $serial_info["period"] = 30;

      $serial_info["product"] = "CM Studio .HOTEL RatePlans Trial";
      $serial_info["activated"] = 1;

      $serial_info["expire_date"] = date("Y-m-d", strtotime($serial_info["date"]) + 30*24*3600);

      if(check_trial("hotel", $serial_info, text("ErrModuleSerialExpired"), text("TrialExpirationWarn")))
      {
        $_SESSION[S_CONTEXT]["serial_info"]["hotel_rateplans"] = 1;
        $_SESSION[S_CONTEXT]["modules"]["hotel_rateplans"]["licensed"] = 1;
      }

      return;
    }

    // normal RatePlans
    if($sum == "311")
    {
      $serial_info["product_name"] = "CM Studio .HOTEL RatePlans";

      $serial_info["product"] = "CM Studio .HOTEL RatePlans";

      $_SESSION[S_CONTEXT]["serial_info"]["hotel_rateplans"] = 1;
      $_SESSION[S_CONTEXT]["modules"]["hotel_rateplans"]["licensed"] = 1;
      return;
    }
  } // analyze_serial
  //-----------------------------------------------------------------
  function check_serial_state()
  {
    return;

    global $SERIAL_ERROR;

    if(empty($_SESSION[S_CONTEXT]["serial_info"]["hotel"]) &&
       !empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["active"])
      )
    {
      $SERIAL_ERROR = sprintf(text("ErrModuleNoSerial"), "CM Studio .HOTEL");
    }
  } // check_serial_state
  //-----------------------------------------------------------------

  /*-----------------------------------------------*/
  function get_lang_list(&$lang_name_list,&$lang_list)
  {
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $query_str="SELECT ID, NAME, LANG_KEY FROM ${prfx}_LANGUAGE";
    $data=array();
    if(!$dbw->execute_query($query_str))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

     while($dbw->fetch_row())
    {
      $lang_name_list[magic_quotes_to_req($dbw->field_by_name("ID"))]=magic_quotes_to_req($dbw->field_by_name("NAME"));
      $lang_list[magic_quotes_to_req($dbw->field_by_name("ID"))]=magic_quotes_to_req($dbw->field_by_name("LANG_KEY"));

    }
   $dbw->free_result();
  }
/*-----------------------------------------------*/
function get_lang_list_hotel($table_name)
{
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $query_str="SELECT LANGUAGE_ID FROM ${prfx}$table_name";
    $data=array();
    if(!$dbw->execute_query($query_str))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

     while($dbw->fetch_row())
    {
      $data[]=$dbw->field_by_name("LANGUAGE_ID");
    }
   $dbw->free_result();
   return $data;
}
/*-----------------------------------------------*/
  function get_room_data_dft()
  {

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      $_REQUEST["rooms_data"]["checkbox"][$lang_id] = 1;
    }
   $this->get_category_list();
  }

/*-----------------------------------------------*/
  function get_special_offer_text($langid, $arrive_date, &$special_offer_text)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $arrive_date = strtotime($arrive_date);
    $arrive_date = $dbw->format_date($arrive_date);

    $query = "SELECT SPECOFFER_TEXT
              FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP
              WHERE LANG_ID = $langid";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $special_offer_text = $dbw->field_by_name("SPECOFFER_TEXT");
    }

    $dbw->free_result();

    $query = "SELECT SPECOFFER_TEXT
              FROM {$prfx}_HTL_SEASON_PROPS
              WHERE LANGUAGE_ID = $langid
              AND SEASON_ID IN (SELECT SEASON_ID FROM {$prfx}_HTL_SEASON_PERIODS WHERE '$arrive_date' BETWEEN FROM_DATE AND TO_DATE)
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $txt = $dbw->field_by_name("SPECOFFER_TEXT");
      if(!empty($txt))
        $special_offer_text = $txt;
    }

    $dbw->free_result();

    return true;
  } // get_special_offer_text
/*-----------------------------------------------*/
  function get_room_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $room_id = $_REQUEST["room_id"];
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //fetch room data
    if(!empty($room_id))
    {
      $query="SELECT ID, I_NAME, ROOMS_COUNT, SHOW_PRICE_PER_PERSON, IGNORE_PRICES_BELOW_MIN, ROOM_CODE, ROOM_TYPE, ROOM_TA_CODE, ROOM_TVG_CODE, HTSPIDER_INSTANCE, YOUTUBE_CODE, MIN_PERSONS, MAX_PERSONS,
      STANDARD_ALLOCATION, WITH_CHILDREN, PRICING_TYPE, DISCOUNT_FLAG,
      DISCOUNT, SORT_ORDER, PAGE, TYPE, DESCRIPTION,
      CATEGORY, LANGUAGE_ID, ACTIVE, SORT_ORDER,

      ROOM_URL,

      MAX_ADULTS,

      CHILD_DISCOUNT_FLAG,
      CHILD_DISCOUNT,
      MAX_CHILD_AGE,
      CHILD_DISCOUNT_FLAG2,
      CHILD_DISCOUNT2,
      MAX_CHILD_AGE2,
      CHILD_DISCOUNT_FLAG3,
      CHILD_DISCOUNT3,
      MAX_CHILD_AGE3,
      CHILD_DISCOUNT_FLAG4,
      CHILD_DISCOUNT4,
      MAX_CHILD_AGE4,

      ADD_CHILD_DISCOUNT_FLAG,
      ADD_CHILD_DISCOUNT,
      ADD_MAX_CHILD_AGE,
      ADD_CHILD_DISCOUNT_FLAG2,
      ADD_CHILD_DISCOUNT2,
      ADD_MAX_CHILD_AGE2,
      ADD_CHILD_DISCOUNT_FLAG3,
      ADD_CHILD_DISCOUNT3,
      ADD_MAX_CHILD_AGE3,
      ADD_CHILD_DISCOUNT_FLAG4,
      ADD_CHILD_DISCOUNT4,
      ADD_MAX_CHILD_AGE4,
      
      SHOW_PARTNER_IF_EMPTY,
      SHOW_PARTNER_IF_LOWER,
      
      PARTNER_NAME1,
      PARTNER_URL1,
      PARTNER_NAME2,
      PARTNER_URL2,
      PARTNER_NAME3,
      PARTNER_URL3,
      PARTNER_NAME4,
      PARTNER_URL4,
      PARTNER_NAME5,
      PARTNER_URL5,
      
      STD_TARIF_CAPTION,

       EARLY_BOOK_DAYS1,
       EARLY_BOOK_DISCOUNT1,
       EARLY_BOOK_DAYS2,
       EARLY_BOOK_DISCOUNT2,
       EARLY_BOOK_DAYS3,
       EARLY_BOOK_DISCOUNT3,
       EARLY_BOOK_DAYS4,
       EARLY_BOOK_DISCOUNT4,
       EARLY_BOOK_DAYS5,
       EARLY_BOOK_DISCOUNT5,
       
       LMINUTE_BOOK_DAYS1,
       LMINUTE_BOOK_DISCOUNT1,
       LMINUTE_BOOK_DAYS2,
       LMINUTE_BOOK_DISCOUNT2,
       LMINUTE_BOOK_DAYS3,
       LMINUTE_BOOK_DISCOUNT3,
       LMINUTE_BOOK_DAYS4,
       LMINUTE_BOOK_DISCOUNT4,
       LMINUTE_BOOK_DAYS5,
       LMINUTE_BOOK_DISCOUNT5,
       
       LONGSTAY_BOOK_DAYS1,
       LONGSTAY_BOOK_DISCOUNT1,
       LONGSTAY_BOOK_DAYS2,
       LONGSTAY_BOOK_DISCOUNT2,
       LONGSTAY_BOOK_DAYS3,
       LONGSTAY_BOOK_DISCOUNT3,
       LONGSTAY_BOOK_DAYS4,
       LONGSTAY_BOOK_DISCOUNT4,
       LONGSTAY_BOOK_DAYS5,
       LONGSTAY_BOOK_DISCOUNT5

      FROM ${prfx}_HTL_ROOMS
                    INNER JOIN ${prfx}_HTL_ROOMS_PROPS  ON (ID = ROOM_ID)
                    WHERE ID = ".$room_id;

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $_REQUEST["rooms_data"]["internal_name"] = $dbw->row["I_NAME"];
        $_REQUEST["rooms_data"]["count"] = $dbw->row["ROOMS_COUNT"];
        $_REQUEST["rooms_data"]["page"] = $dbw->row["PAGE"];
        $_REQUEST["rooms_data"]["min_persons"] = $dbw->row["MIN_PERSONS"];
        $_REQUEST["rooms_data"]["max_persons"] = $dbw->row["MAX_PERSONS"];
        $_REQUEST["rooms_data"]["room_code"] = $dbw->row["ROOM_CODE"];
        $_REQUEST["rooms_data"]["room_type"] = $dbw->row["ROOM_TYPE"];
        $_REQUEST["rooms_data"]["room_ta_code"] = $dbw->row["ROOM_TA_CODE"];
        $_REQUEST["rooms_data"]["room_tvg_code"] = $dbw->row["ROOM_TVG_CODE"];
        $_REQUEST["rooms_data"]["htspider_instance"] = $dbw->row["HTSPIDER_INSTANCE"];

        $_REQUEST["rooms_data"]["with_children"] = $dbw->row["WITH_CHILDREN"];
        $_REQUEST["rooms_data"]["standard_allocation"] = $dbw->row["STANDARD_ALLOCATION"];
        $_REQUEST["rooms_data"]["pricing_type"] = $dbw->row["PRICING_TYPE"];
        $_REQUEST["rooms_data"]["room_sort_order"] = $dbw->row["SORT_ORDER"];
        $_REQUEST["rooms_data"]["show_price_per_person"] = $dbw->row["SHOW_PRICE_PER_PERSON"];
        $_REQUEST["rooms_data"]["ignore_prices_below_min"] = $dbw->row["IGNORE_PRICES_BELOW_MIN"];

        $_REQUEST["rooms_data"]["partner_display_if_empty"] = $dbw->row["SHOW_PARTNER_IF_EMPTY"];
        $_REQUEST["rooms_data"]["partner_display_if_lower"] = $dbw->row["SHOW_PARTNER_IF_LOWER"];

        //$_REQUEST["rooms_data"]["discount_type"] = $dbw->row["DISCOUNT_TYPE"];
        $_REQUEST["rooms_data"]["discount_flag"] = $dbw->row["DISCOUNT_FLAG"];
        $_REQUEST["rooms_data"]["discount"] = ($dbw->row["DISCOUNT"] == 0) ? '' : ifnull($dbw->row["DISCOUNT"]);
        $_REQUEST["rooms_data"]["checkbox"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["ACTIVE"];
        $_REQUEST["rooms_data"]["type"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req( $dbw->row["TYPE"]);
        $_REQUEST["rooms_data"]["category"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["CATEGORY"]);
        $_REQUEST["rooms_data"]["description"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["DESCRIPTION"]);

        $_REQUEST["rooms_data"]["youtube_code"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["YOUTUBE_CODE"];
        $_REQUEST["rooms_data"]["room_url"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["ROOM_URL"];

        $_REQUEST["rooms_data"]["partner_name1"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_NAME1"];
        $_REQUEST["rooms_data"]["partner_url1"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_URL1"];
        $_REQUEST["rooms_data"]["partner_name2"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_NAME2"];
        $_REQUEST["rooms_data"]["partner_url2"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_URL2"];
        $_REQUEST["rooms_data"]["partner_name3"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_NAME3"];
        $_REQUEST["rooms_data"]["partner_url3"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_URL3"];
        $_REQUEST["rooms_data"]["partner_name4"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_NAME4"];
        $_REQUEST["rooms_data"]["partner_url4"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_URL4"];
        $_REQUEST["rooms_data"]["partner_name5"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_NAME5"];
        $_REQUEST["rooms_data"]["partner_url5"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["PARTNER_URL5"];
        
        $_REQUEST["rooms_data"]["std_tarif_caption"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["STD_TARIF_CAPTION"];
        
        
        $_REQUEST["rooms_data"]["early_book_days1"] = $dbw->row["EARLY_BOOK_DAYS1"];
        $_REQUEST["rooms_data"]["early_book_discount1"] = $dbw->row["EARLY_BOOK_DISCOUNT1"];
        $_REQUEST["rooms_data"]["early_book_days2"] = $dbw->row["EARLY_BOOK_DAYS2"];
        $_REQUEST["rooms_data"]["early_book_discount2"] = $dbw->row["EARLY_BOOK_DISCOUNT2"];
        $_REQUEST["rooms_data"]["early_book_days3"] = $dbw->row["EARLY_BOOK_DAYS3"];
        $_REQUEST["rooms_data"]["early_book_discount3"] = $dbw->row["EARLY_BOOK_DISCOUNT3"];
        $_REQUEST["rooms_data"]["early_book_days4"] = $dbw->row["EARLY_BOOK_DAYS4"];
        $_REQUEST["rooms_data"]["early_book_discount4"] = $dbw->row["EARLY_BOOK_DISCOUNT4"];
        $_REQUEST["rooms_data"]["early_book_days5"] = $dbw->row["EARLY_BOOK_DAYS5"];
        $_REQUEST["rooms_data"]["early_book_discount5"] = $dbw->row["EARLY_BOOK_DISCOUNT5"];
        
        $_REQUEST["rooms_data"]["lminute_book_days1"] = $dbw->row["LMINUTE_BOOK_DAYS1"];
        $_REQUEST["rooms_data"]["lminute_book_discount1"] = $dbw->row["LMINUTE_BOOK_DISCOUNT1"];
        $_REQUEST["rooms_data"]["lminute_book_days2"] = $dbw->row["LMINUTE_BOOK_DAYS2"];
        $_REQUEST["rooms_data"]["lminute_book_discount2"] = $dbw->row["LMINUTE_BOOK_DISCOUNT2"];
        $_REQUEST["rooms_data"]["lminute_book_days3"] = $dbw->row["LMINUTE_BOOK_DAYS3"];
        $_REQUEST["rooms_data"]["lminute_book_discount3"] = $dbw->row["LMINUTE_BOOK_DISCOUNT3"];
        $_REQUEST["rooms_data"]["lminute_book_days4"] = $dbw->row["LMINUTE_BOOK_DAYS4"];
        $_REQUEST["rooms_data"]["lminute_book_discount4"] = $dbw->row["LMINUTE_BOOK_DISCOUNT4"];
        $_REQUEST["rooms_data"]["lminute_book_days5"] = $dbw->row["LMINUTE_BOOK_DAYS5"];
        $_REQUEST["rooms_data"]["lminute_book_discount5"] = $dbw->row["LMINUTE_BOOK_DISCOUNT5"];
        
        $_REQUEST["rooms_data"]["longstay_book_days1"] = $dbw->row["LONGSTAY_BOOK_DAYS1"];
        $_REQUEST["rooms_data"]["longstay_book_discount1"] = $dbw->row["LONGSTAY_BOOK_DISCOUNT1"];
        $_REQUEST["rooms_data"]["longstay_book_days2"] = $dbw->row["LONGSTAY_BOOK_DAYS2"];
        $_REQUEST["rooms_data"]["longstay_book_discount2"] = $dbw->row["LONGSTAY_BOOK_DISCOUNT2"];
        $_REQUEST["rooms_data"]["longstay_book_days3"] = $dbw->row["LONGSTAY_BOOK_DAYS3"];
        $_REQUEST["rooms_data"]["longstay_book_discount3"] = $dbw->row["LONGSTAY_BOOK_DISCOUNT3"];
        $_REQUEST["rooms_data"]["longstay_book_days4"] = $dbw->row["LONGSTAY_BOOK_DAYS4"];
        $_REQUEST["rooms_data"]["longstay_book_discount4"] = $dbw->row["LONGSTAY_BOOK_DISCOUNT4"];
        $_REQUEST["rooms_data"]["longstay_book_days5"] = $dbw->row["LONGSTAY_BOOK_DAYS5"];
        $_REQUEST["rooms_data"]["longstay_book_discount5"] = $dbw->row["LONGSTAY_BOOK_DISCOUNT5"];
        
        $_REQUEST["rooms_data"]["max_adults"] = $dbw->row["MAX_ADULTS"];

        $_REQUEST["rooms_data"]["child_max_age"] = $dbw->row["MAX_CHILD_AGE"];
        $_REQUEST["rooms_data"]["child_discount_flag"] = $dbw->row["CHILD_DISCOUNT_FLAG"];
        $_REQUEST["rooms_data"]["child_discount"] = ($dbw->row["CHILD_DISCOUNT"] == 0) ? '' : ifnull($dbw->row["CHILD_DISCOUNT"]);
        $_REQUEST["rooms_data"]["child_max_age2"] = $dbw->row["MAX_CHILD_AGE2"];
        $_REQUEST["rooms_data"]["child_discount_flag2"] = $dbw->row["CHILD_DISCOUNT_FLAG2"];
        $_REQUEST["rooms_data"]["child_discount2"] = ($dbw->row["CHILD_DISCOUNT2"] == 0) ? '' : ifnull($dbw->row["CHILD_DISCOUNT2"]);
        $_REQUEST["rooms_data"]["child_max_age3"] = $dbw->row["MAX_CHILD_AGE3"];
        $_REQUEST["rooms_data"]["child_discount_flag3"] = $dbw->row["CHILD_DISCOUNT_FLAG3"];
        $_REQUEST["rooms_data"]["child_discount3"] = ($dbw->row["CHILD_DISCOUNT3"] == 0) ? '' : ifnull($dbw->row["CHILD_DISCOUNT3"]);
        $_REQUEST["rooms_data"]["child_max_age4"] = $dbw->row["MAX_CHILD_AGE4"];
        $_REQUEST["rooms_data"]["child_discount_flag4"] = $dbw->row["CHILD_DISCOUNT_FLAG4"];
        $_REQUEST["rooms_data"]["child_discount4"] = ($dbw->row["CHILD_DISCOUNT4"] == 0) ? '' : ifnull($dbw->row["CHILD_DISCOUNT4"]);

        $_REQUEST["rooms_data"]["add_child_max_age"] = $dbw->row["ADD_MAX_CHILD_AGE"];
        $_REQUEST["rooms_data"]["add_child_discount_flag"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG"];
        $_REQUEST["rooms_data"]["add_child_discount"] = ($dbw->row["ADD_CHILD_DISCOUNT"] == 0) ? '' : ifnull($dbw->row["ADD_CHILD_DISCOUNT"]);
        $_REQUEST["rooms_data"]["add_child_max_age2"] = $dbw->row["ADD_MAX_CHILD_AGE2"];
        $_REQUEST["rooms_data"]["add_child_discount_flag2"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG2"];
        $_REQUEST["rooms_data"]["add_child_discount2"] = ($dbw->row["ADD_CHILD_DISCOUNT2"] == 0) ? '' : ifnull($dbw->row["ADD_CHILD_DISCOUNT2"]);
        $_REQUEST["rooms_data"]["add_child_max_age3"] = $dbw->row["ADD_MAX_CHILD_AGE3"];
        $_REQUEST["rooms_data"]["add_child_discount_flag3"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG3"];
        $_REQUEST["rooms_data"]["add_child_discount3"] = ($dbw->row["ADD_CHILD_DISCOUNT3"] == 0) ? '' : ifnull($dbw->row["ADD_CHILD_DISCOUNT3"]);
        $_REQUEST["rooms_data"]["add_child_max_age4"] = $dbw->row["ADD_MAX_CHILD_AGE4"];
        $_REQUEST["rooms_data"]["add_child_discount_flag4"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG4"];
        $_REQUEST["rooms_data"]["add_child_discount4"] = ($dbw->row["ADD_CHILD_DISCOUNT4"] == 0) ? '' : ifnull($dbw->row["ADD_CHILD_DISCOUNT4"]);
      }

      $dbw->free_result();

      $_REQUEST["rooms_data"]["services"] = array();

      //fetch attached to rooms services
      $lang_key = $dbw->escape($_SESSION["lang"]);
      $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID
                FROM {$prfx}_HTL_EXTRA_SERVICES
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID)
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_ROOMS ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_ROOMS.SERVICE_ID)
                LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANG_ID)
                WHERE ROOM_ID = $room_id AND LANG_KEY = '$lang_key'
                ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $_REQUEST["rooms_data"]["services"][$dbw->field_by_name("ID")] = 1;
      }

      $dbw->free_result();
    }
   //get  categories
   $this->get_category_list();
   
    // get discount periods
    if(!empty($room_id))
    {
      $query="SELECT TP, TO_DATE, FROM_DATE  
              FROM ${prfx}_HTL_ROOM_DISCOUNT_PERIODS
                    WHERE ROOM_ID = ".$room_id;
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $tmp_date_from = array();
      $tmp_date_to = array();
      while($dbw->fetch_row())
      {
        $tp = $dbw->row["TP"];
        
        if(empty($tmp_date_from[$dbw->row["FROM_DATE"]]) || empty($tmp_date_to[$dbw->row["TO_DATE"]]))
        {
          $_REQUEST["discount_data$tp"]["from_date"][] = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
          $_REQUEST["discount_data$tp"]["to_date"][] = format_date($dbw->row["TO_DATE"], text("DateFormat"));
        }
        $tmp_date_from[$dbw->row["FROM_DATE"]] = true;
        $tmp_date_to[$dbw->row["TO_DATE"]] = true;
      }

      $dbw->free_result();
    }
  }
 /*-----------------------------------------------*/
 function get_room_list_for_filter(&$room_list, &$page_info)
 {
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_id = $dbw->escape($page_info["langid"]);
    
    $query = "SELECT I_NAME, TYPE
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID = $lang_id)
              WHERE ACTIVE = 1
              ORDER BY SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    //$available_dates = array();
    while($dbw->fetch_row())
    {
      $room_list[$dbw->field_by_name("I_NAME")] = $dbw->field_by_name("TYPE");
    }

    return true;    
 } // get_room_list_for_filter  
 //-------------------------------------------------------------
 function get_room_list_for_select(&$room_list)
 {
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT I_NAME
              FROM {$prfx}_HTL_ROOMS
              ORDER BY SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    //$available_dates = array();
    while($dbw->fetch_row())
    {
      $room_list[] = $dbw->field_by_name("I_NAME");
    }

    return true;    
 } // get_room_list_for_select  
 //-------------------------------------------------------------
 function get_category_list()
 {
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_list=array_flip(hotel::$lang_list);
    $lang_list_hotel = $this->get_lang_list_hotel("_HTL_ROOMS_PROPS");

    if(!empty($lang_list[$_SESSION["lang"]]))
    {
      $LANG_ID = $lang_list[$_SESSION["lang"]];
    }
    else
    {
      foreach($lang_list_hotel as $lang_hotel_id)
      {
        if(!empty(hotel::$lang_list[$lang_hotel_id]))
      {
          $LANG_ID = $lang_hotel_id;
          break;
        }
      }
    }

    $query="SELECT DISTINCT CATEGORY, LANGUAGE_ID  FROM ${prfx}_HTL_ROOMS_PROPS";
    //$this->db_data_to_array($query, "", hotel::$data["CATEGORY"]);
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      hotel::$data["CATEGORY"][$dbw->row["LANGUAGE_ID"]][]=$dbw->row["CATEGORY"];

    }


 }
/*-----------------------------------------------*/
  function check_room_count($room_id, $room_count)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(empty($room_id)) return true;

    if(empty($room_count)) $room_count = 0;

    $room_id = $dbw->escape($room_id);

    $now = mktime(00,00,00,date("m"), date("d"), date("Y"));
    $now = $dbw->format_datetime($now);

    $query = "SELECT ARRIVE_DATE, DEPARTURE_DATE, COUNT(*) CNT FROM
              {$prfx}_HTL_ORDER
              INNER JOIN ${prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = ${prfx}_HTL_ORDER_PROP.ORDER_ID)
              WHERE ROOM_ID = $room_id AND
              DEPARTURE_DATE >= '$now'
              AND (CONFIRMED IS NULL OR CONFIRMED NOT IN (2, 3))
              GROUP BY ARRIVE_DATE, DEPARTURE_DATE
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dates = array();

    while($dbw->fetch_row())
    {
      $arrive_time = strtotime($dbw->field_by_name("ARRIVE_DATE"));
      $departure_time = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

      for($i = $arrive_time; $i < $departure_time; $i = $i+86400)
      {
        if(empty($dates[date('Y-m-d', $i)])) $dates[date('Y-m-d', $i)] = 0;

        $dates[date('Y-m-d', $i)] += $dbw->field_by_name("CNT");
      }
    }

    $dbw->free_result();

    $err_dates = "";

    foreach($dates as $dt => $cnt)
    {
      if($cnt <= $room_count) continue;

      $err_dates .= date(text("DateFormat"), strtotime($dt)) . " - " . $cnt . " " . text("Rooms") . "<br>";
    }

    if(!empty($err_dates))
    {
      $ERROR = sprintf(text("ErrRoomCountToLow"), $room_count) . "<br><br>" . $err_dates;

      return false;
    }

    return true;
  }
/*-----------------------------------------------*/
  function check_allowed_room_count()
  {
    /*
    now for all
    if(empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking_le"]) &&
       empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"])
      ) return true;
    */
    
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $xmldoc = new DOMDocument();

    $rooms = 15;
    $categories = 3;

    $file = app_path() . "modules/hotel/include/tpl/layout.xml";
    if(file_exists( $file) && @$xmldoc->load($file))
    {
      $xsdpath = new DOMXPath($xmldoc);

      $nodes = $xsdpath->evaluate("/info/param1");
      if($nodes->length > 0)
      {
        $categories = $nodes->item(0)->nodeValue;
      }

      $nodes = $xsdpath->evaluate("/info/param2");
      if($nodes->length > 0)
      {
        $rooms = $nodes->item(0)->nodeValue;
      }
    }

    if(empty($rooms) || !is_numeric($rooms)) $rooms = 15;
    if(empty($categories) || !is_numeric($categories)) $categories = 3;

    // checking

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $iname = $dbw->escape($_REQUEST["rooms_data"]["internal_name"]);

    $room_count = 0;

    $query="SELECT SUM(ROOMS_COUNT) SM FROM ${prfx}_HTL_ROOMS";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $room_count = $dbw->field_by_name("SM");
    }

    $dbw->free_result();

    if($room_count > $rooms)
    {
      $ERROR = sprintf(text("ErrIBookingRestriction"), $rooms, $categories);
      return false;
    }

    $query="SELECT MAX(CNT) CNT FROM
            (SELECT LANGUAGE_ID, COUNT(DISTINCT CATEGORY) CNT
            FROM ${prfx}_HTL_ROOMS_PROPS GROUP BY LANGUAGE_ID) CATS";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $cnt = 0;

    while($dbw->fetch_row())
    {
      $cnt = $dbw->field_by_name("CNT");
    }

    $dbw->free_result();

    if(!empty($cnt) && is_numeric($cnt) && $cnt > $categories)
    {
      $ERROR = sprintf(text("ErrIBookingRestriction"), $rooms, $categories);
      return false;
    }

    return true;
  } // check_allowed_room_count
/*-----------------------------------------------*/
  function save_room_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    $EVENT="";
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

     // CHECK DATA
    if(!$this->check_field_rooms("internal_name")) return false;
    if(!$this->check_field_rooms("count")) return false;
    if(!$this->check_field_rooms("rooms_data")) return false;

    //ext hotel module
    if($this->extended_module())
    {
      if(!$this->check_field_rooms("min_persons")) return false;
      if(!$this->check_field_rooms("max_persons")) return false;
      if(!$this->check_field_rooms("max_adults")) return false;
    }

    if(!$this->check_allowed_room_count()) return false;

    if(!$this->check_room_count($_REQUEST["room_id"], $_REQUEST["rooms_data"]["count"])) return false;

    // START TRANSACTION
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

   //SAVE ROOM
    $ROOM_COUNT=$_REQUEST["rooms_data"]["count"];

    if(!empty($_REQUEST["room_id"]))
    {
      $ROOM_ID = $_REQUEST["room_id"];
      $EVENT="update";
    }
    else
    {
      $ROOM_ID = 0;
      $EVENT="create";
    }

    if(!empty($_REQUEST["rooms_data"]["page"]))
      $PAGE = $_REQUEST["rooms_data"]["page"];
    else
      $PAGE = "";

    $I_NAME = $_REQUEST["rooms_data"]["internal_name"];
    $ROOM_COUNT = null_if_empty($ROOM_COUNT);
    //fields for extended hotel module
    $min_persons = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["min_persons"]));
    $max_persons = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["max_persons"]));
    $standard_alloacation = $dbw->escape($_REQUEST["rooms_data"]["standard_allocation"]);
    $with_children = (empty($_REQUEST["rooms_data"]["with_children"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["with_children"]);
    $pricing_type = $dbw->escape($_REQUEST["rooms_data"]["pricing_type"]);
    //$discount_type = (!empty($_REQUEST["rooms_data"]["discount_type"])) ? 2 : 0;
    $discount_flag = $dbw->escape($_REQUEST["rooms_data"]["discount_flag"]);
    $discount = (empty($_REQUEST["rooms_data"]["discount"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["discount"]);

    if($standard_alloacation == 1 || $standard_alloacation == 3 || $standard_alloacation == 4)
    {
      $discount = null_if_empty("");
      $discount_flag = null_if_empty("");
    }

    $max_adults = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["max_adults"]));

    $partner_display_if_empty = empty($_REQUEST["rooms_data"]["partner_display_if_empty"]) ? "0" : "1";
    $partner_display_if_lower = $dbw->escape($_REQUEST["rooms_data"]["partner_display_if_lower"]);
    if(empty($partner_display_if_lower) || !is_numeric($partner_display_if_lower)) $partner_display_if_lower = 1;
    
    $child_discount_flag = $dbw->escape($_REQUEST["rooms_data"]["child_discount_flag"]);
    $child_discount = (empty($_REQUEST["rooms_data"]["child_discount"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["child_discount"]);
    $max_child_age = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["child_max_age"]));

    $child_discount_flag2 = $dbw->escape($_REQUEST["rooms_data"]["child_discount_flag2"]);
    $child_discount2 = (empty($_REQUEST["rooms_data"]["child_discount2"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["child_discount2"]);
    $max_child_age2 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["child_max_age2"]));

    $child_discount_flag3 = $dbw->escape($_REQUEST["rooms_data"]["child_discount_flag3"]);
    $child_discount3 = (empty($_REQUEST["rooms_data"]["child_discount3"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["child_discount3"]);
    $max_child_age3 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["child_max_age3"]));

    $child_discount_flag4 = $dbw->escape($_REQUEST["rooms_data"]["child_discount_flag4"]);
    $child_discount4 = (empty($_REQUEST["rooms_data"]["child_discount4"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["child_discount4"]);
    $max_child_age4 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["child_max_age4"]));

    $add_child_discount_flag = $dbw->escape($_REQUEST["rooms_data"]["add_child_discount_flag"]);
    $add_child_discount = (empty($_REQUEST["rooms_data"]["add_child_discount"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["add_child_discount"]);
    $add_max_child_age = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["add_child_max_age"]));

    $add_child_discount_flag2 = $dbw->escape($_REQUEST["rooms_data"]["add_child_discount_flag2"]);
    $add_child_discount2 = (empty($_REQUEST["rooms_data"]["add_child_discount2"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["add_child_discount2"]);
    $add_max_child_age2 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["add_child_max_age2"]));

    $add_child_discount_flag3 = $dbw->escape($_REQUEST["rooms_data"]["add_child_discount_flag3"]);
    $add_child_discount3 = (empty($_REQUEST["rooms_data"]["add_child_discount3"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["add_child_discount3"]);
    $add_max_child_age3 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["add_child_max_age3"]));

    $add_child_discount_flag4 = $dbw->escape($_REQUEST["rooms_data"]["add_child_discount_flag4"]);
    $add_child_discount4 = (empty($_REQUEST["rooms_data"]["add_child_discount4"])) ? 0 : $dbw->escape($_REQUEST["rooms_data"]["add_child_discount4"]);
    $add_max_child_age4 = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["add_child_max_age4"]));

    if($with_children == 0)
    {
      $child_discount = null_if_empty("");
      $child_discount_flag = null_if_empty("");
      $max_child_age = 0;

      $child_discount2 = null_if_empty("");
      $child_discount_flag2 = null_if_empty("");
      $max_child_age2 = 0;

      $child_discount3 = null_if_empty("");
      $child_discount_flag3 = null_if_empty("");
      $max_child_age3 = 0;

      $child_discount4 = null_if_empty("");
      $child_discount_flag4 = null_if_empty("");
      $max_child_age4 = 0;

      $add_child_discount = null_if_empty("");
      $add_child_discount_flag = null_if_empty("");
      $add_max_child_age = 0;

      $add_child_discount2 = null_if_empty("");
      $add_child_discount_flag2 = null_if_empty("");
      $add_max_child_age2 = 0;

      $add_child_discount3 = null_if_empty("");
      $add_child_discount_flag3 = null_if_empty("");
      $add_max_child_age3 = 0;

      $add_child_discount4 = null_if_empty("");
      $add_child_discount_flag4 = null_if_empty("");
      $add_max_child_age4 = 0;
    }
    
    //-------------------------------------------
    $early_book_days1 = "";
    if(!empty($_REQUEST["rooms_data"]["early_book_days1"]) && is_numeric($_REQUEST["rooms_data"]["early_book_days1"]))
    {
      $early_book_days1 = (int)$_REQUEST["rooms_data"]["early_book_days1"];
    }
    if($early_book_days1 === "") $early_book_days1 = "NULL";
    
    $early_book_discount1 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["early_book_discount1"]));
    if(empty($early_book_discount1) || !is_numeric($early_book_discount1)) $early_book_discount1 = "NULL";

    $early_book_days2 = "";
    if(!empty($_REQUEST["rooms_data"]["early_book_days2"]) && is_numeric($_REQUEST["rooms_data"]["early_book_days2"]))
    {
      $early_book_days2 = (int)$_REQUEST["rooms_data"]["early_book_days2"];
    }
    if($early_book_days2 === "") $early_book_days2 = "NULL";
    
    $early_book_discount2 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["early_book_discount2"]));
    if(empty($early_book_discount2) || !is_numeric($early_book_discount2)) $early_book_discount2 = "NULL";

    $early_book_days3 = "";
    if(!empty($_REQUEST["rooms_data"]["early_book_days3"]) && is_numeric($_REQUEST["rooms_data"]["early_book_days3"]))
    {
      $early_book_days3 = (int)$_REQUEST["rooms_data"]["early_book_days3"];
    }
    if($early_book_days3 === "") $early_book_days3 = "NULL";
    
    $early_book_discount3 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["early_book_discount3"]));
    if(empty($early_book_discount3) || !is_numeric($early_book_discount3)) $early_book_discount3 = "NULL";

    $early_book_days4 = "";
    if(!empty($_REQUEST["rooms_data"]["early_book_days4"]) && is_numeric($_REQUEST["rooms_data"]["early_book_days4"]))
    {
      $early_book_days4 = (int)$_REQUEST["rooms_data"]["early_book_days4"];
    }
    if($early_book_days4 === "") $early_book_days4 = "NULL";
    
    $early_book_discount4 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["early_book_discount4"]));
    if(empty($early_book_discount4) || !is_numeric($early_book_discount4)) $early_book_discount4 = "NULL";
    
    $early_book_days5 = "";
    if(!empty($_REQUEST["rooms_data"]["early_book_days5"]) && is_numeric($_REQUEST["rooms_data"]["early_book_days5"]))
    {
      $early_book_days5 = (int)$_REQUEST["rooms_data"]["early_book_days5"];
    }
    if($early_book_days5 === "") $early_book_days5 = "NULL";
    
    $early_book_discount5 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["early_book_discount5"]));
    if(empty($early_book_discount5) || !is_numeric($early_book_discount5)) $early_book_discount5 = "NULL";
    //-------------------------------------------
    $lminute_book_days1 = "";
    if(!empty($_REQUEST["rooms_data"]["lminute_book_days1"]) && is_numeric($_REQUEST["rooms_data"]["lminute_book_days1"]))
    {
      $lminute_book_days1 = (int)$_REQUEST["rooms_data"]["lminute_book_days1"];
    }
    if($lminute_book_days1 === "") $lminute_book_days1 = "NULL";
    
    $lminute_book_discount1 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["lminute_book_discount1"]));
    if(empty($lminute_book_discount1) || !is_numeric($lminute_book_discount1)) $lminute_book_discount1 = "NULL";

    $lminute_book_days2 = "";
    if(!empty($_REQUEST["rooms_data"]["lminute_book_days2"]) && is_numeric($_REQUEST["rooms_data"]["lminute_book_days2"]))
    {
      $lminute_book_days2 = (int)$_REQUEST["rooms_data"]["lminute_book_days2"];
    }
    if($lminute_book_days2 === "") $lminute_book_days2 = "NULL";
    
    $lminute_book_discount2 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["lminute_book_discount2"]));
    if(empty($lminute_book_discount2) || !is_numeric($lminute_book_discount2)) $lminute_book_discount2 = "NULL";

    $lminute_book_days3 = "";
    if(!empty($_REQUEST["rooms_data"]["lminute_book_days3"]) && is_numeric($_REQUEST["rooms_data"]["lminute_book_days3"]))
    {
      $lminute_book_days3 = (int)$_REQUEST["rooms_data"]["lminute_book_days3"];
    }
    if($lminute_book_days3 === "") $lminute_book_days3 = "NULL";
    
    $lminute_book_discount3 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["lminute_book_discount3"]));
    if(empty($lminute_book_discount3) || !is_numeric($lminute_book_discount3)) $lminute_book_discount3 = "NULL";

    $lminute_book_days4 = "";
    if(!empty($_REQUEST["rooms_data"]["lminute_book_days4"]) && is_numeric($_REQUEST["rooms_data"]["lminute_book_days4"]))
    {
      $lminute_book_days4 = (int)$_REQUEST["rooms_data"]["lminute_book_days4"];
    }
    if($lminute_book_days4 === "") $lminute_book_days4 = "NULL";
    
    $lminute_book_discount4 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["lminute_book_discount4"]));
    if(empty($lminute_book_discount4) || !is_numeric($lminute_book_discount4)) $lminute_book_discount4 = "NULL";

    $lminute_book_days5 = "";
    if(!empty($_REQUEST["rooms_data"]["lminute_book_days5"]) && is_numeric($_REQUEST["rooms_data"]["lminute_book_days5"]))
    {
      $lminute_book_days5 = (int)$_REQUEST["rooms_data"]["lminute_book_days5"];
    }
    if($lminute_book_days5 === "") $lminute_book_days5 = "NULL";
    
    $lminute_book_discount5 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["lminute_book_discount5"]));
    if(empty($lminute_book_discount5) || !is_numeric($lminute_book_discount5)) $lminute_book_discount5 = "NULL";
    //-------------------------------------------
    $longstay_book_days1 = "";
    if(!empty($_REQUEST["rooms_data"]["longstay_book_days1"]) && is_numeric($_REQUEST["rooms_data"]["longstay_book_days1"]))
    {
      $longstay_book_days1 = (int)$_REQUEST["rooms_data"]["longstay_book_days1"];
    }
    if($longstay_book_days1 === "") $longstay_book_days1 = "NULL";
    
    $longstay_book_discount1 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["longstay_book_discount1"]));
    if(empty($longstay_book_discount1) || !is_numeric($longstay_book_discount1)) $longstay_book_discount1 = "NULL";

    $longstay_book_days2 = "";
    if(!empty($_REQUEST["rooms_data"]["longstay_book_days2"]) && is_numeric($_REQUEST["rooms_data"]["longstay_book_days2"]))
    {
      $longstay_book_days2 = (int)$_REQUEST["rooms_data"]["longstay_book_days2"];
    }
    if($longstay_book_days2 === "") $longstay_book_days2 = "NULL";
    
    $longstay_book_discount2 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["longstay_book_discount2"]));
    if(empty($longstay_book_discount2) || !is_numeric($longstay_book_discount2)) $longstay_book_discount2 = "NULL";

    $longstay_book_days3 = "";
    if(!empty($_REQUEST["rooms_data"]["longstay_book_days3"]) && is_numeric($_REQUEST["rooms_data"]["longstay_book_days3"]))
    {
      $longstay_book_days3 = (int)$_REQUEST["rooms_data"]["longstay_book_days3"];
    }
    if($longstay_book_days3 === "") $longstay_book_days3 = "NULL";
    
    $longstay_book_discount3 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["longstay_book_discount3"]));
    if(empty($longstay_book_discount3) || !is_numeric($longstay_book_discount3)) $longstay_book_discount3 = "NULL";

    $longstay_book_days4 = "";
    if(!empty($_REQUEST["rooms_data"]["longstay_book_days4"]) && is_numeric($_REQUEST["rooms_data"]["longstay_book_days4"]))
    {
      $longstay_book_days4 = (int)$_REQUEST["rooms_data"]["longstay_book_days4"];
    }
    if($longstay_book_days4 === "") $longstay_book_days4 = "NULL";
    
    $longstay_book_discount4 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["longstay_book_discount4"]));
    if(empty($longstay_book_discount4) || !is_numeric($longstay_book_discount4)) $longstay_book_discount4 = "NULL";

    $longstay_book_days5 = "";
    if(!empty($_REQUEST["rooms_data"]["longstay_book_days5"]) && is_numeric($_REQUEST["rooms_data"]["longstay_book_days5"]))
    {
      $longstay_book_days5 = (int)$_REQUEST["rooms_data"]["longstay_book_days5"];
    }
    if($longstay_book_days5 === "") $longstay_book_days5 = "NULL";
    
    $longstay_book_discount5 = str_replace(",", ".", ifnull($_REQUEST["rooms_data"]["longstay_book_discount5"]));
    if(empty($longstay_book_discount5) || !is_numeric($longstay_book_discount5)) $longstay_book_discount5 = "NULL";
    //-------------------------------------------

    $ROOM_SORT_ORDER = $dbw->escape($_REQUEST["rooms_data"]["room_sort_order"]);
    if(empty($ROOM_SORT_ORDER) || !is_numeric($ROOM_SORT_ORDER)) $ROOM_SORT_ORDER = 0;

    $room_code = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["room_code"]));
    $room_type = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["room_type"]));

    $room_ta_code = null_if_empty($dbw->escape(ifnull($_REQUEST["rooms_data"]["room_ta_code"])));
    $room_tvg_code = null_if_empty($dbw->escape(ifnull($_REQUEST["rooms_data"]["room_tvg_code"])));
    
    $htspider_instance = $dbw->escape(ifnull($_REQUEST["rooms_data"]["htspider_instance"]));
    if(empty($htspider_instance) || !is_numeric($htspider_instance)) $htspider_instance = 1;    

    $show_price_per_person = empty($_REQUEST["rooms_data"]["show_price_per_person"]) ? "0" : "1";
    $ignore_prices_below_min = empty($_REQUEST["rooms_data"]["ignore_prices_below_min"]) ? "0" : "1";

    if($ROOM_ID == 0)
    {
      $query = "INSERT INTO {$prfx}_HTL_ROOMS
               (I_NAME, ROOMS_COUNT, SHOW_PRICE_PER_PERSON, IGNORE_PRICES_BELOW_MIN, MIN_PERSONS, MAX_PERSONS, ROOM_CODE, ROOM_TA_CODE, ROOM_TVG_CODE, HTSPIDER_INSTANCE, ROOM_TYPE, STANDARD_ALLOCATION, WITH_CHILDREN,
               PRICING_TYPE, DISCOUNT_FLAG, DISCOUNT, SORT_ORDER, PAGE,
               MAX_ADULTS,
               CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, MAX_CHILD_AGE,
               CHILD_DISCOUNT_FLAG2, CHILD_DISCOUNT2, MAX_CHILD_AGE2,
               CHILD_DISCOUNT_FLAG3, CHILD_DISCOUNT3, MAX_CHILD_AGE3,
               CHILD_DISCOUNT_FLAG4, CHILD_DISCOUNT4, MAX_CHILD_AGE4,
               ADD_CHILD_DISCOUNT_FLAG, ADD_CHILD_DISCOUNT, ADD_MAX_CHILD_AGE,
               ADD_CHILD_DISCOUNT_FLAG2, ADD_CHILD_DISCOUNT2, ADD_MAX_CHILD_AGE2,
               ADD_CHILD_DISCOUNT_FLAG3, ADD_CHILD_DISCOUNT3, ADD_MAX_CHILD_AGE3,
               ADD_CHILD_DISCOUNT_FLAG4, ADD_CHILD_DISCOUNT4, ADD_MAX_CHILD_AGE4,
               SHOW_PARTNER_IF_EMPTY,
               SHOW_PARTNER_IF_LOWER,
               
               EARLY_BOOK_DAYS1,
               EARLY_BOOK_DISCOUNT1,
               EARLY_BOOK_DAYS2,
               EARLY_BOOK_DISCOUNT2,
               EARLY_BOOK_DAYS3,
               EARLY_BOOK_DISCOUNT3,
               EARLY_BOOK_DAYS4,
               EARLY_BOOK_DISCOUNT4,
               EARLY_BOOK_DAYS5,
               EARLY_BOOK_DISCOUNT5,
               
               LMINUTE_BOOK_DAYS1,
               LMINUTE_BOOK_DISCOUNT1,
               LMINUTE_BOOK_DAYS2,
               LMINUTE_BOOK_DISCOUNT2,
               LMINUTE_BOOK_DAYS3,
               LMINUTE_BOOK_DISCOUNT3,
               LMINUTE_BOOK_DAYS4,
               LMINUTE_BOOK_DISCOUNT4,
               LMINUTE_BOOK_DAYS5,
               LMINUTE_BOOK_DISCOUNT5,
               
               LONGSTAY_BOOK_DAYS1,
               LONGSTAY_BOOK_DISCOUNT1,
               LONGSTAY_BOOK_DAYS2,
               LONGSTAY_BOOK_DISCOUNT2,
               LONGSTAY_BOOK_DAYS3,
               LONGSTAY_BOOK_DISCOUNT3,
               LONGSTAY_BOOK_DAYS4,
               LONGSTAY_BOOK_DISCOUNT4,
               LONGSTAY_BOOK_DAYS5,
               LONGSTAY_BOOK_DISCOUNT5               
               )
               VALUES
               ('$I_NAME', $ROOM_COUNT, '$show_price_per_person', '$ignore_prices_below_min', $min_persons, $max_persons, $room_code, $room_ta_code, $room_tvg_code, $htspider_instance, $room_type,
               $standard_alloacation, $with_children,
               $pricing_type, $discount_flag, $discount, $ROOM_SORT_ORDER, '$PAGE',
               $max_adults,
               $child_discount_flag, $child_discount, $max_child_age,
               $child_discount_flag2, $child_discount2, $max_child_age2,
               $child_discount_flag3, $child_discount3, $max_child_age3,
               $child_discount_flag4, $child_discount4, $max_child_age4,
               $add_child_discount_flag, $add_child_discount, $add_max_child_age,
               $add_child_discount_flag2, $add_child_discount2, $add_max_child_age2,
               $add_child_discount_flag3, $add_child_discount3, $add_max_child_age3,
               $add_child_discount_flag4, $add_child_discount4, $add_max_child_age4,
               $partner_display_if_empty,
               $partner_display_if_lower,
               
               $early_book_days1,
               $early_book_discount1,
               $early_book_days2,
               $early_book_discount2,
               $early_book_days3,
               $early_book_discount3,
               $early_book_days4,
               $early_book_discount4,
               $early_book_days5,
               $early_book_discount5,
               
               $lminute_book_days1,
               $lminute_book_discount1,
               $lminute_book_days2,
               $lminute_book_discount2,
               $lminute_book_days3,
               $lminute_book_discount3,
               $lminute_book_days4,
               $lminute_book_discount4,
               $lminute_book_days5,
               $lminute_book_discount5,
               
               $longstay_book_days1,
               $longstay_book_discount1,
               $longstay_book_days2,
               $longstay_book_discount2,
               $longstay_book_days3,
               $longstay_book_discount3,
               $longstay_book_days4,
               $longstay_book_discount4,
               $longstay_book_days5,
               $longstay_book_discount5
               )";
    }
    else
    {
      $query = "UPDATE {$prfx}_HTL_ROOMS SET
               I_NAME = '$I_NAME',
               ROOMS_COUNT = $ROOM_COUNT,
               SHOW_PRICE_PER_PERSON = '$show_price_per_person',
               IGNORE_PRICES_BELOW_MIN = '$ignore_prices_below_min',
               MIN_PERSONS = $min_persons,
               MAX_PERSONS = $max_persons,
               ROOM_CODE = $room_code,
               ROOM_TA_CODE = $room_ta_code,
               ROOM_TVG_CODE = $room_tvg_code,
               HTSPIDER_INSTANCE = $htspider_instance,
               ROOM_TYPE = $room_type,
               STANDARD_ALLOCATION = $standard_alloacation,
               WITH_CHILDREN = $with_children,
               PRICING_TYPE = $pricing_type,
               DISCOUNT_FLAG = $discount_flag,
               DISCOUNT = $discount,

               MAX_ADULTS = $max_adults,

               CHILD_DISCOUNT_FLAG = $child_discount_flag,
               CHILD_DISCOUNT = $child_discount,
               MAX_CHILD_AGE = $max_child_age,

               CHILD_DISCOUNT_FLAG2 = $child_discount_flag2,
               CHILD_DISCOUNT2 = $child_discount2,
               MAX_CHILD_AGE2 = $max_child_age2,

               CHILD_DISCOUNT_FLAG3 = $child_discount_flag3,
               CHILD_DISCOUNT3 = $child_discount3,
               MAX_CHILD_AGE3 = $max_child_age3,

               CHILD_DISCOUNT_FLAG4 = $child_discount_flag4,
               CHILD_DISCOUNT4 = $child_discount4,
               MAX_CHILD_AGE4 = $max_child_age4,

               ADD_CHILD_DISCOUNT_FLAG = $add_child_discount_flag,
               ADD_CHILD_DISCOUNT = $add_child_discount,
               ADD_MAX_CHILD_AGE = $add_max_child_age,

               ADD_CHILD_DISCOUNT_FLAG2 = $add_child_discount_flag2,
               ADD_CHILD_DISCOUNT2 = $add_child_discount2,
               ADD_MAX_CHILD_AGE2 = $add_max_child_age2,

               ADD_CHILD_DISCOUNT_FLAG3 = $add_child_discount_flag3,
               ADD_CHILD_DISCOUNT3 = $add_child_discount3,
               ADD_MAX_CHILD_AGE3 = $add_max_child_age3,

               ADD_CHILD_DISCOUNT_FLAG4 = $add_child_discount_flag4,
               ADD_CHILD_DISCOUNT4 = $add_child_discount4,
               ADD_MAX_CHILD_AGE4 = $add_max_child_age4,

               SORT_ORDER = $ROOM_SORT_ORDER,
               PAGE = '$PAGE',
               
               SHOW_PARTNER_IF_EMPTY = '$partner_display_if_empty',
               SHOW_PARTNER_IF_LOWER = $partner_display_if_lower,
               
               EARLY_BOOK_DAYS1 = $early_book_days1,
               EARLY_BOOK_DISCOUNT1 = $early_book_discount1,
               EARLY_BOOK_DAYS2 = $early_book_days2,
               EARLY_BOOK_DISCOUNT2 = $early_book_discount2,
               EARLY_BOOK_DAYS3 = $early_book_days3,
               EARLY_BOOK_DISCOUNT3 = $early_book_discount3,
               EARLY_BOOK_DAYS4 = $early_book_days4,
               EARLY_BOOK_DISCOUNT4 = $early_book_discount4,
               EARLY_BOOK_DAYS5 = $early_book_days5,
               EARLY_BOOK_DISCOUNT5 = $early_book_discount5,
               
               LMINUTE_BOOK_DAYS1 = $lminute_book_days1,
               LMINUTE_BOOK_DISCOUNT1 = $lminute_book_discount1,
               LMINUTE_BOOK_DAYS2 = $lminute_book_days2,
               LMINUTE_BOOK_DISCOUNT2 = $lminute_book_discount2,
               LMINUTE_BOOK_DAYS3 = $lminute_book_days3,
               LMINUTE_BOOK_DISCOUNT3 = $lminute_book_discount3,
               LMINUTE_BOOK_DAYS4 = $lminute_book_days4,
               LMINUTE_BOOK_DISCOUNT4 = $lminute_book_discount4,
               LMINUTE_BOOK_DAYS5 = $lminute_book_days5,
               LMINUTE_BOOK_DISCOUNT5 = $lminute_book_discount5,
               
               LONGSTAY_BOOK_DAYS1 = $longstay_book_days1,
               LONGSTAY_BOOK_DISCOUNT1 = $longstay_book_discount1,
               LONGSTAY_BOOK_DAYS2 = $longstay_book_days2,
               LONGSTAY_BOOK_DISCOUNT2 = $longstay_book_discount2,
               LONGSTAY_BOOK_DAYS3 = $longstay_book_days3,
               LONGSTAY_BOOK_DISCOUNT3 = $longstay_book_discount3,
               LONGSTAY_BOOK_DAYS4 = $longstay_book_days4,
               LONGSTAY_BOOK_DISCOUNT4 = $longstay_book_discount4,
               LONGSTAY_BOOK_DAYS5 = $longstay_book_days5,
               LONGSTAY_BOOK_DISCOUNT5 = $longstay_book_discount5
               
               WHERE ID = $ROOM_ID";
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($ROOM_ID == 0)
      $ROOM_ID = $dbw->insert_id();

   // SAVE PROPS
    foreach($_REQUEST["rooms_data"]["type"] as $lang_id => $value)
    {
      $ROOM_TYPE = $dbw->escape(magic_quotes_from_req($value));
      $ROOM_CATEGORY = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["category"][$lang_id]));
      $YOUTUBE_CODE = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["youtube_code"][$lang_id]));
      $ROOM_URL = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["room_url"][$lang_id]));
      $ROOM_DESCRIPTION = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["description"][$lang_id]));
      $STD_TARIF_CAPTION = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["std_tarif_caption"][$lang_id]));
      $ROOM_YOUTUBE = $dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["category"][$lang_id]));
      $ACTIVE = !empty($_REQUEST["rooms_data"]["checkbox"][$lang_id]) ? 1 : 0;

      if(!empty($_REQUEST["rooms_data"]["room_url"][$lang_id]) &&
         !preg_match("/^https?:\\/\\/.*/", $_REQUEST["rooms_data"]["room_url"][$lang_id]))
      {
        $ERROR = text("HotelURLIncomplete");
        $dbw->rollback_transaction();
        return false;
      }
      
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_ROOMS_PROPS WHERE TYPE = '$ROOM_TYPE' AND CATEGORY = '$ROOM_CATEGORY' AND LANGUAGE_ID = $lang_id AND ROOM_ID != $ROOM_ID AND ACTIVE = 1";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
        $ERROR=text("ErrRoomDuplicate");
        $dbw->rollback_transaction();
        return false;
      }
      $dbw->free_result();

      $query = $this->save_rooms_props_procedure($prfx, "$ROOM_ID, '$ROOM_TYPE', '$ROOM_CATEGORY','$ROOM_DESCRIPTION', $lang_id, '$ACTIVE', '$YOUTUBE_CODE', '$ROOM_URL', '$STD_TARIF_CAPTION'");
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $c = 5;
      for($i = 1; $i <= 5; $i++)
      {
        $partner_name = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["rooms_data"]["partner_name$i"][$lang_id])));
        $partner_url = null_if_empty($dbw->escape($_REQUEST["rooms_data"]["partner_url$i"][$lang_id]));
        
        $query="UPDATE ${prfx}_HTL_ROOMS_PROPS SET 
                PARTNER_NAME$i = $partner_name,
                PARTNER_URL$i = $partner_url
                WHERE LANGUAGE_ID = $lang_id AND ROOM_ID = $ROOM_ID";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }
    
    if(!empty($_REQUEST["rooms_data"]["create_page"]))
    {
      if(!$this->create_room_booking_page($dbw, $prfx))
      {
        $dbw->rollback_transaction();
        return false;
      }
    }

    // save periods
    $query="DELETE FROM ${prfx}_HTL_ROOM_DISCOUNT_PERIODS WHERE ROOM_ID = $ROOM_ID";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    /*
    for($tp = 1; $tp <= 3; $tp++)
    {
      foreach($_REQUEST["discount_data$tp"]["from_date"] as $key=>$seasons_date)
      {
        $FROM_DATE = $seasons_date;
        $TO_DATE = $_REQUEST["discount_data$tp"]["to_date"][$key];
        
        if(empty($FROM_DATE) || empty($TO_DATE)) continue;
        
        if(!empty($FROM_DATE))
          $FROM_DATE = $dbw->format_datetime(strtotime(date("Ymd 00:00:00", strtotime($FROM_DATE))));
        if(!empty($TO_DATE))
        $TO_DATE = $dbw->format_datetime(strtotime(date("Ymd 23:59:59", strtotime($TO_DATE))));
        $query="INSERT INTO ${prfx}_HTL_ROOM_DISCOUNT_PERIODS (ROOM_ID, FROM_DATE, TO_DATE, TP) VALUES ($ROOM_ID, '$FROM_DATE', '$TO_DATE', '$tp')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }
    */
    
    $now = mktime(00,00,00,date("m"), date("d"), date("Y"));
    $now = $dbw->format_datetime($now);
    // adjust room count
    $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET ROOM_COUNT = $ROOM_COUNT
              WHERE ROOM_ID = $ROOM_ID AND ROOM_COUNT > $ROOM_COUNT
              AND DATE >= '$now'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }//if


    //save service references
      //first of all delete all rows that related with this room
      $query = "DELETE FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS WHERE ROOM_ID = $ROOM_ID AND SERVICE_ID NOT IN (SELECT ID FROM {$prfx}_HTL_EXTRA_SERVICES WHERE CALCULATE_TYPE = 4)";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }//if

      if(!empty($_REQUEST["rooms_data"]["services"]))
      {
        //resave room references
        foreach($_REQUEST["rooms_data"]["services"] as $service_id => $service)
        {
          $query = "INSERT INTO {$prfx}_HTL_EXTRA_SERVICES_ROOMS (SERVICE_ID, ROOM_ID) VALUES ($service_id, $ROOM_ID)";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }//if
        }//foreach
      }//if

    //COMMIT
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    //resave all seasons
    if(!$this->external_manager_active())
    {
      $this->seasons_resave();
    }

    if(!empty($_FILES["upload_pic"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic"], $ROOM_ID, ""))
      {
        return false;
      }
    }

    if(!empty($_FILES["upload_pic2"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic2"], $ROOM_ID, ""))
      {
        return false;
      }
    }

    if(!empty($_FILES["upload_pic3"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic3"], $ROOM_ID, ""))
      {
        return false;
      }
    }

    if(!reqvar_empty("delete_pictures") &&
       !empty($_REQUEST["del_hotel_thumb"])
      )
    {
      if(!$this->delete_images($_REQUEST["del_hotel_thumb"], $ROOM_ID, ""))
      {
        return false;
      }
    }

    $INFO_MESSAGE = text("MsgDataSaved");
    $_REQUEST["room_id"] = $ROOM_ID;

    //SAVE ROOM TO ROOM_ORDER FORM - START
    $this -> save_rooms_to_order_form();
    //SAVE ROOM TO ROOM_ORDER FORM - END

    if($EVENT == "update")
      GetEvent()->log_event("MsgRoomUpdated", array("%room%" => $I_NAME));
    else if($EVENT =="create")
      GetEvent()->log_event("MsgRoomCreated", array("%room%" => $I_NAME));

    return true;
  }
/*-----------------------------------------------*/

private function seasons_resave()
{
  global $ERROR;
  global $ERR_DETAILS;

  $dbw = GetDBWorker();
  $prfx = $dbw->escape(GetConnection()->get_current_prefix());

  // START TRANSACTION
  if(!$dbw->start_transaction())
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }

  //prepare data
  $query = "SELECT ID FROM {$prfx}_HTL_PRICELIST WHERE TYPE <> '2'";
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }//if

  $pricelists = array();

  while($dbw->fetch_row())
  {

    $pricelists[$dbw->field_by_name("ID")] = $dbw->field_by_name("ID");
  }

  $dbw->free_result();

  $query = "SELECT ID FROM {$prfx}_HTL_ROOMS";
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }//if

  $rooms = array();

  while($dbw->fetch_row())
  {

    $rooms[$dbw->field_by_name("ID")] = $dbw->field_by_name("ID");
  }

  $dbw->free_result();

  $query = "SELECT ID FROM {$prfx}_HTL_SEASON";
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }//if

  $seasons = array();

  while($dbw->fetch_row())
  {

    $seasons[$dbw->field_by_name("ID")] = $dbw->field_by_name("ID");
  }

  $dbw->free_result();


  foreach($pricelists as $pricelist_id)
  {
    foreach($seasons as $season_id)
    {
      foreach($rooms as $room_id)
      {
        $query = "SELECT COUNT(*) CNT
                  FROM {$prfx}_HTL_PRICE
                  WHERE PRICELIST_ID = $pricelist_id AND ROOM_ID = $room_id AND SEASON_ID = $season_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if

        while($dbw->fetch_row())
        {
          $cnt = $dbw->field_by_name("CNT");
        }

        $dbw->free_result();

        if($cnt == 0)
          continue;

        $query = "SELECT PRICE1, PRICE2,
                  PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4,
                  PRICE_ADULT_CHILD,
                  PRICE_ADULT_CHILD2,
                  PRICE_ADULT_CHILD3,
                  PRICE_ADULT_CHILD4,
                  PRICE_ADD_ADULT,
                  PRICE_ADD_CHILD,
                  PRICE_ADD_CHILD2,
                  PRICE_ADD_CHILD3,
                  PRICE_ADD_CHILD4,
                  MIN_NIGHTS, MAX_NIGHTS, SPECIAL_PRICE
                  FROM {$prfx}_HTL_PRICE
                  WHERE PRICELIST_ID = $pricelist_id AND ROOM_ID = $room_id AND SEASON_ID = $season_id";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if

        $SPECIAL_PRICE = '';

        while($dbw->fetch_row())
        {
          $PRICE1 = $dbw->field_by_name("PRICE1");
          $PRICE2 = $dbw->field_by_name("PRICE2");
          $PRICE_ADULT = $dbw->field_by_name("PRICE_ADULT");
          $PRICE_ADULT2 = $dbw->field_by_name("PRICE_ADULT2");
          $PRICE_ADULT3 = $dbw->field_by_name("PRICE_ADULT3");
          $PRICE_ADULT4 = $dbw->field_by_name("PRICE_ADULT4");
          $PRICE_ADULT_CHILD = $dbw->field_by_name("PRICE_ADULT_CHILD");
          $PRICE_ADD_ADULT = $dbw->field_by_name("PRICE_ADD_ADULT");
          $PRICE_ADD_CHILD = $dbw->field_by_name("PRICE_ADD_CHILD");
          $PRICE_ADD_CHILD2 = $dbw->field_by_name("PRICE_ADD_CHILD2");
          $PRICE_ADD_CHILD3 = $dbw->field_by_name("PRICE_ADD_CHILD3");
          $PRICE_ADD_CHILD4 = $dbw->field_by_name("PRICE_ADD_CHILD4");
          $MIN_NIGHTS = null_if_empty($dbw->field_by_name("MIN_NIGHTS"));
          $MAX_NIGHTS = null_if_empty($dbw->field_by_name("MAX_NIGHTS"));
          $SPECIAL_PRICE = $dbw->field_by_name("SPECIAL_PRICE");
        }

        if(empty($PRICE2)) $PRICE2 = 0;

        $dbw->free_result();

        if(empty($SPECIAL_PRICE) || $SPECIAL_PRICE != 'SEASON_PRICE')
          continue;

        $PRICE_ADULT = $this->calculate_price('price_adult', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT2 = $this->calculate_price('price_adult2', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT3 = $this->calculate_price('price_adult3', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT4 = $this->calculate_price('price_adult4', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT_CHILD = $this->calculate_price('price_adult_child', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT_CHILD2 = $this->calculate_price('price_adult_child2', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT_CHILD3 = $this->calculate_price('price_adult_child3', $room_id, $PRICE1, $dbw);

        $PRICE_ADULT_CHILD4 = $this->calculate_price('price_adult_child4', $room_id, $PRICE1, $dbw);

        $PRICE_ADD_ADULT = $this->calculate_price('price_add_adult', $room_id, $PRICE1, $dbw);

        $PRICE_ADD_CHILD = $this->calculate_price('price_add_child', $room_id, $PRICE1, $dbw);

        $PRICE_ADD_CHILD2 = $this->calculate_price('price_add_child2', $room_id, $PRICE1, $dbw);

        $PRICE_ADD_CHILD3 = $this->calculate_price('price_add_child3', $room_id, $PRICE1, $dbw);

        $PRICE_ADD_CHILD4 = $this->calculate_price('price_add_child4', $room_id, $PRICE1, $dbw);

        $query = $this->save_price_procedure($prfx, "$pricelist_id, $room_id, $season_id, $PRICE1, $PRICE2, $PRICE_ADULT, $PRICE_ADULT2, $PRICE_ADULT3, $PRICE_ADULT4, $PRICE_ADULT_CHILD, $PRICE_ADULT_CHILD2, $PRICE_ADULT_CHILD3, $PRICE_ADULT_CHILD4, $PRICE_ADD_ADULT, $PRICE_ADD_CHILD, $PRICE_ADD_CHILD2, $PRICE_ADD_CHILD3, $PRICE_ADD_CHILD4, $MIN_NIGHTS, $MAX_NIGHTS, '$SPECIAL_PRICE'");

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if

        $dbw->free_result();

        //get season dates(times)
        $query = "SELECT FROM_DATE, TO_DATE
                  FROM {$prfx}_HTL_SEASON_PERIODS
                  WHERE SEASON_ID = $season_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
        $season_dates = array();
        $i = 0;
        while($dbw->fetch_row())
        {
          $season_dates[$season_id][$i]["from_date"] = strtotime($dbw->field_by_name("FROM_DATE"));
          $season_dates[$season_id][$i]["to_date"] = strtotime($dbw->field_by_name("TO_DATE"));
          $i++;
        }

        $dbw->free_result();

        //create dates array
        $dates = array();
        if(!empty($season_dates[$season_id]))
        foreach($season_dates[$season_id] as $periods)
        {
          for($time = $periods["from_date"]; $time <= $periods["to_date"]; $time = strtotime("+1 day", $time))
          {
            $dates[$dbw->format_date($time)] = $dbw->format_date($time);
          }//for

          //check, that there is no data in rooms_availability table on this date
          foreach($dates as $date)
          {
            $date = null_if_empty($date);
            $query = "SELECT PRICE_TYPE
                      FROM {$prfx}_HTL_ROOM_AVAILABILITY
                      WHERE ROOM_ID = $room_id AND DATE = $date";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }

            $price_type = '';
            while($dbw->fetch_row())
            {
              $price_type = $dbw->field_by_name("PRICE_TYPE");
            }

            $dbw->free_result();

            if($price_type == 'INDIVIDUAL')
              continue;

            //get rooms count
            $query = "SELECT ROOMS_COUNT, PRICING_TYPE, WITH_CHILDREN, DISCOUNT_FLAG, DISCOUNT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, STANDARD_ALLOCATION
                      FROM {$prfx}_HTL_ROOMS WHERE ID = $room_id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }

            while($dbw->fetch_row())
            {
              $pricing_type = $dbw->field_by_name("PRICING_TYPE");
              $max_count = $dbw->field_by_name("ROOMS_COUNT");
              $with_children = $dbw->field_by_name("WITH_CHILDREN");
              $standard_allocation = $dbw->field_by_name("STANDARD_ALLOCATION");
              $discount = $dbw->field_by_name("DISCOUNT");
              if(empty($discount))
                $discount = 0;
              $discount_flag = $dbw->field_by_name("DISCOUNT_FLAG");
              if(empty($discount_flag))
                $discount_flag = 0;
              $child_discount_flag = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
              if(empty($child_discount_flag))
                $child_discount_flag = 0;
              $child_discount = $dbw->field_by_name("CHILD_DISCOUNT");
              if(empty($child_discount))
                $child_discount = 0;
            }

            $dbw->free_result();

            /*
            if($pricing_type == 1)
              continue;
            */
            //get prices
            $query = "SELECT PRICE1, PRICE2, PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4,
                      PRICE_ADULT_CHILD,
                      PRICE_ADULT_CHILD2,
                      PRICE_ADULT_CHILD3,
                      PRICE_ADULT_CHILD4,
                      PRICE_ADD_ADULT,
                      PRICE_ADD_CHILD,
                      PRICE_ADD_CHILD2,
                      PRICE_ADD_CHILD3,
                      PRICE_ADD_CHILD4
                      FROM {$prfx}_HTL_PRICE
                      WHERE PRICELIST_ID = $pricelist_id AND ROOM_ID = $room_id AND SEASON_ID = $season_id";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }

            while($dbw->fetch_row())
            {
              $season_price1 = $dbw->field_by_name("PRICE1");
              $season_price2 = $dbw->field_by_name("PRICE2");
              $season_price_adult = $dbw->field_by_name("PRICE_ADULT");
              $season_price_adult2 = $dbw->field_by_name("PRICE_ADULT2");
              $season_price_adult3 = $dbw->field_by_name("PRICE_ADULT3");
              $season_price_adult4 = $dbw->field_by_name("PRICE_ADULT4");
              $season_price_adult_child = $dbw->field_by_name("PRICE_ADULT_CHILD");
              $season_price_adult_child2 = $dbw->field_by_name("PRICE_ADULT_CHILD2");
              $season_price_adult_child3 = $dbw->field_by_name("PRICE_ADULT_CHILD3");
              $season_price_adult_child4 = $dbw->field_by_name("PRICE_ADULT_CHILD4");
              $season_price_add_adult = $dbw->field_by_name("PRICE_ADD_ADULT");
              $season_price_add_child = $dbw->field_by_name("PRICE_ADD_CHILD");
              $season_price_add_child2 = $dbw->field_by_name("PRICE_ADD_CHILD2");
              $season_price_add_child3 = $dbw->field_by_name("PRICE_ADD_CHILD3");
              $season_price_add_child4 = $dbw->field_by_name("PRICE_ADD_CHILD4");
            }

            $dbw->free_result();

              // we keep this data

              $query = "SELECT ARRIVAL, DEPARTURE, ROOM_COUNT, MIN_NIGHTS, MAX_NIGHTS
                        FROM {$prfx}_HTL_ROOM_AVAILABILITY
                        WHERE ROOM_ID = $room_id AND DATE = $date";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              $ARRIVAL = '1';
              $DEPARTURE = '1';

              while($dbw->fetch_row())
              {
                $max_count = $dbw->field_by_name("ROOM_COUNT");
                $ARRIVAL = $dbw->field_by_name("ARRIVAL");
                if(empty($ARRIVAL)) $ARRIVAL = "0";

                $DEPARTURE = $dbw->field_by_name("DEPARTURE");
                if(empty($DEPARTURE)) $DEPARTURE = "0";
              }

              $dbw->free_result();

            //delete record
            $query = "DELETE FROM {$prfx}_HTL_ROOM_AVAILABILITY
                      WHERE ROOM_ID = $room_id AND DATE = $date";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }

            $dbw->free_result();

            //create the record
            //prepare_data
            $price_type = $dbw->escape("SEASON_PRICE");
            $price_adult = null_if_empty($dbw->escape($season_price_adult));
            $price_adult2 = null_if_empty($dbw->escape($season_price_adult2));
            $price_adult3 = null_if_empty($dbw->escape($season_price_adult3));
            $price_adult4 = null_if_empty($dbw->escape($season_price_adult4));
            $price_adult_child = null_if_empty($dbw->escape($season_price_adult_child));
            $price_adult_child2 = null_if_empty($dbw->escape($season_price_adult_child2));
            $price_adult_child3 = null_if_empty($dbw->escape($season_price_adult_child3));
            $price_adult_child4 = null_if_empty($dbw->escape($season_price_adult_child4));
            $price_add_adult = null_if_empty($dbw->escape($season_price_add_adult));
            $price_add_child = null_if_empty($dbw->escape($season_price_add_child));
            $price_add_child2 = null_if_empty($dbw->escape($season_price_add_child2));
            $price_add_child3 = null_if_empty($dbw->escape($season_price_add_child3));
            $price_add_child4 = null_if_empty($dbw->escape($season_price_add_child4));

            $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                      (ROOM_ID, ARRIVAL, DEPARTURE, ROOM_COUNT, DATE, PRICE_TYPE, PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4, PRICE_ADULT_CHILD, PRICE_ADULT_CHILD2, PRICE_ADULT_CHILD3, PRICE_ADULT_CHILD4, PRICE_ADD_ADULT, PRICE_ADD_CHILD, PRICE_ADD_CHILD2, PRICE_ADD_CHILD3, PRICE_ADD_CHILD4, MIN_NIGHTS, MAX_NIGHTS)
                      VALUES ($room_id, '$ARRIVAL', '$DEPARTURE', $max_count, $date, '$price_type', $price_adult, $price_adult2, $price_adult3, $price_adult4, $price_adult_child, $price_adult_child2, $price_adult_child3, $price_adult_child4, $price_add_adult, $price_add_child, $price_add_child2, $price_add_child3, $price_add_child4, $MIN_NIGHTS, $MAX_NIGHTS)";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }

            $dbw->free_result();
          }//foreach
        }//foreach
      }//foreach_rooms
    }//foreach_seasons
  }//foreach_pricelists


  //COMMIT
  if(!$dbw->commit_transaction())
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }

  return true;
}

function save_rooms_to_order_form()
{
  if(!isset($_SESSION[S_CONTEXT]["modules"]["forms"]["active"]) ||
  empty($_SESSION[S_CONTEXT]["modules"]["forms"]["active"]))
  {
    $ERROR = text("errRoomOrderForm");
    return false;
  }

  global $ERROR;
  global $ERR_DETAILS;
  $dbw = GetDBWorker();
  $prfx = $dbw->escape(GetConnection()->get_current_prefix());
  //GET ROOM_ORDER DATA
  $query = "SELECT FORM_ID, ${prfx}_FORM_ELEMENT.ID ELEMENT_ID FROM ${prfx}_FORM_ELEMENT
                    INNER JOIN ${prfx}_FORM ON (${prfx}_FORM.ID = FORM_ID)
                    WHERE ${prfx}_FORM_ELEMENT.NAME = 'room_list' AND ${prfx}_FORM.NAME = 'room_order'";

  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }
  if($dbw -> fetched_count())
  {
    $dbw->fetch_row();
    $FORM_ID = $dbw->row["FORM_ID"];
    $ELEMENT_ID = $dbw->row["ELEMENT_ID"];
  }
  else
  {
    return false;
  }
  $dbw->free_result();
  // GET ROOMS DATA
  $query = "SELECT I_NAME, TYPE, LANGUAGE_ID FROM ${prfx}_HTL_ROOMS
             LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON (ROOM_ID = ID)";
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }
  $data = array();
  while($dbw->fetch_row())
  {
    $data[$dbw->row["LANGUAGE_ID"]][]=$dbw->row["I_NAME"]."|".$dbw->row["TYPE"];
  }
  $dbw->free_result();

  $room_captions = array();

  $query = "SELECT LANGUAGE_ID, CAPTION FROM ${prfx}_ELM_PROP WHERE ELEMENT_ID = ".$ELEMENT_ID;
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }
  while($dbw->fetch_row())
  {
    $room_captions[$dbw->row["LANGUAGE_ID"]] = $dbw->row["CAPTION"];
  }
  $dbw->free_result();

  //START TRANSACTION
  if(!$dbw->start_transaction())
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
               $dbw->get_last_query();
    return false;
  }
  //DELETE ELEMENT PROPS
  $query = "DELETE FROM ${prfx}_ELM_PROP WHERE ELEMENT_ID = ".$ELEMENT_ID;
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }
  $dbw->free_result();
  //SAVE ELEMENT PROPS
  if(!empty($data))
  {
    $values_str="";
    $cnt = 0;
    foreach($data as $LANG_ID => $arr)
    {
      $tp = $dbw->escape($room_captions[$LANG_ID]);

      $ROOM_TYPES = $dbw->escape(implode("\n", $arr));
      if($cnt)
        $values_str.="UNION SELECT";
      $values_str.="
      $ELEMENT_ID, $LANG_ID, '$tp', '$ROOM_TYPES', 1, NULL, NULL";
      if($cnt < count($data)-1)
      {
        $values_str.="\n";
      }
      $cnt++;
    }
    $query="INSERT INTO ${prfx}_ELM_PROP (ELEMENT_ID, LANGUAGE_ID, CAPTION, DEF_INFO, IS_ACTIVE, PROP1, PROP2)
    SELECT
    $values_str";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
  }
  else
  {
    $values_str="";
    $cnt = 0;
    foreach(hotel::$lang_list as $LANG_ID => $value)
    {
      $tp = $dbw->escape($room_captions[$LANG_ID]);

      if($cnt)
        $values_str.="UNION SELECT";
      $values_str.="
      $ELEMENT_ID, $LANG_ID, '$tp', ' | ', 1, NULL, NULL";
      if($cnt < count(hotel::$lang_list)-1)
      {
        $values_str.="\n";
      }
      $cnt++;
    }
    $query="INSERT INTO ${prfx}_ELM_PROP (ELEMENT_ID, LANGUAGE_ID, CAPTION, DEF_INFO, IS_ACTIVE, PROP1, PROP2)
    SELECT
    $values_str";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
  }

  // hotel rating

  $query = "SELECT FORM_ID, ${prfx}_FORM_ELEMENT.ID ELEMENT_ID FROM ${prfx}_FORM_ELEMENT
                    INNER JOIN ${prfx}_FORM ON (${prfx}_FORM.ID = FORM_ID)
                    WHERE ${prfx}_FORM_ELEMENT.NAME = 'zimmertyp' AND ${prfx}_FORM.NAME = 'freiwillige_angaben'";

  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }
  if($dbw -> fetched_count())
  {
    $dbw->fetch_row();
    $FORM_ID = $dbw->row["FORM_ID"];
    $ELEMENT_ID = $dbw->row["ELEMENT_ID"];
  }
  else
  {
    $dbw->rollback_transaction();
    return false;
  }
  $dbw->free_result();


  $room_captions = array();

  $query = "SELECT LANGUAGE_ID, CAPTION FROM ${prfx}_ELM_PROP WHERE ELEMENT_ID = ".$ELEMENT_ID;
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }
  while($dbw->fetch_row())
  {
    $room_captions[$dbw->row["LANGUAGE_ID"]] = $dbw->row["CAPTION"];
  }
  $dbw->free_result();


  //DELETE ELEMENT PROPS
  $query = "DELETE FROM ${prfx}_ELM_PROP WHERE ELEMENT_ID = ".$ELEMENT_ID;
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    $dbw->rollback_transaction();
    return false;
  }
  $dbw->free_result();
  //SAVE ELEMENT PROPS
  if(!empty($data))
  {
    $values_str="";
    $cnt = 0;
    foreach($data as $LANG_ID => $arr)
    {
      $tp = $dbw->escape(ifnull($room_captions[$LANG_ID]));

      $ROOM_TYPES = $dbw->escape(implode("\n", $arr));
      if($cnt)
        $values_str.="UNION SELECT";
      $values_str.="
      $ELEMENT_ID, $LANG_ID, '$tp', '$ROOM_TYPES', 1, NULL, NULL";
      if($cnt < count($data)-1)
      {
        $values_str.="\n";
      }
      $cnt++;
    }
    $query="INSERT INTO ${prfx}_ELM_PROP (ELEMENT_ID, LANGUAGE_ID, CAPTION, DEF_INFO, IS_ACTIVE, PROP1, PROP2)
    SELECT
    $values_str";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
  }
  else
  {
    $values_str="";
    $cnt = 0;
    foreach(hotel::$lang_list as $LANG_ID => $value)
    {
      $tp = $dbw->escape($room_captions[$LANG_ID]);

      if($cnt)
        $values_str.="UNION SELECT";
      $values_str.="
      $ELEMENT_ID, $LANG_ID, '$tp', ' | ', 1, NULL, NULL";
      if($cnt < count(hotel::$lang_list)-1)
      {
        $values_str.="\n";
      }
      $cnt++;
    }
    $query="INSERT INTO ${prfx}_ELM_PROP (ELEMENT_ID, LANGUAGE_ID, CAPTION, DEF_INFO, IS_ACTIVE, PROP1, PROP2)
    SELECT
    $values_str";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
  }


  //COMMIT   TRANSACTION
  if(!$dbw->commit_transaction())
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }
  $dbw->free_result();


  return true;
}

/*-----------------------------------------------*/
  function check_field_rooms($name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    global $ACTIVE_TAB;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $matches = array();

    switch($name)
    {

    case "internal_name":

      if(empty($_REQUEST["rooms_data"]["internal_name"]))
      {
        $ERROR = text("ErrNameEmpty");
        $FOCUS_ELEMENT = 'rooms_data[internal_name]';
        return false;
      }

      if(!validate_internal_name($_REQUEST["rooms_data"]["internal_name"]))
      {
        $ERROR = text("ErrInternalNameInvalid");
        $FOCUS_ELEMENT = 'rooms_data[internal_name]';
        return false;
      }

////////////////////////////

      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_ROOMS WHERE I_NAME='".$_REQUEST["rooms_data"]["internal_name"]."' AND ID!='".$_REQUEST["room_id"]."'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
      $ERROR = text("ErrInternalNameNotUniq");
      return false;
      }
      $dbw->free_result();
////////////////////
    return true;
    break;

    /* COUNT */
    case "count":
    if(empty($_REQUEST["rooms_data"]["count"]))
    {
      $FOCUS_ELEMENT="rooms_data[$name]";
      $ERROR=text("ErrRoomsCount");
      return false;
    }

    if(preg_match("/[^0-9]/", $_REQUEST["rooms_data"]["count"], $matches))
    {
      $FOCUS_ELEMENT="rooms_data[$name]";
      $ERROR=text("ErrRoomsCount");
      return false;
    }
    else
    {
      $_REQUEST["rooms_data"]["count"]=(int) $_REQUEST["rooms_data"]["count"];
      if(empty($_REQUEST["rooms_data"]["count"])) $_REQUEST["rooms_data"]["count"]='';
    }
    return true;
    break;

    case "min_persons":
      if($_REQUEST["rooms_data"]["min_persons"] == '')
      {
        $ERROR = text("ErrMinPersonsEmpty");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT = 'rooms_data[min_persons]';
        return false;
      }
      elseif(!is_numeric($_REQUEST["rooms_data"]["min_persons"]))
      {
        $ERROR = text("ErrMinPersonsFormat");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT="rooms_data[min_persons]";
        return false;
      }
      elseif($_REQUEST["rooms_data"]["min_persons"] > $_REQUEST["rooms_data"]["max_persons"])
      {
        $ERROR = text("ErrMinMaxPersons");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT = 'rooms_data[min_persons]';
        return false;
      }
      elseif($_REQUEST["rooms_data"]["min_persons"] > $_REQUEST["rooms_data"]["standard_allocation"])
      {
        $ERROR = text("ErrMinPersonsStdAllocation");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT = 'rooms_data[min_persons]';
        return false;
      }
      return true;
    break;

    case "max_adults":
      if($_REQUEST["rooms_data"]["standard_allocation"] < 3) return true;

      $children_active = !empty($_REQUEST["rooms_data"]["with_children"]) &&
                         (!empty($_REQUEST["rooms_data"]["add_child_max_age"]) ||
                          !empty($_REQUEST["rooms_data"]["add_child_max_age2"]) ||
                          !empty($_REQUEST["rooms_data"]["add_child_max_age3"]) ||
                          !empty($_REQUEST["rooms_data"]["add_child_max_age4"])
                         );

      if($children_active) return true;

      if($_REQUEST["rooms_data"]["max_adults"] < $_REQUEST["rooms_data"]["min_persons"])
      {
        $ERROR = text("ErrMinPersonsMaxAdults");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT = 'rooms_data[max_adults]';
        return false;
      }

      if($_REQUEST["rooms_data"]["max_adults"] < $_REQUEST["rooms_data"]["standard_allocation"])
      {
        $ERROR = text("ErrStdAllocationMaxAdults");
        $ACTIVE_TAB = 1;
        $FOCUS_ELEMENT = 'rooms_data[max_adults]';
        return false;
      }

      return true;
    break;

    case "max_persons":
      if($_REQUEST["rooms_data"]["max_persons"] == '')
      {
        $ERROR = text("ErrMaxPersonsEmpty");
        $FOCUS_ELEMENT = 'rooms_data[max_persons]';
        return false;
      }
      elseif(!is_numeric($_REQUEST["rooms_data"]["max_persons"]))
      {
        $ERROR = text("ErrMaxPersonsFormat");
        $FOCUS_ELEMENT="rooms_data[max_persons]";
        return false;
      }
      elseif($_REQUEST["rooms_data"]["max_persons"] < $_REQUEST["rooms_data"]["standard_allocation"])
      {
        $ERROR = text("ErrMaxPersonsStdAllocation");
        $FOCUS_ELEMENT = 'rooms_data[max_persons]';
        return false;
      }
      return true;
    break;

    case "discount":
      if($_REQUEST["rooms_data"]["standard_allocation"] == 2)
      {
        if(empty($_REQUEST["rooms_data"]["discount"]))
        {
          $ERROR = text("ErrDiscountEmpty");
          $ACTIVE_TAB = 1;
          $FOCUS_ELEMENT = 'rooms_data[discount]';
          return false;
        }
      }
      return true;
    break;

    /* ROOMS_DATA */
    case "rooms_data":

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      if(!empty($_REQUEST["rooms_data"]["checkbox"][$lang_id]))
      {
        if(empty($_REQUEST["rooms_data"]["type"][$lang_id]))
        {
          $FOCUS_ELEMENT="rooms_data[type][$lang_id]";
          $ERROR=text("ErrTypeFieldEmpty");
          return false;
        }
        /*
        if(empty($_REQUEST["rooms_data"]["category"][$lang_id]))
        {
          $FOCUS_ELEMENT="rooms_data[category][$lang_id]";
          $ERROR=text("ErrCategoryFieldEmpty");
          return false;
        }*/
      }
    }

    return true;
    break;

    case "page":
    if(empty($_REQUEST["rooms_data"]["page"]))
    {
      $FOCUS_ELEMENT="rooms_data[page]";
      $ERROR=text("errRoomDitailsPageEmpty");
      return false;
    }
    return true;
    break;
    }
  }

/*-----------------------------------------------*/
  function delete_images(&$images, $room_id, $prefix)
  {
    if(empty($room_id)) return true;

    if(!empty($prefix)) $room_id = $prefix . $room_id;
    
    $ROOM_FOLDER="../resources/hotel/rooms/" . $room_id . "/";

    foreach($images as $image)
    {
      if(file_exists($ROOM_FOLDER . $image))
      {
        @unlink($ROOM_FOLDER . $image);
      }

      $path_info = pathinfo($image);

      if(file_exists($ROOM_FOLDER . $path_info["filename"] . "_thumb." . $path_info["extension"]))
      {
        @unlink($ROOM_FOLDER . $path_info["filename"] . "_thumb." . $path_info["extension"]);
      }
    }

    return true;
  } // images

  function save_image(&$IMG_INFO, $room_id, $prefix)
  {
    global $ERROR;
    $MAX_FILE_WIDTH=10200;
    $MAX_FILE_HEIGHT=10200;
    $MAX_FILE_SIZE=20097152;
    $MAX_PREVIEW_DIMENSIONS=150;
    $SUPPORTED_FILE_TYPES=array(
      "jpg"=>1,
      "gif"=>1,
      "png"=>1
      );

    if(!empty($prefix)) $room_id = $prefix . $room_id;
      
    $IMAGE_FOLDER_PARENT="../resources/hotel";
    $IMAGE_FOLDER="../resources/hotel/rooms";
    $ROOM_FOLDER="../resources/hotel/rooms/" . $room_id;

    $file=$IMG_INFO["tmp_name"];
    $file_name=$IMG_INFO["name"];

    $path_parts = pathinfo($file_name);
    $base_name = preg_replace("/[^a-zA-Z0-9]/", "_", ifnull($path_parts['filename']));

    $file_name_new=$room_id . "_" . $base_name . "." . $this->check_image_extension($file_name);
    $file_name_preview=$ROOM_FOLDER."/".$room_id . "_" . $base_name . "_thumb." . $this->check_image_extension($file_name);

    if(!is_file($file))
    {
      $ERROR=text("ErrFileNotExist");
      return false;
    }
    if(empty($SUPPORTED_FILE_TYPES[$this->check_image_extension($file_name)]))
    {
      $ERROR=text("ErrUnsupportedFormat");
      return false;
    }

    $file_dimentions = getimagesize($file);
    $width=$file_dimentions[0];
    $height=$file_dimentions[1];
    $size=filesize($file);

    if($width>$MAX_FILE_WIDTH)
    {
      $ERROR=text("ErrImageWidth");
      return false;
    }
    if($height>$MAX_FILE_HEIGHT)
    {
      $ERROR=text("ErrImageHeight");
      return false;
    }
    if($size>$MAX_FILE_SIZE)
    {
      $ERROR=text("ErrImageSize");
      return false;
    }

     if(!is_dir($IMAGE_FOLDER_PARENT))
    {
      if(!mkdir($IMAGE_FOLDER_PARENT, 0777))
      {
        $ERROR=text("ErrCreateDir");
        return false;
      }
    }
    if(!is_dir($IMAGE_FOLDER))
    {
      if(!mkdir($IMAGE_FOLDER, 0777))
      {
        $ERROR=text("ErrCreateDir");
        return false;
      }
    }
    if(!is_dir($ROOM_FOLDER))
    {
      if(!mkdir($ROOM_FOLDER, 0777))
      {
        $ERROR=text("ErrCreateDir");
        return false;
      }
    }

    if(!move_uploaded_file($file, $ROOM_FOLDER."/".$file_name_new))
    {
      $ERROR=text("ErrMovefromTemporaryFolder");
      return false;
    }

    if($width>=$height)
    {
      $thumb_width=$MAX_PREVIEW_DIMENSIONS;
      $thumb_height=round($height/($width/$MAX_PREVIEW_DIMENSIONS));
    }
    else
    {
      $thumb_height=$MAX_PREVIEW_DIMENSIONS;
      $thumb_width=round($width/($height/$MAX_PREVIEW_DIMENSIONS));
    }

    if(!$this->image_resize($ROOM_FOLDER."/".$file_name_new, $file_name_preview ,$thumb_width, $thumb_height))
      return false;

    return true;
  }

/*-----------------------------------------------*/
  function image_resize($file, &$file_name_preview, &$width, &$height)
  {
    global $ERROR;

    if($this->check_image_extension($file)=='jpg')
      $im=imagecreatefromjpeg($file);
    if($this->check_image_extension($file)=='gif')
      $im=imagecreatefromgif($file);
    if($this->check_image_extension($file)=='png')
      $im=imagecreatefrompng($file);

    $im1=imagecreatetruecolor($width,$height);
    if(!imagecopyresampled($im1,$im,0,0,0,0,$width,$height,imagesx($im),imagesy($im)))
    {
      imagedestroy($im);
      imagedestroy($im1);
      $ERROR=text("ErrImageManipulation");
      return false;
    }
    else if(!imagejpeg($im1, $file_name_preview,100))
    {
      $ERROR=text("ErrImageManipulation");
      return false;
    }
    else
    {
      return true;
    }
  }
/*-----------------------------------------------*/
  function image_delete_dublicate(&$room_id, $exeption, &$SUPPORTED_FILE_TYPES)
  {
    $IMAGE_FOLDER="../resources/hotel/rooms";
    foreach($SUPPORTED_FILE_TYPES as $extention=> $value)
    {
      if($extention!=$exeption)
      {
        $file=$IMAGE_FOLDER."/".$room_id.".".$extention;
        if(is_file($file))
        {
          unlink($file);
        }
        else
        {
          $file=$IMAGE_FOLDER."/".$room_id."_num2.".$extention;
          if(is_file($file))
          {
            unlink($file);
          }
        }
      }
    }
  }
/*-----------------------------------------------*/
  function check_image_extension($file)
  {
  $path_info = pathinfo($file);
  return strtolower($path_info['extension']);
  }
/*-----------------------------------------------*/
  function gen_image_list($room_id, $prefix)
  {
    if(empty($room_id)) return;

    if(!empty($prefix)) $room_id = $prefix . $room_id;
    
    $SUPPORTED_FILE_TYPES=array(
      "jpg",
      "gif",
      "png"
      );
    $extention='';
    $ROOM_FOLDER="../resources/hotel/rooms/" . $room_id . "/";

    if(!is_dir($ROOM_FOLDER)) return;

    $files = scandir($ROOM_FOLDER);

    $pictures = array();

    foreach($files as $file)
    {
      if($file == "." || $file == ".." || is_dir($ROOM_FOLDER . $file)) continue;

      $path_parts = pathinfo($file);

      $filename = strtolower(ifnull($path_parts['filename']));
      $extension = strtolower(ifnull($path_parts['extension']));

      if(!in_array($extension, $SUPPORTED_FILE_TYPES)) continue;

      if(preg_match("/^" . $room_id . "_(.+)_thumb$/", $filename, $matches))
      {
        $pictures[$matches[1]]["thumb"] = $file;
      }
      elseif(preg_match("/^" . $room_id . "_(.+)$/", $filename, $matches))
      {
        $pictures[$matches[1]]["picture"] = $file;
      }
    }

    $pict = "";
    $thumb = "";

    foreach($pictures as $pinfo)
    {
      if(empty($pinfo["thumb"]) || empty($pinfo["picture"])) continue;

      echo '<div class="hotel_thumb_item">';
      echo '<table><tr><td style="width:170px;height:170px;text-align:center">';
      echo '<a href="'.$ROOM_FOLDER.$pinfo["picture"].'" class="lightbox_image" /><img src="'.$ROOM_FOLDER.$pinfo["thumb"].'" alt=""  title=""/></a>';
      echo '</td></tr>';
      echo '<tr style="height:30px"><td><div style="overflow:hidden">';
      echo '<input type="checkbox" name="del_hotel_thumb[]" value="' . escape_html($pinfo["picture"]) . '"> ' . $pinfo["picture"];
      echo '</div></td></tr></table>';
      echo '</div>';
    }

  } //gen_image_list
/*-----------------------------------------------*/
  function get_first_room_image($room_id, &$pict, &$thumb, &$pictures, $prefix = "")
  {
    if(empty($room_id)) return true;
    
    if(!empty($prefix)) $room_id = $prefix . $room_id;

    $SUPPORTED_FILE_TYPES=array(
      "jpg",
      "gif",
      "png"
      );
    $extention='';
    $ROOM_FOLDER= app_path() . "resources/hotel/rooms/" . $room_id . "/";

    if(!is_dir($ROOM_FOLDER)) return;

    $files = scandir($ROOM_FOLDER);

    foreach($files as $file)
    {
      if($file == "." || $file == ".." || is_dir($ROOM_FOLDER . $file)) continue;

      $path_parts = pathinfo($file);

      $filename = strtolower(ifnull($path_parts['filename']));
      $extension = strtolower(ifnull($path_parts['extension']));

      if(!in_array($extension, $SUPPORTED_FILE_TYPES)) continue;

      if(preg_match("/^" . $room_id . "_(.+)_thumb$/", $filename, $matches))
      {
        $pictures[$matches[1]]["thumb"] = $file;
      }
      elseif(preg_match("/^" . $room_id . "_(.+)$/", $filename, $matches))
      {
        $pictures[$matches[1]]["picture"] = $file;
      }
    }

    foreach($pictures as $pid => $pinfo)
    {
      if(empty($pinfo["thumb"]) || empty($pinfo["picture"])) continue;

      $pict = $pinfo["picture"];
      $thumb = $pinfo["thumb"];
      
      unset($pictures[$pid]);
      break;
    }

    return true;
  } //get_first_room_image
/*-----------------------------------------------*/
  function set_preview_image($room_id)
  {
    $pict = "";
    $thumb = "";

    if(empty($room_id)) return true;

    $ROOM_FOLDER= "../resources/hotel/rooms/" . $room_id . "/";

    $dummy = array();
    if(!$this->get_first_room_image($room_id, $pict, $thumb, $dummy)) return;

    if(!empty($pict) && !empty($thumb))
    {
      echo '<a href="'.$ROOM_FOLDER.$pict.'" class="lightbox_image" /><img src="'.$ROOM_FOLDER.$thumb.'" alt=""  /></a>';
    }
  }
  /*-----------------------------------------------*/
  function delete_room(&$del_room,&$del_room_name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $room_list_arr=array();
    $room_names_arr=array();
    if(!count($del_room))
      return false;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    foreach($del_room as $key=>$room_id)
    {
      $room_list_arr[]=$room_id;
    }
    unset($_SESSION[S_CONTEXT]["hotel"]);

    // START TRANSACTION
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $query="DELETE FROM ${prfx}_HTL_ROOMS WHERE ID IN(".implode(",",$room_list_arr).")";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    //COMMIT
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();
    //SAVE ROOM TO ROOM_ORDER FORM - START
    $this -> save_rooms_to_order_form();
    //SAVE ROOM TO ROOM_ORDER FORM - END

    foreach($del_room_name as $room_id=>$room_name)
      $room_names_arr[]=$room_name;
    GetEvent()->log_event("MsgRoomDeleted", array("%room%" => implode(",",$room_names_arr)));
    $_REQUEST["page"]=1;
    return true;
  }
  /*-----------------------------------------------*/
  function db_data_to_array($query, $key, &$data)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $dbw = GetDBWorker();
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      for($i=0;$i<$dbw->field_count();$i++)
      {
        $info = $dbw->field_info_by_num($i);

        if(!empty($key))
        {
          if($info->type != "datetime")
          {
            $tmp_field_name=$dbw->field_name($i);
            if(!empty($tmp_field_name))
              $data[$dbw->field_by_name($key)][$dbw->field_name($i)]=$dbw->field_by_name($dbw->field_name($i));
          }
          else
          {
            $data[$dbw->field_by_name($key)][$dbw->field_name($i)]=format_date($dbw->field_by_name($dbw->field_name($i)),text("DateFormat"));
          }
        }
        else
        {
          if($info->type != "datetime")
          {
            $tmp_field_name=$dbw->field_name($i);
            if(!empty($tmp_field_name))
              $data[]=$dbw->field_by_name($dbw->field_name($i));
          }
          else
          {
            $data[]=format_date($dbw->field_by_name($dbw->field_name($i)),text("DateFormat"));
          }
        }
      }
    }
    $dbw->free_result();
    return count($data);
  }


  /*-----------------------------------------------*/
  function check_valid_time_period($from_date, $to_date)
  {
    //check date conditions
    $from_date=strtotime($from_date);
    $to_date=strtotime($to_date);

    if(!($from_date < $to_date))
      return false;
    return true;
  }

  /*-----------------------------------------------*/
  function get_season_data_dft()
  {
    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      $_REQUEST["seasons_data"]["checkbox"][$lang_id]=1;
    }
  }
/*-----------------------------------------------*/
  function get_season_data()
  {
    unset($_REQUEST["seasons_data"]);
    global $ERROR;
    global $ERR_DETAILS;

    $SEASON_ID=$_REQUEST["season_id"];

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    if(!empty($SEASON_ID))
    {
      $query="SELECT ID, I_NAME, NAME, LANGUAGE_ID, FROM_DATE, TO_DATE, ACTIVE  FROM ${prfx}_HTL_SEASON
                    INNER JOIN ${prfx}_HTL_SEASON_PROPS  ON (ID = ${prfx}_HTL_SEASON_PROPS.SEASON_ID)
                    INNER JOIN ${prfx}_HTL_SEASON_PERIODS  ON (ID = ${prfx}_HTL_SEASON_PERIODS.SEASON_ID)
                    WHERE ID = ".$SEASON_ID;
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $tmp_date_from = array();
      $tmp_date_to = array();
      while($dbw->fetch_row())
      {
        $_REQUEST["seasons_data"]["internal_name"] = $dbw->row["I_NAME"];
        if(!empty($dbw->row["NAME"]))
        {
          $_REQUEST["seasons_data"]["name"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["NAME"]);
        }
        else
        {
          $_REQUEST["seasons_data"]["name"][$dbw->row["LANGUAGE_ID"]] = '';
        }
        $_REQUEST["seasons_data"]["checkbox"][$dbw->row["LANGUAGE_ID"]] = $dbw->row["ACTIVE"];



        if(empty($tmp_date_from[$dbw->row["FROM_DATE"]]) || empty($tmp_date_to[$dbw->row["TO_DATE"]]))
        {
          $_REQUEST["seasons_data"]["from_date"][] = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
          $_REQUEST["seasons_data"]["to_date"][] = format_date($dbw->row["TO_DATE"], text("DateFormat"));
        }
        $tmp_date_from[$dbw->row["FROM_DATE"]] = true;
        $tmp_date_to[$dbw->row["TO_DATE"]] = true;
      }

      $dbw->free_result();
    }
  }
/*-----------------------------------------------*/
  function check_field_seasons($name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $matches = array();

    switch($name)
    {
    case "date":
    if(count($_REQUEST["seasons_data"]["from_date"]) && count($_REQUEST["seasons_data"]["to_date"]))
    {

      $tmp_date_arr = array();
      foreach($_REQUEST["seasons_data"]["from_date"] as $key=>$seasons_date)
      {
        if(empty($_REQUEST["seasons_data"]["from_date"][$key]) &&
          empty($_REQUEST["seasons_data"]["to_date"][$key]))
        {

          unset($_REQUEST["seasons_data"]["from_date"][$key]);
          $_REQUEST["seasons_data"]["from_date"] = array_values($_REQUEST["seasons_data"]["from_date"]);
          unset($_REQUEST["seasons_data"]["to_date"][$key]);
          $_REQUEST["seasons_data"]["to_date"] = array_values($_REQUEST["seasons_data"]["to_date"]);
        }
        if(!empty($_REQUEST["seasons_data"]["from_date"][$key]) &&
          !empty($_REQUEST["seasons_data"]["to_date"][$key]))
        {
          if(!empty($tmp_date_arr[$_REQUEST["seasons_data"]["from_date"][$key]][$_REQUEST["seasons_data"]["to_date"][$key]]))
          {
            unset($_REQUEST["seasons_data"]["from_date"][$key]);
            unset($_REQUEST["seasons_data"]["to_date"][$key]);
          }
          else
          {
            $tmp_date_arr[$_REQUEST["seasons_data"]["from_date"][$key]][$_REQUEST["seasons_data"]["to_date"][$key]] = true;
          }
        }
      }

      foreach($_REQUEST["seasons_data"]["from_date"] as $key=>$seasons_date)
      {
        if(empty($_REQUEST["seasons_data"]["from_date"][$key]))
        {
          $ERROR=text("ErrEmptyDateField");
          $FOCUS_ELEMENT="seasons_data[from_date][$key]";
          return false;
        }
        else if(empty($_REQUEST["seasons_data"]["to_date"][$key]))
        {
          $ERROR=text("ErrEmptyDateField");
          $FOCUS_ELEMENT="seasons_data[to_date][$key]";
          return false;
        }

        if(iso_date($_REQUEST["seasons_data"]["from_date"][$key], text("DateFormat"))=="error")
        {
          $ERROR =  sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          $FOCUS_ELEMENT = $name;
          return false;
        }
        if(iso_date($_REQUEST["seasons_data"]["to_date"][$key], text("DateFormat"))=="error")
        {
          $ERROR =  sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          $FOCUS_ELEMENT = $name;
          return false;
        }
        if(!$this->check_valid_time_period($_REQUEST["seasons_data"]["from_date"][$key], $_REQUEST["seasons_data"]["to_date"][$key]))
        {
          $ERROR=text("ErrDataTimeFrame");
          $FOCUS_ELEMENT="seasons_data[from_date][$key]";
          return false;
        }
      }
    }
    else
    {
      $ERROR=text("ErrEmptyDateField");
      $FOCUS_ELEMENT="seasons_data[from_date][0]";
      return false;
    }
    return true;
    break;


    case "internal_name":

      if(empty($_REQUEST["seasons_data"]["internal_name"]))
      {
        $ERROR = text("ErrNameEmpty");
        $FOCUS_ELEMENT = 'seasons_data[internal_name]';
        return false;
      }

      if(!validate_internal_name($_REQUEST["seasons_data"]["internal_name"]))
      {
        $ERROR = text("ErrInternalNameInvalid");
        $FOCUS_ELEMENT = 'seasons_data[internal_name]';
        return false;
      }

////////////////////////////

      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_SEASON WHERE I_NAME='".$_REQUEST["seasons_data"]["internal_name"]."' AND ID!='".$_REQUEST["season_id"]."'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
      $ERROR = text("ErrInternalNameNotUniq");
      return false;
      }
      $dbw->free_result();
////////////////////
    return true;
    break;

    /* SEASONS_DATA */
    case "seasons_data":

    // foreach(hotel::$lang_list as $lang_id=>$value)
    // {
      // if(!empty($_REQUEST["seasons_data"]["checkbox"][$lang_id]))
      // {
        // if(empty($_REQUEST["seasons_data"]["name"][$lang_id]))
        // {
          // $FOCUS_ELEMENT="seasons_data[name][$lang_id]";
          // $ERROR=text("ErrNameEmpty");
          // return false;
        // }
      // }
    // }


    return true;
    break;
    }
  }
  /*-----------------------------------------------*/
  function save_season_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    $EVENT="";
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

     // CHECK DATA
    if(!$this->check_field_seasons("internal_name")) return false;
    //if(!$this->check_field_seasons("seasons_data")) return false;
    if(!$this->check_field_seasons("date")) return false;



    //SAVE DATE
    if(!empty($_REQUEST["season_id"]))
    {
      $SEASON_ID = $_REQUEST["season_id"];
      $EVENT="update";
    }
    else
    {
      $SEASON_ID=0;
      $EVENT="create";
    }
    $I_NAME=$_REQUEST["seasons_data"]["internal_name"];

    // START TRANSACTION
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $query=$this->save_season_procedure($prfx, "$SEASON_ID, '$I_NAME'");

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    $query=$this->get_last_insert_id();
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
     $dbw->rollback_transaction();
      return false;
    }
    $dbw->fetch_row();
    if(empty($SEASON_ID))
      $SEASON_ID=$dbw->row["LAST_ID"];
    $dbw->free_result();

   // SAVE PROPS
    foreach($_REQUEST["seasons_data"]["name"] as $lang_id=>$value)
    {
      $SEASON_NAME=$dbw->escape(magic_quotes_from_req($value));
      $ACTIVE = !empty($_REQUEST["seasons_data"]["checkbox"][$lang_id]) ? 1 : 0;

      $query = $this->save_season_props_procedure($prfx, "$SEASON_ID, '$SEASON_NAME',  $lang_id, '$ACTIVE'");
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
   // SAVE PERIODS
    $query="DELETE FROM ${prfx}_HTL_SEASON_PERIODS WHERE SEASON_ID = $SEASON_ID";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    foreach($_REQUEST["seasons_data"]["from_date"] as $key=>$seasons_date)
    {
      $FROM_DATE = $seasons_date;
      $TO_DATE = $_REQUEST["seasons_data"]["to_date"][$key];
      if(!empty($FROM_DATE))
        $FROM_DATE = $dbw->format_datetime(strtotime(date("Ymd 00:00:00", strtotime($FROM_DATE))));
      if(!empty($TO_DATE))
      $TO_DATE = $dbw->format_datetime(strtotime(date("Ymd 00:00:00", strtotime($TO_DATE))));
      $query="INSERT INTO ${prfx}_HTL_SEASON_PERIODS (SEASON_ID, FROM_DATE, TO_DATE) VALUES ($SEASON_ID, '$FROM_DATE', '$TO_DATE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //COMMIT
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $dbw->free_result();

    if(!$this->external_manager_active())
    {
      $this->seasons_resave();
    }

    $INFO_MESSAGE = text("MsgSeasonDataSaved");
    $_REQUEST["season_id"]=$SEASON_ID;
    if($EVENT == "update")
      GetEvent()->log_event("MsgSeasonUpdated", array("%season%" => $I_NAME));
    else if($EVENT =="create")
      GetEvent()->log_event("MsgSeasonCreated", array("%season%" => $I_NAME));

    return true;
  }
  /*-----------------------------------------------*/
  function delete_season(&$del_season,&$del_season_name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $season_list_arr=array();
    $season_names_arr=array();
    if(!count($del_season))
      return false;

      $dbw = GetDBWorker();
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
      foreach($del_season as $key=>$season_id)
      {
        $season_list_arr[]=$season_id;
      }
      unset($_SESSION[S_CONTEXT]["hotel"]);
      $query="DELETE FROM ${prfx}_HTL_SEASON WHERE ID IN(".implode(",",$season_list_arr).")";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    foreach($del_season_name as $season_id=>$season_name)
      $season_names_arr[]=$season_name;
    GetEvent()->log_event("MsgSeasonDeleted", array("%season%" => implode(",",$season_names_arr)));
    $_REQUEST["page"]=1;
    return true;
  }
  //-----------------------------------------------------------------
  function get_seasons_list($ROWS_PER_PAGE, $page)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;
    global $INFO_MESSAGE;
    global $row_count;
    global $page_count;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $pass=true;
    if(!empty($_REQUEST["action"]))
    {
      if($_REQUEST["action"]=="navigate")
      {
         $pass=false;
      }
    }
     if(!empty($_REQUEST["season_id"]) &&  $pass)
     {
      $query="SELECT ID, SEASON_START FROM ${prfx}_HTL_SEASON
                    LEFT JOIN (SELECT SEASON_ID, MIN(FROM_DATE) SEASON_START FROM ${prfx}_HTL_SEASON_PERIODS
                    GROUP BY SEASON_ID) SEASON_STARTS ON (SEASON_STARTS.SEASON_ID = ID)
                    ORDER BY SEASON_START";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $row_count=$dbw->fetched_count();
      $cnt=1;
      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("ID")==reqvar("season_id"))
        {

          $page=ceil($cnt/$ROWS_PER_PAGE);

          break;
        }
        $cnt++;
      }
    }
    else
    {
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_SEASON";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      $row_count=$dbw->row["CNT"];
    }

    $page_count=ceil($row_count/$ROWS_PER_PAGE);
    $start=$page*$ROWS_PER_PAGE-$ROWS_PER_PAGE;
    if(!$row_count)
    {
      $INFO_MESSAGE=text("NoOneSeason");
      return false;
    }
    $dbw->free_result();
    //GET DATA
    $end = ($page-1)*$ROWS_PER_PAGE + $ROWS_PER_PAGE;

    $lang_list=array_flip(hotel::$lang_list);
    $lang_list_hotel = $this->get_lang_list_hotel("_HTL_SEASON_PROPS");

    if(!empty($lang_list[$_SESSION["lang"]]))
    {
      $LANG_ID = $lang_list[$_SESSION["lang"]];
    }
    else
    {
      foreach($lang_list_hotel as $lang_hotel_id)
      {
        if(!empty(hotel::$lang_list[$lang_hotel_id]))
        {
          $LANG_ID = $lang_hotel_id;
          break;
        }
      }

    }

    $query=$this->get_season_list_query($prfx, $start, $end, $ROWS_PER_PAGE, $LANG_ID);
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$seasons_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$seasons_list[$dbw->row["ID"]]["NAME"] = escape_html($dbw->row["NAME"]);
    }

    $dbw->free_result();
    //GET PERIODS
    $seasons_ids=array();
    foreach(hotel::$seasons_list as $key => $value)
    {
      $seasons_ids[]=$key;
    }
    $query="SELECT SEASON_ID, FROM_DATE, TO_DATE FROM ${prfx}_HTL_SEASON_PERIODS
                  WHERE SEASON_ID IN(".implode(",", $seasons_ids).")
                  ORDER BY FROM_DATE";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$seasons_list[$dbw->row["SEASON_ID"]]["FROM_DATE"][] = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
      hotel::$seasons_list[$dbw->row["SEASON_ID"]]["TO_DATE"][] = format_date($dbw->row["TO_DATE"], text("DateFormat"));
    }
    $dbw->free_result();

    return true;
  }

/*-----------------------------------------------*/
  function echo_tab_title($page)
  {
    if($page=="room")
    {
      if(!empty($_REQUEST["room_id"]) &&
      !empty($_REQUEST["rooms_data"]["internal_name"]))
      {
        echo text("Room").": ".$_REQUEST["rooms_data"]["internal_name"];
      }
      else
      {
        echo text("NewRoom");
      }
    }
    if($page=="service")
    {
      if(!empty($_REQUEST["id"]))
      {
        echo text("Service");
      }
      else
      {
        echo text("NewService");
      }
    }
    if($page=="season")
    {

      if(!empty($_REQUEST["season_id"]) &&
      !empty($_REQUEST["seasons_data"]["internal_name"]))
      {
        echo text("Season").": ".$_REQUEST["seasons_data"]["internal_name"];
      }
      else
      {
        echo text("NewSeason");
      }
    }
    if($page=="currency")
    {

      if(!empty($_REQUEST["currency_id"]) &&
      !empty($_REQUEST["currency_data"]["internal_name"]))
      {
        echo text("Currency").": ".$_REQUEST["currency_data"]["internal_name"];
      }
      else
      {
        echo text("NewCurrency");
      }
    }
    if($page=="Pricelist")
    {

      if(!empty($_REQUEST["pricelist_id"]) &&
      !empty($_REQUEST["pricelist_data"]["internal_name"]))
      {
        echo text("Pricelist").": ".$_REQUEST["pricelist_data"]["internal_name"];
      }
      else
      {
        echo text("NewPricelist");
      }
    }
    if($page=="Specialoffer")
    {

      if(!empty($_REQUEST["pricelist_id"]) &&
      !empty($_REQUEST["pricelist_data"]["internal_name"]))
      {
        echo text("Specialoffer").": ".$_REQUEST["pricelist_data"]["internal_name"];
      }
      else
      {
        echo text("NewSpecialoffer");
      }
    }
  }
  /*-----------------------------------------------*/
  function get_currency_data_dft()
  {

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      $_REQUEST["currency_data"]["checkbox"][$lang_id] = 1;
    }
  }
/*-----------------------------------------------*/
  function get_currency_data()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $CURRENCY_ID=$_REQUEST["currency_id"];

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    if(!empty($CURRENCY_ID))
    {
      $query="SELECT ID, I_NAME, RATE, SIGN, NAME, COMMENT ,LANGUAGE_ID, ACTIVE, IS_DEFAULT FROM ${prfx}_HTL_CURRENCY
                    INNER JOIN ${prfx}_HTL_CURRENCY_PROPS  ON (ID = CURRENCY_ID)
                    WHERE ID = ".$CURRENCY_ID;
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $_REQUEST["currency_data"]["internal_name"] = $dbw->row["I_NAME"];
        $_REQUEST["currency_data"]["rate"] = $dbw->row["RATE"];
        $_REQUEST["currency_data"]["is_default"] = $dbw->row["IS_DEFAULT"];
        $_REQUEST["currency_data"]["checkbox"][$dbw->row["LANGUAGE_ID"]]  = $dbw->row["ACTIVE"];
        $_REQUEST["currency_data"]["name"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["NAME"]);
        $_REQUEST["currency_data"]["comment"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["COMMENT"]);
        $_REQUEST["currency_data"]["sign"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["SIGN"]);
      }

      $dbw->free_result();
    }
  }
/*-----------------------------------------------*/
  function check_field_currency($name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $matches = array();

    switch($name)
    {
    case "internal_name":

      if(empty($_REQUEST["currency_data"]["internal_name"]))
      {
        $ERROR = text("ErrNameEmpty");
        $FOCUS_ELEMENT = 'currency_data[internal_name]';
        return false;
      }

      if(!validate_internal_name($_REQUEST["currency_data"]["internal_name"]))
      {
        $ERROR = text("ErrInternalNameInvalid");
        $FOCUS_ELEMENT = 'currency_data[internal_name]';
        return false;
      }

////////////////////////////

      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_CURRENCY WHERE I_NAME='".$_REQUEST["currency_data"]["internal_name"]."' AND ID!='".$_REQUEST["currency_id"]."'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
      $ERROR = text("ErrInternalNameNotUniq");
      return false;
      }
      $dbw->free_result();
////////////////////
    return true;
    break;

    /* CURRENCY_DATA */
    case "rate":

      $_REQUEST["currency_data"]["rate"] = str_replace(",", ".", $_REQUEST["currency_data"]["rate"]);
    
      if(empty($_REQUEST["currency_data"]["rate"]))
      {
        $FOCUS_ELEMENT="currency_data[rate]";
        $ERROR=text("ErrRateNameEmpty");
        return false;
      }
     if(preg_match("/(^[0-9]+$)|(^[0-9]+\.[0-9]+$)/", $_REQUEST["currency_data"]["rate"], $matches) == 0)
      {
        $_REQUEST["currency_data"]["rate"]="";
        $FOCUS_ELEMENT="currency_data[rate]";
        $ERROR=text("ErrRateValidation");
        return false;
      }
    return true;
    break;

    case "currency_data":

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      if(!empty($_REQUEST["currency_data"]["checkbox"][$lang_id]))
      {
        if(empty($_REQUEST["currency_data"]["name"][$lang_id]))
        {
          $FOCUS_ELEMENT="currency_data[name][$lang_id]";
          $ERROR=text("ErrNameEmpty");
          return false;
        }
      }

    }

    return true;
    break;
    }
  }

  /*-----------------------------------------------*/
  function save_currency_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    $EVENT="";
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

     // CHECK DATA
    if(!$this->check_field_currency("internal_name")) return false;
    if(!$this->check_field_currency("rate")) return false;
    if(!$this->check_field_currency("currency_data")) return false;

    //SAVE DATE
    if(!empty($_REQUEST["currency_id"]))
    {
      $CURRENCY_ID=$_REQUEST["currency_id"];
      $EVENT="update";
    }
    else
    {
      $CURRENCY_ID=0;
      $EVENT="create";
    }

    $I_NAME=$_REQUEST["currency_data"]["internal_name"];
    $RATE=$_REQUEST["currency_data"]["rate"];

    // START TRANSACTION
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $query=$this->save_currency_procedure($prfx, "$CURRENCY_ID, '$I_NAME', '$RATE'");

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    $query=$this->get_last_insert_id();
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
     $dbw->rollback_transaction();
      return false;
    }
    $dbw->fetch_row();
    if(empty($CURRENCY_ID))
      $CURRENCY_ID=$dbw->row["LAST_ID"];
    $dbw->free_result();


    if(!empty($_REQUEST["currency_data"]["is_default"]))
    {
      if(!$dbw->execute_query("UPDATE ${prfx}_HTL_CURRENCY SET IS_DEFAULT = '0'"))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
       $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query("UPDATE ${prfx}_HTL_CURRENCY SET IS_DEFAULT = '1', RATE = 1 WHERE ID = $CURRENCY_ID"))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
       $dbw->rollback_transaction();
        return false;
      }
    }
    else
    {
      if(!$dbw->execute_query("UPDATE ${prfx}_HTL_CURRENCY SET IS_DEFAULT = '0' WHERE ID = $CURRENCY_ID"))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
       $dbw->rollback_transaction();
        return false;
      }
    }

   // SAVE PROPS
    foreach($_REQUEST["currency_data"]["name"] as $lang_id=>$value)
    {
      $CURRENCY_NAME=$dbw->escape(magic_quotes_from_req($value));
      $CURRENCY_COMMENT = $dbw->escape(magic_quotes_from_req($_REQUEST["currency_data"]["comment"][$lang_id]));
      $CURRENCY_SIGN = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["currency_data"]["sign"][$lang_id])));
      $ACTIVE = !empty($_REQUEST["currency_data"]["checkbox"][$lang_id]) ? 1 : 0;
      $query=$this->save_currency_props_procedure($prfx, "$CURRENCY_ID, $CURRENCY_SIGN, '$CURRENCY_NAME', '$CURRENCY_COMMENT', $lang_id, '$ACTIVE'");
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //COMMIT
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $dbw->free_result();
    $INFO_MESSAGE = text("MsgDataSaved");
    $_REQUEST["currency_id"]=$CURRENCY_ID;

    if($EVENT == "update")
      GetEvent()->log_event("MsgCurrencyUpdated", array("%currency%" => $I_NAME));
    else if($EVENT =="create")
      GetEvent()->log_event("MsgCurrencyCreated", array("%currency%" => $I_NAME));

    return true;
  }
  /*-----------------------------------------------*/
  function delete_currency(&$del_currency,&$del_currency_name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $currency_list_arr=array();
    $currency_names_arr=array();
    if(!count($del_currency))
      return false;

      $dbw = GetDBWorker();
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
      foreach($del_currency as $key=>$currency_id)
      {
        $currency_list_arr[]=$currency_id;
      }
      unset($_SESSION[S_CONTEXT]["hotel"]);
      $query="DELETE FROM ${prfx}_HTL_CURRENCY WHERE ID IN(".implode(",",$currency_list_arr).")";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    foreach($del_currency_name as $currency_id=>$currency_name)
      $currency_names_arr[]=$currency_name;
    GetEvent()->log_event("MsgCurrencyDeleted", array("%currency%" => implode(",",$currency_names_arr)));
    $_REQUEST["page"]=1;
    return true;
  }
  //-----------------------------------------------------------------
  function get_currency_list(&$ROWS_PER_PAGE, &$page)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;
    global $INFO_MESSAGE;
    global $row_count;
    global $page_count;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $pass=true;
    if(!empty($_REQUEST["action"]))
    {
      if($_REQUEST["action"]=="navigate")
      {
         $pass=false;
      }
    }
     if(!empty($_REQUEST["currency_id"]) &&  $pass)
     {
      $query="SELECT ID FROM ${prfx}_HTL_CURRENCY
                    ORDER BY ID";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $row_count=$dbw->fetched_count();
      $cnt=1;
      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("ID")==reqvar("currency_id"))
        {

          $page=ceil($cnt/$ROWS_PER_PAGE);

          break;
        }
        $cnt++;
      }
    }
    else
    {
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_CURRENCY";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      $row_count=$dbw->row["CNT"];
    }

    $page_count=ceil($row_count/$ROWS_PER_PAGE);
    $start=$page*$ROWS_PER_PAGE-$ROWS_PER_PAGE;
    if(!$row_count)
    {
      $INFO_MESSAGE=text("NoOneCurrency");
      return false;
    }
    $dbw->free_result();

    //GET DATA
    $end = ($page-1)*$ROWS_PER_PAGE + $ROWS_PER_PAGE;


    $lang_list=array_flip(hotel::$lang_list);
    $lang_list_hotel = $this->get_lang_list_hotel("_HTL_CURRENCY_PROPS");

    if(!empty($lang_list[$_SESSION["lang"]]))
    {
      $LANG_ID = $lang_list[$_SESSION["lang"]];
    }
    else
    {
      foreach($lang_list_hotel as $lang_hotel_id)
      {
        if(!empty(hotel::$lang_list[$lang_hotel_id]))
        {
          $LANG_ID = $lang_hotel_id;
          break;
        }
      }

    }

    $query=$this->get_currency_list_query($prfx, $start, $end, $ROWS_PER_PAGE, $LANG_ID);
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$currency_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$currency_list[$dbw->row["ID"]]["RATE"] = $dbw->row["RATE"];
      hotel::$currency_list[$dbw->row["ID"]]["SIGN"] = escape_html($dbw->row["SIGN"]);
      hotel::$currency_list[$dbw->row["ID"]]["NAME"] = escape_html($dbw->row["NAME"]);
      hotel::$currency_list[$dbw->row["ID"]]["COMMENT"] = escape_html($dbw->row["COMMENT"]);
      hotel::$currency_list[$dbw->row["ID"]]["IS_DEFAULT"] = escape_html($dbw->row["IS_DEFAULT"] ? "X" : "");
    }

    $dbw->free_result();
  }
  /*-----------------------------------------------*/
  function get_pricelist_data_dft()
  {

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      $_REQUEST["pricelist_data"]["checkbox"][$lang_id]=1;
    }
    $_REQUEST["pricelist_data"]["active"]=1;
  }
/*-----------------------------------------------*/
  function get_pricelist_data()
  {
    unset($_REQUEST["pricelist_data"]);
    unset($_REQUEST["special_offer_data"]);
    unset($_REQUEST["special_offer_default_season"]);

    global $ERROR;
    global $ERR_DETAILS;

    $PRICELIST_ID=$_REQUEST["pricelist_id"];

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    if(!empty($PRICELIST_ID))
    {
      $query="SELECT I_NAME, CODE, ${prfx}_HTL_PRICELIST.ACTIVE, BOOKING_PAGE, PAGE, NAME,
             DESCRIPTION, LANGUAGE_ID, BOOKING_LINK, INFO, ${prfx}_HTL_PRICELIST_PROPS.ACTIVE ACTIVE_PROP
      FROM ${prfx}_HTL_PRICELIST
                    INNER JOIN ${prfx}_HTL_PRICELIST_PROPS  ON (ID = PRICELIST_ID)
                    WHERE ID = $PRICELIST_ID";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $_REQUEST["pricelist_data"]["internal_name"] = $dbw->row["I_NAME"];
        $_REQUEST["pricelist_data"]["code"] = $dbw->row["CODE"];
        $_REQUEST["pricelist_data"]["active"] = $dbw->row["ACTIVE"];
        $_REQUEST["pricelist_data"]["page"] = $dbw->row["PAGE"];
        $_REQUEST["pricelist_data"]["booking_page"] = $dbw->row["BOOKING_PAGE"];
        $_REQUEST["pricelist_data"]["checkbox"][$dbw->row["LANGUAGE_ID"]]  = $dbw->row["ACTIVE_PROP"];
        $_REQUEST["pricelist_data"]["name"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["NAME"]);

        $_REQUEST["pricelist_data"]["description"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["DESCRIPTION"]);


        $_REQUEST["pricelist_data"]["info"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["INFO"]);




        $_REQUEST["pricelist_data"]["booking_link"][$dbw->row["LANGUAGE_ID"]] = magic_quotes_to_req ($dbw->row["BOOKING_LINK"]);
      }
      $dbw->free_result();

      //GET PRICE
       $query="SELECT ROOM_ID, SEASON_ID, PRICE1, PRICE2, PRICE_ADULT,
       PRICE_ADULT2, PRICE_ADULT_CHILD, PRICE_ADD_ADULT, PRICE_ADD_CHILD,
       MIN_NIGHTS, MAX_NIGHTS, SPECIAL_PRICE,

       PRICE_ADULT3,
       PRICE_ADULT4,
       PRICE_ADULT_CHILD2,
       PRICE_ADULT_CHILD3,
       PRICE_ADULT_CHILD4,

       PRICE_ADD_CHILD2,
       PRICE_ADD_CHILD3,
       PRICE_ADD_CHILD4

       FROM ${prfx}_HTL_PRICE
       INNER JOIN ${prfx}_HTL_ROOMS ON (${prfx}_HTL_PRICE.ROOM_ID = ${prfx}_HTL_ROOMS.ID)
                    WHERE PRICELIST_ID = ".$PRICELIST_ID .
                    " ORDER BY SORT_ORDER";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $cnt=0;
      while($dbw->fetch_row())
      {
      if(!$cnt)
        $_REQUEST["pricelist_data"]["default_season"] = $dbw->row["SEASON_ID"];
        $_REQUEST["pricelist_data"]["price1"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = $dbw->row["PRICE1"];
        $_REQUEST["pricelist_data"]["price2"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = $dbw->row["PRICE2"];
        $_REQUEST["pricelist_data"]["min_nights"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = $dbw->row["MIN_NIGHTS"];
        $_REQUEST["pricelist_data"]["max_nights"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = $dbw->row["MAX_NIGHTS"];

        //------------------------------------
        $_REQUEST["pricelist_data"]["price_adult"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = $dbw->row["PRICE_ADULT"];
        $_REQUEST["pricelist_data"]["price_adult2"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT2"];
        $_REQUEST["pricelist_data"]["price_adult3"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT3"];
        $_REQUEST["pricelist_data"]["price_adult4"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT4"];
        //------------------------------------
        $_REQUEST["pricelist_data"]["price_adult_child"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT_CHILD"];
        $_REQUEST["pricelist_data"]["price_adult_child2"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT_CHILD2"];
        $_REQUEST["pricelist_data"]["price_adult_child3"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT_CHILD3"];
        $_REQUEST["pricelist_data"]["price_adult_child4"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADULT_CHILD4"];
        //------------------------------------
        $_REQUEST["pricelist_data"]["price_add_adult"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADD_ADULT"];
        $_REQUEST["pricelist_data"]["price_add_child"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADD_CHILD"];
        $_REQUEST["pricelist_data"]["price_add_child2"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADD_CHILD2"];
        $_REQUEST["pricelist_data"]["price_add_child3"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADD_CHILD3"];
        $_REQUEST["pricelist_data"]["price_add_child4"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]]=$dbw->row["PRICE_ADD_CHILD4"];
        //------------------------------------

        if($dbw->row["SPECIAL_PRICE"] != 'SEASON_PRICE')
          $_REQUEST["individual_price"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]] = '1';

        $cnt++;
      }
      $dbw->free_result();

      // spec ofers
      // banner text

      $default_banner_text = "";

      $lang_key = $dbw->escape($_SESSION["lang"]);

      $query = "SELECT SPECOFFER_TEXT
                FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP
                LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANG_ID)
                WHERE LANG_KEY = '$lang_key'";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $default_banner_text = $dbw->field_by_name("SPECOFFER_TEXT");
      }

      $dbw->free_result();

       $query="SELECT ${prfx}_HTL_SPECIAL_OFFER.ID, ROOM_ID, SEASON_ID, PRICE, NIGHTS_COUNT, PERSONS_COUNT, CONCERN_ROOM_RULES,
               WEEKDAY_FLAG
               FROM ${prfx}_HTL_SPECIAL_OFFER
               INNER JOIN ${prfx}_HTL_ROOMS ON (${prfx}_HTL_SPECIAL_OFFER.ROOM_ID = ${prfx}_HTL_ROOMS.ID)
               WHERE PRICELIST_ID = ".$PRICELIST_ID .
               " ORDER BY SORT_ORDER, NIGHTS_COUNT";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $cnt=0;
      while($dbw->fetch_row())
      {
        if(!$cnt)
        {
          $_REQUEST["special_offer_default_season"] = $dbw->row["SEASON_ID"];
        }

        $_REQUEST["special_offer_data_texts"][$dbw->row["SEASON_ID"]] = $default_banner_text;

        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["price"] = $dbw->row["PRICE"];
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["nights_count"] = $dbw->row["NIGHTS_COUNT"];
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["persons_count"] = $dbw->row["PERSONS_COUNT"];
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["use_room_rules"] = $dbw->row["CONCERN_ROOM_RULES"];

        $flag = $dbw->row["WEEKDAY_FLAG"];

        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_1"] = ($flag & 1) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_2"] = ($flag & 2) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_3"] = ($flag & 4) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_4"] = ($flag & 8) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_5"] = ($flag & 16) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_6"] = ($flag & 32) ? 1 : 0;
        $_REQUEST["special_offer_data"][$dbw->row["SEASON_ID"]][$dbw->row["ROOM_ID"]][$dbw->row["ID"]]["arrive_7"] = ($flag & 64) ? 1 : 0;

        $cnt++;
      }
      $dbw->free_result();

      $query = "SELECT LANGUAGE_ID, SEASON_ID, SPECOFFER_TEXT
                FROM {$prfx}_HTL_SEASON_PROPS
                RIGHT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANGUAGE_ID AND  LANG_KEY = '$lang_key')
                ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $_REQUEST["special_offer_data_text_lang_ids"][$dbw->field_by_name("SEASON_ID")] = $dbw->field_by_name("LANGUAGE_ID");

        $txt = $dbw->field_by_name("SPECOFFER_TEXT");
        if(!empty($txt))
          $_REQUEST["special_offer_data_texts"][$dbw->field_by_name("SEASON_ID")] = $txt;
      }

      $dbw->free_result();

    }
  }
/*-----------------------------------------------*/
  function check_field_pricelist($name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $matches = array();

    switch($name)
    {
    case "internal_name":

      if(empty($_REQUEST["pricelist_data"]["internal_name"]))
      {
        $ERROR = text("ErrNameEmpty");
        $FOCUS_ELEMENT = 'pricelist_data[internal_name]';
        return false;
      }

      if(!validate_internal_name($_REQUEST["pricelist_data"]["internal_name"]))
      {
        $ERROR = text("ErrInternalNameInvalid");
        $FOCUS_ELEMENT = 'pricelist_data[internal_name]';
        return false;
      }

////////////////////////////

      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_PRICELIST WHERE I_NAME='".$_REQUEST["pricelist_data"]["internal_name"]."' AND ID!='".$_REQUEST["pricelist_id"]."'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
      $ERROR = text("ErrInternalNameNotUniq");
      return false;
      }
      $dbw->free_result();
////////////////////
    return true;
    break;

    /* PRICELIST_SEASON */
    case "price_data":

    if(empty($_REQUEST["season_id"]))
    {
      $ERROR = text("NoOnePricelistSeason");
      return false;
    }
    if(empty($_REQUEST["room_id"]))
    {
      $ERROR = text("NoOnePricelistRoom");
      return false;
    }

//////////////////////////////
    if((!empty($_REQUEST["pricelist_data"]["new_price1"]) || !empty($_REQUEST["pricelist_data"]["new_price2"]) || !empty($_REQUEST["pricelist_data"]["new_price_add_adult"]) || !empty($_REQUEST["pricelist_data"]["new_price_add_child"]))
    && !empty($_REQUEST["pricelist_id"]))
    {
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_PRICE
      WHERE PRICELIST_ID = ".$_REQUEST["pricelist_id"]." AND SEASON_ID = ".$_REQUEST["season_id"]." AND ROOM_ID = ".$_REQUEST["room_id"];
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      if($dbw->row["CNT"])
      {
      $ERROR = text("ErrSeasonRoomNotUniq");
      return false;
      }
      $dbw->free_result();
    }
////////////////////////////////

    if(!empty($_REQUEST["pricelist_data"]["new_price1"]))
    {
      $p = $_REQUEST["pricelist_data"]["new_price1"];
      $p = str_replace(",", ".", $p);
      if(!is_numeric($p))
      {
        $_REQUEST["pricelist_data"]["new_price1"]="";
        $FOCUS_ELEMENT="pricelist_data[new_price1]";
        $ERROR=text("ErrPriceValidation");
        return false;
      }
      else
      {
        $_REQUEST["pricelist_data"]["price1"][$_REQUEST["season_id"]][$_REQUEST["room_id"]] = $p;
      }
    }

    if(!empty($_REQUEST["pricelist_data"]["new_price2"]))
    {
      $p = $_REQUEST["pricelist_data"]["new_price2"];
      $p = str_replace(",", ".", $p);
      if(!is_numeric($p))
      {
        $_REQUEST["pricelist_data"]["new_price2"]="";
        $FOCUS_ELEMENT="pricelist_data[new_price2]";
        $ERROR=text("ErrPriceValidation");
        return false;
      }
      else
      {
       $_REQUEST["pricelist_data"]["price2"][$_REQUEST["season_id"]][$_REQUEST["room_id"]]=$p;
      }
    }

    if(!empty($_REQUEST["pricelist_data"]["new_price_add_adult"]))
    {
      $p = $_REQUEST["pricelist_data"]["new_price_add_adult"];
      $p = str_replace(",", ".", $p);
      if(!is_numeric($p))
      {
        $_REQUEST["pricelist_data"]["new_price_add_adult"]="";
        $FOCUS_ELEMENT="pricelist_data[new_price_add_adult]";
        $ERROR=text("ErrPriceValidation");
        return false;
      }
      else
      {
        $_REQUEST["pricelist_data"]["price_add_adult"][$_REQUEST["season_id"]][$_REQUEST["room_id"]] = $p;
      }
    }

    if(!empty($_REQUEST["pricelist_data"]["new_price_add_child"]))
    {
      $p = $_REQUEST["pricelist_data"]["new_price_add_child"];
      $p = str_replace(",", ".", $p);
      if(!is_numeric($p))
      {
        $_REQUEST["pricelist_data"]["new_price_add_child"]="";
        $FOCUS_ELEMENT="pricelist_data[new_price_add_child]";
        $ERROR=text("ErrPriceValidation");
        return false;
      }
      else
      {
        $_REQUEST["pricelist_data"]["price_add_child"][$_REQUEST["season_id"]][$_REQUEST["room_id"]] = $p;
      }
    }
    // else
    // {
      // $_REQUEST["pricelist_data"]["price2"][$_REQUEST["season_id"]][$_REQUEST["room_id"]] = "";
    // }


    if(!empty($_REQUEST["pricelist_data"]["price1"]) || !empty($_REQUEST["pricelist_data"]["price2"]) || !empty($_REQUEST["pricelist_data"]["price_add_adult"]) || !empty($_REQUEST["pricelist_data"]["price_add_child"]))
    {

      foreach($_REQUEST["pricelist_data"]["price1"] as $season_id => $room_arr)
      {
        foreach($room_arr as $room_id => $value)
        {
          if(!empty($value))
          {
            if(!empty($_REQUEST["pricelist_data"]["price1"][$season_id][$room_id]))
            {
              $p = str_replace(",", ".", $_REQUEST["pricelist_data"]["price1"][$season_id][$room_id]);
              if(!is_numeric($p))
              {
                $FOCUS_ELEMENT="pricelist_data[price1][$season_id][$room_id]";
              $ERROR=text("ErrPriceValidation");
              return false;
            }
              else
            {
                $_REQUEST["pricelist_data"]["price1"][$season_id][$room_id] = $p;
              }
            }

            if(!empty($_REQUEST["pricelist_data"]["price2"][$season_id][$room_id]))
            {
              $p = str_replace(",", ".", $_REQUEST["pricelist_data"]["price2"][$season_id][$room_id]);
              if(!is_numeric($p))
              {
                $FOCUS_ELEMENT="pricelist_data[price2][$season_id][$room_id]";
              $ERROR=text("ErrPriceValidation");
              return false;
            }
              else
              {
                $_REQUEST["pricelist_data"]["price2"][$season_id][$room_id] = $p;
              }
            }

            if(!empty($_REQUEST["pricelist_data"]["price_add_adult"][$season_id][$room_id]))
            {
              $p = str_replace(",", ".", $_REQUEST["pricelist_data"]["price_add_adult"][$season_id][$room_id]);
              if(!is_numeric($p))
              {
                $FOCUS_ELEMENT="pricelist_data[price_add_adult][$season_id][$room_id]";
              $ERROR=text("ErrPriceValidation");
              return false;
            }
              else
              {
                $_REQUEST["pricelist_data"]["price_add_adult"][$season_id][$room_id] = $p;
              }
            }

            if(!empty($_REQUEST["pricelist_data"]["price_add_child"][$season_id][$room_id]))
            {
              $p = str_replace(",", ".", $_REQUEST["pricelist_data"]["price_add_child"][$season_id][$room_id]);
              if(!is_numeric($p))
              {
                $FOCUS_ELEMENT="pricelist_data[price_add_child][$season_id][$room_id]";
              $ERROR=text("ErrPriceValidation");
              return false;
            }
              else
              {
                $_REQUEST["pricelist_data"]["price_add_child"][$season_id][$room_id] = $p;
              }
            }
          }
        }
      }
    }

    return true;
    break;

    case "special_offer_data":
    if(empty($_REQUEST["season_id"]))
    {
      $ERROR = text("NoOnePricelistSeason");
      return false;
    }
    if(empty($_REQUEST["room_id"]))
    {
      $ERROR = text("NoOnePricelistRoom");
      return false;
    }

    if(!empty($_REQUEST["new_price"]))
    {
      $p = $_REQUEST["new_price"];
      $p = str_replace(",", ".", $p);
      if(!is_numeric($p) || $p <= 0)
      {
        $FOCUS_ELEMENT="new_price";
        $ERROR=text("ErrPriceValidation");
        return false;
      }

      $p = ifnull($_REQUEST["new_persons_cnt"]);
      if(!is_numeric($p) || $p <= 0)
      {
        $FOCUS_ELEMENT="new_persons_cnt";
        $ERROR=text("ErrPersonsIntegerNumberExpected");
        return false;
      }

      $p = ifnull($_REQUEST["new_nights_cnt"]);
      if(!is_numeric($p) || $p <= 0)
      {
        $FOCUS_ELEMENT="new_nights_cnt";
        $ERROR=text("ErrNightsIntegerNumberExpected");
        return false;
      }
    }

    if(!empty($_REQUEST["special_offer_data"]))
    {
      foreach($_REQUEST["special_offer_data"] as $season_id => $rooms_arr)
      {
        foreach($rooms_arr as $room_id => $rooms)
        {
          foreach($rooms as $id => $room_info)
          {
            $p = $room_info["price"];
            $p = str_replace(",", ".", $p);
            if(!is_numeric($p) || $p <= 0)
            {
              $FOCUS_ELEMENT="special_offer_data[$season_id][$room_id][$id][price]";
              $ERROR=text("ErrPriceValidation");
              return false;
            }

            $p = ifnull($room_info["persons_count"]);
            if(!is_numeric($p) || $p <= 0)
            {
              $FOCUS_ELEMENT="special_offer_data[$season_id][$room_id][$id][persons_count]";
              $ERROR=text("ErrPersonsIntegerNumberExpected");
              return false;
            }

            $p = ifnull($room_info["nights_count"]);
            if(!is_numeric($p) || $p <= 0)
            {
              $FOCUS_ELEMENT="special_offer_data[$season_id][$room_id][$id][persons_count]";
              $ERROR=text("ErrNightsIntegerNumberExpected");
              return false;
            }
          }
        }
      }
    }

    return true;
    break;

    /* PRICELIST_DATA */
    case "pricelist_data":

    foreach(hotel::$lang_list as $lang_id=>$value)
    {
      if(!empty($_REQUEST["pricelist_data"]["checkbox"][$lang_id]))
      {
        if(empty($_REQUEST["pricelist_data"]["name"][$lang_id]))
        {
          $FOCUS_ELEMENT="pricelist_data[name][$lang_id]";
          $ERROR=text("ErrNameEmpty");
          return false;
        }
      }
    }

    return true;
    break;

    case "page":
    if(empty($_REQUEST["pricelist_data"]["page"]))
    {
      $FOCUS_ELEMENT="pricelist_data[page]";
      $ERROR=text("errDitailsPageEmpty");
      return false;
    }
    return true;
    break;
    }
  }
  /*-----------------------------------------------*/
  function save_pricelist_data($save_all = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $PRICELIST_TYPE;
    $EVENT="";
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

     // CHECK DATA
    if(!$this->check_field_pricelist("internal_name")) return false;
    if(!$this->check_field_pricelist("page")) return false;
    if(!$this->check_field_pricelist("price_data")) return false;
    if(!$this->check_field_pricelist("special_offer_data")) return false;
    if(!$this->check_field_pricelist("pricelist_data")) return false;

    //SAVE DATA
    if(!empty($_REQUEST["pricelist_id"]))
    {
      $PRICELIST_ID=$_REQUEST["pricelist_id"];
      $EVENT="update";
    }
    else
    {
      $PRICELIST_ID=0;
      $EVENT="create";
    }

    $I_NAME = $_REQUEST["pricelist_data"]["internal_name"];
    $ACTIVE = !empty($_REQUEST["pricelist_data"]["active"]) ? $_REQUEST["pricelist_data"]["active"] : 0;
    $PAGE = $_REQUEST["pricelist_data"]["page"];

    $BOOKING_PAGE = !empty($_REQUEST["pricelist_data"]["booking_page"]) ? $_REQUEST["pricelist_data"]["booking_page"] : '';

    // START TRANSACTION
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $query = $this->save_pricelist_procedure($prfx, "$PRICELIST_ID, '$I_NAME', '$ACTIVE', $PRICELIST_TYPE, '$BOOKING_PAGE', '$PAGE'");

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    $query=$this->get_last_insert_id();
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
     $dbw->rollback_transaction();
      return false;
    }
    $dbw->fetch_row();
    if(empty($PRICELIST_ID))
      $PRICELIST_ID=$dbw->row["LAST_ID"];
    $dbw->free_result();

    $code = $dbw->escape(ifnull($_REQUEST["pricelist_data"]["code"]));
    $query = "UPDATE ${prfx}_HTL_PRICELIST SET CODE = '$code' WHERE ID = $PRICELIST_ID";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    // SAVE PROPS INFO

    foreach($_REQUEST["pricelist_data"]["name"] as $lang_id=>$value)
    {

      $PRICELIST_NAME = $dbw->escape(magic_quotes_from_req($value));
      $PRICELIST_DESCRIPTION = $dbw->escape(magic_quotes_from_req($_REQUEST["pricelist_data"]["description"][$lang_id]));
      $PRICELIST_INFO = $dbw->escape(magic_quotes_from_req($_REQUEST["pricelist_data"]["info"][$lang_id]));
      $BOOKING_LINK = $dbw->escape(magic_quotes_from_req($_REQUEST["pricelist_data"]["booking_link"][$lang_id]));
      $ACTIVE = !empty($_REQUEST["pricelist_data"]["checkbox"][$lang_id]) ? 1 : 0;
      $query=$this->save_pricelist_props_procedure($prfx, "$PRICELIST_ID, '$PRICELIST_NAME', '$PRICELIST_DESCRIPTION', $lang_id, '$BOOKING_LINK' , '$PRICELIST_INFO', '$ACTIVE'");
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

    }
    //SAVE PRICE
    if(!empty($_REQUEST["pricelist_data"]["price1"]) || !empty($_REQUEST["pricelist_data"]["price2"]) || !empty($_REQUEST["pricelist_data"]["price_add_adult"]) || !empty($_REQUEST["pricelist_data"]["price_add_child"]))
    {
      $_SESSION["pricelist_save_warning"] = array();
      foreach($_REQUEST["pricelist_data"]["price1"] as $SEASON_ID => $price_arr)
      {
        foreach($price_arr as $ROOM_ID => $value)
        {
          if(!empty($value))
          {
            $PRICE1 = $value;
          }
          else
          {
            $PRICE1 = 0;
          }
          if(!empty($_REQUEST["pricelist_data"]["price2"][$SEASON_ID][$ROOM_ID]))
          {
            $PRICE2 = $_REQUEST["pricelist_data"]["price2"][$SEASON_ID][$ROOM_ID];
          }
          else
          {
            $PRICE2 = 0;
          }

          if(!empty($_REQUEST["pricelist_data"]["min_nights"][$SEASON_ID][$ROOM_ID]) && is_numeric($_REQUEST["pricelist_data"]["min_nights"][$SEASON_ID][$ROOM_ID]))
          {
            $MIN_NIGHTS = $_REQUEST["pricelist_data"]["min_nights"][$SEASON_ID][$ROOM_ID];
          }
          else
          {
            $MIN_NIGHTS = 1;
          }

          if(!empty($_REQUEST["pricelist_data"]["max_nights"][$SEASON_ID][$ROOM_ID]) && is_numeric($_REQUEST["pricelist_data"]["max_nights"][$SEASON_ID][$ROOM_ID]))
          {
            $MAX_NIGHTS = $_REQUEST["pricelist_data"]["max_nights"][$SEASON_ID][$ROOM_ID];
          }
          else
          {
            $MAX_NIGHTS = null_if_empty("");
          }

          $SPECIAL_PRICE = 'SEASON_PRICE';
          if(!empty($_REQUEST["individual_price"][$SEASON_ID][$ROOM_ID]))
            $SPECIAL_PRICE = 'INDIVIDUAL';

          if($SPECIAL_PRICE == 'SEASON_PRICE')
          {
            $PRICE_ADULT = $this->calculate_price('price_adult', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT2 = $this->calculate_price('price_adult2', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT3 = $this->calculate_price('price_adult3', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT4 = $this->calculate_price('price_adult4', $ROOM_ID, $PRICE1, $dbw);

            $PRICE_ADULT_CHILD = $this->calculate_price('price_adult_child', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT_CHILD2 = $this->calculate_price('price_adult_child2', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT_CHILD3 = $this->calculate_price('price_adult_child3', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADULT_CHILD4 = $this->calculate_price('price_adult_child4', $ROOM_ID, $PRICE1, $dbw);

            $PRICE_ADD_ADULT = $this->calculate_price('price_add_adult', $ROOM_ID, $PRICE1, $dbw);

            $PRICE_ADD_CHILD = $this->calculate_price('price_add_child', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADD_CHILD2 = $this->calculate_price('price_add_child2', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADD_CHILD3 = $this->calculate_price('price_add_child3', $ROOM_ID, $PRICE1, $dbw);
            $PRICE_ADD_CHILD4 = $this->calculate_price('price_add_child4', $ROOM_ID, $PRICE1, $dbw);
          }
          else
          {
            $PRICE_ADULT = ifnull($_REQUEST["pricelist_data"]["price_adult"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT)) $PRICE_ADULT = 0;
            $PRICE_ADULT2 = ifnull($_REQUEST["pricelist_data"]["price_adult2"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT2)) $PRICE_ADULT2 = 0;
            $PRICE_ADULT3 = ifnull($_REQUEST["pricelist_data"]["price_adult3"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT3)) $PRICE_ADULT3 = 0;
            $PRICE_ADULT4 = ifnull($_REQUEST["pricelist_data"]["price_adult4"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT4)) $PRICE_ADULT4 = 0;
            $PRICE_ADULT_CHILD = ifnull($_REQUEST["pricelist_data"]["price_adult_child"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT_CHILD)) $PRICE_ADULT_CHILD = 0;
            $PRICE_ADULT_CHILD2 = ifnull($_REQUEST["pricelist_data"]["price_adult_child2"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT_CHILD2)) $PRICE_ADULT_CHILD2 = 0;
            $PRICE_ADULT_CHILD3 = ifnull($_REQUEST["pricelist_data"]["price_adult_child3"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT_CHILD3)) $PRICE_ADULT_CHILD3 = 0;
            $PRICE_ADULT_CHILD4 = ifnull($_REQUEST["pricelist_data"]["price_adult_child4"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADULT_CHILD4)) $PRICE_ADULT_CHILD4 = 0;

            $PRICE_ADD_ADULT = ifnull($_REQUEST["pricelist_data"]["price_add_adult"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADD_ADULT)) $PRICE_ADD_ADULT = 0;

            $PRICE_ADD_CHILD = ifnull($_REQUEST["pricelist_data"]["price_add_child"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADD_CHILD)) $PRICE_ADD_CHILD = 0;
            $PRICE_ADD_CHILD2 = ifnull($_REQUEST["pricelist_data"]["price_add_child2"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADD_CHILD2)) $PRICE_ADD_CHILD2 = 0;
            $PRICE_ADD_CHILD3 = ifnull($_REQUEST["pricelist_data"]["price_add_child3"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADD_CHILD3)) $PRICE_ADD_CHILD3 = 0;
            $PRICE_ADD_CHILD4 = ifnull($_REQUEST["pricelist_data"]["price_add_child4"][$SEASON_ID][$ROOM_ID]);
            if(empty($PRICE_ADD_CHILD4)) $PRICE_ADD_CHILD4 = 0;
          }

          $query = $this->save_price_procedure($prfx, "$PRICELIST_ID, $ROOM_ID, $SEASON_ID, $PRICE1, $PRICE2, $PRICE_ADULT, $PRICE_ADULT2, $PRICE_ADULT3, $PRICE_ADULT4, $PRICE_ADULT_CHILD, $PRICE_ADULT_CHILD2, $PRICE_ADULT_CHILD3, $PRICE_ADULT_CHILD4, $PRICE_ADD_ADULT, $PRICE_ADD_CHILD, $PRICE_ADD_CHILD2, $PRICE_ADD_CHILD3, $PRICE_ADD_CHILD4, $MIN_NIGHTS, $MAX_NIGHTS, '$SPECIAL_PRICE'");

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          // we propagate only by pricelist NOT by special offers
          if($PRICELIST_TYPE != 1) continue;

          if($this->external_manager_active()) continue;
          
          //get season dates(times)
          $query = "SELECT FROM_DATE, TO_DATE
                    FROM {$prfx}_HTL_SEASON_PERIODS
                    WHERE SEASON_ID = $SEASON_ID";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
          $season_dates = array();
          $i = 0;
          while($dbw->fetch_row())
          {
            $season_dates[$SEASON_ID][$i]["from_date"] = strtotime($dbw->field_by_name("FROM_DATE"));
            $season_dates[$SEASON_ID][$i]["to_date"] = strtotime($dbw->field_by_name("TO_DATE"));
            $i++;
          }

          $dbw->free_result();

          //create dates array
          $dates = array();
          foreach($season_dates[$SEASON_ID] as $periods)
          {
            for($time = $periods["from_date"]; $time <= $periods["to_date"]; $time = strtotime("+1 day", $time))
            {
              $dates[$dbw->format_date($time)] = $dbw->format_date($time);
            }//for

            //check, that there is no data in rooms_availability table on this date
            foreach($dates as $date)
            {
              $date = $dbw->escape($date);
              $query = "SELECT PRICE_TYPE
                        FROM {$prfx}_HTL_ROOM_AVAILABILITY
                        WHERE ROOM_ID = $ROOM_ID AND DATE = '$date'";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              $price_type = '';
              while($dbw->fetch_row())
              {
                //$count = $dbw->field_by_name("CNT");
                $price_type = $dbw->field_by_name("PRICE_TYPE");
              }

              $dbw->free_result();

              if(!$save_all)
              {
                if($price_type == 'INDIVIDUAL')
                {
                  $_SESSION["pricelist_save_warning"]["rooms"][$ROOM_ID]["dates"][$date] = format_date($date, text("DateFormat"));
                  continue;
                }
              }

              //get rooms count
              $query = "SELECT ROOMS_COUNT, PRICING_TYPE, WITH_CHILDREN, DISCOUNT_FLAG, DISCOUNT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, STANDARD_ALLOCATION
                        FROM {$prfx}_HTL_ROOMS WHERE ID = $ROOM_ID";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              while($dbw->fetch_row())
              {
                $pricing_type = $dbw->field_by_name("PRICING_TYPE");
                $max_count = $dbw->field_by_name("ROOMS_COUNT");
                $with_children = $dbw->field_by_name("WITH_CHILDREN");
                $standard_allocation = $dbw->field_by_name("STANDARD_ALLOCATION");
                $discount = $dbw->field_by_name("DISCOUNT");
                if(empty($discount))
                  $discount = 0;
                $discount_flag = $dbw->field_by_name("DISCOUNT_FLAG");
                if(empty($discount_flag))
                  $discount_flag = 0;
                $child_discount_flag = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
                if(empty($child_discount_flag))
                  $child_discount_flag = 0;
                $child_discount = $dbw->field_by_name("CHILD_DISCOUNT");
                if(empty($child_discount))
                  $child_discount = 0;
              }

              $dbw->free_result();

              /*
              if($pricing_type == 1)
                continue;
              */
              //get prices
              $query = "SELECT PRICE1, PRICE2,
                        PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4,
                        PRICE_ADULT_CHILD,
                        PRICE_ADULT_CHILD2,
                        PRICE_ADULT_CHILD3,
                        PRICE_ADULT_CHILD4,
                        PRICE_ADD_ADULT,
                        PRICE_ADD_CHILD,
                        PRICE_ADD_CHILD2,
                        PRICE_ADD_CHILD3,
                        PRICE_ADD_CHILD4,
                        MIN_NIGHTS, MAX_NIGHTS
                        FROM {$prfx}_HTL_PRICE
                        WHERE PRICELIST_ID = $PRICELIST_ID AND ROOM_ID = $ROOM_ID AND SEASON_ID = $SEASON_ID";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              while($dbw->fetch_row())
              {
                $season_price1 = $dbw->field_by_name("PRICE1");
                $season_price2 = $dbw->field_by_name("PRICE2");
                $season_price_adult = $dbw->field_by_name("PRICE_ADULT");
                $season_price_adult2 = $dbw->field_by_name("PRICE_ADULT2");
                $season_price_adult3 = $dbw->field_by_name("PRICE_ADULT3");
                $season_price_adult4 = $dbw->field_by_name("PRICE_ADULT4");
                $season_price_adult_child = $dbw->field_by_name("PRICE_ADULT_CHILD");
                $season_price_adult_child2 = $dbw->field_by_name("PRICE_ADULT_CHILD2");
                $season_price_adult_child3 = $dbw->field_by_name("PRICE_ADULT_CHILD3");
                $season_price_adult_child4 = $dbw->field_by_name("PRICE_ADULT_CHILD4");
                $season_price_add_adult = $dbw->field_by_name("PRICE_ADD_ADULT");
                $season_price_add_child = $dbw->field_by_name("PRICE_ADD_CHILD");
                $season_price_add_child2 = $dbw->field_by_name("PRICE_ADD_CHILD2");
                $season_price_add_child3 = $dbw->field_by_name("PRICE_ADD_CHILD3");
                $season_price_add_child4 = $dbw->field_by_name("PRICE_ADD_CHILD4");
                $season_min_nights = $dbw->field_by_name("MIN_NIGHTS");
                $season_max_nights = $dbw->field_by_name("MAX_NIGHTS");
              }

              $dbw->free_result();

              // we keep this data

              $query = "SELECT ARRIVAL, DEPARTURE, ROOM_COUNT, MIN_NIGHTS, MAX_NIGHTS
                        FROM {$prfx}_HTL_ROOM_AVAILABILITY
                        WHERE ROOM_ID = $ROOM_ID AND DATE = '$date'";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              $ARRIVAL = '1';
              $DEPARTURE = '1';

              while($dbw->fetch_row())
              {
                $max_count = $dbw->field_by_name("ROOM_COUNT");
                $ARRIVAL = $dbw->field_by_name("ARRIVAL");
                if(empty($ARRIVAL)) $ARRIVAL = "0";

                $DEPARTURE = $dbw->field_by_name("DEPARTURE");
                if(empty($DEPARTURE)) $DEPARTURE = "0";
              }

              $dbw->free_result();

              //delete record
              $query = "DELETE FROM {$prfx}_HTL_ROOM_AVAILABILITY
                        WHERE ROOM_ID = $ROOM_ID AND DATE = '$date'";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              $dbw->free_result();

              //create the record
              //prepare_data
              $price_type = $dbw->escape("SEASON_PRICE");
              $price_adult = null_if_empty($dbw->escape($season_price_adult));
              $price_adult2 = null_if_empty($dbw->escape($season_price_adult2));
              $price_adult3 = null_if_empty($dbw->escape($season_price_adult3));
              $price_adult4 = null_if_empty($dbw->escape($season_price_adult4));
              $price_adult_child = null_if_empty($dbw->escape($season_price_adult_child));
              $price_adult_child2 = null_if_empty($dbw->escape($season_price_adult_child2));
              $price_adult_child3 = null_if_empty($dbw->escape($season_price_adult_child3));
              $price_adult_child4 = null_if_empty($dbw->escape($season_price_adult_child4));
              $price_add_adult = null_if_empty($dbw->escape($season_price_add_adult));
              $price_add_child = null_if_empty($dbw->escape($season_price_add_child));
              $price_add_child2 = null_if_empty($dbw->escape($season_price_add_child2));
              $price_add_child3 = null_if_empty($dbw->escape($season_price_add_child3));
              $price_add_child4 = null_if_empty($dbw->escape($season_price_add_child4));

              $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                        (ROOM_ID, ARRIVAL, DEPARTURE, ROOM_COUNT, DATE, PRICE_TYPE, PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4, PRICE_ADULT_CHILD, PRICE_ADULT_CHILD2, PRICE_ADULT_CHILD3, PRICE_ADULT_CHILD4, PRICE_ADD_ADULT, PRICE_ADD_CHILD, PRICE_ADD_CHILD2, PRICE_ADD_CHILD3, PRICE_ADD_CHILD4, MIN_NIGHTS, MAX_NIGHTS)
                        VALUES ($ROOM_ID, '$ARRIVAL', '$DEPARTURE', $max_count, '$date', '$price_type', $price_adult, $price_adult2, $price_adult3, $price_adult4, $price_adult_child, $price_adult_child2, $price_adult_child3, $price_adult_child4, $price_add_adult, $price_add_child, $price_add_child2, $price_add_child3, $price_add_child4, $MIN_NIGHTS, $MAX_NIGHTS)";

              if(!$dbw->execute_query($query))
              {
                $ERROR = text("ErrQueryFailed");
                $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                               $dbw->get_last_query();
                $dbw->rollback_transaction();
                return false;
              }

              $dbw->free_result();
            }//foreach
          }//foreach
        }//foreach
      }//foreach
    }//if

    // save special offers

    if(!empty($_REQUEST["new_price"]))
    {
      $p = $_REQUEST["new_price"];
      $p = str_replace(",", ".", $p);
      if(empty($p)) $p = 0;

      $pc = ifnull($_REQUEST["new_persons_cnt"]);
      if(empty($pc)) $pc = 1;

      $nc = ifnull($_REQUEST["new_nights_cnt"]);
      if(empty($nc)) $nc = 1;


      $SEASON_ID = $dbw->escape(reqvar("season_id2"));
      $ROOM_ID = $dbw->escape(reqvar("room_id2"));

      $query = "INSERT INTO {$prfx}_HTL_SPECIAL_OFFER
                (PRICELIST_ID, ROOM_ID, SEASON_ID, PRICE, NIGHTS_COUNT, PERSONS_COUNT)
                VALUES
                ($PRICELIST_ID, $ROOM_ID, $SEASON_ID, $p, $nc, $pc)";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if(!empty($_REQUEST["special_offer_data"]))
    {
      foreach($_REQUEST["special_offer_data"] as $season_id => $rooms_arr)
      {
        foreach($rooms_arr as $room_id => $rooms)
        {
          foreach($rooms as $id => $room_info)
          {
            $p = $room_info["price"];
            $p = str_replace(",", ".", $p);
            if(empty($p)) $p = 0;

            $pc = ifnull($room_info["persons_count"]);
            if(empty($pc)) $pc = 1;

            $nc = ifnull($room_info["nights_count"]);
            if(empty($nc)) $nc = 1;

            $use_room_rules = empty($room_info["use_room_rules"]) ? "0" : "1";

            $flag = 0;

            if(!empty($room_info["arrive_1"])) $flag |= 1;
            if(!empty($room_info["arrive_2"])) $flag |= 2;
            if(!empty($room_info["arrive_3"])) $flag |= 4;
            if(!empty($room_info["arrive_4"])) $flag |= 8;
            if(!empty($room_info["arrive_5"])) $flag |= 16;
            if(!empty($room_info["arrive_6"])) $flag |= 32;
            if(!empty($room_info["arrive_7"])) $flag |= 64;

            $query = "UPDATE {$prfx}_HTL_SPECIAL_OFFER SET
                      PRICE = $p,
                      NIGHTS_COUNT = $nc,
                      PERSONS_COUNT = $pc,
                      CONCERN_ROOM_RULES = '$use_room_rules',
                      WEEKDAY_FLAG = $flag
                      WHERE ID = $id
                      ";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }
          }
        }
      }
    }


    //DELETE PRICE
    if($_REQUEST["action"]=='DeletePrice')
    {
      $season_id_arr = array();
      $room_id_arr = array();

      if(!empty($_REQUEST["pricelist_data"]["price_checkbox"]))
      {
        foreach($_REQUEST["pricelist_data"]["price_checkbox"] as $season_id => $room_arr)
        {
          foreach($room_arr as $room_id => $value)
          {
            if($value == 1)
            {
              $season_id_arr[] = $season_id;
              $room_id_arr[] = $room_id;
            }
          }
        }

        $appendix="";
        foreach($season_id_arr as $key => $value)
        {
          $appendix.="(SEASON_ID = ".$season_id_arr[$key]." AND ROOM_ID = ".$room_id_arr[$key].")";
          if($key < count($season_id_arr)-1)
          $appendix.=" OR ";
        }
        $query="DELETE FROM ${prfx}_HTL_PRICE WHERE PRICELIST_ID = $PRICELIST_ID AND ($appendix)";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }

    }


    //DELETE PRICE
    if($_REQUEST["action"]=='DeleteOffer')
    {
      if(!empty($_REQUEST["special_offer_data_delete"]["price_checkbox"]))
      {
        $in_list = implode(",", array_keys($_REQUEST["special_offer_data_delete"]["price_checkbox"]));

        $query="DELETE FROM ${prfx}_HTL_SPECIAL_OFFER WHERE ID IN ($in_list)";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }

    }

    //COMMIT
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $dbw->free_result();
    $INFO_MESSAGE = text("MsgDataSaved");
    $_REQUEST["pricelist_id"]=$PRICELIST_ID;

    $_REQUEST["new_price"] = "";
    $_REQUEST["new_persons_cnt"] = "";
    $_REQUEST["new_nights_cnt"] = "";

    if($EVENT == "update")
      GetEvent()->log_event("MsgPricelistUpdated", array("%pricelist%" => $I_NAME));
    else if($EVENT =="create")
      GetEvent()->log_event("MsgPricelistCreated", array("%pricelist%" => $I_NAME));

    return true;
  }
  /*-----------------------------------------------*/
  function delete_pricelist(&$del_pricelist,&$del_pricelist_name)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $pricelist_list_arr=array();
    $pricelist_names_arr=array();
    if(!count($del_pricelist))
      return false;

      $dbw = GetDBWorker();
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
      foreach($del_pricelist as $key=>$pricelist_id)
      {
        $pricelist_list_arr[]=$pricelist_id;
      }
      unset($_SESSION[S_CONTEXT]["hotel"]);
      $query="DELETE FROM ${prfx}_HTL_PRICELIST WHERE ID IN(".implode(",",$pricelist_list_arr).")";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    foreach($del_pricelist_name as $pricelist_id=>$pricelist_name)
      $pricelist_names_arr[]=$pricelist_name;
    GetEvent()->log_event("MsgPricelistDeleted", array("%pricelist%" => implode(",",$pricelist_names_arr)));
    $_REQUEST["page"]=1;
    return true;
  }

  /*-----------------------------------------------*/


  //-----------------------------------------------------------------
  function get_pricelist_list(&$ROWS_PER_PAGE, &$page)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;
    global $INFO_MESSAGE;
    global $row_count;
    global $page_count;
    global $PRICELIST_TYPE;
    global $PRICELIST_TYPE_NAME;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $pass=true;
    if(!empty($_REQUEST["action"]))
    {
      if($_REQUEST["action"]=="navigate")
      {
         $pass=false;
      }
    }
     if(!empty($_REQUEST["pricelist_id"]) &&  $pass)
     {
      $query="SELECT ID FROM ${prfx}_HTL_PRICELIST
                    WHERE TYPE = $PRICELIST_TYPE
                    ORDER BY ID";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $row_count=$dbw->fetched_count();
      $cnt=1;
      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("ID")==reqvar("pricelist_id"))
        {

          $page=ceil($cnt/$ROWS_PER_PAGE);

          break;
        }
        $cnt++;
      }
    }
    else
    {
      $query="SELECT COUNT(*) CNT FROM ${prfx}_HTL_PRICELIST
                    WHERE TYPE = $PRICELIST_TYPE";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      $dbw->fetch_row();
      $row_count=$dbw->row["CNT"];
    }

    $page_count=ceil($row_count/$ROWS_PER_PAGE);
    $start=$page*$ROWS_PER_PAGE-$ROWS_PER_PAGE;
    if(!$row_count)
    {
      return true;
    }
    $dbw->free_result();

    //GET DATA
    $end = ($page-1)*$ROWS_PER_PAGE + $ROWS_PER_PAGE;
    $lang_list=array_flip(hotel::$lang_list);
    $lang_list_hotel = $this->get_lang_list_hotel("_HTL_PRICELIST_PROPS");

    if(!empty($lang_list[$_SESSION["lang"]]))
    {
      $LANG_ID = $lang_list[$_SESSION["lang"]];
    }
    else
    {
      foreach($lang_list_hotel as $lang_hotel_id)
      {
        if(!empty(hotel::$lang_list[$lang_hotel_id]))
        {
          $LANG_ID = $lang_hotel_id;
          break;
        }
      }

    }

    $query=$this->get_pricelist_list_query($prfx, $start, $end, $ROWS_PER_PAGE, $LANG_ID, $PRICELIST_TYPE);
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$pricelist_list[$dbw->row["ID"]]["ID"] = $dbw->row["ID"];
      hotel::$pricelist_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$pricelist_list[$dbw->row["ID"]]["NAME"] = escape_html($dbw->row["NAME"]);
      hotel::$pricelist_list[$dbw->row["ID"]]["DESCRIPTION"] = escape_html($dbw->row["DESCRIPTION"]);
    }
    //GET PERIODS
    $dbw->free_result();
    foreach( hotel::$pricelist_list as $pricelist_id => $key)
    {
      $this->get_pricelist_periods($pricelist_id);
    }
  }
  /*-----------------------------------------------*/
  function get_pricelist_periods(&$pricelist_id)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
      $query="SELECT FROM_DATE, TO_DATE, I_NAME SEASON_I_NAME FROM ${prfx}_HTL_SEASON_PERIODS
                  INNER JOIN ${prfx}_HTL_SEASON ON (ID = ${prfx}_HTL_SEASON_PERIODS.SEASON_ID)
                  WHERE SEASON_ID IN (SELECT DISTINCT ${prfx}_HTL_PRICE.SEASON_ID FROM ${prfx}_HTL_PRICE WHERE PRICELIST_ID = $pricelist_id)
                    ORDER BY FROM_DATE";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      while($dbw->fetch_row())
      {
        hotel::$pricelist_list[$pricelist_id]["FROM_DATE"][$dbw->row["SEASON_I_NAME"]][] = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
        hotel::$pricelist_list[$pricelist_id]["TO_DATE"][$dbw->row["SEASON_I_NAME"]][] = format_date($dbw->row["TO_DATE"], text("DateFormat"));
      }
      $dbw->free_result();
  }
  /*-----------------------------------------------*/
  function get_pricelist_seasons()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //GET DATA
    $query="SELECT ID, I_NAME, SEASON_START FROM ${prfx}_HTL_SEASON
              LEFT JOIN (SELECT SEASON_ID, MIN(FROM_DATE) SEASON_START FROM ${prfx}_HTL_SEASON_PERIODS
              GROUP BY SEASON_ID) SEASON_STARTS ON (SEASON_STARTS.SEASON_ID = ID)
              ORDER BY SEASON_START";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$seasons_list[$dbw->row["ID"]] = $dbw->row["I_NAME"];
    }

    $dbw->free_result();
    return true;
  }
  /*-----------------------------------------------*/
  function get_pricelist_currency()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //GET DATA
    $query="SELECT I_NAME, RATE, IS_DEFAULT FROM ${prfx}_HTL_CURRENCY";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$currency_list[$dbw->row["I_NAME"]] = $dbw->row["RATE"];

      if($dbw->row["IS_DEFAULT"]) $_SESSION[S_CONTEXT]["hotel"]["default_currency"] = $dbw->row["I_NAME"];
    }
    $dbw->free_result();

    return true;
  }
  /*-----------------------------------------------*/
  function get_pricelist_rooms($LANG_ID = null)
  {

    global $ERROR;
    global $ERR_DETAILS;
    global $DEFAULT_LANGUAGE;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //GET DATA
    $where = '';
    if($LANG_ID == null)
    {
      $lang_list=array_flip(hotel::$lang_list);
      $lang_list_hotel = $this->get_lang_list_hotel("_HTL_ROOMS_PROPS");

      if(!empty($lang_list[$_SESSION["lang"]]))
      {
        $LANG_ID = $lang_list[$_SESSION["lang"]];
      }
      else
      {
        foreach($lang_list_hotel as $lang_hotel_id)
        {
          if(!empty(hotel::$lang_list[$lang_hotel_id]))
          {
            $LANG_ID = $lang_hotel_id;
            break;
          }
        }

      }

    }
    else
    {
      //$where = " WHERE LANGUAGE_ID = $LANG_ID AND ACTIVE = '1'";
    }
    $query = "SELECT ID, I_NAME, PAGE, TYPE, DESCRIPTION, CATEGORY, STANDARD_ALLOCATION,
                  MIN_PERSONS, MAX_PERSONS, WITH_CHILDREN, PRICING_TYPE,
                  DISCOUNT_FLAG, DISCOUNT,

                  ROOM_TYPE,

                  MAX_ADULTS,

                  MAX_CHILD_AGE,
                  CHILD_DISCOUNT_FLAG,
                  CHILD_DISCOUNT,
                  MAX_CHILD_AGE2,
                  CHILD_DISCOUNT_FLAG2,
                  CHILD_DISCOUNT2,
                  MAX_CHILD_AGE3,
                  CHILD_DISCOUNT_FLAG3,
                  CHILD_DISCOUNT3,
                  MAX_CHILD_AGE4,
                  CHILD_DISCOUNT_FLAG4,
                  CHILD_DISCOUNT4,

                  ADD_MAX_CHILD_AGE,
                  ADD_CHILD_DISCOUNT_FLAG,
                  ADD_CHILD_DISCOUNT,
                  ADD_MAX_CHILD_AGE2,
                  ADD_CHILD_DISCOUNT_FLAG2,
                  ADD_CHILD_DISCOUNT2,
                  ADD_MAX_CHILD_AGE3,
                  ADD_CHILD_DISCOUNT_FLAG3,
                  ADD_CHILD_DISCOUNT3,
                  ADD_MAX_CHILD_AGE4,
                  ADD_CHILD_DISCOUNT_FLAG4,
                  ADD_CHILD_DISCOUNT4

                  FROM ${prfx}_HTL_ROOMS
                  LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON (ROOM_ID = ID AND LANGUAGE_ID = $LANG_ID)
                  ORDER BY SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    while($dbw->fetch_row())
    {
      hotel::$rooms_list[$dbw->row["ID"]]["I_NAME"] = $dbw->row["I_NAME"];
      hotel::$rooms_list[$dbw->row["ID"]]["PAGE"] = $dbw->row["PAGE"];
      hotel::$rooms_list[$dbw->row["ID"]]["TYPE"] = $dbw->row["TYPE"];
      hotel::$rooms_list[$dbw->row["ID"]]["ROOM_TYPE"] = $dbw->row["ROOM_TYPE"];
      hotel::$rooms_list[$dbw->row["ID"]]["DESCRIPTION"] = $dbw->row["DESCRIPTION"];
      hotel::$rooms_list[$dbw->row["ID"]]["CATEGORY"] = $dbw->row["CATEGORY"];
      hotel::$rooms_list[$dbw->row["ID"]]["STANDARD_ALLOCATION"] = $dbw->row["STANDARD_ALLOCATION"];
      hotel::$rooms_list[$dbw->row["ID"]]["MIN_PERSONS"] = $dbw->row["MIN_PERSONS"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_PERSONS"] = $dbw->row["MAX_PERSONS"];
      hotel::$rooms_list[$dbw->row["ID"]]["WITH_CHILDREN"] = $dbw->row["WITH_CHILDREN"];
      hotel::$rooms_list[$dbw->row["ID"]]["PRICING_TYPE"] = $dbw->row["PRICING_TYPE"];
      hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT_FLAG"] = $dbw->row["DISCOUNT_FLAG"];
      hotel::$rooms_list[$dbw->row["ID"]]["DISCOUNT"] = $dbw->row["DISCOUNT"];

      hotel::$rooms_list[$dbw->row["ID"]]["MAX_ADULTS"] = $dbw->row["MAX_ADULTS"];

      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG"] = $dbw->row["CHILD_DISCOUNT_FLAG"];
      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT"] = $dbw->row["CHILD_DISCOUNT"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE"] = $dbw->row["MAX_CHILD_AGE"];

      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG2"] = $dbw->row["CHILD_DISCOUNT_FLAG2"];
      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT2"] = $dbw->row["CHILD_DISCOUNT2"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE2"] = $dbw->row["MAX_CHILD_AGE2"];

      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG3"] = $dbw->row["CHILD_DISCOUNT_FLAG3"];
      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT3"] = $dbw->row["CHILD_DISCOUNT3"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE3"] = $dbw->row["MAX_CHILD_AGE3"];

      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT_FLAG4"] = $dbw->row["CHILD_DISCOUNT_FLAG4"];
      hotel::$rooms_list[$dbw->row["ID"]]["CHILD_DISCOUNT4"] = $dbw->row["CHILD_DISCOUNT4"];
      hotel::$rooms_list[$dbw->row["ID"]]["MAX_CHILD_AGE4"] = $dbw->row["MAX_CHILD_AGE4"];

      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT_FLAG"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT"] = $dbw->row["ADD_CHILD_DISCOUNT"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_MAX_CHILD_AGE"] = $dbw->row["ADD_MAX_CHILD_AGE"];

      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT_FLAG2"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG2"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT2"] = $dbw->row["ADD_CHILD_DISCOUNT2"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_MAX_CHILD_AGE2"] = $dbw->row["ADD_MAX_CHILD_AGE2"];

      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT_FLAG3"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG3"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT3"] = $dbw->row["ADD_CHILD_DISCOUNT3"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_MAX_CHILD_AGE3"] = $dbw->row["ADD_MAX_CHILD_AGE3"];

      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT_FLAG4"] = $dbw->row["ADD_CHILD_DISCOUNT_FLAG4"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_CHILD_DISCOUNT4"] = $dbw->row["ADD_CHILD_DISCOUNT4"];
      hotel::$rooms_list[$dbw->row["ID"]]["ADD_MAX_CHILD_AGE4"] = $dbw->row["ADD_MAX_CHILD_AGE4"];
    }
    //$GLOBALS["debug"]->init_debug($vars=array('hotel::$rooms_list'=>hotel::$rooms_list),'Debug');
    $dbw->free_result();
    return true;
  }
  /*-----------------------------------------------*/
  function get_custom_form_id($I_NAME)
  {
    global $ERROR;
    global $ERR_DETAILS;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $query="SELECT ID FROM ${prfx}_FORM
                  WHERE NAME = '$I_NAME'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $dbw->fetch_row();
    if(!empty($dbw->row["ID"]))
    {
      return $dbw->row["ID"];
    }
    else
    {
      return false;
    }
  }

  /*-----------------------------------------------*/
  function pror_parse_word(&$sample, &$page_info)
  {
    global $ERROR;

    $LANG_KEY = $page_info["lang"];

    if(empty($LANG_KEY))
      return $sample;

      $match  = array();
      if(!preg_match_all("/{WORD:([^\}]+)}/i", $sample, $match))
        return $sample;

      $pattern = array();
      $replacement = array();

      if(!empty($match[1]))
      {
        $cnt = 0;
        foreach($match[1] as $word)
        {
          if(!empty(hotel::$words[$word][$LANG_KEY]))
          {
            $pattern[] = "/".$match[0][$cnt]."/i";
            $replacement[] = hotel::$words[$word][$LANG_KEY];
          }
          $cnt++;
        }
        if(!empty($pattern) && !empty($replacement))
        {
          $sample = preg_replace ($pattern, $replacement , $sample);
        }
      }

    return $sample;
  }
  /*-----------------------------------------------*/
  function pror_parse_booking(&$page_info)
  {
    unset($_SESSION[S_CONTEXT]["params"]);
    //if(!empty($_SESSION[S_CONTEXT]["params"]))
    $_SESSION[S_CONTEXT]["params"] = array("offer");


    $content = '<a href="'. make_url2($page_info["lang"], hotel::$pricelist_list["BOOKING_PAGE"], array('offer'=>hotel::$pricelist_list["I_NAME"])) .'">'. hotel::$pricelist_list["BOOKING_LINK"] .'</a>';
    return $content;

  }
  /*-----------------------------------------------*/
  function pror_parse_room_order()
  {
// # offer = new
// # room = double
// # season = summer
    global $ERROR;
    global $ERR_DETAILS;
    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $room = '';
    $season = '';

if(empty($_REQUEST["season"]) && empty($_REQUEST["room"]) && !empty($_REQUEST["offer"]))
{


  $query="SELECT FROM_DATE, TO_DATE  FROM ${prfx}_HTL_PRICELIST
                    INNER JOIN ${prfx}_HTL_PRICE  ON (${prfx}_HTL_PRICELIST.ID = PRICELIST_ID)
                    INNER JOIN ${prfx}_HTL_SEASON  ON (${prfx}_HTL_SEASON.ID = ${prfx}_HTL_PRICE.SEASON_ID)
                    INNER JOIN ${prfx}_HTL_SEASON_PERIODS  ON (${prfx}_HTL_SEASON.ID = ${prfx}_HTL_SEASON_PERIODS.SEASON_ID)
                    WHERE ${prfx}_HTL_PRICELIST.I_NAME = '".$_REQUEST["offer"]."'";


  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }

   while($dbw->fetch_row())
  {
    $FROM_DATE = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
    $TO_DATE = format_date($dbw->row["TO_DATE"], text("DateFormat"));
    break;
  }
  $dbw->free_result();
  $season = '
  function paste_season(from_date, to_date)
  {
    var from_date_input = document.getElementById("room_order_from_date");
    var to_date_input = document.getElementById("room_order_to_date");
    from_date_input.value = from_date;
    to_date_input.value = to_date;

  }
  paste_season("'.$FROM_DATE.'", "'.$TO_DATE.'");
  ';
}

if(!empty($_REQUEST["season"]))
{
  $query="SELECT FROM_DATE, TO_DATE  FROM ${prfx}_HTL_SEASON
                    INNER JOIN ${prfx}_HTL_SEASON_PERIODS  ON (ID = ${prfx}_HTL_SEASON_PERIODS.SEASON_ID)
                    WHERE I_NAME = '".$_REQUEST["season"]."'";
  if(!$dbw->execute_query($query))
  {
    $ERROR = text("ErrQueryFailed");
    $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                   $dbw->get_last_query();
    return false;
  }

   while($dbw->fetch_row())
  {
    $FROM_DATE = format_date($dbw->row["FROM_DATE"], text("DateFormat"));
    $TO_DATE = format_date($dbw->row["TO_DATE"], text("DateFormat"));
    break;
  }
  $dbw->free_result();

  $season = '
  function paste_season(from_date, to_date)
  {
    var from_date_input = document.getElementById("room_order_from_date");
    var to_date_input = document.getElementById("room_order_to_date");
    from_date_input.value = from_date;
    to_date_input.value = to_date;

  }
  paste_season("'.$FROM_DATE.'", "'.$TO_DATE.'");
  ';
}
if(!empty($_REQUEST["room"]))
{
  $room = '
  function select_room(name)
  {
    var room_list = document.getElementById("room_order_room_list");
    for(var i=0; i<room_list.options.length; i++)
    {
      if(room_list.options[i].value == name)
      {
        room_list.options[i].selected = true;
      }
    }
  }
  select_room("'.$_REQUEST["room"].'");
  ';
}
    $content = '<script type="text/JavaScript">
    '.$room."\n".'
    '.$season."\n".'

    </script>';
    return $content;


  }
  /*-----------------------------------------------*/
  function xml_from_array($file, $root_name, $data)
  {
    global $ERROR;
    global $INFO_MESSAGE;
    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xml_element = $xmldoc->createElement($root_name);
    $xml_element = $xmldoc->appendChild($xml_element);
    foreach($data as $key=>$arr)
    {
      $node_word = $xmldoc->createElement("text");
      $node_word->setAttribute("id", $key);
      foreach($arr as $lang_key=>$value)
      {
        $node_lang = $xmldoc->createElement($lang_key);
        $node_text = $xmldoc->createTextNode(magic_quotes_from_req($value));
        $node_lang->appendChild($node_text);
        $node_word->appendChild($node_lang);
      }
     $xml_element->appendChild($node_word);
    }
    $xmldoc->formatOutput=true;
    if(!$xmldoc->save($file))
    {
      $ERROR = text("XMLWriteError");
    }
    $INFO_MESSAGE = text("MsgDataSaved");
    return true;
  }
  /*-----------------------------------------------*/
  function xml_to_array(&$data, $file, $node_path)
  {

    global $ERROR;
    $path=$file;
    $xmldoc = new DOMDocument();
   if(file_exists($path) && !$xmldoc->load($path))
    {
      $ERROR = text("XMLReadError");
      return false;
    }

    $xsdpath = new DOMXPath($xmldoc);
    $nodes = $xsdpath->evaluate($node_path);

    if(!$nodes || !$nodes->item(0))
    {
      $ERROR = text("XMLReadError");
      return false;
    }

    foreach($nodes as $node)
    {
      $children = $node->childNodes;
      if(!$children) continue;

      foreach($children as $child)
      {

        if($child->nodeName!='#text')
        {
          $children2 = $child->childNodes;
          if(!$children2) continue;
          foreach($children2 as $child2)
          {
            if($child2->nodeName!='#text')
            {
              $data[$child->getAttribute("id")][$child2->nodeName] = $child2->nodeValue;
            }
          }
        }
      }
    }
   return true;
  }
  /*-----------------------------------------------*/
  function check_word(&$word)
  {
    global $ERROR;
    if(!empty($_REQUEST["word_i_name"]))
    {
      $i_name = $_REQUEST["word_i_name"];
      if(!empty($word[$i_name]))
      {
        $ERROR = text("ErrInternalNameNotUniq");
        return false;
      }
      if(!validate_internal_name($i_name))
      {
        $ERROR = text("ErrInternalNameInvalid");
        return false;
      }
      foreach($_REQUEST["newword"] as $key=>$value)
      {
        $word[$i_name][$key] = $value;
      }
    }

    return true;
  }
  /*-----------------------------------------------*/
  function delete_word(&$word)
  {
    global $ERROR;
    if(!empty($_REQUEST["selection"]))
    {
      foreach($_REQUEST["selection"] as $key=>$value)
      {
        if(!empty($word[$key]))
          unset($word[$key]);
      }
    }
    else
    {
      $ERROR = "ErrNoOneWordSelected";
      return false;
    }
    return true;
  }

  //-----------------------------------------------------------------
  function getPrivilegeBlocks(&$privilege_blocks)
  {
    $privilege_blocks["hotel"] = array("read_hotel_data",
                                       "edit_hotel_data",
                                       "read_customer_requests",
                                       "edit_customer_requests"
                                      );
    return true;
  } // getPrivilegeBlocks
  //-----------------------------------------------------------------
  function getAccompanyingPrivileges(&$accompanying_privileges)
  {
    $accompanying_privileges["edit_hotel_data"] = array("read_hotel_data");
    $accompanying_privileges["edit_customer_requests"] = array("read_customer_requests");

    // build content manager privileges, all privileges of the module

    $base_privs = array();
    $this->getPrivilegeBlocks($base_privs);

    foreach($base_privs["hotel"] as $priv)
    {
      $accompanying_privileges["operators"][] = $priv;

      if(!empty($accompanying_privileges[$priv]))
      {
        $accompanying_privileges["operators"] = array_merge($accompanying_privileges["operators"],
                                                                   $accompanying_privileges[$priv]);
      }
    }

    return true;
  } // getAccompanyingPrivileges
  //-----------------------------------------------------------------
  function getInterfacePrivileges(&$interface_privileges)
  {
    $interface_privileges["hotel:hotels"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:pricelists"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:offers"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:rooms"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:seasons"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:currency"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );
    $interface_privileges["hotel:dictinoary"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );

    $interface_privileges["hotel:ext_rating"] = array("read_hotel_data",
                                                 "edit_hotel_data"
                                                );

    $interface_privileges["hotel:customer_requests"] = array("edit_customer_requests",
                                                 "read_customer_requests"
                                                );

    $interface_privileges["hotel"] = array_merge($interface_privileges["hotel:hotels"],
                                                 $interface_privileges["hotel:pricelists"],
                                                 $interface_privileges["hotel:offers"],
                                                 $interface_privileges["hotel:rooms"],
                                                 $interface_privileges["hotel:seasons"],
                                                 $interface_privileges["hotel:currency"],
                                                 $interface_privileges["hotel:dictinoary"],
                                                 $interface_privileges["hotel:ext_rating"],
                                                 $interface_privileges["hotel:customer_requests"]
                                                );

    $interface_privileges["modules"] = array_merge($interface_privileges["modules"],
                                                   $interface_privileges["hotel"]);

    return true;
  } // getInterfacePrivileges
  //-----------------------------------------------------------------

  public function extended_module()
  {
    //check extended hotel module active
    if(empty($_SESSION[S_CONTEXT]["modules"]["hotel_extended"]["active"]))
      return false;
    //check extended hotel module serial
    if(empty($_SESSION[S_CONTEXT]["modules"]["hotel_extended"]["licensed"]))
      return false;

    return true;
  } // extended_module
  //-----------------------------------------------------------------

  public function fetch_service_data(&$service_data)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $id = $dbw->escape(reqvar("id"));
    //fetch service data
    $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, LANG_ID, PRICE, SORT, PRICING_TYPE, SERVICE_CODE, SERVICE_TA_CODE,
              CALCULATE_TYPE, MANDATORY, PERSON_MANDATORY, TITLE, CAPTION, IS_ACTIVE,
              RESTRICTION, COUPONS, USED_COUPONS, COUPON_ONE_TIME, FOR_SOFFER,
              CHILD_DISCOUNT, CHILD_DISCOUNT_FLAG
              FROM {$prfx}_HTL_EXTRA_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = SERVICE_ID)
              WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $lang_data = array();
    while($dbw->fetch_row())
    {
      $service_data["child_discount_flag"] = null_if_empty('');
      $service_data["child_discount"] = null_if_empty('');

      $service_data = array("price" => $dbw->field_by_name("PRICE"),
                            "pricing_type" => $dbw->field_by_name("PRICING_TYPE"),
                            "service_code" => $dbw->field_by_name("SERVICE_CODE"),
                            "service_ta_code" => $dbw->field_by_name("SERVICE_TA_CODE"),
                            "service_sort_order" => $dbw->field_by_name("SORT"),
                            "calculate_type" => $dbw->field_by_name("CALCULATE_TYPE"),
                            "special_offer_only" => $dbw->field_by_name("FOR_SOFFER"),                            
                            "child_discount_flag" => $dbw->field_by_name("CHILD_DISCOUNT_FLAG"),
                            "child_discount" => $dbw->field_by_name("CHILD_DISCOUNT"),
                            "mandatory" => $dbw->field_by_name("MANDATORY"),
                            "coupon_one_time" => $dbw->field_by_name("COUPON_ONE_TIME"),
                            "coupons" => $dbw->field_by_name("COUPONS"),
                            "restriction" => $dbw->field_by_name("RESTRICTION"),
                            "used_coupons" => $dbw->field_by_name("USED_COUPONS"),
                            "person_mandatory" => $dbw->field_by_name("PERSON_MANDATORY")
                            );

      $lang_data[$dbw->field_by_name("LANG_ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                        "caption" => $dbw->field_by_name("CAPTION"),
                                                                        "is_active" => $dbw->field_by_name("IS_ACTIVE")
                                                                        );
    }

    $service_data["extended"] = $lang_data;

    $dbw->free_result();

    //fetch service-rooms references
    $query = "SELECT ROOM_ID, RESTRICTION FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS WHERE SERVICE_ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $service_data["available_rooms"] = array();
    while($dbw->fetch_row())
    {
      $service_data["available_rooms"][$dbw->field_by_name("ROOM_ID")] = 1;
      $service_data["available_rooms_restriction"][$dbw->field_by_name("ROOM_ID")] = $dbw->field_by_name("RESTRICTION");
    }

    $dbw->free_result();

    return $service_data;
  } // fetch_service_data
  //-----------------------------------------------------------------

  public function save_service_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $FOCUS_ELEMENT;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //prepare data
    $service_data["price"] = null_if_empty($dbw->escape($_REQUEST["service_data"]["price"]));
    $service_data["mandatory"] = (empty($_REQUEST["service_data"]["mandatory"])) ? 0 : 1;
    $service_data["coupon_one_time"] = (empty($_REQUEST["service_data"]["coupon_one_time"])) ? 0 : 1;
    $service_data["special_offer_only"] = (empty($_REQUEST["service_data"]["special_offer_only"])) ? 0 : 1;
    $service_data["person_mandatory"] = (empty($_REQUEST["service_data"]["person_mandatory"])) ? 0 : 1;
    $service_data["pricing_type"] = ($service_data["mandatory"] == 0) ? 2 : 1;
    $service_data["calculate_type"] = $dbw->escape($_REQUEST["service_data"]["calculate_type"]);
    $service_data["service_code"] = null_if_empty($dbw->escape(ifnull($_REQUEST["service_data"]["service_code"])));
    $service_data["service_ta_code"] = null_if_empty($dbw->escape(ifnull($_REQUEST["service_data"]["service_ta_code"])));
    $service_data["child_discount_flag"] = null_if_empty($dbw->escape($_REQUEST["service_data"]["child_discount_flag"]));
    $service_data["child_discount"] = null_if_empty($dbw->escape($_REQUEST["service_data"]["child_discount"]));

    $service_data["restriction"] = null_if_empty($dbw->escape($_REQUEST["service_data"]["restriction"]));
    $service_data["coupons"] = null_if_empty($dbw->escape(ifnull($_REQUEST["service_data"]["coupons"])));
    $service_data["used_coupons"] = null_if_empty($dbw->escape(ifnull($_REQUEST["service_data"]["used_coupons"])));

    if($service_data["calculate_type"] == 1 || $service_data["calculate_type"] == 2)
    {
      $service_data["child_discount_flag"] = null_if_empty('');
      $service_data["child_discount"] = null_if_empty('');
    }

    if($service_data["mandatory"] == 1)
    {
      $service_data["calculate_type"] = null_if_empty("");
      
      if(!$service_data["special_offer_only"])
      {
        $service_data["price"] = null_if_empty('');
        $service_data["child_discount_flag"] = null_if_empty('');
        $service_data["child_discount"] = null_if_empty('');
      }
    }

    $service_data["service_sort_order"] = $dbw->escape($_REQUEST["service_data"]["service_sort_order"]);
    if(empty($service_data["service_sort_order"]) || !is_numeric($service_data["service_sort_order"])) $service_data["service_sort_order"] = 0;

    //check data
    if($service_data["mandatory"] == 0)
    {
      if(empty($_REQUEST["service_data"]["price"]))
      {
        $_REQUEST["service_data"]["price"] = 0;
        $service_data["price"] = 0;
      }
    }

    foreach($_REQUEST["service_data"]["extended"] as $lang_id => $extended_data)
    {
      if(empty($extended_data["title"]) && !empty($extended_data["is_active"]))
      {
        $ERROR = text("ErrTitleEmpty");
        $FOCUS_ELEMENT = "service_data[extended][$lang_id][title]";
        return false;
      }
    }

    $service_data["extended"] = array();
    foreach($_REQUEST["service_data"]["extended"] as $lang_id => $extended_data)
    {
      $service_data["extended"][$lang_id]["is_active"] = (empty($extended_data["is_active"])) ? 0 : 1;
      $service_data["extended"][$lang_id]["title"] = $dbw->escape($extended_data["title"]);
      $service_data["extended"][$lang_id]["caption"] = null_if_empty($dbw->escape($extended_data["caption"]));
      $service_data["extended"][$lang_id]["comment"] = null_if_empty($dbw->escape($extended_data["comment"]));
    }

    if(!empty($_REQUEST["service_data"]["available_rooms"]))
    {
      foreach($_REQUEST["service_data"]["available_rooms"] as $room_id => $room)
      {
         $service_data["available_rooms"][$dbw->escape($room_id)] = 1;
      }
    }

    $insert = (reqvar_empty("id")) ? true : false;

    if(!$insert)
      $id = $dbw->escape(reqvar("id"));

    // test max
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"]) && $insert)
    {
      $query = "SELECT COUNT(*) CNT FROM {$prfx}_HTL_EXTRA_SERVICES";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $cnt = 0;
      if($dbw->fetch_row())
      {
        $cnt = $dbw->field_by_name("CNT");
      }

      $dbw->free_result();

      if($cnt >= 7)
      {
        $ERROR = text("ErrQuickBookingServiceMax");
        return false;
      }
    }

    //save common data
    if($insert)
    {
      $query = "INSERT INTO {$prfx}_HTL_EXTRA_SERVICES
                (PRICE, PRICING_TYPE, CALCULATE_TYPE, SORT, SERVICE_CODE, SERVICE_TA_CODE, MANDATORY, PERSON_MANDATORY, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, COUPON_ONE_TIME, COUPONS, USED_COUPONS, RESTRICTION, FOR_SOFFER)
                VALUES
                ($service_data[price], $service_data[pricing_type], $service_data[calculate_type], $service_data[service_sort_order], $service_data[service_code], $service_data[service_ta_code], $service_data[mandatory], $service_data[person_mandatory], $service_data[child_discount_flag], $service_data[child_discount], $service_data[coupon_one_time], $service_data[coupons], $service_data[used_coupons], $service_data[restriction], $service_data[special_offer_only])";
    }
    else
    {
      $query = "UPDATE {$prfx}_HTL_EXTRA_SERVICES SET
                PRICE = $service_data[price],
                PRICING_TYPE = $service_data[pricing_type],
                CALCULATE_TYPE = $service_data[calculate_type],
                SORT = $service_data[service_sort_order],
                SERVICE_TA_CODE = $service_data[service_ta_code],
                SERVICE_CODE = $service_data[service_code],
                MANDATORY = $service_data[mandatory],
                RESTRICTION = $service_data[restriction],
                PERSON_MANDATORY = $service_data[person_mandatory],
                CHILD_DISCOUNT_FLAG = $service_data[child_discount_flag],
                CHILD_DISCOUNT = $service_data[child_discount],
                COUPON_ONE_TIME = $service_data[coupon_one_time],
                COUPONS = $service_data[coupons],
                USED_COUPONS = $service_data[used_coupons],
                FOR_SOFFER = $service_data[special_offer_only]
                WHERE ID = $id";
    }

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(reqvar_empty("id"))
    {
      $id = $dbw->insert_id();
      $_REQUEST["id"] = $id;
    }
    else
    {
      $id = $_REQUEST["id"];
    }

    //save language dependent data
    foreach($service_data["extended"] as $lang_id => $extended_data)
    {
      $lang_id = $dbw->escape($lang_id);
      
      $query = "SELECT 1 FROM {$prfx}_HTL_EXTRA_SERVICES_PROP WHERE SERVICE_ID = $id AND LANG_ID = $lang_id";

      $insert = true;
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      if($dbw->fetch_row())
      {
        $insert = false;
      }
      
      if($insert)
      {
        $query = "INSERT INTO {$prfx}_HTL_EXTRA_SERVICES_PROP
                  (SERVICE_ID, LANG_ID, TITLE, CAPTION, COMMENT, IS_ACTIVE)
                  VALUES
                  ($id, $lang_id, '$extended_data[title]', $extended_data[caption], $extended_data[comment], $extended_data[is_active])";
      }
      else
      {
        $query = "UPDATE {$prfx}_HTL_EXTRA_SERVICES_PROP SET
                  TITLE = '$extended_data[title]',
                  CAPTION = $extended_data[caption],
                  COMMENT = $extended_data[comment],
                  IS_ACTIVE = $extended_data[is_active]
                  WHERE SERVICE_ID = $id AND LANG_ID = $lang_id";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if($service_data["mandatory"] == 1 || $service_data["calculate_type"] != '5')
    {
      //save rooms references
      //first of all delete all rows that related with this service
      $query = "DELETE FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS WHERE SERVICE_ID = $id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }//if

      //resave room references
      if(!empty($service_data["available_rooms"]))
      foreach($service_data["available_rooms"] as $room_id => $room)
      {
        $restriction = null_if_empty($dbw->escape(ifnull($_REQUEST["service_data"]["available_rooms_restriction"][$room_id])));

        $query = "INSERT INTO {$prfx}_HTL_EXTRA_SERVICES_ROOMS (SERVICE_ID, ROOM_ID, RESTRICTION) VALUES ($id, $room_id, $restriction)";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if
      }//foreach
    }//if

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!empty($_FILES["upload_pic"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic"], $id, "s"))
      {
        return false;
      }
    }

    if(!empty($_FILES["upload_pic2"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic2"], $id, "s"))
      {
        return false;
      }
    }

    if(!empty($_FILES["upload_pic3"]["size"]))
    {
      if(!$this->save_image($_FILES["upload_pic3"], $id, "s"))
      {
        return false;
      }
    }

    if(!reqvar_empty("delete_pictures") &&
       !empty($_REQUEST["del_hotel_thumb"])
      )
    {
      if(!$this->delete_images($_REQUEST["del_hotel_thumb"], $id, "s"))
      {
        return false;
      }
    }
    
    $INFO_MESSAGE = text("MSG_DATA_SAVED");
  } // save_service_data
  //-----------------------------------------------------------------

  public function fetch_services(&$services_list, $modus = 'ALL')
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $query = "SELECT  {$prfx}_HTL_EXTRA_SERVICES.ID, PRICE, PRICING_TYPE, CALCULATE_TYPE, TITLE, MANDATORY, CAPTION, COMMENT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, IS_ACTIVE, FOR_SOFFER
                FROM {$prfx}_HTL_EXTRA_SERVICES
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = SERVICE_ID AND LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
                ";

    if($modus == 'ALL')
      $where_clause = '';
    elseif($modus == 'NOT_MANDATORY')
      $where_clause = 'WHERE MANDATORY = 0 AND FOR_SOFFER = 0';
    elseif($modus == 'MANDATORY')
      $where_clause = 'WHERE MANDATORY = 1 AND FOR_SOFFER = 0';
    elseif($modus == 'FOR_SOFFER')
      $where_clause = 'WHERE FOR_SOFFER = 1';

    $query .= $where_clause;
    
    $query .= " ORDER BY SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $caption = $dbw->field_by_name("CAPTION");
      if(empty($caption)) $caption = "-";

      $title = $dbw->field_by_name("TITLE");
      if(empty($title)) $title = "-";

      $services_list[$dbw->field_by_name("ID")] = array("title" => $title,
                                                        "caption" => nl2br($caption),
                                                        "comment" => $dbw->field_by_name("COMMENT"),
                                                        "price" => $dbw->field_by_name("PRICE"),
                                                        "pricing_type" => $dbw->field_by_name("PRICING_TYPE"),
                                                        "calculate_type" => $dbw->field_by_name("CALCULATE_TYPE"),
                                                        "child_discount_flag" => $dbw->field_by_name("CHILD_DISCOUNT_FLAG"),
                                                        "child_discount" => $dbw->field_by_name("CHILD_DISCOUNT"),
                                                        "mandatory" => $dbw->field_by_name("MANDATORY"),
                                                        "for_soffer" => $dbw->field_by_name("FOR_SOFFER"),
                                                        "is_active" => $dbw->field_by_name("IS_ACTIVE"),
                                                       );
    }

    $dbw->free_result();
  } // fetch_services
  //-----------------------------------------------------------------

  public function fetch_rooms_list(&$rooms_list)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

		$lang_key = $dbw->escape($_SESSION["lang"]);

    $query = "SELECT {$prfx}_HTL_ROOMS.ID, I_NAME, TYPE, CATEGORY
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              ORDER BY {$prfx}_HTL_ROOMS.SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $name = $dbw->field_by_name("TYPE");
      if(empty($name))
        $name = $dbw->field_by_name("I_NAME");

      $rooms_list[$dbw->field_by_name("ID")] = array("name" => $name,
                                                     "category" => $dbw->field_by_name("CATEGORY")
                                                    );
    }

    $dbw->free_result();
  } // fetch_rooms_list
  //-----------------------------------------------------------------
  public function make_room_js_array(&$js_array_string)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT {$prfx}_HTL_ROOMS.ID
              FROM {$prfx}_HTL_ROOMS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();

    while($dbw->fetch_row())
    {
      $rooms[$dbw->field_by_name("ID")] = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    $SUPPORTED_FILE_TYPES=array(
      "jpg",
      "gif",
      "png"
      );

    foreach($rooms as $room_id)
    {
      $ROOM_FOLDER="resources/hotel/rooms/" . $room_id . "/";

      if(!is_dir($ROOM_FOLDER)) continue;

      $files = scandir($ROOM_FOLDER);

      $pictures = array();

      foreach($files as $file)
      {
        if($file == "." || $file == ".." || is_dir($ROOM_FOLDER . $file)) continue;

        $path_parts = pathinfo($file);

        $filename = strtolower(ifnull($path_parts['filename']));
        $extension = strtolower(ifnull($path_parts['extension']));

        if(!in_array($extension, $SUPPORTED_FILE_TYPES)) continue;

        if(preg_match("/^" . $room_id . "_(.+)_thumb$/", $filename, $matches))
        {
          $pictures[$matches[1]]["thumb"] = $file;
        }
        elseif(preg_match("/^" . $room_id . "_(.+)$/", $filename, $matches))
        {
          $pictures[$matches[1]]["picture"] = $file;
        }
      }

      $pict = "";
      $thumb = "";

      $js_array_string .= 'hotel_gallery.picture_list['.$room_id.'] = [];' . "\n";

  		$counter = 0;
      foreach($pictures as $pinfo)
      {
        if(empty($pinfo["thumb"]) || empty($pinfo["picture"])) continue;
        $js_array_string .= 'hotel_gallery.picture_list['.$room_id.']['.$counter.'] = \''.$pinfo["picture"].'\';' . "\n";
				$counter++;
      }
    }

    return true;
  } // make_room_js_array
  //-----------------------------------------------------------------

  public function make_service_js_array(&$js_array_string)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID
              FROM {$prfx}_HTL_EXTRA_SERVICES
              WHERE MANDATORY = '0' AND FOR_SOFFER = '0'
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $services = array();

    while($dbw->fetch_row())
    {
      $services[$dbw->field_by_name("ID")] = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    $SUPPORTED_FILE_TYPES=array(
      "jpg",
      "gif",
      "png"
      );

    foreach($services as $service_id)
    {
      $ROOM_FOLDER="resources/hotel/rooms/s" . $service_id . "/";

      if(!is_dir($ROOM_FOLDER)) continue;

      $files = scandir($ROOM_FOLDER);

      $pictures = array();

      foreach($files as $file)
      {
        if($file == "." || $file == ".." || is_dir($ROOM_FOLDER . $file)) continue;

        $path_parts = pathinfo($file);

        $filename = strtolower(ifnull($path_parts['filename']));
        $extension = strtolower(ifnull($path_parts['extension']));

        if(!in_array($extension, $SUPPORTED_FILE_TYPES)) continue;

        if(preg_match("/^s" . $service_id . "_(.+)_thumb$/", $filename, $matches))
        {
          $pictures[$matches[1]]["thumb"] = $file;
        }
        elseif(preg_match("/^s" . $service_id . "_(.+)$/", $filename, $matches))
        {
          $pictures[$matches[1]]["picture"] = $file;
        }
      }

      $pict = "";
      $thumb = "";

      $js_array_string .= 'hotel_gallery.picture_list["s'.$service_id.'"] = [];' . "\n";

  		$counter = 0;
      foreach($pictures as $pinfo)
      {
        if(empty($pinfo["thumb"]) || empty($pinfo["picture"])) continue;
        $js_array_string .= 'hotel_gallery.picture_list["s'.$service_id.'"]['.$counter.'] = \''.$pinfo["picture"].'\';' . "\n";
				$counter++;
      }
    }

    return true;
  } // make_service_js_array
  //-----------------------------------------------------------------

  public function current_week()
  {
    $year = date('Y', time());
    $month = date('m', time());

    //data for calendar
    $_REQUEST["year"] = $year;
    $_REQUEST["month"] = $month;

    //get date of the first day of this week(monday)
    $offset_timestamp  = time() - (date('N', time()) - 1)*24*3600;

    //get begin date
    $_REQUEST["week"]["begin"] = date(text("DateFormat"), $offset_timestamp);

    //get dates
    $_REQUEST["week"]["dates"] = array();

    for($i = 0; $i < 7; $i++)
    {
      $_REQUEST["week"]["dates"][$i] = date("Y-m-d", ($offset_timestamp+($i*86400)));
    }

    //asort($_REQUEST["week"]["dates"]);

    //get date of the last day of this week(sunday)
    //get end date
    $_REQUEST["week"]["end"] = date(text("DateFormat"), $offset_timestamp+(6*86400));
  } // current_week
  //-----------------------------------------------------------------
  public function check_week()
  {
    $start_date = strtotime(format_date($_REQUEST["week"]["begin"], text("DateFormat")));
    $end_date = strtotime(format_date($_REQUEST["week"]["end"], text("DateFormat")));
    
    if($start_date > $end_date)
    {
      $tmp = $_REQUEST["week"]["begin"];
      $_REQUEST["week"]["begin"] = $_REQUEST["week"]["end"];
      $_REQUEST["week"]["end"] = $tmp;
    }
  }
  
  public function goto_dates()
  {
    global $WARNING_MESSAGE;
    
    $start_date = strtotime(format_date($_REQUEST["week"]["begin"], text("DateFormat")));
    $end_date = strtotime(format_date($_REQUEST["week"]["end"], text("DateFormat")));
    
    $days = ($end_date - $start_date) / (24*3600);
    
    if($days > 10 && empty($_SESSION["hotel_period_warned"]))
    {
      $WARNING_MESSAGE = text("WarnPeriodTooLarge");
      $_SESSION["hotel_period_warned"] = true;
    }

    //get dates
    $_REQUEST["week"]["dates"] = array();

    for($i = 0; $i <= $days; $i++)
    {
      $_REQUEST["week"]["dates"][$i] = date("Y-m-d", ($start_date+($i*86400)));
    }
  }

  //-----------------------------------------------------------------

  public function next_week()
  {
    //get begin date
    $date = explode("-", $_REQUEST["week"]["end"]);
    $day = $date[2] + 1;
    if($day < 9)
      $day = '0'.$day;

    $month = $date[1];
    $year = $date[0];

    //data for calendar
    $_REQUEST["year"] = $year;
    $_REQUEST["month"] = $month;

    $_REQUEST["week"]["begin"] = date('Y-m-d', mktime(00, 00, 00, $month, $day, $year));

    //get dates
    $_REQUEST["week"]["dates"] = array();

    for($i = 6; $i >= 0; $i--)
    {
      $_REQUEST["week"]["dates"][$i] = date('Y-m-d', mktime(00, 00, 00, $month, $day+$i, $year));

     // get end date
      if($i == 6)
        $_REQUEST["week"]["end"] = date('Y-m-d', mktime(00, 00, 00, $month, $day+$i, $year));
    }

    asort($_REQUEST["week"]["dates"]);
  } // next_week
  //-----------------------------------------------------------------

  public function prev_week()
  {
    //get end date
    $date = explode("-", $_REQUEST["week"]["begin"]);
    $day = $date[2] - 1;
    if($day < 9)
      $day = '0'.$day;

    $month = $date[1];
    $year = $date[0];

    //data for calendar
    $_REQUEST["year"] = $year;
    $_REQUEST["month"] = $month;

    $_REQUEST["week"]["end"] = date('Y-m-d', mktime(00, 00, 00, $month, $day, $year));

    //get dates
    $_REQUEST["week"]["dates"] = array();

    for($i = 0; $i < 7; $i++)
    {
      $_REQUEST["week"]["dates"][6 - $i] = date('Y-m-d', mktime(00, 00, 00, $month, $day-$i, $year));

      //get begin date
      if($i == 6)
        $_REQUEST["week"]["begin"] = date('Y-m-d', mktime(00, 00, 00, $month, $day-$i, $year));
    }

    asort($_REQUEST["week"]["dates"]);
  } // prev_week
  //-----------------------------------------------------------------

  public function selected_week()
  {
    //get begin_date
    $day = magic_quotes_from_req(reqvar("firstday"));
    if($day < 9)
      $day = '0'.$day;

    $month = magic_quotes_from_req(reqvar("month"));
    $year = magic_quotes_from_req(reqvar("year"));

    //data for calendar
    $_REQUEST["year"] = $year;
    $_REQUEST["month"] = $month;

    $_REQUEST["week"]["begin"] = date('Y-m-d', mktime(00, 00, 00, $month, $day, $year));

    //get dates
    $_REQUEST["week"]["dates"] = array();

    for($i = 0; $i < 7; $i++)
    {
      $_REQUEST["week"]["dates"][$i] = date('Y-m-d', mktime(00, 00, 00, $month, $day+$i, $year));

     // get end date
      if($i == 6)
        $_REQUEST["week"]["end"] = date('Y-m-d', mktime(00, 00, 00, $month, $day+$i, $year));
    }

    asort($_REQUEST["week"]["dates"]);
  } // selected_week
  //-----------------------------------------------------------------

  public function fetch_booking_data(&$booking_data)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $ids = $dbw->escape(trim(reqvar("ids"), ", "));
    $lang_key = $dbw->escape($_SESSION["lang"]);

    $begin_date = $_REQUEST["week"]["begin"];
    $end_date = $_REQUEST["week"]["end"];

    //prepare date for database
    $begin_time = strtotime($begin_date);
    $end_time = strtotime($end_date);

    $begin_date = null_if_empty($dbw->format_date($begin_time));
    $end_date = null_if_empty($dbw->format_date($end_time));
    $begin_datetime = null_if_empty($dbw->format_datetime($begin_time));
    $end_datetime = null_if_empty($dbw->format_datetime($end_time));

    //fetch room info
    $query = "SELECT {$prfx}_HTL_ROOMS.ID, I_NAME, TYPE, ROOMS_COUNT, MIN_PERSONS, MAX_PERSONS,
              WITH_CHILDREN, PRICING_TYPE, DISCOUNT_FLAG, DISCOUNT, STANDARD_ALLOCATION,

                  MAX_ADULTS,
                  ROOM_TYPE,

                  MAX_CHILD_AGE,
                  CHILD_DISCOUNT_FLAG,
                  CHILD_DISCOUNT,
                  MAX_CHILD_AGE2,
                  CHILD_DISCOUNT_FLAG2,
                  CHILD_DISCOUNT2,
                  MAX_CHILD_AGE3,
                  CHILD_DISCOUNT_FLAG3,
                  CHILD_DISCOUNT3,
                  MAX_CHILD_AGE4,
                  CHILD_DISCOUNT_FLAG4,
                  CHILD_DISCOUNT4,

                  ADD_MAX_CHILD_AGE,
                  ADD_CHILD_DISCOUNT_FLAG,
                  ADD_CHILD_DISCOUNT,
                  ADD_MAX_CHILD_AGE2,
                  ADD_CHILD_DISCOUNT_FLAG2,
                  ADD_CHILD_DISCOUNT2,
                  ADD_MAX_CHILD_AGE3,
                  ADD_CHILD_DISCOUNT_FLAG3,
                  ADD_CHILD_DISCOUNT3,
                  ADD_MAX_CHILD_AGE4,
                  ADD_CHILD_DISCOUNT_FLAG4,
                  ADD_CHILD_DISCOUNT4

              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              WHERE {$prfx}_HTL_ROOMS.ID IN ($ids)";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rid = $dbw->field_by_name("ID");

      $booking_data[$rid]["room_name"] = $dbw->field_by_name("TYPE");
      if(empty($booking_data[$rid]["room_name"]))
        $booking_data[$rid]["room_name"] = $dbw->field_by_name("I_NAME");
      $booking_data[$rid]["min_persons"] = $dbw->field_by_name("MIN_PERSONS");
      $booking_data[$rid]["max_persons"] = $dbw->field_by_name("MAX_PERSONS");
      $booking_data[$rid]["with_children"] = $dbw->field_by_name("WITH_CHILDREN");
      $booking_data[$rid]["pricing_type"] = $dbw->field_by_name("PRICING_TYPE");
      $booking_data[$rid]["room_type"] = $dbw->field_by_name("ROOM_TYPE");
      $booking_data[$rid]["standard_allocation"] = $dbw->field_by_name("STANDARD_ALLOCATION");
      $booking_data[$rid]["discount_flag"] = $dbw->field_by_name("DISCOUNT_FLAG");
      $booking_data[$rid]["discount"] = $dbw->field_by_name("DISCOUNT");
      $booking_data[$rid]["room_count"] = $dbw->field_by_name("ROOMS_COUNT");

      $booking_data[$rid]["max_adults"] = $dbw->field_by_name("MAX_ADULTS");

      $booking_data[$rid]["child_discount"] = $dbw->field_by_name("CHILD_DISCOUNT");
      $booking_data[$rid]["child_discount_flag"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
      $booking_data[$rid]["max_child_age"] = $dbw->field_by_name("MAX_CHILD_AGE");

      $booking_data[$rid]["child_discount2"] = $dbw->field_by_name("CHILD_DISCOUNT2");
      $booking_data[$rid]["child_discount_flag2"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG2");
      $booking_data[$rid]["max_child_age2"] = $dbw->field_by_name("MAX_CHILD_AGE2");

      $booking_data[$rid]["child_discount3"] = $dbw->field_by_name("CHILD_DISCOUNT3");
      $booking_data[$rid]["child_discount_flag3"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG3");
      $booking_data[$rid]["max_child_age3"] = $dbw->field_by_name("MAX_CHILD_AGE3");

      $booking_data[$rid]["child_discount4"] = $dbw->field_by_name("CHILD_DISCOUNT4");
      $booking_data[$rid]["child_discount_flag4"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG4");
      $booking_data[$rid]["max_child_age4"] = $dbw->field_by_name("MAX_CHILD_AGE4");

      $booking_data[$rid]["add_child_discount"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT");
      $booking_data[$rid]["add_child_discount_flag"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG");
      $booking_data[$rid]["add_max_child_age"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE");

      $booking_data[$rid]["add_child_discount2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT2");
      $booking_data[$rid]["add_child_discount_flag2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG2");
      $booking_data[$rid]["add_max_child_age2"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE2");

      $booking_data[$rid]["add_child_discount3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT3");
      $booking_data[$rid]["add_child_discount_flag3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG3");
      $booking_data[$rid]["add_max_child_age3"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE3");

      $booking_data[$rid]["add_child_discount4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT4");
      $booking_data[$rid]["add_child_discount_flag4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG4");
      $booking_data[$rid]["add_max_child_age4"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE4");
    }

    $dbw->free_result();

    //fetch booking data

    //Get prices from ROOM_AVAILABILITY table
    
    if(reqvar_empty("rate_plan"))
    {
      $query = "SELECT ROOM_ID, ARRIVAL, DEPARTURE, CLOSED, PRICE_TYPE,
                PRICE_CHILD,
                PRICE_CHILD2,
                PRICE_ADULT,
                PRICE_ADULT2,
                PRICE_ADULT3,
                PRICE_ADULT4,
                PRICE_ADULT_CHILD,
                PRICE_ADULT_CHILD2,
                PRICE_ADULT_CHILD3,
                PRICE_ADULT_CHILD4,
                PRICE_ADD_ADULT,
                PRICE_ADD_CHILD,
                PRICE_ADD_CHILD2,
                PRICE_ADD_CHILD3,
                PRICE_ADD_CHILD4,
                MIN_NIGHTS, MAX_NIGHTS, DATE
                FROM {$prfx}_HTL_ROOM_AVAILABILITY
                WHERE ROOM_ID IN ($ids) AND DATE >= $begin_date AND DATE <= $end_date
                ORDER BY DATE";
    }
    else
    {
      $rtid = $dbw->escape(reqvar("rate_plan"));
      $query = "SELECT ROOM_ID, ARRIVAL, DEPARTURE, CLOSED, 'INDIVIDUAL' PRICE_TYPE,
                PRICE_CHILD,
                PRICE_CHILD2,
                PRICE_ADULT,
                PRICE_ADULT2,
                PRICE_ADULT3,
                PRICE_ADULT4,
                PRICE_ADULT_CHILD,
                PRICE_ADULT_CHILD2,
                PRICE_ADULT_CHILD3,
                PRICE_ADULT_CHILD4,
                PRICE_ADD_ADULT,
                PRICE_ADD_CHILD,
                PRICE_ADD_CHILD2,
                PRICE_ADD_CHILD3,
                PRICE_ADD_CHILD4,
                MIN_NIGHTS, MAX_NIGHTS, DATE
                FROM {$prfx}_HTL_RATE_PRICE
                WHERE RATE_PLAN_ID = $rtid AND ROOM_ID IN ($ids) AND DATE >= $begin_date AND DATE <= $end_date
                ORDER BY DATE";
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rid = $dbw->field_by_name("ROOM_ID");

      $booking_data[$rid]["dates"][date('Y-m-d', strtotime($dbw->field_by_name("DATE")))] = array("arrival" => $dbw->field_by_name("ARRIVAL"),
                                                                  "departure" => $dbw->field_by_name("DEPARTURE"),
                                                                  "closed" => $dbw->field_by_name("CLOSED"),
                                                                  "price_type" => $dbw->field_by_name("PRICE_TYPE"),
                                                                  "price_child" => $dbw->field_by_name("PRICE_CHILD"),
                                                                  "price_child2" => $dbw->field_by_name("PRICE_CHILD2"),
                                                                  "price_adult" => $dbw->field_by_name("PRICE_ADULT"),
                                                                  "price_adult2" => $dbw->field_by_name("PRICE_ADULT2"),
                                                                  "price_adult3" => $dbw->field_by_name("PRICE_ADULT3"),
                                                                  "price_adult4" => $dbw->field_by_name("PRICE_ADULT4"),
                                                                  "price_adult_child" => $dbw->field_by_name("PRICE_ADULT_CHILD"),
                                                                  "price_adult_child2" => $dbw->field_by_name("PRICE_ADULT_CHILD2"),
                                                                  "price_adult_child3" => $dbw->field_by_name("PRICE_ADULT_CHILD3"),
                                                                  "price_adult_child4" => $dbw->field_by_name("PRICE_ADULT_CHILD4"),
                                                                  "price_add_adult" => $dbw->field_by_name("PRICE_ADD_ADULT"),
                                                                  "price_add_child" => $dbw->field_by_name("PRICE_ADD_CHILD"),
                                                                  "price_add_child2" => $dbw->field_by_name("PRICE_ADD_CHILD2"),
                                                                  "price_add_child3" => $dbw->field_by_name("PRICE_ADD_CHILD3"),
                                                                  "price_add_child4" => $dbw->field_by_name("PRICE_ADD_CHILD4"),
                                                                  "min_nights" => $dbw->field_by_name("MIN_NIGHTS"),
                                                                  "max_nights" => $dbw->field_by_name("MAX_NIGHTS")
                                                                 );
    }

    $dbw->free_result();

    //fetch room count

    $query = "SELECT ROOM_ID, ROOM_COUNT, DATE
              FROM {$prfx}_HTL_ROOM_AVAILABILITY
              WHERE ROOM_ID IN ($ids) AND DATE >= $begin_date AND DATE <= $end_date
              ORDER BY DATE";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rid = $dbw->field_by_name("ROOM_ID");

      $booking_data[$rid]["dates"][date('Y-m-d', strtotime($dbw->field_by_name("DATE")))]["room_count"] = $dbw->field_by_name("ROOM_COUNT");
    }

    $dbw->free_result();
    
  } // fetch_booking_data
  //-----------------------------------------------------------------

  public function fetch_room_properties(&$booking_data)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $ids = $dbw->escape(trim(reqvar("ids"), ", "));
    $lang_key = $dbw->escape($_SESSION["lang"]);

    //fetch room info
    $query = "SELECT {$prfx}_HTL_ROOMS.ID, I_NAME, TYPE, ROOMS_COUNT, MIN_PERSONS, MAX_PERSONS,
              WITH_CHILDREN, PRICING_TYPE, DISCOUNT_FLAG, DISCOUNT, STANDARD_ALLOCATION,

                  MAX_ADULTS,
                  ROOM_TYPE,

                  MAX_CHILD_AGE,
                  CHILD_DISCOUNT_FLAG,
                  CHILD_DISCOUNT,
                  MAX_CHILD_AGE2,
                  CHILD_DISCOUNT_FLAG2,
                  CHILD_DISCOUNT2,
                  MAX_CHILD_AGE3,
                  CHILD_DISCOUNT_FLAG3,
                  CHILD_DISCOUNT3,
                  MAX_CHILD_AGE4,
                  CHILD_DISCOUNT_FLAG4,
                  CHILD_DISCOUNT4,

                  ADD_MAX_CHILD_AGE,
                  ADD_CHILD_DISCOUNT_FLAG,
                  ADD_CHILD_DISCOUNT,
                  ADD_MAX_CHILD_AGE2,
                  ADD_CHILD_DISCOUNT_FLAG2,
                  ADD_CHILD_DISCOUNT2,
                  ADD_MAX_CHILD_AGE3,
                  ADD_CHILD_DISCOUNT_FLAG3,
                  ADD_CHILD_DISCOUNT3,
                  ADD_MAX_CHILD_AGE4,
                  ADD_CHILD_DISCOUNT_FLAG4,
                  ADD_CHILD_DISCOUNT4

              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              WHERE {$prfx}_HTL_ROOMS.ID IN ($ids)";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rid = $dbw->field_by_name("ID");

      $booking_data[$rid]["room_name"] = $dbw->field_by_name("TYPE");
      if(empty($booking_data[$rid]["room_name"]))
        $booking_data[$rid]["room_name"] = $dbw->field_by_name("I_NAME");
      $booking_data[$rid]["min_persons"] = $dbw->field_by_name("MIN_PERSONS");
      $booking_data[$rid]["max_persons"] = $dbw->field_by_name("MAX_PERSONS");
      $booking_data[$rid]["with_children"] = $dbw->field_by_name("WITH_CHILDREN");
      $booking_data[$rid]["pricing_type"] = $dbw->field_by_name("PRICING_TYPE");
      $booking_data[$rid]["room_type"] = $dbw->field_by_name("ROOM_TYPE");
      $booking_data[$rid]["standard_allocation"] = $dbw->field_by_name("STANDARD_ALLOCATION");
      $booking_data[$rid]["discount_flag"] = $dbw->field_by_name("DISCOUNT_FLAG");
      $booking_data[$rid]["discount"] = $dbw->field_by_name("DISCOUNT");
      $booking_data[$rid]["room_count"] = $dbw->field_by_name("ROOMS_COUNT");

      $booking_data[$rid]["max_adults"] = $dbw->field_by_name("MAX_ADULTS");

      $booking_data[$rid]["child_discount"] = $dbw->field_by_name("CHILD_DISCOUNT");
      $booking_data[$rid]["child_discount_flag"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
      $booking_data[$rid]["max_child_age"] = $dbw->field_by_name("MAX_CHILD_AGE");

      $booking_data[$rid]["child_discount2"] = $dbw->field_by_name("CHILD_DISCOUNT2");
      $booking_data[$rid]["child_discount_flag2"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG2");
      $booking_data[$rid]["max_child_age2"] = $dbw->field_by_name("MAX_CHILD_AGE2");

      $booking_data[$rid]["child_discount3"] = $dbw->field_by_name("CHILD_DISCOUNT3");
      $booking_data[$rid]["child_discount_flag3"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG3");
      $booking_data[$rid]["max_child_age3"] = $dbw->field_by_name("MAX_CHILD_AGE3");

      $booking_data[$rid]["child_discount4"] = $dbw->field_by_name("CHILD_DISCOUNT4");
      $booking_data[$rid]["child_discount_flag4"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG4");
      $booking_data[$rid]["max_child_age4"] = $dbw->field_by_name("MAX_CHILD_AGE4");

      $booking_data[$rid]["add_child_discount"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT");
      $booking_data[$rid]["add_child_discount_flag"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG");
      $booking_data[$rid]["add_max_child_age"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE");

      $booking_data[$rid]["add_child_discount2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT2");
      $booking_data[$rid]["add_child_discount_flag2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG2");
      $booking_data[$rid]["add_max_child_age2"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE2");

      $booking_data[$rid]["add_child_discount3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT3");
      $booking_data[$rid]["add_child_discount_flag3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG3");
      $booking_data[$rid]["add_max_child_age3"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE3");

      $booking_data[$rid]["add_child_discount4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT4");
      $booking_data[$rid]["add_child_discount_flag4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG4");
      $booking_data[$rid]["add_max_child_age4"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE4");
    }

    $dbw->free_result();
  } // fetch_room_properties
  //-----------------------------------------------------------------
  
  /*
  public function fetch_booking_data(&$booking_data)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $id = $dbw->escape(reqvar("id"));
		$lang_key = $dbw->escape($_SESSION["lang"]);

    $begin_date = $_REQUEST["week"]["begin"];
    $end_date = $_REQUEST["week"]["end"];

    //prepare date for database
    $begin_time = strtotime($begin_date);
    $end_time = strtotime($end_date);

    $begin_date = null_if_empty($dbw->format_date($begin_time));
    $end_date = null_if_empty($dbw->format_date($end_time));
    $begin_datetime = null_if_empty($dbw->format_datetime($begin_time));
    $end_datetime = null_if_empty($dbw->format_datetime($end_time));

    //fetch room info
    $query = "SELECT I_NAME, TYPE, ROOMS_COUNT, MIN_PERSONS, MAX_PERSONS, WITH_CHILDREN, PRICING_TYPE, DISCOUNT_FLAG, DISCOUNT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, STANDARD_ALLOCATION
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = ROOM_ID)
              LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANGUAGE_ID)
              WHERE {$prfx}_HTL_ROOMS.ID = $id AND LANG_KEY = '$lang_key'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $booking_data["room_name"] = $dbw->field_by_name("TYPE");
      if(empty($booking_data["room_name"]))
        $booking_data["room_name"] = $dbw->field_by_name("I_NAME");
      $booking_data["min_persons"] = $dbw->field_by_name("MIN_PERSONS");
      $booking_data["max_persons"] = $dbw->field_by_name("MAX_PERSONS");
      $booking_data["with_children"] = $dbw->field_by_name("WITH_CHILDREN");
      $booking_data["pricing_type"] = $dbw->field_by_name("PRICING_TYPE");
      $booking_data["standard_allocation"] = $dbw->field_by_name("STANDARD_ALLOCATION");
      $booking_data["discount_flag"] = $dbw->field_by_name("DISCOUNT_FLAG");
      $booking_data["discount"] = $dbw->field_by_name("DISCOUNT");
      $booking_data["child_discount"] = $dbw->field_by_name("CHILD_DISCOUNT");
      $booking_data["child_discount_flag"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
      $booking_data["room_count"] = $dbw->field_by_name("ROOMS_COUNT");
    }

    $dbw->free_result();

    //fetch booking data

    //Step 1: Get prices from ROOM_AVAILABILITY table
    //Step 2: If no prices from step 1, try to get the prices from seasons on our dates

    // step 1
    $query = "SELECT ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE, PRICE, PRICE1, PRICE2, PRICE3, PRICE2_1, PRICE_ADD_ADULT, PRICE_ADD_CHILDREN, MIN_NIGHTS, MAX_NIGHTS, DATE
              FROM {$prfx}_HTL_ROOM_AVAILABILITY
              WHERE ROOM_ID = $id AND DATE >= $begin_date AND DATE <= $end_date
              ORDER BY DATE";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $booking_data["dates"] = array();

    while($dbw->fetch_row())
    {
      $booking_data["dates"][date('Y-m-d', strtotime($dbw->field_by_name("DATE")))] = array("arrival" => $dbw->field_by_name("ARRIVAL"),
                                                                  "departure" => $dbw->field_by_name("DEPARTURE"),
                                                                  "room_count" => $dbw->field_by_name("ROOM_COUNT"),
                                                                  "price_type" => $dbw->field_by_name("PRICE_TYPE"),
                                                                  "price" => $dbw->field_by_name("PRICE"),
                                                                  "price1" => $dbw->field_by_name("PRICE1"),
                                                                  "price2" => $dbw->field_by_name("PRICE2"),
                                                                  "price3" => $dbw->field_by_name("PRICE3"),
                                                                  "price2_1" => $dbw->field_by_name("PRICE2_1"),
                                                                  "price_add_adult" => $dbw->field_by_name("PRICE_ADD_ADULT"),
                                                                  "price_add_children" => $dbw->field_by_name("PRICE_ADD_CHILDREN"),
                                                                  "min_nights" => $dbw->field_by_name("MIN_NIGHTS"),
                                                                  "max_nights" => $dbw->field_by_name("MAX_NIGHTS")
                                                                 );
    }

    $dbw->free_result();

    //step 2
    //generate the array with dates of each day on week
    $dates = array();
    $date = date('Y-m-d', $begin_time);
    $date = explode("-", $date);
    for($i = 0; $i <= 6; $i++)
    {
      $dates[$i]["datetime"] = null_if_empty($dbw->format_datetime(mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0])));
      $dates[$i]["date"] = date("Y-m-d", mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]));
    }

    foreach($dates as $datetime)
    {
      $query = "SELECT PRICE1, PRICE2, PRICE_ADD_ADULT, PRICE_ADD_CHILD
                FROM {$prfx}_HTL_PRICE
                LEFT JOIN {$prfx}_HTL_SEASON_PERIODS ON ({$prfx}_HTL_SEASON_PERIODS.SEASON_ID = {$prfx}_HTL_PRICE.SEASON_ID)
                WHERE ROOM_ID = $id AND FROM_DATE <= $datetime[datetime] AND TO_DATE >= $datetime[datetime]";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $booking_data["dates"][$datetime["date"]]["season_price1"] = $dbw->field_by_name("PRICE1");
        $booking_data["dates"][$datetime["date"]]["season_price2"] = $dbw->field_by_name("PRICE2");
      }

      $dbw->free_result();
    }//foreach

  } // fetch_booking_data
  //-----------------------------------------------------------------
  */
  public function save_booking_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    //check data
    foreach($_REQUEST["booking_data"] as $room_id => &$room_data)
    {
      foreach($room_data["dates"] as $date => &$booking_data)
      {
        //prepare data
        $data = array();

        $tmpdate = explode("-", $date);
        $time = mktime(00, 00, 00, $tmpdate[1], $tmpdate[2], $tmpdate[0]);
        $data["date"] = null_if_empty($dbw->format_date($time));
        $data["room_id"] = $room_id;

        $data["closed"] = (empty($booking_data["closed"])) ? 0 : 1;
        $data["arrival"] = (empty($booking_data["arrival"])) ? 0 : 1;
        $data["departure"] = (empty($booking_data["departure"])) ? 0 : 1;
        $data["room_count"] = $dbw->escape($booking_data["room_count"]);

        if($booking_data["room_count"] == '')
        {
          $ERROR = text("ErrRoomCountEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["room_count"] < 0)
        {
          $ERROR = text("RoomCountLessZero");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        $max_rooms = 0;

        $query = "SELECT ROOMS_COUNT FROM {$prfx}_HTL_ROOMS
                  WHERE ID = $room_id ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        while($dbw->fetch_row())
        {
          $max_rooms = $dbw->field_by_name("ROOMS_COUNT");
        }

        $dbw->free_result();

        if($booking_data["room_count"] > $max_rooms)
        {
          $ERROR = text("RoomCountMoreMax");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        // get number of reserved rooms

        $query = "SELECT COUNT(*) CNT FROM
                  {$prfx}_HTL_ORDER_PROP
                  WHERE ROOM_ID = $data[room_id]
                  AND
                  ORDER_ID IN
                  (
                    SELECT ID FROM {$prfx}_HTL_ORDER
                    WHERE
                    $data[date] >= ARRIVE_DATE AND $data[date] < DEPARTURE_DATE
                    AND (CONFIRMED IS NULL OR CONFIRMED NOT IN (2, 3))
                  )
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $reserved = 0;

        while($dbw->fetch_row())
        {
          $reserved = $dbw->field_by_name("CNT");
        }

        if(empty($reserved)) $reserved = 0;

        $dbw->free_result();

        if($booking_data["room_count"] > ($max_rooms-$reserved))
        {
          $ERROR = sprintf(text("ErrMaxRoomsCount"), $max_rooms-$reserved, $max_rooms, $reserved, date(text("DateFormat"), $time));
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["room_count"] != '' && !is_numeric($booking_data["room_count"]))
        {
          $ERROR = text("ErrRoomsCount");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult"]) && $booking_data["price_adult"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult2"]) && $booking_data["price_adult2"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult3"]) && $booking_data["price_adult3"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult4"]) && $booking_data["price_adult4"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child"]) && $booking_data["price_adult_child"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child2"]) && $booking_data["price_adult_child2"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child3"]) && $booking_data["price_adult_child3"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child4"]) && $booking_data["price_adult_child4"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_adult"]) && $booking_data["price_add_adult"] == '')
        {
          $booking_data["price_add_adult"] = 0;
        }

        if(isset($booking_data["price_add_child"]) && $booking_data["price_add_child"] == '')
        {
          $booking_data["price_add_child"] = 0;
        }

        if(isset($booking_data["price_add_child2"]) && $booking_data["price_add_child2"] == '')
        {
          $booking_data["price_add_child2"] = 0;
        }

        if(isset($booking_data["price_add_child3"]) && $booking_data["price_add_child3"] == '')
        {
          $booking_data["price_add_child3"] = 0;
        }

        if(isset($booking_data["price_add_child4"]) && $booking_data["price_add_child4"] == '')
        {
          $booking_data["price_add_child4"] = 0;
        }

        if(isset($booking_data["price_adult"]) && $booking_data["price_adult"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult2"]) && $booking_data["price_adult2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult3"]) && $booking_data["price_adult3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult4"]) && $booking_data["price_adult4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child"]) && $booking_data["price_adult_child"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child2"]) && $booking_data["price_adult_child2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child3"]) && $booking_data["price_adult_child3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child4"]) && $booking_data["price_adult_child4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_adult_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_adult"]) && $booking_data["price_add_adult"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_adult"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_add_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child"]) && $booking_data["price_add_child"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_add_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child2"]) && $booking_data["price_add_child2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_add_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child3"]) && $booking_data["price_add_child3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_add_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child4"]) && $booking_data["price_add_child4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][price_add_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["min_nights"] != '' && !is_numeric($booking_data["min_nights"]))
        {
          $ERROR = text("ErrMinNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][min_nights]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["max_nights"] != '' && !is_numeric($booking_data["max_nights"]))
        {
          $ERROR = text("ErrMaxNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][max_nights]";
          $dbw->rollback_transaction();
          return false;
        }

        if(($booking_data["min_nights"] != '' && $booking_data["max_nights"] != '') && $booking_data["min_nights"] > $booking_data["max_nights"])
        {
          $ERROR = text("ErrMinMaxNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][dates][$date][min_nights]";
          $dbw->rollback_transaction();
          return false;
        }


        $data["price_type"] = "'INDIVIDUAL'";

        $data["price_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_child"]))));
        if(!empty($data["price_child"]) && $data["price_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_child"] = str_replace("'", '', $data["price_child"]);

        $data["price_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_child2"]))));
        if(!empty($data["price_child2"]) && $data["price_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_child2"] = str_replace("'", '', $data["price_child2"]);

        $data["price_adult"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult"]))));
        if(!empty($data["price_adult"]) && $data["price_adult"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult"] = str_replace("'", '', $data["price_adult"]);

        $data["price_adult2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult2"]))));
        if(!empty($data["price_adult2"]) && $data["price_adult2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult2"] = str_replace("'", '', $data["price_adult2"]);

        $data["price_adult3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult3"]))));
        if(!empty($data["price_adult3"]) && $data["price_adult3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult3"] = str_replace("'", '', $data["price_adult3"]);

        $data["price_adult4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult4"]))));
        if(!empty($data["price_adult4"]) && $data["price_adult4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult4"] = str_replace("'", '', $data["price_adult4"]);

        $data["price_adult_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child"]))));
        if(!empty($data["price_adult_child"]) && $data["price_adult_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child"] = str_replace("'", '', $data["price_adult_child"]);

        $data["price_adult_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child2"]))));
        if(!empty($data["price_adult_child2"]) && $data["price_adult_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child2"] = str_replace("'", '', $data["price_adult_child2"]);

        $data["price_adult_child3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child3"]))));
        if(!empty($data["price_adult_child3"]) && $data["price_adult_child3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child3"] = str_replace("'", '', $data["price_adult_child3"]);

        $data["price_adult_child4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child4"]))));
        if(!empty($data["price_adult_child4"]) && $data["price_adult_child4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child4"] = str_replace("'", '', $data["price_adult_child4"]);

        $data["price_add_adult"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_adult"]))));
        if(!empty($data["price_add_adult"]) && $data["price_add_adult"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_adult"] = str_replace("'", '', $data["price_add_adult"]);

        $data["price_add_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child"]))));
        if(!empty($data["price_add_child"]) && $data["price_add_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child"] = str_replace("'", '', $data["price_add_child"]);

        $data["price_add_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child2"]))));
        if(!empty($data["price_add_child2"]) && $data["price_add_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child2"] = str_replace("'", '', $data["price_add_child2"]);

        $data["price_add_child3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child3"]))));
        if(!empty($data["price_add_child3"]) && $data["price_add_child3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child3"] = str_replace("'", '', $data["price_add_child3"]);

        $data["price_add_child4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child4"]))));
        if(!empty($data["price_add_child4"]) && $data["price_add_child4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child4"] = str_replace("'", '', $data["price_add_child4"]);

        if($booking_data["min_nights"] == '')
          $booking_data["min_nights"] = 1;

        $data["min_nights"] = null_if_empty($dbw->escape($booking_data["min_nights"]));
        $data["max_nights"] = null_if_empty($dbw->escape($booking_data["max_nights"]));

        //insert or update
        $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
          $update = $dbw->field_by_name("CNT");

        $dbw->free_result();
        
        // set count
        if(!$update)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                    (ROOM_ID, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE, DATE, MIN_NIGHTS)
                    VALUES
                    ($data[room_id], 1, 1, $data[room_count], $data[price_type], $data[date], 1)";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ROOM_COUNT = $data[room_count]
                    WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";
        }

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
        
        if(!reqvar_empty("rate_plan"))
        {
          $rpid = $dbw->escape(reqvar("rate_plan"));
          
          $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_RATE_PRICE WHERE RATE_PLAN_ID = $rpid AND ROOM_ID = $data[room_id] AND DATE = $data[date]";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $update = false;
          if($dbw->fetch_row())
            $update = $dbw->field_by_name("CNT");

          $dbw->free_result();
          
          if(!$update)
          {
            $query = "INSERT INTO {$prfx}_HTL_RATE_PRICE
                      (ROOM_ID, RATE_PLAN_ID, DATE, MIN_NIGHTS)
                      VALUES
                      ($data[room_id], $rpid, $data[date], 1)";
            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }
          }
        } // if rate plan

        if(!reqvar_empty("rate_plan"))
        {
          $query = "UPDATE {$prfx}_HTL_RATE_PRICE SET
                    ARRIVAL = $data[arrival],
                    DEPARTURE = $data[departure],
                    CLOSED = $data[closed],
                    PRICE_CHILD = $data[price_child],
                    PRICE_CHILD2 = $data[price_child2],
                    PRICE_ADULT = $data[price_adult],
                    PRICE_ADULT2 = $data[price_adult2],
                    PRICE_ADULT3 = $data[price_adult3],
                    PRICE_ADULT4 = $data[price_adult4],
                    PRICE_ADULT_CHILD = $data[price_adult_child],
                    PRICE_ADULT_CHILD2 = $data[price_adult_child2],
                    PRICE_ADULT_CHILD3 = $data[price_adult_child3],
                    PRICE_ADULT_CHILD4 = $data[price_adult_child4],
                    PRICE_ADD_ADULT = $data[price_add_adult],
                    PRICE_ADD_CHILD = $data[price_add_child],
                    PRICE_ADD_CHILD2 = $data[price_add_child2],
                    PRICE_ADD_CHILD3 = $data[price_add_child3],
                    PRICE_ADD_CHILD4 = $data[price_add_child4],
                    MIN_NIGHTS = $data[min_nights],
                    MAX_NIGHTS = $data[max_nights]
                    WHERE RATE_PLAN_ID = $rpid AND ROOM_ID = $data[room_id] AND DATE = $data[date]";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ARRIVAL = $data[arrival],
                    DEPARTURE = $data[departure],
                    PRICE_TYPE = $data[price_type],
                    CLOSED = $data[closed],
                    PRICE_CHILD = $data[price_child],
                    PRICE_CHILD2 = $data[price_child2],
                    PRICE_ADULT = $data[price_adult],
                    PRICE_ADULT2 = $data[price_adult2],
                    PRICE_ADULT3 = $data[price_adult3],
                    PRICE_ADULT4 = $data[price_adult4],
                    PRICE_ADULT_CHILD = $data[price_adult_child],
                    PRICE_ADULT_CHILD2 = $data[price_adult_child2],
                    PRICE_ADULT_CHILD3 = $data[price_adult_child3],
                    PRICE_ADULT_CHILD4 = $data[price_adult_child4],
                    PRICE_ADD_ADULT = $data[price_add_adult],
                    PRICE_ADD_CHILD = $data[price_add_child],
                    PRICE_ADD_CHILD2 = $data[price_add_child2],
                    PRICE_ADD_CHILD3 = $data[price_add_child3],
                    PRICE_ADD_CHILD4 = $data[price_add_child4],
                    MIN_NIGHTS = $data[min_nights],
                    MAX_NIGHTS = $data[max_nights]
                    WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";
        }

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $INFO_MESSAGE = text("MSG_DATA_SAVED");
  } // save_booking_data
  //-----------------------------------------------------------------
  public function external_manager_active()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $is_active = false;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT USE_SERVICE FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      if($dbw->field_by_name("USE_SERVICE") && $dbw->field_by_name("USE_SERVICE") != "RECONLINE") $is_active = true;
    }

    $dbw->free_result();
    
    return $is_active;
  } // external_manager_active
  //-----------------------------------------------------------------
  public function save_batch_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $start_date = strtotime(format_date($_REQUEST["week"]["begin"], text("DateFormat")));
    $end_date = strtotime(format_date($_REQUEST["week"]["end"], text("DateFormat")));
    
    $days = ($end_date - $start_date) / (24*3600);
    
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    //check data
    foreach($_REQUEST["booking_data"] as $room_id => &$room_data)
    {
      for($i = 0; $i <= $days; $i++)
      {
        $setup_flags = empty($room_data["setup_data_flag"]) ? array() : $room_data["setup_data_flag"];
        $booking_data = $room_data["setup_data"];
        
        $date = date("Y-m-d", ($start_date+($i*86400)));
        
        $wd = date("w", $start_date+($i*86400));
        
        if(!empty($_REQUEST["week"]["day"]) && empty($_REQUEST["week"]["day"][$wd])) continue;
        
        //prepare data
        $data = array();

        $tmpdate = explode("-", $date);
        $time = mktime(00, 00, 00, $tmpdate[1], $tmpdate[2], $tmpdate[0]);
        $data["date"] = null_if_empty($dbw->format_date($time));
        
        $data["room_id"] = $room_id;

        $data["closed"] = (empty($booking_data["closed"])) ? 0 : 1;
        $data["arrival"] = (empty($booking_data["arrival"])) ? 0 : 1;
        $data["departure"] = (empty($booking_data["departure"])) ? 0 : 1;
        $data["room_count"] = $dbw->escape($booking_data["room_count"]);

        if(!empty($setup_flags["room_count"]) && $booking_data["room_count"] == '')
        {
          $ERROR = text("ErrRoomCountEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["room_count"]) && $booking_data["room_count"] < 0)
        {
          $ERROR = text("RoomCountLessZero");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        $max_rooms = 0;

        $query = "SELECT ROOMS_COUNT FROM {$prfx}_HTL_ROOMS
                  WHERE ID = $room_id ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        while($dbw->fetch_row())
        {
          $max_rooms = $dbw->field_by_name("ROOMS_COUNT");
        }

        $dbw->free_result();

        if(!empty($setup_flags["room_count"]) && $booking_data["room_count"] > $max_rooms)
        {
          $ERROR = text("RoomCountMoreMax");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        // get number of reserved rooms

        $query = "SELECT COUNT(*) CNT FROM
                  {$prfx}_HTL_ORDER_PROP
                  WHERE ROOM_ID = $data[room_id]
                  AND
                  ORDER_ID IN
                  (
                    SELECT ID FROM {$prfx}_HTL_ORDER
                    WHERE
                    $data[date] >= ARRIVE_DATE AND $data[date] < DEPARTURE_DATE
                    AND (CONFIRMED IS NULL OR CONFIRMED NOT IN (2, 3))
                  )
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $reserved = 0;

        while($dbw->fetch_row())
        {
          $reserved = $dbw->field_by_name("CNT");
        }

        if(empty($reserved)) $reserved = 0;

        $dbw->free_result();

        if(!empty($setup_flags["room_count"]) && $booking_data["room_count"] > ($max_rooms-$reserved))
        {
          $ERROR = sprintf(text("ErrMaxRoomsCount"), $max_rooms-$reserved, $max_rooms, $reserved, date(text("DateFormat"), $time));
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["room_count"]) && $booking_data["room_count"] != '' && !is_numeric($booking_data["room_count"]))
        {
          $ERROR = text("ErrRoomsCount");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][room_count]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult"]) && isset($booking_data["price_adult"]) && $booking_data["price_adult"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult2"]) && isset($booking_data["price_adult2"]) && $booking_data["price_adult2"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult3"]) && isset($booking_data["price_adult3"]) && $booking_data["price_adult3"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult4"]) && isset($booking_data["price_adult4"]) && $booking_data["price_adult4"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult_child"]) && isset($booking_data["price_adult_child"]) && $booking_data["price_adult_child"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult_child2"]) && isset($booking_data["price_adult_child2"]) && $booking_data["price_adult_child2"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult_child3"]) && isset($booking_data["price_adult_child3"]) && $booking_data["price_adult_child3"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_adult_child4"]) && isset($booking_data["price_adult_child4"]) && $booking_data["price_adult_child4"] == '')
        {
          $ERROR = text("ErrPriceEmpty");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(!empty($setup_flags["price_add_adult"]) && isset($booking_data["price_add_adult"]) && $booking_data["price_add_adult"] == '')
        {
          $booking_data["price_add_adult"] = 0;
        }

        if(!empty($setup_flags["price_add_child"]) && isset($booking_data["price_add_child"]) && $booking_data["price_add_child"] == '')
        {
          $booking_data["price_add_child"] = 0;
        }

        if(!empty($setup_flags["price_add_child2"]) && isset($booking_data["price_add_child2"]) && $booking_data["price_add_child2"] == '')
        {
          $booking_data["price_add_child2"] = 0;
        }

        if(!empty($setup_flags["price_add_child3"]) && isset($booking_data["price_add_child3"]) && $booking_data["price_add_child3"] == '')
        {
          $booking_data["price_add_child3"] = 0;
        }

        if(!empty($setup_flags["price_add_child4"]) && isset($booking_data["price_add_child4"]) && $booking_data["price_add_child4"] == '')
        {
          $booking_data["price_add_child4"] = 0;
        }

        if(isset($booking_data["price_adult"]) && $booking_data["price_adult"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult2"]) && $booking_data["price_adult2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult3"]) && $booking_data["price_adult3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult4"]) && $booking_data["price_adult4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child"]) && $booking_data["price_adult_child"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child2"]) && $booking_data["price_adult_child2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child3"]) && $booking_data["price_adult_child3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_adult_child4"]) && $booking_data["price_adult_child4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_adult_child4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_adult_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_adult"]) && $booking_data["price_add_adult"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_adult"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_add_adult]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child"]) && $booking_data["price_add_child"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_add_child]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child2"]) && $booking_data["price_add_child2"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child2"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_add_child2]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child3"]) && $booking_data["price_add_child3"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child3"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_add_child3]";
          $dbw->rollback_transaction();
          return false;
        }

        if(isset($booking_data["price_add_child4"]) && $booking_data["price_add_child4"] != '' && !is_numeric(str_replace(",", ".", $booking_data["price_add_child4"])))
        {
          $ERROR = text("ErrPriceValidation");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][price_add_child4]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["min_nights"] != '' && !is_numeric($booking_data["min_nights"]))
        {
          $ERROR = text("ErrMinNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][min_nights]";
          $dbw->rollback_transaction();
          return false;
        }

        if($booking_data["max_nights"] != '' && !is_numeric($booking_data["max_nights"]))
        {
          $ERROR = text("ErrMaxNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][max_nights]";
          $dbw->rollback_transaction();
          return false;
        }

        if(($booking_data["min_nights"] != '' && $booking_data["max_nights"] != '') && $booking_data["min_nights"] > $booking_data["max_nights"])
        {
          $ERROR = text("ErrMinMaxNights");
          $FOCUS_ELEMENT = "booking_data[$room_id][setup_data][min_nights]";
          $dbw->rollback_transaction();
          return false;
        }

        $data["price_type"] = "'INDIVIDUAL'";

        $data["price_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_child"]))));
        if(!empty($data["price_child"]) && $data["price_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_child"] = str_replace("'", '', $data["price_child"]);

        $data["price_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_child2"]))));
        if(!empty($data["price_child2"]) && $data["price_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_child2"] = str_replace("'", '', $data["price_child2"]);

        $data["price_adult"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult"]))));
        if(!empty($data["price_adult"]) && $data["price_adult"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult"] = str_replace("'", '', $data["price_adult"]);

        $data["price_adult2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult2"]))));
        if(!empty($data["price_adult2"]) && $data["price_adult2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult2"] = str_replace("'", '', $data["price_adult2"]);

        $data["price_adult3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult3"]))));
        if(!empty($data["price_adult3"]) && $data["price_adult3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult3"] = str_replace("'", '', $data["price_adult3"]);

        $data["price_adult4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult4"]))));
        if(!empty($data["price_adult4"]) && $data["price_adult4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult4"] = str_replace("'", '', $data["price_adult4"]);

        $data["price_adult_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child"]))));
        if(!empty($data["price_adult_child"]) && $data["price_adult_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child"] = str_replace("'", '', $data["price_adult_child"]);

        $data["price_adult_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child2"]))));
        if(!empty($data["price_adult_child2"]) && $data["price_adult_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child2"] = str_replace("'", '', $data["price_adult_child2"]);

        $data["price_adult_child3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child3"]))));
        if(!empty($data["price_adult_child3"]) && $data["price_adult_child3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child3"] = str_replace("'", '', $data["price_adult_child3"]);

        $data["price_adult_child4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_adult_child4"]))));
        if(!empty($data["price_adult_child4"]) && $data["price_adult_child4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_adult_child4"] = str_replace("'", '', $data["price_adult_child4"]);

        $data["price_add_adult"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_adult"]))));
        if(!empty($data["price_add_adult"]) && $data["price_add_adult"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_adult"] = str_replace("'", '', $data["price_add_adult"]);

        $data["price_add_child"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child"]))));
        if(!empty($data["price_add_child"]) && $data["price_add_child"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child"] = str_replace("'", '', $data["price_add_child"]);

        $data["price_add_child2"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child2"]))));
        if(!empty($data["price_add_child2"]) && $data["price_add_child2"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child2"] = str_replace("'", '', $data["price_add_child2"]);

        $data["price_add_child3"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child3"]))));
        if(!empty($data["price_add_child3"]) && $data["price_add_child3"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child3"] = str_replace("'", '', $data["price_add_child3"]);

        $data["price_add_child4"] = null_if_empty(str_replace(",", ".", $dbw->escape(ifnull($booking_data["price_add_child4"]))));
        if(!empty($data["price_add_child4"]) && $data["price_add_child4"] != 'NULL')
          $_REQUEST["booking_data"][$room_id]["dates"][$date]["price_add_child4"] = str_replace("'", '', $data["price_add_child4"]);

        if($booking_data["min_nights"] == '')
          $booking_data["min_nights"] = 1;

        $data["min_nights"] = null_if_empty($dbw->escape($booking_data["min_nights"]));
        $data["max_nights"] = null_if_empty($dbw->escape($booking_data["max_nights"]));

        //insert or update
        $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
          $update = $dbw->field_by_name("CNT");

        $dbw->free_result();

        if(!$update)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                    (ROOM_ID, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE, MIN_NIGHTS, DATE)
                    VALUES
                    ($data[room_id], 1, 1, 0, 'INDIVIDUAL', 1, $data[date])";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
        
        if(!reqvar_empty("rate_plan"))
        {
          $rpid = $dbw->escape(reqvar("rate_plan"));
          
          $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_RATE_PRICE WHERE RATE_PLAN_ID = $rpid AND ROOM_ID = $data[room_id] AND DATE = $data[date]";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $update = false;
          if($dbw->fetch_row())
            $update = $dbw->field_by_name("CNT");

          $dbw->free_result();
          
          if(!$update)
          {
            $query = "INSERT INTO {$prfx}_HTL_RATE_PRICE
                      (ROOM_ID, RATE_PLAN_ID, DATE, MIN_NIGHTS)
                      VALUES
                      ($data[room_id], $rpid, $data[date], 1)";
            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();
              $dbw->rollback_transaction();
              return false;
            }
          }
        } // if rate plan
        
        // set count
        if(!empty($setup_flags["room_count"])) 
        {
        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                  ROOM_COUNT = $data[room_count]
                  WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
        
        $set_statement = "";
        
        if(!empty($setup_flags["closed"])) $set_statement .= "CLOSED = $data[closed],";
        if(!empty($setup_flags["arrival"])) $set_statement .= "ARRIVAL = $data[arrival],";
        if(!empty($setup_flags["departure"])) $set_statement .= "DEPARTURE = $data[departure],";
        if(!empty($setup_flags["price_child"])) $set_statement .= "PRICE_CHILD = $data[price_child],";
        if(!empty($setup_flags["price_child2"])) $set_statement .= "PRICE_CHILD2 = $data[price_child2],";
        if(!empty($setup_flags["price_adult"])) $set_statement .= "PRICE_ADULT = $data[price_adult],";
        if(!empty($setup_flags["price_adult2"])) $set_statement .= "PRICE_ADULT2 = $data[price_adult2],";
        if(!empty($setup_flags["price_adult3"])) $set_statement .= "PRICE_ADULT3 = $data[price_adult3],";
        if(!empty($setup_flags["price_adult4"])) $set_statement .= "PRICE_ADULT4 = $data[price_adult4],";
        if(!empty($setup_flags["price_adult_child"])) $set_statement .= "PRICE_ADULT_CHILD = $data[price_adult_child],";
        if(!empty($setup_flags["price_adult_child2"])) $set_statement .= "PRICE_ADULT_CHILD2 = $data[price_adult_child2],";
        if(!empty($setup_flags["price_adult_child3"])) $set_statement .= "PRICE_ADULT_CHILD3 = $data[price_adult_child3],";
        if(!empty($setup_flags["price_adult_child4"])) $set_statement .= "PRICE_ADULT_CHILD4 = $data[price_adult_child4],";

        if(!empty($setup_flags["price_add_adult"])) $set_statement .= "PRICE_ADD_ADULT = $data[price_add_adult],";

        if(!empty($setup_flags["price_add_child"])) $set_statement .= "PRICE_ADD_CHILD = $data[price_add_child],";
        if(!empty($setup_flags["price_add_child2"])) $set_statement .= "PRICE_ADD_CHILD2 = $data[price_add_child2],";
        if(!empty($setup_flags["price_add_child3"])) $set_statement .= "PRICE_ADD_CHILD3 = $data[price_add_child3],";
        if(!empty($setup_flags["price_add_child4"])) $set_statement .= "PRICE_ADD_CHILD4 = $data[price_add_child4],";

        if(!empty($setup_flags["min_nights"])) $set_statement .= "MIN_NIGHTS = $data[min_nights],";
        if(!empty($setup_flags["max_nights"])) $set_statement .= "MAX_NIGHTS = $data[max_nights],";
        
        if(!reqvar_empty("rate_plan"))
        {
          $rpid = $dbw->escape(reqvar("rate_plan"));
          
          $set_statement = trim($set_statement, ", ");
          
          if(empty($set_statement)) $set_statement = "ROOM_ID = ROOM_ID";
          
          $query = "UPDATE {$prfx}_HTL_RATE_PRICE SET
                    $set_statement
                    WHERE RATE_PLAN_ID = $rpid AND ROOM_ID = $data[room_id] AND DATE = $data[date]";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    $set_statement
                    PRICE_TYPE = $data[price_type]
                    WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";
        }          

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $INFO_MESSAGE = text("MSG_DATA_SAVED");
  } // save_batch_data
  //-----------------------------------------------------------------

  public function delete_service()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $id = $dbw->escape(reqvar("id"));

    $query = "DELETE FROM {$prfx}_HTL_EXTRA_SERVICES WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    $INFO_MESSAGE = text("MsgServiceDeleted");
  } // delete_service
  //-----------------------------------------------------------------
  public function fetch_spec_email_settings(&$settings)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $now = $dbw->format_datetime(time());

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ETEMPLATE_ID, RECEIVER
              FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
              WHERE TP = 'TPL3' AND '$now' BETWEEN BEGIN_DATE AND END_DATE
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $settings["email_tpl3"] = $dbw->field_by_name("ETEMPLATE_ID");
      $settings["receiver3"] = $dbw->field_by_name("RECEIVER");
    }

    $dbw->free_result();

    $query = "SELECT ETEMPLATE_ID, RECEIVER
              FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
              WHERE TP = 'TPL5' AND '$now' BETWEEN BEGIN_DATE AND END_DATE
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $settings["email_tpl5"] = $dbw->field_by_name("ETEMPLATE_ID");
      $settings["receiver5"] = $dbw->field_by_name("RECEIVER");
    }

    $dbw->free_result();
  } // fetch_spec_email_settings
  //-----------------------------------------------------------------
  public function fetch_settings(&$settings, $modus = 'SETTINGS')
  {
    global $ERROR;
    global $ERR_DETAILS;

    switch($modus)
    {
      case "SETTINGS":
        if(!empty($this->settings))
        {
          $settings = $this->settings;
          return true;
        }

        $dbw = GetDBWorker();
        if(!$dbw) return false;

        $prfx = $dbw->escape(GetConnection()->get_current_prefix());

        $query = "SELECT CONFIRMATION_REQUIRED, EMAIL_TPL1_ID, EMAIL_TPL2_ID, EMAIL_TPL3_ID, EMAIL_TPL32_ID, EMAIL_TPL4_ID, EMAIL_TPL5_ID, EMAIL_TPL52_ID, EMAIL_TPL6_ID, EMAIL_TPL7_ID,
        EMAIL_RECEIVER1, EMAIL_RECEIVER2, EMAIL_RECEIVER3, EMAIL_RECEIVER32, EMAIL_RECEIVER4, EMAIL_RECEIVER5, EMAIL_RECEIVER52, EMAIL_RECEIVER6, EMAIL_RECEIVER7,
        EXPLAIN_TEXT_ACTIVE, PAYMENT_TEXT_ACTIVE, PAYMENT_TEXT2_ACTIVE, CURRENCIES, BOOKING_PAGE, USE_SERVICE, CHILD_INFO_LINK_ID, CHILD_PAGE_IN_NEW_WINDOW,
                  PAYMENT_CCARD, PAYMENT_DIRECT_DEBIT, PAYMENT_BILL, PAYMENT_BILL_CC, HIDE_NOTAVAILABLE_PER_DEFAULT, HIDE_FREEROOM_INFO, HIDE_FREEROOM_MOBILE, ROUND_FOREIGN_CURRENCIES, ROUND_RECALCULATIONS, 
                  AMERICAN_EXPRESS, MASTER_CARD, DINNER_CLUB, VISA, JSB, BACKGROUND, LOGO,
                  MIN_NIGHTS_METHOD,
                  PAYMENT_STRIPE, PAYMENT_POSTFIN_CCARD, PAYMENT_POSTFIN_OTHERS, POSTFIN_PSPID, POSTFIN_SHAIN,
                  POSTFIN_TARGETURL, POSTFIN_HOMEURL, POSTFIN_ACCEPTURL, POSTFIN_EXCEPTIONURL,
                  POSTFIN_CC_FEE,
                  POSTFIN_RATE_1, POSTFIN_DAYS_1,
                  POSTFIN_RATE_2, POSTFIN_DAYS_2,
                  POSTFIN_RATE_3, POSTFIN_DAYS_3,
                  POSTFIN_RATE_4, POSTFIN_DAYS_4,
                   
                   PAYMENT_POSTBANK_CCARD,
                   PAYMENT_POSTBANK_OTHERS,
                   POSTBANK_USER,
                   POSTBANK_SSL_PASSWORD,
                   POSTBANK_TARGETURL,
                   POSTBANK_NOTIFYURL,
                   POSTBANK_ACCEPTURL,
                   POSTBANK_EXCEPTIONURL,
                   POSTBANK_CC_FEE,
                   POSTBANK_RATE_1,
                   POSTBANK_DAYS_1,
                   POSTBANK_RATE_2,
                   POSTBANK_DAYS_2,
                   POSTBANK_RATE_3,
                   POSTBANK_DAYS_3,
                   POSTBANK_RATE_4,
                   POSTBANK_DAYS_4,
                  
                   CONTACT_ARRIVAL_DAYS,
                   EMAIL_TPL8_ID,
                   CONTACT_DEPARTURE_DAYS,
                   EMAIL_TPL9_ID,
                  
                  STRIPE_SECRET_KEY,
                  STRIPE_PUBLISHABLE_KEY,                  
                  STRIPE_CC_FEE,
                  STRIPE_CC_FEE_PERCENT,
                  STRIPE_RATE_1, STRIPE_DAYS_1,
                  STRIPE_RATE_2, STRIPE_DAYS_2,
                  STRIPE_RATE_3, STRIPE_DAYS_3,
                  STRIPE_RATE_4, STRIPE_DAYS_4,
                  
                  STRIPE_FOLLOW_PAY_DAYS,
                  EMAIL_TPL10_ID,                   
                   
                   DEFAULT_ARRIVAL,
                   DEFAULT_DEPARTURE,
                   ARRIVAL_WEEKDAY_FLAG,
                   
                   HIDE_CONDITION_WARNING,
                   PRESELECT_AGREEMENT,
                   NO_GUESTS_DETAILS,
                   
                   EXT_FORM,
                   TITLE_FIELD,
                   FIRSTNAME_FIELD,
                   LASTNAME_FIELD,
                   COMPANY_FIELD,
                   ADDRESS_FIELD,
                   ZIP_FIELD,
                   CITY_FIELD,
                   COUNTRY_FIELD,
                   PHONE_FIELD,
                   COMMENT_FIELD                   
                  
                  FROM {$prfx}_HTL_BOOKING_SETTINGS";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        $settings["confirmation"] = 0;
        $currencies = "";

        while($dbw->fetch_row())
        {
          $flag = $dbw->field_by_name("ARRIVAL_WEEKDAY_FLAG");
          
          $currencies = $dbw->field_by_name("CURRENCIES");
          
          $settings = array("confirmation" => $dbw->field_by_name("CONFIRMATION_REQUIRED"),
                            "email_tpl1" => $dbw->field_by_name("EMAIL_TPL1_ID"),
                            "email_tpl2" => $dbw->field_by_name("EMAIL_TPL2_ID"),
                            "email_tpl3" => $dbw->field_by_name("EMAIL_TPL3_ID"),
                            "email_tpl32" => $dbw->field_by_name("EMAIL_TPL32_ID"),
                            "email_tpl4" => $dbw->field_by_name("EMAIL_TPL4_ID"),
                            "email_tpl5" => $dbw->field_by_name("EMAIL_TPL5_ID"),
                            "email_tpl52" => $dbw->field_by_name("EMAIL_TPL52_ID"),
                            "email_tpl6" => $dbw->field_by_name("EMAIL_TPL6_ID"),
                            "email_tpl7" => $dbw->field_by_name("EMAIL_TPL7_ID"),
                            "booking_page" => $dbw->field_by_name("BOOKING_PAGE"),
                            "external_service" => $dbw->field_by_name("USE_SERVICE"),
                            
                            "min_nights_method" => $dbw->field_by_name("MIN_NIGHTS_METHOD"),
                            

                            "american_express" => $dbw->field_by_name("AMERICAN_EXPRESS"),
                            "master_card" => $dbw->field_by_name("MASTER_CARD"),
                            "dinner_club" => $dbw->field_by_name("DINNER_CLUB"),
                            "visa" => $dbw->field_by_name("VISA"),
                            "jsb" => $dbw->field_by_name("JSB"),
                            
                            "payment_stripe" => $dbw->field_by_name("PAYMENT_STRIPE"),

                            "payment_postfin_ccard" => $dbw->field_by_name("PAYMENT_POSTFIN_CCARD"),
                            "payment_postfin_others" => $dbw->field_by_name("PAYMENT_POSTFIN_OTHERS"),
                            "postfin_pspid" => $dbw->field_by_name("POSTFIN_PSPID"),
                            "postfin_shain" => $dbw->field_by_name("POSTFIN_SHAIN"),
                            "postfin_targeturl" => $dbw->field_by_name("POSTFIN_TARGETURL"),
                            "postfin_homeurl" => $dbw->field_by_name("POSTFIN_HOMEURL"),
                            "postfin_accepturl" => $dbw->field_by_name("POSTFIN_ACCEPTURL"),
                            "postfin_exceptionurl" => $dbw->field_by_name("POSTFIN_EXCEPTIONURL"),

                            "postfin_cc_fee" => $dbw->field_by_name("POSTFIN_CC_FEE"),
                            "postfin_rate_1" => $dbw->field_by_name("POSTFIN_RATE_1"),
                            "postfin_days_1" => $dbw->field_by_name("POSTFIN_DAYS_1"),
                            "postfin_rate_2" => $dbw->field_by_name("POSTFIN_RATE_2"),
                            "postfin_days_2" => $dbw->field_by_name("POSTFIN_DAYS_2"),
                            "postfin_rate_3" => $dbw->field_by_name("POSTFIN_RATE_3"),
                            "postfin_days_3" => $dbw->field_by_name("POSTFIN_DAYS_3"),
                            "postfin_rate_4" => $dbw->field_by_name("POSTFIN_RATE_4"),
                            "postfin_days_4" => $dbw->field_by_name("POSTFIN_DAYS_4"),

                            "stripe_secret_key" => $dbw->field_by_name("STRIPE_SECRET_KEY"),
                            "stripe_publishable_key" => $dbw->field_by_name("STRIPE_PUBLISHABLE_KEY"),

                            "stripe_cc_fee" => $dbw->field_by_name("STRIPE_CC_FEE"),
                            "stripe_cc_fee_percent" => $dbw->field_by_name("STRIPE_CC_FEE_PERCENT"),
                            
                            "stripe_rate_1" => $dbw->field_by_name("STRIPE_RATE_1"),
                            "stripe_days_1" => $dbw->field_by_name("STRIPE_DAYS_1"),
                            "stripe_rate_2" => $dbw->field_by_name("STRIPE_RATE_2"),
                            "stripe_days_2" => $dbw->field_by_name("STRIPE_DAYS_2"),
                            "stripe_rate_3" => $dbw->field_by_name("STRIPE_RATE_3"),
                            "stripe_days_3" => $dbw->field_by_name("STRIPE_DAYS_3"),
                            "stripe_rate_4" => $dbw->field_by_name("STRIPE_RATE_4"),
                            "stripe_days_4" => $dbw->field_by_name("STRIPE_DAYS_4"),

                            "stripe_follow_pay_days" => $dbw->field_by_name("STRIPE_FOLLOW_PAY_DAYS"),
                            "email_tpl10" => $dbw->field_by_name("EMAIL_TPL10_ID"),

                            "contact_arrival_days" => $dbw->field_by_name("CONTACT_ARRIVAL_DAYS"),
                            "email_tpl8" => $dbw->field_by_name("EMAIL_TPL8_ID"),
                            "contact_departure_days" => $dbw->field_by_name("CONTACT_DEPARTURE_DAYS"),
                            "email_tpl9" => $dbw->field_by_name("EMAIL_TPL9_ID"),
                            
                            "payment_postbank_ccard" => $dbw->field_by_name("PAYMENT_POSTBANK_CCARD"),
                            "payment_postbank_others" => $dbw->field_by_name("PAYMENT_POSTBANK_OTHERS"),
                            "postbank_user" => $dbw->field_by_name("POSTBANK_USER"),
                            "postbank_ssl_password" => $dbw->field_by_name("POSTBANK_SSL_PASSWORD"),
                            "postbank_targeturl" => $dbw->field_by_name("POSTBANK_TARGETURL"),
                            "postbank_notifyurl" => $dbw->field_by_name("POSTBANK_NOTIFYURL"),
                            "postbank_exceptionurl" => $dbw->field_by_name("POSTBANK_EXCEPTIONURL"),
                            "postbank_accepturl" => $dbw->field_by_name("POSTBANK_ACCEPTURL"),
                            
                            "postbank_cc_fee" => $dbw->field_by_name("POSTBANK_CC_FEE"),
                            "postbank_rate_1" => $dbw->field_by_name("POSTBANK_RATE_1"),
                            "postbank_days_1" => $dbw->field_by_name("POSTBANK_DAYS_1"),
                            "postbank_rate_2" => $dbw->field_by_name("POSTBANK_RATE_2"),
                            "postbank_days_2" => $dbw->field_by_name("POSTBANK_DAYS_2"),
                            "postbank_rate_3" => $dbw->field_by_name("POSTBANK_RATE_3"),
                            "postbank_days_3" => $dbw->field_by_name("POSTBANK_DAYS_3"),
                            "postbank_rate_4" => $dbw->field_by_name("POSTBANK_RATE_4"),
                            "postbank_days_4" => $dbw->field_by_name("POSTBANK_DAYS_4"),
                            
                            "default_arrival" => $dbw->field_by_name("DEFAULT_ARRIVAL"),
                            "default_departure" => $dbw->field_by_name("DEFAULT_DEPARTURE"),
                   
                            "child_info_page" => $dbw->field_by_name("CHILD_INFO_LINK_ID"),
                            "in_new_window" => $dbw->field_by_name("CHILD_PAGE_IN_NEW_WINDOW"),
                            "receiver1" => $dbw->field_by_name("EMAIL_RECEIVER1"),
                            "receiver2" => $dbw->field_by_name("EMAIL_RECEIVER2"),
                            "receiver3" => $dbw->field_by_name("EMAIL_RECEIVER3"),
                            "receiver32" => $dbw->field_by_name("EMAIL_RECEIVER32"),
                            "receiver4" => $dbw->field_by_name("EMAIL_RECEIVER4"),
                            "receiver5" => $dbw->field_by_name("EMAIL_RECEIVER5"),
                            "receiver52" => $dbw->field_by_name("EMAIL_RECEIVER52"),
                            "receiver6" => $dbw->field_by_name("EMAIL_RECEIVER6"),
                            "receiver7" => $dbw->field_by_name("EMAIL_RECEIVER7"),

                            "explain_text_is_active" => $dbw->field_by_name("EXPLAIN_TEXT_ACTIVE"),
                            "payment_text_is_active" => $dbw->field_by_name("PAYMENT_TEXT_ACTIVE"),
                            "payment_text2_is_active" => $dbw->field_by_name("PAYMENT_TEXT2_ACTIVE"),
                            
                            "hide_condition_warning" => $dbw->field_by_name("HIDE_CONDITION_WARNING"),
                            "preselect_agreement" => $dbw->field_by_name("PRESELECT_AGREEMENT"),
                            "no_guests_details" => $dbw->field_by_name("NO_GUESTS_DETAILS"),

                            "ext_form" => $dbw->field_by_name("EXT_FORM"),
                            "title_field" => $dbw->field_by_name("TITLE_FIELD"),
                            "firstname_field" => $dbw->field_by_name("FIRSTNAME_FIELD"),
                            "company_field" => $dbw->field_by_name("COMPANY_FIELD"),
                            "address_field" => $dbw->field_by_name("ADDRESS_FIELD"),
                            "zip_field" => $dbw->field_by_name("ZIP_FIELD"),
                            "city_field" => $dbw->field_by_name("CITY_FIELD"),
                            "country_field" => $dbw->field_by_name("COUNTRY_FIELD"),
                            "phone_field" => $dbw->field_by_name("PHONE_FIELD"),
                            "comment_field" => $dbw->field_by_name("COMMENT_FIELD"),
                            
                            "hide_freerooms" => $dbw->field_by_name("HIDE_FREEROOM_INFO"),
                            "hide_notavailable_per_default" => $dbw->field_by_name("HIDE_NOTAVAILABLE_PER_DEFAULT"),
                            "hide_freerooms_mobile" => $dbw->field_by_name("HIDE_FREEROOM_MOBILE"),
                            "round_foreign_currencies" => $dbw->field_by_name("ROUND_FOREIGN_CURRENCIES"),
                            "round_recalculations" => $dbw->field_by_name("ROUND_RECALCULATIONS"),
                            "payment_ccard" => $dbw->field_by_name("PAYMENT_CCARD"),
                            "payment_direct_debit" => $dbw->field_by_name("PAYMENT_DIRECT_DEBIT"),
                            "payment_bill" => $dbw->field_by_name("PAYMENT_BILL"),
                            "payment_bill_cc" => $dbw->field_by_name("PAYMENT_BILL_CC"),
                            "logo" => $dbw->field_by_name("LOGO"),
                            "background" => $dbw->field_by_name("BACKGROUND"),
                            "arrival_weekday_flag" => $flag,
                            "arrive_1" => ($flag & 1) ? 1 : 0,
                            "arrive_2" => ($flag & 2) ? 1 : 0,
                            "arrive_3" => ($flag & 4) ? 1 : 0,
                            "arrive_4" => ($flag & 8) ? 1 : 0,
                            "arrive_5" => ($flag & 16) ? 1 : 0,
                            "arrive_6" => ($flag & 32) ? 1 : 0,
                            "arrive_7" => ($flag & 64) ? 1 : 0
                           );
        }

        $dbw->free_result();

        if(!empty($currencies))
        $currencies = explode(", ", $currencies);
        if(!empty($currencies))
        foreach($currencies  as $currency_id)
        {
          $settings["currencies"][trim($currency_id)] = 1;
        }
        
        
        $query = "SELECT PAYMENT, SORT_ORDER
                  FROM {$prfx}_HTL_PAYMENT_SORT";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings[$dbw->field_by_name("PAYMENT") . "_sort"] = $dbw->field_by_name("SORT_ORDER");
          $_REQUEST["payment_sort"][$dbw->field_by_name("PAYMENT")] = $dbw->field_by_name("SORT_ORDER");
        }

        $dbw->free_result();              

        $lang_key = $dbw->escape($_SESSION["lang"]);

        $query = "SELECT EXPLAIN_TEXT, PAYMENT_TEXT, PAYMENT_TEXT2,
                  DD_TEXT, SPECOFFER_TEXT, BILL_TEXT, BILL_CC_TEXT, ONLINE_PAYMENT_TEXT, DATAPRIVACY_TEXT
                  FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANG_ID)
                  WHERE LANG_KEY = '$lang_key'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings["explain_text"] = $dbw->field_by_name("EXPLAIN_TEXT");
          $settings["payment_text"] = $dbw->field_by_name("PAYMENT_TEXT");
          $settings["payment_text2"] = $dbw->field_by_name("PAYMENT_TEXT2");
          $settings["dd_text"] = $dbw->field_by_name("DD_TEXT");
          $settings["specoffer_text"] = $dbw->field_by_name("SPECOFFER_TEXT");
          $settings["bill_text"] = $dbw->field_by_name("BILL_TEXT");
          $settings["bill_cc_text"] = $dbw->field_by_name("BILL_CC_TEXT");
          $settings["online_payment_text"] = $dbw->field_by_name("ONLINE_PAYMENT_TEXT");
          $settings["data_privacy_text"] = $dbw->field_by_name("DATAPRIVACY_TEXT");
        }

        $dbw->free_result();

        $query = "SELECT RECONLINE_BOOK_URL, RECONLINE_ADRESS, RECONLINE_USER, RECONLINE_PASSWORD,
                  RECONLINE_HOTEL_ID, RECONLINE_SUBMIT_RESERV,

                   CHANMANAGER_USER,
                   CHANMANAGER_PASSWORD,
                   CHANMANAGER_HOTEL_ID,
                   CHANMANAGER_DATE,
                   CHANMANAGER_ROOM_COUNT,
                   CHANMANAGER_MIN_STAYS,
                   CHANMANAGER_MAX_STAYS,
                   CHANMANAGER_PRICE1,
                   CHANMANAGER_PRICE2,
                   CHANMANAGER_PRICE3,
                   CHANMANAGER_PRICE4,
                   CHANMANAGER_PRICE5,
                   CHANMANAGER_PRICE6,
                   CHANMANAGER_CTA,
                   CHANMANAGER_CTD,
                   CHANMANAGER_TAKE_COUNTS,
                   CHANMANAGER_TAKE_PRICES,
                   CHANMANAGER_RESERV_URL,

                   SIHOT_USER,
                   SIHOT_PASSWORD,
                   SIHOT_HOTEL_ID,
                   SIHOT_DATE,
                   SIHOT_ROOM_COUNT,
                   SIHOT_MIN_STAYS,
                   SIHOT_MAX_STAYS,
                   SIHOT_PRICE1,
                   SIHOT_PRICE2,
                   SIHOT_PRICE3,
                   SIHOT_PRICE4,
                   SIHOT_PRICE5,
                   SIHOT_PRICE6,
                   SIHOT_CTA,
                   SIHOT_CTD,
                   SIHOT_TAKE_COUNTS,
                   SIHOT_TAKE_PRICES,

                   HTSPIDER_USER,
                   HTSPIDER_PASSWORD,
                   HTSPIDER_HOTEL_ID,
                   HTSPIDER_CURRENCY,
                   HTSPIDER_DATE,
                   HTSPIDER_ROOM_COUNT,
                   HTSPIDER_MIN_STAYS,
                   HTSPIDER_MAX_STAYS,
                   HTSPIDER_PRICE1,
                   HTSPIDER_PRICE2,
                   HTSPIDER_PRICE3,
                   HTSPIDER_PRICE4,
                   HTSPIDER_PRICE5,
                   HTSPIDER_PRICE6,
                   HTSPIDER_PRICE7,
                   HTSPIDER_PRICE8,
                   HTSPIDER_PRICE9,
                   HTSPIDER_PRICE10,
                   HTSPIDER_PRICE11,
                   HTSPIDER_PRICE12,
                   HTSPIDER_PRICE13,
                   HTSPIDER_PRICE14,
                   HTSPIDER_PRICE15,
                   HTSPIDER_CTA,
                   HTSPIDER_CTD,
                   HTSPIDER_TAKE_COUNTS,
                   HTSPIDER_TAKE_PRICES,

                   HTSPIDER_USER2,
                   HTSPIDER_PASSWORD2,
                   HTSPIDER_HOTEL_ID2,
                   HTSPIDER_CURRENCY2,
                   HTSPIDER_DATE2,
                   HTSPIDER_ROOM_COUNT2,
                   HTSPIDER_MIN_STAYS2,
                   HTSPIDER_MAX_STAYS2,
                   HTSPIDER_PRICE21,
                   HTSPIDER_PRICE22,
                   HTSPIDER_PRICE23,
                   HTSPIDER_PRICE24,
                   HTSPIDER_PRICE25,
                   HTSPIDER_PRICE26,
                   HTSPIDER_PRICE27,
                   HTSPIDER_PRICE28,
                   HTSPIDER_PRICE29,
                   HTSPIDER_PRICE210,
                   HTSPIDER_PRICE211,
                   HTSPIDER_PRICE212,
                   HTSPIDER_PRICE213,
                   HTSPIDER_PRICE214,
                   HTSPIDER_PRICE215,
                   HTSPIDER_CTA2,
                   HTSPIDER_CTD2,
                   HTSPIDER_TAKE_COUNTS2,
                   HTSPIDER_TAKE_PRICES2,
                   
                   HOTELPARTNER_DRATE_CODE,
                   HOTELPARTNER_HOTEL_NAME,

                   HOTELPARTNER_USER,
                   HOTELPARTNER_PASSWORD,
                   HOTELPARTNER_HOTEL_ID,
                   
                   HOTELPARTNER_PRICE1,
                   HOTELPARTNER_PRICE2,
                   HOTELPARTNER_PRICE3,
                   HOTELPARTNER_PRICE4,
                   HOTELPARTNER_PRICE_ADD_ADULT,
                   HOTELPARTNER_PRICE_ADD_CHILD,
                   HOTELPARTNER_TAKE_COUNTS,
                   HOTELPARTNER_TAKE_PRICES,
                   HOTELPARTNER_PUSH_RESERVATIONS,
                   HOTELPARTNER_RESERV_URL

                  FROM {$prfx}_HTL_EXT_SERVICE_SETTINGS";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings["reconline_book_url"] = $dbw->field_by_name("RECONLINE_BOOK_URL");
          $settings["reconline_service_address"] = $dbw->field_by_name("RECONLINE_ADRESS");
          $settings["reconline_user"] = $dbw->field_by_name("RECONLINE_USER");
          $settings["reconline_password"] = $dbw->field_by_name("RECONLINE_PASSWORD");
          $settings["reconline_hotel_id"] = $dbw->field_by_name("RECONLINE_HOTEL_ID");
          $settings["reconline_submit_reserv"] = $dbw->field_by_name("RECONLINE_SUBMIT_RESERV");

          $settings["chanmanager_user"] = $dbw->field_by_name("CHANMANAGER_USER");
          $settings["chanmanager_password"] = $dbw->field_by_name("CHANMANAGER_PASSWORD");
          $settings["chanmanager_hotel_id"] = $dbw->field_by_name("CHANMANAGER_HOTEL_ID");
          $settings["chanmanager_date"] = $dbw->field_by_name("CHANMANAGER_DATE");
          $settings["chanmanager_room_count"] = $dbw->field_by_name("CHANMANAGER_ROOM_COUNT");
          $settings["chanmanager_min_stays"] = $dbw->field_by_name("CHANMANAGER_MIN_STAYS");
          $settings["chanmanager_max_stays"] = $dbw->field_by_name("CHANMANAGER_MAX_STAYS");
          $settings["chanmanager_reserv_url"] = $dbw->field_by_name("CHANMANAGER_RESERV_URL");

          $settings["chanmanager_price1"] = $dbw->field_by_name("CHANMANAGER_PRICE1");
          $settings["chanmanager_price2"] = $dbw->field_by_name("CHANMANAGER_PRICE2");
          $settings["chanmanager_price3"] = $dbw->field_by_name("CHANMANAGER_PRICE3");
          $settings["chanmanager_price4"] = $dbw->field_by_name("CHANMANAGER_PRICE4");
          $settings["chanmanager_price5"] = $dbw->field_by_name("CHANMANAGER_PRICE5");
          $settings["chanmanager_price6"] = $dbw->field_by_name("CHANMANAGER_PRICE6");

          $settings["chanmanager_cta"] = $dbw->field_by_name("CHANMANAGER_CTA");
          $settings["chanmanager_ctd"] = $dbw->field_by_name("CHANMANAGER_CTD");

          $settings["chanmanager_take_prices"] = $dbw->field_by_name("CHANMANAGER_TAKE_PRICES");
          $settings["chanmanager_take_counts"] = $dbw->field_by_name("CHANMANAGER_TAKE_COUNTS");

          $settings["sihot_user"] = $dbw->field_by_name("SIHOT_USER");
          $settings["sihot_password"] = $dbw->field_by_name("SIHOT_PASSWORD");
          $settings["sihot_hotel_id"] = $dbw->field_by_name("SIHOT_HOTEL_ID");
          $settings["sihot_date"] = $dbw->field_by_name("SIHOT_DATE");
          $settings["sihot_room_count"] = $dbw->field_by_name("SIHOT_ROOM_COUNT");
          $settings["sihot_min_stays"] = $dbw->field_by_name("SIHOT_MIN_STAYS");
          $settings["sihot_max_stays"] = $dbw->field_by_name("SIHOT_MAX_STAYS");

          $settings["sihot_price1"] = $dbw->field_by_name("SIHOT_PRICE1");
          $settings["sihot_price2"] = $dbw->field_by_name("SIHOT_PRICE2");
          $settings["sihot_price3"] = $dbw->field_by_name("SIHOT_PRICE3");
          $settings["sihot_price4"] = $dbw->field_by_name("SIHOT_PRICE4");
          $settings["sihot_price5"] = $dbw->field_by_name("SIHOT_PRICE5");
          $settings["sihot_price6"] = $dbw->field_by_name("SIHOT_PRICE6");

          $settings["sihot_cta"] = $dbw->field_by_name("SIHOT_CTA");
          $settings["sihot_ctd"] = $dbw->field_by_name("SIHOT_CTD");

          $settings["sihot_take_prices"] = $dbw->field_by_name("SIHOT_TAKE_PRICES");
          $settings["sihot_take_counts"] = $dbw->field_by_name("SIHOT_TAKE_COUNTS");

          $settings["htspider_user"] = $dbw->field_by_name("HTSPIDER_USER");
          $settings["htspider_password"] = $dbw->field_by_name("HTSPIDER_PASSWORD");
          $settings["htspider_hotel_id"] = $dbw->field_by_name("HTSPIDER_HOTEL_ID");
          $settings["htspider_currency"] = $dbw->field_by_name("HTSPIDER_CURRENCY");
          $settings["htspider_date"] = $dbw->field_by_name("HTSPIDER_DATE");
          $settings["htspider_room_count"] = $dbw->field_by_name("HTSPIDER_ROOM_COUNT");
          
          $settings["htspider_min_stays"] = $dbw->field_by_name("HTSPIDER_MIN_STAYS");
          $settings["htspider_max_stays"] = $dbw->field_by_name("HTSPIDER_MAX_STAYS");

          $settings["htspider_price1"] = $dbw->field_by_name("HTSPIDER_PRICE1");
          $settings["htspider_price2"] = $dbw->field_by_name("HTSPIDER_PRICE2");
          $settings["htspider_price3"] = $dbw->field_by_name("HTSPIDER_PRICE3");
          $settings["htspider_price4"] = $dbw->field_by_name("HTSPIDER_PRICE4");
          $settings["htspider_price5"] = $dbw->field_by_name("HTSPIDER_PRICE5");
          $settings["htspider_price6"] = $dbw->field_by_name("HTSPIDER_PRICE6");
          $settings["htspider_price7"] = $dbw->field_by_name("HTSPIDER_PRICE7");
          $settings["htspider_price8"] = $dbw->field_by_name("HTSPIDER_PRICE8");
          $settings["htspider_price9"] = $dbw->field_by_name("HTSPIDER_PRICE9");
          $settings["htspider_price10"] = $dbw->field_by_name("HTSPIDER_PRICE10");
          $settings["htspider_price11"] = $dbw->field_by_name("HTSPIDER_PRICE11");
          $settings["htspider_price12"] = $dbw->field_by_name("HTSPIDER_PRICE12");
          $settings["htspider_price13"] = $dbw->field_by_name("HTSPIDER_PRICE13");
          $settings["htspider_price14"] = $dbw->field_by_name("HTSPIDER_PRICE14");
          $settings["htspider_price15"] = $dbw->field_by_name("HTSPIDER_PRICE15");

          $settings["htspider_cta"] = $dbw->field_by_name("HTSPIDER_CTA");
          $settings["htspider_ctd"] = $dbw->field_by_name("HTSPIDER_CTD");

          $settings["htspider_take_prices"] = $dbw->field_by_name("HTSPIDER_TAKE_PRICES");
          $settings["htspider_take_counts"] = $dbw->field_by_name("HTSPIDER_TAKE_COUNTS");

          $settings["htspider_user2"] = $dbw->field_by_name("HTSPIDER_USER2");
          $settings["htspider_password2"] = $dbw->field_by_name("HTSPIDER_PASSWORD2");
          $settings["htspider_hotel_id2"] = $dbw->field_by_name("HTSPIDER_HOTEL_ID2");
          $settings["htspider_currency2"] = $dbw->field_by_name("HTSPIDER_CURRENCY2");
          $settings["htspider_date2"] = $dbw->field_by_name("HTSPIDER_DATE2");
          $settings["htspider_room_count2"] = $dbw->field_by_name("HTSPIDER_ROOM_COUNT2");
          $settings["htspider_min_stays2"] = $dbw->field_by_name("HTSPIDER_MIN_STAYS2");
          $settings["htspider_max_stays2"] = $dbw->field_by_name("HTSPIDER_MAX_STAYS2");

          $settings["htspider_price21"] = $dbw->field_by_name("HTSPIDER_PRICE21");
          $settings["htspider_price22"] = $dbw->field_by_name("HTSPIDER_PRICE22");
          $settings["htspider_price23"] = $dbw->field_by_name("HTSPIDER_PRICE23");
          $settings["htspider_price24"] = $dbw->field_by_name("HTSPIDER_PRICE24");
          $settings["htspider_price25"] = $dbw->field_by_name("HTSPIDER_PRICE25");
          $settings["htspider_price26"] = $dbw->field_by_name("HTSPIDER_PRICE26");
          $settings["htspider_price27"] = $dbw->field_by_name("HTSPIDER_PRICE27");
          $settings["htspider_price28"] = $dbw->field_by_name("HTSPIDER_PRICE28");
          $settings["htspider_price29"] = $dbw->field_by_name("HTSPIDER_PRICE29");
          $settings["htspider_price210"] = $dbw->field_by_name("HTSPIDER_PRICE210");
          $settings["htspider_price211"] = $dbw->field_by_name("HTSPIDER_PRICE211");
          $settings["htspider_price212"] = $dbw->field_by_name("HTSPIDER_PRICE212");
          $settings["htspider_price213"] = $dbw->field_by_name("HTSPIDER_PRICE213");
          $settings["htspider_price214"] = $dbw->field_by_name("HTSPIDER_PRICE214");
          $settings["htspider_price215"] = $dbw->field_by_name("HTSPIDER_PRICE215");

          $settings["htspider_cta2"] = $dbw->field_by_name("HTSPIDER_CTA2");
          $settings["htspider_ctd2"] = $dbw->field_by_name("HTSPIDER_CTD2");

          $settings["htspider_take_prices2"] = $dbw->field_by_name("HTSPIDER_TAKE_PRICES2");
          $settings["htspider_take_counts2"] = $dbw->field_by_name("HTSPIDER_TAKE_COUNTS2");
          
          $settings["hotelpartner_drate_code"] = $dbw->field_by_name("HOTELPARTNER_DRATE_CODE");
          $settings["hotelpartner_hotel_name"] = $dbw->field_by_name("HOTELPARTNER_HOTEL_NAME");

          $settings["hotelpartner_user"] = $dbw->field_by_name("HOTELPARTNER_USER");
          $settings["hotelpartner_password"] = $dbw->field_by_name("HOTELPARTNER_PASSWORD");
          $settings["hotelpartner_hotel_id"] = $dbw->field_by_name("HOTELPARTNER_HOTEL_ID");

          $settings["hotelpartner_price1"] = $dbw->field_by_name("HOTELPARTNER_PRICE1");
          $settings["hotelpartner_price2"] = $dbw->field_by_name("HOTELPARTNER_PRICE2");
          $settings["hotelpartner_price3"] = $dbw->field_by_name("HOTELPARTNER_PRICE3");
          $settings["hotelpartner_price4"] = $dbw->field_by_name("HOTELPARTNER_PRICE4");
          $settings["hotelpartner_price_add_adult"] = $dbw->field_by_name("HOTELPARTNER_PRICE_ADD_ADULT");
          $settings["hotelpartner_price_add_child"] = $dbw->field_by_name("HOTELPARTNER_PRICE_ADD_CHILD");

          $settings["hotelpartner_take_prices"] = $dbw->field_by_name("HOTELPARTNER_TAKE_PRICES");
          $settings["hotelpartner_push_reservations"] = $dbw->field_by_name("HOTELPARTNER_PUSH_RESERVATIONS");
          $settings["hotelpartner_take_counts"] = $dbw->field_by_name("HOTELPARTNER_TAKE_COUNTS");
          $settings["hotelpartner_reserv_url"] = $dbw->field_by_name("HOTELPARTNER_RESERV_URL");
        }

        $dbw->free_result();

        $query = "SELECT 
                     PROTEL_USER,
                     PROTEL_PASSWORD,
                     PROTEL_HOTEL_ID,
                     PROTEL_TAKE_COUNTS,
                     PROTEL_TAKE_RULES,
                     PROTEL_TAKE_PRICES,
                     PROTEL_HOTEL_NAME,
                     PROTEL_HOTEL_DESCRIPTION,
                    PROTEL_LANG,
                    PROTEL_PRICE1,
                    PROTEL_PRICE2,
                    PROTEL_PRICE3,
                    PROTEL_PRICE4,
                    PROTEL_PRICE5,
                    PROTEL_PRICE6,
                    PROTEL_ADD_ADULT,
                    PROTEL_ADD_CHILD1,
                    PROTEL_ADD_CHILD2,
                    PROTEL_ADD_CHILD4,
                    PROTEL_ADD_CHILD3,
                    PROTEL_DRATE_CODE,
                    PROTEL_CURRENCY,
                    
                     HTSPIDER4_USER,
                     HTSPIDER4_PASSWORD,
                     HTSPIDER4_HOTEL_ID,
                     HTSPIDER4_DEFAULT_RATE,
                     HTSPIDER4_CURRENCY,
                     HTSPIDER4_DATE,
                     HTSPIDER4_ROOM_COUNT,
                     HTSPIDER4_MIN_STAYS,
                     HTSPIDER4_MAX_STAYS,
                     HTSPIDER4_FORWARD_MIN_STAYS,
                     HTSPIDER4_FORWARD_MAX_STAYS,
                     HTSPIDER4_PRICE1,
                     HTSPIDER4_PRICE2,
                     HTSPIDER4_PRICE3,
                     HTSPIDER4_PRICE4,
                     HTSPIDER4_PRICE5,
                     HTSPIDER4_PRICE6,
                     HTSPIDER4_PRICE7,
                     HTSPIDER4_PRICE8,
                     HTSPIDER4_PRICE9,
                     HTSPIDER4_PRICE10,
                     HTSPIDER4_PRICE11,
                     HTSPIDER4_PRICE12,
                     HTSPIDER4_PRICE13,
                     HTSPIDER4_PRICE14,
                     HTSPIDER4_PRICE15,
                     HTSPIDER4_PRICE_ADD_ADULT,
                     HTSPIDER4_PRICE_ADD_CHILD,
                     HTSPIDER4_CTA,
                     HTSPIDER4_CTD,
                     HTSPIDER4_CLOSED,
                     HTSPIDER4_TAKE_COUNTS,
                     HTSPIDER4_TAKE_RULES,
                     HTSPIDER4_TAKE_PRICES,
                     HTSPIDER4_PUSH_RESERVATIONS,
                     HTSPIDER4_PUSH_CREDICARDS,
                     HTSPIDER4_RESERVATION_URL,
                     HTSPIDER4_RESERVATION_LOGIN,
                     HTSPIDER4_RESERVATION_PASSWORD,
                     HTSPIDER4_RESERVATION_HCODE,
                     HTSPIDER4_RESERVATION_CHANNEL 
                    
                  FROM {$prfx}_HTL_EXT_SERVICE_SETTINGS2";
        
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings["protel_user"] = $dbw->field_by_name("PROTEL_USER");
          $settings["protel_password"] = $dbw->field_by_name("PROTEL_PASSWORD");
          $settings["protel_hotel_id"] = $dbw->field_by_name("PROTEL_HOTEL_ID");
          $settings["protel_take_counts"] = $dbw->field_by_name("PROTEL_TAKE_COUNTS");
          $settings["protel_take_rules"] = $dbw->field_by_name("PROTEL_TAKE_RULES");
          $settings["protel_take_prices"] = $dbw->field_by_name("PROTEL_TAKE_PRICES");
          $settings["protel_hotel_name"] = $dbw->field_by_name("PROTEL_HOTEL_NAME");
          $settings["protel_hotel_description"] = $dbw->field_by_name("PROTEL_HOTEL_DESCRIPTION");

          $settings["protel_lang"] = $dbw->field_by_name("PROTEL_LANG");
          $settings["protel_drate_code"] = $dbw->field_by_name("PROTEL_DRATE_CODE");
          $settings["protel_currency"] = $dbw->field_by_name("PROTEL_CURRENCY");
          
          $settings["protel_price1"] = $dbw->field_by_name("PROTEL_PRICE1");
          $settings["protel_price2"] = $dbw->field_by_name("PROTEL_PRICE2");
          $settings["protel_price3"] = $dbw->field_by_name("PROTEL_PRICE3");
          $settings["protel_price4"] = $dbw->field_by_name("PROTEL_PRICE4");
          $settings["protel_price5"] = $dbw->field_by_name("PROTEL_PRICE5");
          $settings["protel_price6"] = $dbw->field_by_name("PROTEL_PRICE6");
          $settings["protel_add_adult"] = $dbw->field_by_name("PROTEL_ADD_ADULT");
          $settings["protel_add_child1"] = $dbw->field_by_name("PROTEL_ADD_CHILD1");
          $settings["protel_add_child2"] = $dbw->field_by_name("PROTEL_ADD_CHILD2");
          $settings["protel_add_child3"] = $dbw->field_by_name("PROTEL_ADD_CHILD3");
          $settings["protel_add_child4"] = $dbw->field_by_name("PROTEL_ADD_CHILD4");
          
          $settings["htspider4_user"] = $dbw->field_by_name("HTSPIDER4_USER");
          $settings["htspider4_password"] = $dbw->field_by_name("HTSPIDER4_PASSWORD");
          $settings["htspider4_hotel_id"] = $dbw->field_by_name("HTSPIDER4_HOTEL_ID");
          $settings["htspider4_currency"] = $dbw->field_by_name("HTSPIDER4_CURRENCY");
          $settings["htspider4_date"] = $dbw->field_by_name("HTSPIDER4_DATE");
          $settings["htspider4_room_count"] = $dbw->field_by_name("HTSPIDER4_ROOM_COUNT");
          
          $settings["htspider4_default_rate"] = $dbw->field_by_name("HTSPIDER4_DEFAULT_RATE");
          $settings["htspider4_currency"] = $dbw->field_by_name("HTSPIDER4_CURRENCY");
          
          $settings["htspider4_min_stays"] = $dbw->field_by_name("HTSPIDER4_MIN_STAYS");
          $settings["htspider4_max_stays"] = $dbw->field_by_name("HTSPIDER4_MAX_STAYS");

          $settings["htspider4_forward_min_stays"] = $dbw->field_by_name("HTSPIDER4_FORWARD_MIN_STAYS");
          $settings["htspider4_forward_max_stays"] = $dbw->field_by_name("HTSPIDER4_FORWARD_MAX_STAYS");
          
          $settings["htspider4_price1"] = $dbw->field_by_name("HTSPIDER4_PRICE1");
          $settings["htspider4_price2"] = $dbw->field_by_name("HTSPIDER4_PRICE2");
          $settings["htspider4_price3"] = $dbw->field_by_name("HTSPIDER4_PRICE3");
          $settings["htspider4_price4"] = $dbw->field_by_name("HTSPIDER4_PRICE4");
          $settings["htspider4_price5"] = $dbw->field_by_name("HTSPIDER4_PRICE5");
          $settings["htspider4_price6"] = $dbw->field_by_name("HTSPIDER4_PRICE6");
          $settings["htspider4_price7"] = $dbw->field_by_name("HTSPIDER4_PRICE7");
          $settings["htspider4_price8"] = $dbw->field_by_name("HTSPIDER4_PRICE8");
          $settings["htspider4_price9"] = $dbw->field_by_name("HTSPIDER4_PRICE9");
          $settings["htspider4_price10"] = $dbw->field_by_name("HTSPIDER4_PRICE10");
          $settings["htspider4_price11"] = $dbw->field_by_name("HTSPIDER4_PRICE11");
          $settings["htspider4_price12"] = $dbw->field_by_name("HTSPIDER4_PRICE12");
          $settings["htspider4_price13"] = $dbw->field_by_name("HTSPIDER4_PRICE13");
          $settings["htspider4_price14"] = $dbw->field_by_name("HTSPIDER4_PRICE14");
          $settings["htspider4_price15"] = $dbw->field_by_name("HTSPIDER4_PRICE15");

          $settings["htspider4_price_add_adult"] = $dbw->field_by_name("HTSPIDER4_PRICE_ADD_ADULT");
          $settings["htspider4_price_add_child"] = $dbw->field_by_name("HTSPIDER4_PRICE_ADD_CHILD");
          
          $settings["htspider4_cta"] = $dbw->field_by_name("HTSPIDER4_CTA");
          $settings["htspider4_ctd"] = $dbw->field_by_name("HTSPIDER4_CTD");
          $settings["htspider4_closed"] = $dbw->field_by_name("HTSPIDER4_CLOSED");

          $settings["htspider4_take_prices"] = $dbw->field_by_name("HTSPIDER4_TAKE_PRICES");
          $settings["htspider4_take_counts"] = $dbw->field_by_name("HTSPIDER4_TAKE_COUNTS");
          $settings["htspider4_take_rules"] = $dbw->field_by_name("HTSPIDER4_TAKE_RULES");
          
          $settings["htspider4_push_reservations"] = $dbw->field_by_name("HTSPIDER4_PUSH_RESERVATIONS");
          $settings["htspider4_push_credicards"] = $dbw->field_by_name("HTSPIDER4_PUSH_CREDICARDS");
          $settings["htspider4_reservation_url"] = $dbw->field_by_name("HTSPIDER4_RESERVATION_URL");
          $settings["htspider4_reservation_login"] = $dbw->field_by_name("HTSPIDER4_RESERVATION_LOGIN");
          $settings["htspider4_reservation_password"] = $dbw->field_by_name("HTSPIDER4_RESERVATION_PASSWORD");
          $settings["htspider4_reservation_hcode"] = $dbw->field_by_name("HTSPIDER4_RESERVATION_HCODE");
          $settings["htspider4_reservation_channel"] = $dbw->field_by_name("HTSPIDER4_RESERVATION_CHANNEL");
        }        
        
        $dbw->free_result();

        $query = "SELECT

                   TA_HOTEL_ID,
                   TA_HOTEL_NAME,
                   TA_PARTNER_ID,
                   TA_HOTEL_ADDRESS,
                   TA_HOTEL_CITY,
                   TA_HOTEL_ZIP,
                   TA_HOTEL_STATE,
                   TA_HOTEL_COUNTRY,
                   TA_HOTEL_DESCRIPTION,
                   TA_HOTEL_URL,
                   TA_HOTEL_EMAIL,
                   TA_HOTEL_PHONE,
                   TA_HOTEL_FAX,

                    TA_EMERGENCY_NAME1,
                    TA_EMERGENCY_PHONE1,
                    TA_EMERGENCY_EMAIL1,
                    TA_EMERGENCY_NAME2,
                    TA_EMERGENCY_PHONE2,
                    TA_EMERGENCY_EMAIL2,
                    TA_EMERGENCY_NAME3,
                    TA_EMERGENCY_PHONE3,
                    TA_EMERGENCY_EMAIL3,

                    TA_INFO_NAME1,
                    TA_INFO_PHONE1,
                    TA_INFO_EMAIL1,
                    TA_INFO_NAME2,
                    TA_INFO_PHONE2,
                    TA_INFO_EMAIL2,
                    TA_INFO_NAME3,
                    TA_INFO_PHONE3,
                    TA_INFO_EMAIL3,
                    TA_ROOM_BOOKING_URL,
                    TVG_ROOM_BOOKING_URL,
                    
                    TA_VATTAX,
                    TA_LOCALTAX,
                    TA_OCCUPANCY_FEES_ADULTS,
                    TA_OCCUPANCY_FEES_CHILDREN,
                    TA_OTHER_TAXES,
                    TA_RESORT_FEES,
                    TA_RESORT_FEES_PERCENT,
                    TA_SERVICE_FEES,
                    TA_SERVICE_FEES_PERCENT,
                    TA_OTHER_FEES,
                    TA_PREPAYMENT,
                    
                    TVG_HOTEL_ID,
                    TVG_VATTAX,
                    TVG_LOCALTAX,
                    TVG_RESORT_FEES,
                    TVG_RESORT_FEES_PERCENT,
                    TVG_SERVICE_FEES,
                    TVG_SERVICE_FEES_PERCENT,
                    TVG_BOOKING_FEES,
                    TVG_BOOKING_FEES_PERCENT,
                    TVG_HOTEL_FEES,
                    TVG_HOTEL_FEES_PERCENT,
                    TVG_OCCUPANCY_FEES_ADULTS,
                    TVG_OCCUPANCY_FEES_CHILDREN,
                    TVG_PRICE_TYPE,
                     
                    TA_AGREED,                     
                    TVG_AGREED                   

                  FROM {$prfx}_HTL_TA_SETTINGS";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings["ta_hotel_id"] = $dbw->field_by_name("TA_HOTEL_ID");
          $settings["ta_hotel_name"] = $dbw->field_by_name("TA_HOTEL_NAME");
          $settings["ta_partner_id"] = $dbw->field_by_name("TA_PARTNER_ID");
          $settings["ta_hotel_address"] = $dbw->field_by_name("TA_HOTEL_ADDRESS");
          $settings["ta_hotel_city"] = $dbw->field_by_name("TA_HOTEL_CITY");
          $settings["ta_hotel_zip"] = $dbw->field_by_name("TA_HOTEL_ZIP");
          $settings["ta_hotel_state"] = $dbw->field_by_name("TA_HOTEL_STATE");
          $settings["ta_hotel_country"] = $dbw->field_by_name("TA_HOTEL_COUNTRY");
          $settings["ta_hotel_description"] = $dbw->field_by_name("TA_HOTEL_DESCRIPTION");
          $settings["ta_hotel_url"] = $dbw->field_by_name("TA_HOTEL_URL");
          $settings["ta_hotel_email"] = $dbw->field_by_name("TA_HOTEL_EMAIL");
          $settings["ta_hotel_phone"] = $dbw->field_by_name("TA_HOTEL_PHONE");
          $settings["ta_hotel_fax"] = $dbw->field_by_name("TA_HOTEL_FAX");

          $settings["ta_vattax"] = $dbw->field_by_name("TA_VATTAX");
          $settings["ta_localtax"] = $dbw->field_by_name("TA_LOCALTAX");
          $settings["ta_occupancy_fees_adults"] = $dbw->field_by_name("TA_OCCUPANCY_FEES_ADULTS");
          $settings["ta_occupancy_fees_children"] = $dbw->field_by_name("TA_OCCUPANCY_FEES_CHILDREN");
          $settings["ta_other_taxes"] = $dbw->field_by_name("TA_OTHER_TAXES");
          $settings["ta_resort_fees"] = $dbw->field_by_name("TA_RESORT_FEES");
          $settings["ta_resort_fees_percent"] = $dbw->field_by_name("TA_RESORT_FEES_PERCENT");
          $settings["ta_service_fees"] = $dbw->field_by_name("TA_SERVICE_FEES");
          $settings["ta_service_fees_percent"] = $dbw->field_by_name("TA_SERVICE_FEES_PERCENT");
          $settings["ta_other_fees"] = $dbw->field_by_name("TA_OTHER_FEES");
          $settings["ta_prepayment"] = $dbw->field_by_name("TA_PREPAYMENT");
          
          $settings["tvg_hotel_id"] = $dbw->field_by_name("TVG_HOTEL_ID");
          $settings["tvg_vattax"] = $dbw->field_by_name("TVG_VATTAX");
          $settings["tvg_resort_fees"] = $dbw->field_by_name("TVG_RESORT_FEES");
          $settings["tvg_resort_fees_percent"] = $dbw->field_by_name("TVG_RESORT_FEES_PERCENT");
          $settings["tvg_service_fees"] = $dbw->field_by_name("TVG_SERVICE_FEES");
          $settings["tvg_service_fees_percent"] = $dbw->field_by_name("TVG_SERVICE_FEES_PERCENT");
          $settings["tvg_localtax"] = $dbw->field_by_name("TVG_LOCALTAX");
          $settings["tvg_booking_fees"] = $dbw->field_by_name("TVG_BOOKING_FEES");
          $settings["tvg_booking_fees_percent"] = $dbw->field_by_name("TVG_BOOKING_FEES_PERCENT");
          $settings["tvg_hotel_fees"] = $dbw->field_by_name("TVG_HOTEL_FEES");
          $settings["tvg_hotel_fees_percent"] = $dbw->field_by_name("TVG_HOTEL_FEES_PERCENT");

          $settings["tvg_occupancy_fees_adults"] = $dbw->field_by_name("TVG_OCCUPANCY_FEES_ADULTS");
          $settings["tvg_occupancy_fees_children"] = $dbw->field_by_name("TVG_OCCUPANCY_FEES_CHILDREN");
          $settings["tvg_price_type"] = $dbw->field_by_name("TVG_PRICE_TYPE");
          
          $settings["ta_emergency_name1"] = $dbw->field_by_name("TA_EMERGENCY_NAME1");
          $settings["ta_emergency_phone1"] = $dbw->field_by_name("TA_EMERGENCY_PHONE1");
          $settings["ta_emergency_email1"] = $dbw->field_by_name("TA_EMERGENCY_EMAIL1");
          $settings["ta_emergency_name2"] = $dbw->field_by_name("TA_EMERGENCY_NAME2");
          $settings["ta_emergency_phone2"] = $dbw->field_by_name("TA_EMERGENCY_PHONE2");
          $settings["ta_emergency_email2"] = $dbw->field_by_name("TA_EMERGENCY_EMAIL2");
          $settings["ta_emergency_name3"] = $dbw->field_by_name("TA_EMERGENCY_NAME3");
          $settings["ta_emergency_phone3"] = $dbw->field_by_name("TA_EMERGENCY_PHONE3");
          $settings["ta_emergency_email3"] = $dbw->field_by_name("TA_EMERGENCY_EMAIL3");

          $settings["ta_info_name1"] = $dbw->field_by_name("TA_INFO_NAME1");
          $settings["ta_info_phone1"] = $dbw->field_by_name("TA_INFO_PHONE1");
          $settings["ta_info_email1"] = $dbw->field_by_name("TA_INFO_EMAIL1");
          $settings["ta_info_name2"] = $dbw->field_by_name("TA_INFO_NAME2");
          $settings["ta_info_phone2"] = $dbw->field_by_name("TA_INFO_PHONE2");
          $settings["ta_info_email2"] = $dbw->field_by_name("TA_INFO_EMAIL2");
          $settings["ta_info_name3"] = $dbw->field_by_name("TA_INFO_NAME3");
          $settings["ta_info_phone3"] = $dbw->field_by_name("TA_INFO_PHONE3");
          $settings["ta_info_email3"] = $dbw->field_by_name("TA_INFO_EMAIL3");
          $settings["ta_room_url"] = $dbw->field_by_name("TA_ROOM_BOOKING_URL");
          $settings["tvg_room_url"] = $dbw->field_by_name("TVG_ROOM_BOOKING_URL");

          $settings["tvg_agreed"] = $dbw->field_by_name("TVG_AGREED");
          $settings["ta_agreed"] = $dbw->field_by_name("TA_AGREED");
        }
        
        $dbw->free_result();


        $this->settings = $settings;

        $query = "SELECT ID, BEGIN_DATE, END_DATE,
                  TP, ETEMPLATE_ID, RECEIVER
                  FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                  WHERE TP = 'TPL3'
                  ORDER BY BEGIN_DATE";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $id = $dbw->field_by_name("ID");

          $_REQUEST["spec_ranges3"][$id]["spec_start_date3"] = magic_quotes_to_req(format_date($dbw->field_by_name("BEGIN_DATE"), text("DateFormat")));
          $_REQUEST["spec_ranges3"][$id]["spec_end_date3"] = magic_quotes_to_req(format_date($dbw->field_by_name("END_DATE"), text("DateFormat")));
          $_REQUEST["spec_ranges3"][$id]["spec_email_tpl3"] = magic_quotes_to_req($dbw->field_by_name("ETEMPLATE_ID"));
          $_REQUEST["spec_ranges3"][$id]["spec_receiver3"] = magic_quotes_to_req($dbw->field_by_name("RECEIVER"));
        }

        $dbw->free_result();

        $query = "SELECT ID, BEGIN_DATE, END_DATE,
                  TP, ETEMPLATE_ID, RECEIVER
                  FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                  WHERE TP = 'TPL5'
                  ORDER BY BEGIN_DATE";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $id = $dbw->field_by_name("ID");

          $_REQUEST["spec_ranges5"][$id]["spec_start_date5"] = magic_quotes_to_req(format_date($dbw->field_by_name("BEGIN_DATE"), text("DateFormat")));
          $_REQUEST["spec_ranges5"][$id]["spec_end_date5"] = magic_quotes_to_req(format_date($dbw->field_by_name("END_DATE"), text("DateFormat")));
          $_REQUEST["spec_ranges5"][$id]["spec_email_tpl5"] = magic_quotes_to_req($dbw->field_by_name("ETEMPLATE_ID"));
          $_REQUEST["spec_ranges5"][$id]["spec_receiver5"] = magic_quotes_to_req($dbw->field_by_name("RECEIVER"));
        }

        $dbw->free_result();



      break;

      case "EXPLAIN_TEXT":
        $dbw = GetDBWorker();
        if(!$dbw) return false;

        $prfx = $dbw->escape(GetConnection()->get_current_prefix());

        $query = "SELECT LANG_ID, EXPLAIN_TEXT, PAYMENT_TEXT, PAYMENT_TEXT2,
                  DD_TEXT, SPECOFFER_TEXT, BILL_TEXT, BILL_CC_TEXT, ONLINE_PAYMENT_TEXT, DATAPRIVACY_TEXT
                  FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $settings[$dbw->field_by_name("LANG_ID")]["explain_text"] = $dbw->field_by_name("EXPLAIN_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["payment_text"] = $dbw->field_by_name("PAYMENT_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["payment_text2"] = $dbw->field_by_name("PAYMENT_TEXT2");
          $settings[$dbw->field_by_name("LANG_ID")]["dd_text"] = $dbw->field_by_name("DD_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["specoffer_text"] = $dbw->field_by_name("SPECOFFER_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["bill_text"] = $dbw->field_by_name("BILL_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["bill_cc_text"] = $dbw->field_by_name("BILL_CC_TEXT");
          $settings[$dbw->field_by_name("LANG_ID")]["online_payment_text"] = $dbw->field_by_name("ONLINE_PAYMENT_TEXT");          
          $settings[$dbw->field_by_name("LANG_ID")]["data_privacy_text"] = $dbw->field_by_name("DATAPRIVACY_TEXT");          
        }

        $dbw->free_result();
      break;
    }

    return true;
  } // fetch_settings
  //-----------------------------------------------------------------
  public function validate_service_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $FOCUS_ELEMENT;

    if(empty($_REQUEST["settings"]["external_service"])) return true;

    //---------------------------------------------------------------
    if($_REQUEST["settings"]["external_service"] == "RECONLINE")
    {
      if(empty($_REQUEST["settings"]["reconline_service_address"]))
      {
        $ERROR = text("ErrHotelServiceAddressEmpty");
        $FOCUS_ELEMENT = "settings[reconline_service_address]";
        return false;
      }
      if(empty($_REQUEST["settings"]["reconline_user"]))
      {
        $ERROR = text("ErrUsrLoginEmpty");
        $FOCUS_ELEMENT = "settings[reconline_user]";
        return false;
      }
      if(empty($_REQUEST["settings"]["reconline_password"]))
      {
        $ERROR = text("ErrUsrPasswordEmpty");
        $FOCUS_ELEMENT = "settings[reconline_password]";
        return false;
      }
      if(empty($_REQUEST["settings"]["reconline_hotel_id"]))
      {
        $ERROR = text("ErrHotelServiceIDEmpty");
        $FOCUS_ELEMENT = "settings[reconline_hotel_id]";
        return false;
      }
    } // RECONLINE
    //---------------------------------------------------------------
    if($_REQUEST["settings"]["external_service"] == "channelmanager")
    {
      if(empty($_REQUEST["settings"]["chanmanager_hotel_id"]))
      {
        $ERROR = text("ErrHotelServiceIDEmpty");
        $FOCUS_ELEMENT = "settings[chanmanager_hotel_id]";
        return false;
      }
      if(empty($_REQUEST["settings"]["chanmanager_user"]))
      {
        $ERROR = text("ErrUsrLoginEmpty");
        $FOCUS_ELEMENT = "settings[chanmanager_user]";
        return false;
      }
      if(empty($_REQUEST["settings"]["chanmanager_password"]))
      {
        $ERROR = text("ErrUsrPasswordEmpty");
        $FOCUS_ELEMENT = "settings[chanmanager_password]";
        return false;
      }
    }
    //---------------------------------------------------------------
    if($_REQUEST["settings"]["external_service"] == "hotelpartner")
    {
      if(empty($_REQUEST["settings"]["hotelpartner_hotel_id"]))
      {
        $ERROR = text("ErrHotelServiceIDEmpty");
        $FOCUS_ELEMENT = "settings[hotelpartner_hotel_id]";
        return false;
      }
      if(empty($_REQUEST["settings"]["hotelpartner_user"]))
      {
        $ERROR = text("ErrUsrLoginEmpty");
        $FOCUS_ELEMENT = "settings[hotelpartner_user]";
        return false;
      }
      if(empty($_REQUEST["settings"]["hotelpartner_password"]))
      {
        $ERROR = text("ErrUsrPasswordEmpty");
        $FOCUS_ELEMENT = "settings[hotelpartner_password]";
        return false;
      }
    }
    //---------------------------------------------------------------
    if($_REQUEST["settings"]["external_service"] == "PROTEL" || $_REQUEST["settings"]["external_service"] == "PROTELAIR")
    {
      if(empty($_REQUEST["settings"]["protel_hotel_id"]))
      {
        $ERROR = text("ErrHotelServiceIDEmpty");
        $FOCUS_ELEMENT = "settings[protel_hotel_id]";
        return false;
      }
      if(empty($_REQUEST["settings"]["protel_hotel_name"]))
      {
        $ERROR = text("ErrHotelNameEmpty");
        $FOCUS_ELEMENT = "settings[protel_hotel_name]";
        return false;
      }
      if(empty($_REQUEST["settings"]["protel_user"]))
      {
        $ERROR = text("ErrUsrLoginEmpty");
        $FOCUS_ELEMENT = "settings[protel_user]";
        return false;
      }
      if(empty($_REQUEST["settings"]["protel_password"]))
      {
        $ERROR = text("ErrUsrPasswordEmpty");
        $FOCUS_ELEMENT = "settings[protel_password]";
        return false;
      }
      if(empty($_REQUEST["settings"]["protel_drate_code"]))
      {
        $ERROR = text("DefaultRateEmpty");
        $FOCUS_ELEMENT = "settings[protel_drate_code]";
        return false;
      }
      if(empty($_REQUEST["settings"]["protel_lang"]))
      {
        $ERROR = text("ErrLangNameEmpty");
        $FOCUS_ELEMENT = "settings[protel_lang]";
        return false;
      }
    }
    //---------------------------------------------------------------
    if($_REQUEST["settings"]["external_service"] == "HTSPIDER4")
    {
      if(empty($_REQUEST["settings"]["htspider4_hotel_id"]))
      {
        $ERROR = text("ErrHotelServiceIDEmpty");
        $FOCUS_ELEMENT = "settings[htspider4_hotel_id]";
        return false;
      }
      if(empty($_REQUEST["settings"]["htspider4_user"]))
      {
        $ERROR = text("ErrUsrLoginEmpty");
        $FOCUS_ELEMENT = "settings[htspider4_user]";
        return false;
      }
      if(empty($_REQUEST["settings"]["htspider4_password"]))
      {
        $ERROR = text("ErrUsrPasswordEmpty");
        $FOCUS_ELEMENT = "settings[htspider4_password]";
        return false;
      }
      
      if(!empty($_REQUEST["settings"]["htspider4_push_reservations"]))
      {
        if(empty($_REQUEST["settings"]["htspider4_reservation_url"]))
        {
          $ERROR = text("ReservationURLRequired");
          $FOCUS_ELEMENT = "settings[htspider4_reservation_url]";
          return false;
        }
        if(empty($_REQUEST["settings"]["htspider4_reservation_hcode"]))
        {
          $ERROR = text("ErrHotelServiceIDEmpty");
          $FOCUS_ELEMENT = "settings[htspider4_reservation_hcode]";
          return false;
        }
        if(empty($_REQUEST["settings"]["htspider4_reservation_channel"]))
        {
          $ERROR = text("ErrHotelServiceIDEmpty");
          $FOCUS_ELEMENT = "settings[htspider4_reservation_channel]";
          return false;
        }
        if(empty($_REQUEST["settings"]["htspider4_reservation_login"]))
        {
          $ERROR = text("ErrUsrLoginEmpty");
          $FOCUS_ELEMENT = "settings[htspider4_reservation_login]";
          return false;
        }
        if(empty($_REQUEST["settings"]["htspider4_reservation_password"]))
        {
          $ERROR = text("ErrUsrPasswordEmpty");
          $FOCUS_ELEMENT = "settings[htspider4_reservation_password]";
          return false;
        }
      }
    }
    //---------------------------------------------------------------

    return true;
  } // validate_service_settings
  //-----------------------------------------------------------------

  public function save_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!empty($_REQUEST["settings"]["payment_ccard"]) &&
        empty($_REQUEST["settings"]["visa"]) &&
        empty($_REQUEST["settings"]["master_card"]) &&
        empty($_REQUEST["settings"]["dinner_club"]) &&
        empty($_REQUEST["settings"]["american_express"]) &&
        empty($_REQUEST["settings"]["jsb"])
      )
    {
      $ERROR = text("ErrNoCreditCardTypes");
      return false;
    }

    if(empty($_REQUEST["settings"]["receiver1"]) || empty($_REQUEST["settings"]["receiver2"]))
    {
      $ERROR = text("ErrFormEmailAddressEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["receiver3"]))
    {
      $_REQUEST["settings"]["receiver3"] = "{user}";
    }
    if(empty($_REQUEST["settings"]["receiver32"]))
    {
      $_REQUEST["settings"]["receiver32"] = "{user}";
    }

    if(empty($_REQUEST["settings"]["receiver4"]))
    {
      $_REQUEST["settings"]["receiver4"] = "{user}";
    }

    if(empty($_REQUEST["settings"]["receiver5"]))
    {
      $_REQUEST["settings"]["receiver5"] = "{user}";
    }
    if(empty($_REQUEST["settings"]["receiver52"]))
    {
      $_REQUEST["settings"]["receiver52"] = "{user}";
    }

    if(empty($_REQUEST["settings"]["receiver6"]))
    {
      $_REQUEST["settings"]["receiver6"] = "{user}";
    }

    // validation

    if(!reqvar_empty("spec_start_date3_new") ||
       !reqvar_empty("spec_end_date3_new") ||
       !reqvar_empty("spec_email_tpl3_new") ||
       !reqvar_empty("spec_receiver3_new")
      )
    {
      if(reqvar_empty("spec_start_date3_new") ||
         reqvar_empty("spec_end_date3_new")
        )
      {
        $ERROR = text("ErrEnterTheEmailSpecPeriod");
        return false;
      }

      if(reqvar_empty("spec_email_tpl3_new"))
      {
        $ERROR = text("ErrEnterTheEmailSpecTemplate");
        return false;
      }

      if(reqvar_empty("spec_receiver3_new"))
      {
        $ERROR = text("ErrFormEmailAddressEmpty");
        return false;
      }

      $dt = iso_date(reqvar("spec_start_date3_new"), text("DateFormat"));
      if($dt == "error")
      {
        $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
        return false;
      }

      $dt = iso_date(reqvar("spec_end_date3_new"), text("DateFormat"));
      if($dt == "error")
      {
        $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
        return false;
      }
    }

    if(!reqvar_empty("spec_start_date5_new") ||
       !reqvar_empty("spec_end_date5_new") ||
       !reqvar_empty("spec_email_tpl5_new") ||
       !reqvar_empty("spec_receiver5_new")
      )
    {
      if(reqvar_empty("spec_start_date5_new") ||
         reqvar_empty("spec_end_date5_new")
        )
      {
        $ERROR = text("ErrEnterTheEmailSpecPeriod");
        return false;
      }

      if(reqvar_empty("spec_email_tpl5_new"))
      {
        $ERROR = text("ErrEnterTheEmailSpecTemplate");
        return false;
      }

      if(reqvar_empty("spec_receiver5_new"))
      {
        $ERROR = text("ErrFormEmailAddressEmpty");
        return false;
      }

      $dt = iso_date(reqvar("spec_start_date5_new"), text("DateFormat"));
      if($dt == "error")
      {
        $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
        return false;
      }

      $dt = iso_date(reqvar("spec_end_date5_new"), text("DateFormat"));
      if($dt == "error")
      {
        $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
        return false;
      }
    }

    if(!empty($_REQUEST["settings"]["payment_stripe"]))
    {
      if(empty($_REQUEST["settings"]["stripe_secret_key"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "secret_key");
        return false;
      }
      if(empty($_REQUEST["settings"]["stripe_publishable_key"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "publishable_key");
        return false;
      }
    }
    
    if(!empty($_REQUEST["settings"]["payment_postfin_ccard"]) ||
       !empty($_REQUEST["settings"]["payment_postfin_others"])
      )
    {
      if(empty($_REQUEST["settings"]["postfin_pspid"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "PSPID");
        return false;
      }
      if(empty($_REQUEST["settings"]["postfin_shain"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "SHA-IN");
        return false;
      }
      if(empty($_REQUEST["settings"]["postfin_targeturl"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "TARGETURL");
        return false;
      }
      if(empty($_REQUEST["settings"]["postfin_homeurl"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "HOMEURL");
        return false;
      }
    }

    if(!empty($_REQUEST["settings"]["payment_postbank_ccard"]) ||
       !empty($_REQUEST["settings"]["payment_postbank_others"])
      )
    {
      if(empty($_REQUEST["settings"]["postbank_user"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "SSL-Merchant");
        return false;
      }
      if(empty($_REQUEST["settings"]["postbank_ssl_password"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "SSL-Password");
        return false;
      }
      if(empty($_REQUEST["settings"]["postbank_targeturl"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "TARGETURL");
        return false;
      }
      if(empty($_REQUEST["settings"]["postbank_notifyurl"]))
      {
        $ERROR = sprintf(text("HotelFieldMustBeFilled"), "Notify-URL");
        return false;
      }
    }
    
    //Prepare data
    $settings = array();
    $setings["confirmation"] = (!empty($_REQUEST["settings"]["confirmation"])) ? 1 : 0;
    $settings["email_tpl1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl1"]));
    $settings["email_tpl2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl2"]));
    $settings["email_tpl3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl3"]));
    $settings["email_tpl32"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl32"]));
    $settings["email_tpl4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl4"]));
    $settings["email_tpl5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl5"]));
    $settings["email_tpl52"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl52"]));
    $settings["email_tpl6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl6"]));
    $settings["email_tpl7"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl7"]));

    $settings["email_tpl8"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl8"]));
    $settings["email_tpl9"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl9"]));

    $settings["min_nights_method"] = null_if_empty($dbw->escape($_REQUEST["settings"]["min_nights_method"]));

    $settings["contact_arrival_days"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["contact_arrival_days"]));
    if(empty($settings["contact_arrival_days"]) || !is_numeric($settings["contact_arrival_days"])) $settings["contact_arrival_days"] = 'NULL';

    $settings["contact_departure_days"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["contact_departure_days"]));
    if(empty($settings["contact_departure_days"]) || !is_numeric($settings["contact_departure_days"])) $settings["contact_departure_days"] = 'NULL';
    
    $settings["background"] = null_if_empty($dbw->escape(ifnull($_REQUEST["settings"]["background"])));
    $settings["logo"] = null_if_empty($dbw->escape(ifnull($_REQUEST["settings"]["logo"])));

    $setings["american_express"] = (!empty($_REQUEST["settings"]["american_express"])) ? 1 : 0;
    $setings["master_card"] = (!empty($_REQUEST["settings"]["master_card"])) ? 1 : 0;
    $setings["dinner_club"] = (!empty($_REQUEST["settings"]["dinner_club"])) ? 1 : 0;
    $setings["visa"] = (!empty($_REQUEST["settings"]["visa"])) ? 1 : 0;
    $setings["jsb"] = (!empty($_REQUEST["settings"]["jsb"])) ? 1 : 0;
    $setings["payment_stripe"] = (!empty($_REQUEST["settings"]["payment_stripe"])) ? 1 : 0;

    $settings["hide_condition_warning"] = (!empty($_REQUEST["settings"]["hide_condition_warning"])) ? 1 : 0;
    $settings["preselect_agreement"] = (!empty($_REQUEST["settings"]["preselect_agreement"])) ? 1 : 0;
    $settings["no_guests_details"] = (!empty($_REQUEST["settings"]["no_guests_details"])) ? 1 : 0;

    $settings["ext_form"] = (!empty($_REQUEST["settings"]["ext_form"])) ? 1 : 0;
    
    $settings["title_field"] = ifnull($_REQUEST["settings"]["title_field"]);
    if(empty($settings["title_field"]) || ($settings["title_field"] != 1 && $settings["title_field"] != 2)) $settings["title_field"] = 0;
    $settings["firstname_field"] = ifnull($_REQUEST["settings"]["firstname_field"]);
    if(empty($settings["firstname_field"]) || ($settings["firstname_field"] != 1 && $settings["firstname_field"] != 2)) $settings["firstname_field"] = 0;
    $settings["company_field"] = ifnull($_REQUEST["settings"]["company_field"]);
    if(empty($settings["company_field"]) || ($settings["company_field"] != 1 && $settings["company_field"] != 2)) $settings["company_field"] = 0;
    $settings["address_field"] = ifnull($_REQUEST["settings"]["address_field"]);
    if(empty($settings["address_field"]) || ($settings["address_field"] != 1 && $settings["address_field"] != 2)) $settings["address_field"] = 0;
    $settings["zip_field"] = ifnull($_REQUEST["settings"]["zip_field"]);
    if(empty($settings["zip_field"]) || ($settings["zip_field"] != 1 && $settings["zip_field"] != 2)) $settings["zip_field"] = 0;
    $settings["city_field"] = ifnull($_REQUEST["settings"]["city_field"]);
    if(empty($settings["city_field"]) || ($settings["city_field"] != 1 && $settings["city_field"] != 2)) $settings["city_field"] = 0;
    $settings["country_field"] = ifnull($_REQUEST["settings"]["country_field"]);
    if(empty($settings["country_field"]) || ($settings["country_field"] != 1 && $settings["country_field"] != 2)) $settings["country_field"] = 0;
    $settings["phone_field"] = ifnull($_REQUEST["settings"]["phone_field"]);
    if(empty($settings["phone_field"]) || ($settings["phone_field"] != 1 && $settings["phone_field"] != 2)) $settings["phone_field"] = 0;
    $settings["comment_field"] = ifnull($_REQUEST["settings"]["comment_field"]);
    if(empty($settings["comment_field"]) || ($settings["comment_field"] != 1 && $settings["comment_field"] != 2)) $settings["comment_field"] = 0;
    
    $settings["booking_page"] = null_if_empty($dbw->escape($_REQUEST["settings"]["booking_page"]));

    $settings["child_info_page"] = $dbw->escape($_REQUEST["settings"]["child_info_page"]);
    if($settings["child_info_page"] == 0)
    {
      $settings["child_info_page"] = null_if_empty("");
    }
    if(!empty($_REQUEST["settings"]["in_new_window"]))
      $settings["in_new_window"] = $dbw->escape($_REQUEST["settings"]["in_new_window"]);
    else
      $settings["in_new_window"] = 0;

    if(empty($_REQUEST["settings"]["payment_ccard"]) &&
       empty($_REQUEST["settings"]["payment_direct_debit"]) &&
       empty($_REQUEST["settings"]["payment_postfin_ccard"]) &&
       empty($_REQUEST["settings"]["payment_postfin_others"]) &&
       empty($_REQUEST["settings"]["payment_postbank_ccard"]) &&
       empty($_REQUEST["settings"]["payment_postbank_others"]) &&
       empty($_REQUEST["settings"]["payment_bill"]) &&
       empty($_REQUEST["settings"]["payment_stripe"]) &&
       empty($_REQUEST["settings"]["payment_bill_cc"])
      )
    {
      $ERROR = text("ErrNoPaymentMethods");
      return false;
    }

    $settings["postfin_pspid"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_pspid"]));
    $settings["postfin_shain"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_shain"]));
    $settings["postfin_targeturl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_targeturl"]));
    $settings["postfin_homeurl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_homeurl"]));
    $settings["postfin_accepturl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_accepturl"]));
    $settings["postfin_exceptionurl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postfin_exceptionurl"]));

    $settings["postfin_cc_fee"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_cc_fee"]));
    if(empty($settings["postfin_cc_fee"]) || !is_numeric($settings["postfin_cc_fee"])) $settings["postfin_cc_fee"] = 'NULL';

    $settings["postfin_rate_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_rate_1"]));
    if(empty($settings["postfin_rate_1"]) || !is_numeric($settings["postfin_rate_1"])) $settings["postfin_rate_1"] = 'NULL';
    $settings["postfin_days_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_days_1"]));
    if(empty($settings["postfin_days_1"]) || !is_numeric($settings["postfin_days_1"])) $settings["postfin_days_1"] = 'NULL';
    
    $settings["postfin_rate_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_rate_2"]));
    if(empty($settings["postfin_rate_2"]) || !is_numeric($settings["postfin_rate_2"])) $settings["postfin_rate_2"] = 'NULL';
    $settings["postfin_days_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_days_2"]));
    if(empty($settings["postfin_days_2"]) || !is_numeric($settings["postfin_days_2"])) $settings["postfin_days_2"] = 'NULL';

    $settings["postfin_rate_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_rate_3"]));
    if(empty($settings["postfin_rate_3"]) || !is_numeric($settings["postfin_rate_3"])) $settings["postfin_rate_3"] = 'NULL';
    $settings["postfin_days_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_days_3"]));
    if(empty($settings["postfin_days_3"]) || !is_numeric($settings["postfin_days_3"])) $settings["postfin_days_3"] = 'NULL';

    $settings["postfin_rate_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_rate_4"]));
    if(empty($settings["postfin_rate_4"]) || !is_numeric($settings["postfin_rate_4"])) $settings["postfin_rate_4"] = 'NULL';
    $settings["postfin_days_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postfin_days_4"]));
    if(empty($settings["postfin_days_4"]) || !is_numeric($settings["postfin_days_4"])) $settings["postfin_days_4"] = 'NULL';

    $settings["stripe_secret_key"] = null_if_empty($dbw->escape($_REQUEST["settings"]["stripe_secret_key"]));
    $settings["stripe_publishable_key"] = null_if_empty($dbw->escape($_REQUEST["settings"]["stripe_publishable_key"]));

    $settings["stripe_cc_fee"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_cc_fee"]));
    if(empty($settings["stripe_cc_fee"]) || !is_numeric($settings["stripe_cc_fee"])) $settings["stripe_cc_fee"] = 'NULL';

    $settings["stripe_cc_fee_percent"] = magic_quotes_from_req($_REQUEST["settings"]["stripe_cc_fee_percent"]);
    if($settings["stripe_cc_fee_percent"] != 1) $settings["stripe_cc_fee_percent"] = 0;
    
    $settings["stripe_rate_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_rate_1"]));
    if(empty($settings["stripe_rate_1"]) || !is_numeric($settings["stripe_rate_1"])) $settings["stripe_rate_1"] = 'NULL';
    $settings["stripe_days_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_days_1"]));
    if(empty($settings["stripe_days_1"]) || !is_numeric($settings["stripe_days_1"])) $settings["stripe_days_1"] = 'NULL';
    
    $settings["stripe_rate_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_rate_2"]));
    if(empty($settings["stripe_rate_2"]) || !is_numeric($settings["stripe_rate_2"])) $settings["stripe_rate_2"] = 'NULL';
    $settings["stripe_days_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_days_2"]));
    if(empty($settings["stripe_days_2"]) || !is_numeric($settings["stripe_days_2"])) $settings["stripe_days_2"] = 'NULL';

    $settings["stripe_rate_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_rate_3"]));
    if(empty($settings["stripe_rate_3"]) || !is_numeric($settings["stripe_rate_3"])) $settings["stripe_rate_3"] = 'NULL';
    $settings["stripe_days_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_days_3"]));
    if(empty($settings["stripe_days_3"]) || !is_numeric($settings["stripe_days_3"])) $settings["stripe_days_3"] = 'NULL';

    $settings["stripe_rate_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_rate_4"]));
    if(empty($settings["stripe_rate_4"]) || !is_numeric($settings["stripe_rate_4"])) $settings["stripe_rate_4"] = 'NULL';
    $settings["stripe_days_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_days_4"]));
    if(empty($settings["stripe_days_4"]) || !is_numeric($settings["stripe_days_4"])) $settings["stripe_days_4"] = 'NULL';

    $settings["stripe_follow_pay_days"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["stripe_follow_pay_days"]));
    if(empty($settings["stripe_follow_pay_days"]) || !is_numeric($settings["stripe_follow_pay_days"])) $settings["stripe_follow_pay_days"] = 'NULL';
    
    $settings["email_tpl10"] = null_if_empty($dbw->escape($_REQUEST["settings"]["email_tpl10"]));
    
    $settings["postbank_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_user"]));
    $settings["postbank_ssl_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_ssl_password"]));
    $settings["postbank_targeturl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_targeturl"]));
    $settings["postbank_notifyurl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_notifyurl"]));
    $settings["postbank_exceptionurl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_exceptionurl"]));
    $settings["postbank_accepturl"] = null_if_empty($dbw->escape($_REQUEST["settings"]["postbank_accepturl"]));

    $settings["postbank_cc_fee"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_cc_fee"]));
    if(empty($settings["postbank_cc_fee"]) || !is_numeric($settings["postbank_cc_fee"])) $settings["postbank_cc_fee"] = 'NULL';

    $settings["postbank_rate_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_rate_1"]));
    if(empty($settings["postbank_rate_1"]) || !is_numeric($settings["postbank_rate_1"])) $settings["postbank_rate_1"] = 'NULL';
    $settings["postbank_days_1"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_days_1"]));
    if(empty($settings["postbank_days_1"]) || !is_numeric($settings["postbank_days_1"])) $settings["postbank_days_1"] = 'NULL';
    
    $settings["postbank_rate_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_rate_2"]));
    if(empty($settings["postbank_rate_2"]) || !is_numeric($settings["postbank_rate_2"])) $settings["postbank_rate_2"] = 'NULL';
    $settings["postbank_days_2"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_days_2"]));
    if(empty($settings["postbank_days_2"]) || !is_numeric($settings["postbank_days_2"])) $settings["postbank_days_2"] = 'NULL';

    $settings["postbank_rate_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_rate_3"]));
    if(empty($settings["postbank_rate_3"]) || !is_numeric($settings["postbank_rate_3"])) $settings["postbank_rate_3"] = 'NULL';
    $settings["postbank_days_3"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_days_3"]));
    if(empty($settings["postbank_days_3"]) || !is_numeric($settings["postbank_days_3"])) $settings["postbank_days_3"] = 'NULL';

    $settings["postbank_rate_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_rate_4"]));
    if(empty($settings["postbank_rate_4"]) || !is_numeric($settings["postbank_rate_4"])) $settings["postbank_rate_4"] = 'NULL';
    $settings["postbank_days_4"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["postbank_days_4"]));
    if(empty($settings["postbank_days_4"]) || !is_numeric($settings["postbank_days_4"])) $settings["postbank_days_4"] = 'NULL';

    $settings["default_arrival"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["default_arrival"]));
    if(empty($settings["default_arrival"]) || !is_numeric($settings["default_arrival"])) $settings["default_arrival"] = 'NULL';

    $settings["default_departure"] = $dbw->escape(str_replace(",", ".", $_REQUEST["settings"]["default_departure"]));
    if(empty($settings["default_departure"]) || !is_numeric($settings["default_departure"])) $settings["default_departure"] = 'NULL';
    
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $settings["email_receiver1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver1"]));
    $settings["email_receiver2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver2"]));
    $settings["email_receiver3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver3"]));
    $settings["email_receiver32"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver32"]));
    $settings["email_receiver4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver4"]));
    $settings["email_receiver5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver5"]));
    $settings["email_receiver52"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver52"]));
    $settings["email_receiver6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver6"]));
    $settings["email_receiver7"] = null_if_empty($dbw->escape($_REQUEST["settings"]["receiver7"]));

    $setings["explain_text_active"] = (!empty($_REQUEST["settings"]["explain_text_is_active"])) ? 1 : 0;
    $setings["payment_text_active"] = (!empty($_REQUEST["settings"]["payment_text_is_active"])) ? 1 : 0;

    $setings["hide_freerooms"] = (!empty($_REQUEST["settings"]["hide_freerooms"])) ? 1 : 0;
    $setings["hide_notavailable_per_default"] = (!empty($_REQUEST["settings"]["hide_notavailable_per_default"])) ? 1 : 0;
    $setings["hide_freerooms_mobile"] = (!empty($_REQUEST["settings"]["hide_freerooms_mobile"])) ? 1 : 0;
    $setings["round_foreign_currencies"] = (!empty($_REQUEST["settings"]["round_foreign_currencies"])) ? 1 : 0;
    $setings["round_recalculations"] = (!empty($_REQUEST["settings"]["round_recalculations"])) ? 1 : 0;
    
    $setings["payment_ccard"] = (!empty($_REQUEST["settings"]["payment_ccard"])) ? 1 : 0;
    $setings["payment_direct_debit"] = (!empty($_REQUEST["settings"]["payment_direct_debit"])) ? 1 : 0;
    $setings["payment_bill"] = (!empty($_REQUEST["settings"]["payment_bill"])) ? 1 : 0;
    $setings["payment_bill_cc"] = (!empty($_REQUEST["settings"]["payment_bill_cc"])) ? 1 : 0;
    
    $setings["payment_postfin_ccard"] = (!empty($_REQUEST["settings"]["payment_postfin_ccard"])) ? 1 : 0;
    $setings["payment_postfin_others"] = (!empty($_REQUEST["settings"]["payment_postfin_others"])) ? 1 : 0;

    $setings["payment_postbank_ccard"] = (!empty($_REQUEST["settings"]["payment_postbank_ccard"])) ? 1 : 0;
    $setings["payment_postbank_others"] = (!empty($_REQUEST["settings"]["payment_postbank_others"])) ? 1 : 0;
    
    $settings["currecies"] = '';
    if(!empty($_REQUEST["settings"]["currencies"]))
    {
      foreach($_REQUEST["settings"]["currencies"] as $currecy_id => $value)
      {
        $settings["currecies"] .= $currecy_id.', ';
      }
      $settings["currecies"] = substr($settings["currecies"], 0, -2);
    }

    $settings["currecies"] = null_if_empty($dbw->escape($settings["currecies"]));

    $flag = 0;

    if(!empty($_REQUEST["settings"]["arrive_1"])) $flag |= 1;
    if(!empty($_REQUEST["settings"]["arrive_2"])) $flag |= 2;
    if(!empty($_REQUEST["settings"]["arrive_3"])) $flag |= 4;
    if(!empty($_REQUEST["settings"]["arrive_4"])) $flag |= 8;
    if(!empty($_REQUEST["settings"]["arrive_5"])) $flag |= 16;
    if(!empty($_REQUEST["settings"]["arrive_6"])) $flag |= 32;
    if(!empty($_REQUEST["settings"]["arrive_7"])) $flag |= 64;
    
    $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
              SET
              CONFIRMATION_REQUIRED = $setings[confirmation],

              HIDE_FREEROOM_INFO = $setings[hide_freerooms],
              HIDE_NOTAVAILABLE_PER_DEFAULT = $setings[hide_notavailable_per_default],
              HIDE_FREEROOM_MOBILE = $setings[hide_freerooms_mobile],
              ROUND_FOREIGN_CURRENCIES = $setings[round_foreign_currencies],
              ROUND_RECALCULATIONS = $setings[round_recalculations],
              PAYMENT_CCARD = $setings[payment_ccard],
              PAYMENT_DIRECT_DEBIT = $setings[payment_direct_debit],
              PAYMENT_BILL = $setings[payment_bill],
              PAYMENT_BILL_CC = $setings[payment_bill_cc],
              
              MIN_NIGHTS_METHOD = $settings[min_nights_method],
              
              PAYMENT_STRIPE = $setings[payment_stripe],

              PAYMENT_POSTFIN_CCARD = $setings[payment_postfin_ccard],
              PAYMENT_POSTFIN_OTHERS = $setings[payment_postfin_others],

              POSTFIN_PSPID = $settings[postfin_pspid],
              POSTFIN_SHAIN = $settings[postfin_shain],
              POSTFIN_TARGETURL = $settings[postfin_targeturl],
              POSTFIN_HOMEURL = $settings[postfin_homeurl],
              POSTFIN_ACCEPTURL = $settings[postfin_accepturl],
              POSTFIN_EXCEPTIONURL = $settings[postfin_exceptionurl],
              
              EXT_FORM = $settings[ext_form],
              TITLE_FIELD = $settings[title_field],
              FIRSTNAME_FIELD = $settings[firstname_field],
              COMPANY_FIELD = $settings[company_field],
              ADDRESS_FIELD = $settings[address_field],
              ZIP_FIELD = $settings[zip_field],
              CITY_FIELD = $settings[city_field],
              COUNTRY_FIELD = $settings[country_field],
              PHONE_FIELD = $settings[phone_field],
              COMMENT_FIELD = $settings[comment_field],
              
              POSTFIN_CC_FEE = $settings[postfin_cc_fee],
              POSTFIN_RATE_1 = $settings[postfin_rate_1],
              POSTFIN_DAYS_1 = $settings[postfin_days_1],
              POSTFIN_RATE_2 = $settings[postfin_rate_2],
              POSTFIN_DAYS_2 = $settings[postfin_days_2],
              POSTFIN_RATE_3 = $settings[postfin_rate_3],
              POSTFIN_DAYS_3 = $settings[postfin_days_3],
              POSTFIN_RATE_4 = $settings[postfin_rate_4],
              POSTFIN_DAYS_4 = $settings[postfin_days_4],
              
              STRIPE_SECRET_KEY = $settings[stripe_secret_key],
              STRIPE_PUBLISHABLE_KEY = $settings[stripe_publishable_key],
              
              STRIPE_CC_FEE = $settings[stripe_cc_fee],
              STRIPE_CC_FEE_PERCENT = $settings[stripe_cc_fee_percent],
              
              STRIPE_RATE_1 = $settings[stripe_rate_1],
              STRIPE_DAYS_1 = $settings[stripe_days_1],
              STRIPE_RATE_2 = $settings[stripe_rate_2],
              STRIPE_DAYS_2 = $settings[stripe_days_2],
              STRIPE_RATE_3 = $settings[stripe_rate_3],
              STRIPE_DAYS_3 = $settings[stripe_days_3],
              STRIPE_RATE_4 = $settings[stripe_rate_4],
              STRIPE_DAYS_4 = $settings[stripe_days_4],
              
              STRIPE_FOLLOW_PAY_DAYS = $settings[stripe_follow_pay_days],
              EMAIL_TPL10_ID = $settings[email_tpl10],
              
              ARRIVAL_WEEKDAY_FLAG = $flag,
              
              DEFAULT_ARRIVAL = $settings[default_arrival],
              DEFAULT_DEPARTURE = $settings[default_departure],

              PAYMENT_POSTBANK_CCARD = $setings[payment_postbank_ccard],
              PAYMENT_POSTBANK_OTHERS = $setings[payment_postbank_others],

              POSTBANK_USER = $settings[postbank_user],
              POSTBANK_SSL_PASSWORD = $settings[postbank_ssl_password],
              POSTBANK_TARGETURL = $settings[postbank_targeturl],
              POSTBANK_NOTIFYURL = $settings[postbank_notifyurl],
              POSTBANK_EXCEPTIONURL = $settings[postbank_exceptionurl],
              POSTBANK_ACCEPTURL = $settings[postbank_accepturl],
              
              POSTBANK_CC_FEE = $settings[postbank_cc_fee],
              POSTBANK_RATE_1 = $settings[postbank_rate_1],
              POSTBANK_DAYS_1 = $settings[postbank_days_1],
              POSTBANK_RATE_2 = $settings[postbank_rate_2],
              POSTBANK_DAYS_2 = $settings[postbank_days_2],
              POSTBANK_RATE_3 = $settings[postbank_rate_3],
              POSTBANK_DAYS_3 = $settings[postbank_days_3],
              POSTBANK_RATE_4 = $settings[postbank_rate_4],
              POSTBANK_DAYS_4 = $settings[postbank_days_4],
              
              AMERICAN_EXPRESS = '$setings[american_express]',
              MASTER_CARD = '$setings[master_card]',
              DINNER_CLUB = '$setings[dinner_club]',
              VISA = '$setings[visa]',
              JSB = '$setings[jsb]',

              BACKGROUND = $settings[background],
              LOGO = $settings[logo],

              EMAIL_TPL1_ID = $settings[email_tpl1],
              EMAIL_TPL2_ID = $settings[email_tpl2],
              EMAIL_TPL3_ID = $settings[email_tpl3],
              EMAIL_TPL32_ID = $settings[email_tpl32],
              EMAIL_TPL4_ID = $settings[email_tpl4],
              EMAIL_TPL5_ID = $settings[email_tpl5],
              EMAIL_TPL52_ID = $settings[email_tpl52],
              EMAIL_TPL6_ID = $settings[email_tpl6],
              EMAIL_TPL7_ID = $settings[email_tpl7],
              
              EMAIL_RECEIVER1 = $settings[email_receiver1],
              EMAIL_RECEIVER2 = $settings[email_receiver2],
              EMAIL_RECEIVER3 = $settings[email_receiver3],
              EMAIL_RECEIVER32 = $settings[email_receiver32],
              EMAIL_RECEIVER4 = $settings[email_receiver4],
              EMAIL_RECEIVER5 = $settings[email_receiver5],
              EMAIL_RECEIVER52 = $settings[email_receiver52],
              EMAIL_RECEIVER6 = $settings[email_receiver6],
              EMAIL_RECEIVER7 = $settings[email_receiver7],
              
              EMAIL_TPL8_ID = $settings[email_tpl8],
              EMAIL_TPL9_ID = $settings[email_tpl9],
              CONTACT_ARRIVAL_DAYS = $settings[contact_arrival_days],
              CONTACT_DEPARTURE_DAYS = $settings[contact_departure_days],
              
              CURRENCIES = $settings[currecies],
              CHILD_INFO_LINK_ID = $settings[child_info_page],
              BOOKING_PAGE = $settings[booking_page],
              CHILD_PAGE_IN_NEW_WINDOW = $settings[in_new_window],
              
              HIDE_CONDITION_WARNING = $settings[hide_condition_warning],
              PRESELECT_AGREEMENT = $settings[preselect_agreement],
              NO_GUESTS_DETAILS = $settings[no_guests_details]
              
              ";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!$dbw->execute_query("DELETE FROM {$prfx}_HTL_PAYMENT_SORT"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!empty($_REQUEST["payment_sort"]))
    {
      foreach($_REQUEST["payment_sort"] as $payment => $sort)
      {
        $payment = $dbw->escape($payment);
        
        if(empty($sort) || !is_numeric($sort)) $sort = 0;
        
        if(!$dbw->execute_query("INSERT INTO {$prfx}_HTL_PAYMENT_SORT (PAYMENT, SORT_ORDER) VALUES ('$payment', $sort)"))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }    

    if(!reqvar_empty("spec_start_date3_new") ||
       !reqvar_empty("spec_end_date3_new") ||
       !reqvar_empty("spec_email_tpl3_new") ||
       !reqvar_empty("spec_receiver3_new")
      )
    {
      $spec_start_date3_new = iso_date(reqvar("spec_start_date3_new"), text("DateFormat"));
      if(empty($spec_start_date3_new)) $spec_start_date3_new = "NULL";
      else                   $spec_start_date3_new = "'" . $dbw->format_datetime(strtotime($spec_start_date3_new)) . "'";

      $spec_end_date3_new = iso_date(reqvar("spec_end_date3_new"), text("DateFormat"));
      if(empty($spec_end_date3_new)) $spec_end_date3_new = "NULL";
      else                   $spec_end_date3_new = "'" . $dbw->format_datetime(strtotime($spec_end_date3_new)) . "'";

      $spec_email_tpl3_new = null_if_empty($dbw->escape(reqvar("spec_email_tpl3_new")));
      $spec_receiver3_new = null_if_empty($dbw->escape(reqvar("spec_receiver3_new")));

      $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                (BEGIN_DATE, END_DATE, TP, ETEMPLATE_ID, RECEIVER)
                VALUES
                ($spec_start_date3_new, $spec_end_date3_new, 'TPL3', $spec_email_tpl3_new, $spec_receiver3_new)
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if(!empty($_REQUEST["spec_ranges3"]))
    {
      foreach($_REQUEST["spec_ranges3"] as $rid => $rdata)
      {
        if(empty($rdata["spec_start_date3"]) ||
           empty($rdata["spec_end_date3"])
          )
        {
          $ERROR = text("ErrEnterTheEmailSpecPeriod");
          return false;
        }

        if(empty($rdata["spec_email_tpl3"]))
        {
          $ERROR = text("ErrEnterTheEmailSpecTemplate");
          return false;
        }

        if(empty($rdata["spec_receiver3"]))
        {
          $ERROR = text("ErrFormEmailAddressEmpty");
          return false;
        }

        $dt = iso_date($rdata["spec_start_date3"], text("DateFormat"));
        if($dt == "error")
        {
          $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          return false;
        }

        $dt = iso_date($rdata["spec_end_date3"], text("DateFormat"));
        if($dt == "error")
        {
          $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          return false;
        }

        $spec_start_date3 = iso_date($rdata["spec_start_date3"], text("DateFormat"));
        if(empty($spec_start_date3)) $spec_start_date3 = "NULL";
        else                   $spec_start_date3 = "'" . $dbw->format_datetime(strtotime($rdata["spec_start_date3"])) . "'";

        $spec_end_date3 = iso_date($rdata["spec_end_date3"], text("DateFormat"));
        if(empty($spec_end_date3)) $spec_end_date3 = "NULL";
        else                   $spec_end_date3 = "'" . $dbw->format_datetime(strtotime($rdata["spec_end_date3"])) . "'";

        $spec_email_tpl3 = null_if_empty($dbw->escape($rdata["spec_email_tpl3"]));
        $spec_receiver3 = null_if_empty($dbw->escape($rdata["spec_receiver3"]));

        $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_SPEC SET
                  BEGIN_DATE = $spec_start_date3,
                  END_DATE = $spec_end_date3,
                  ETEMPLATE_ID = $spec_email_tpl3,
                  RECEIVER = $spec_receiver3
                  WHERE ID = $rid
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }

    if(!empty($_REQUEST["delete_spec_ranges3"]))
    {
      $in_list = implode(",", $_REQUEST["delete_spec_ranges3"]);

      $query = "DELETE FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                WHERE ID IN ($in_list)
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if(!reqvar_empty("spec_start_date5_new") ||
       !reqvar_empty("spec_end_date5_new") ||
       !reqvar_empty("spec_email_tpl5_new") ||
       !reqvar_empty("spec_receiver5_new")
      )
    {
      $spec_start_date5_new = iso_date(reqvar("spec_start_date5_new"), text("DateFormat"));
      if(empty($spec_start_date5_new)) $spec_start_date5_new = "NULL";
      else                   $spec_start_date5_new = "'" . $dbw->format_datetime(strtotime($spec_start_date5_new)) . "'";

      $spec_end_date5_new = iso_date(reqvar("spec_end_date5_new"), text("DateFormat"));
      if(empty($spec_end_date5_new)) $spec_end_date5_new = "NULL";
      else                   $spec_end_date5_new = "'" . $dbw->format_datetime(strtotime($spec_end_date5_new)) . "'";

      $spec_email_tpl5_new = null_if_empty($dbw->escape(reqvar("spec_email_tpl5_new")));
      $spec_receiver5_new = null_if_empty($dbw->escape(reqvar("spec_receiver5_new")));

      $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                (BEGIN_DATE, END_DATE, TP, ETEMPLATE_ID, RECEIVER)
                VALUES
                ($spec_start_date5_new, $spec_end_date5_new, 'TPL5', $spec_email_tpl5_new, $spec_receiver5_new)
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if(!empty($_REQUEST["spec_ranges5"]))
    {
      foreach($_REQUEST["spec_ranges5"] as $rid => $rdata)
      {
        if(empty($rdata["spec_start_date5"]) ||
           empty($rdata["spec_end_date5"])
          )
        {
          $ERROR = text("ErrEnterTheEmailSpecPeriod");
          return false;
        }

        if(empty($rdata["spec_email_tpl5"]))
        {
          $ERROR = text("ErrEnterTheEmailSpecTemplate");
          return false;
        }

        if(empty($rdata["spec_receiver5"]))
        {
          $ERROR = text("ErrFormEmailAddressEmpty");
          return false;
        }

        $dt = iso_date($rdata["spec_start_date5"], text("DateFormat"));
        if($dt == "error")
        {
          $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          return false;
        }

        $dt = iso_date($rdata["spec_end_date5"], text("DateFormat"));
        if($dt == "error")
        {
          $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
          return false;
        }

        $spec_start_date5 = iso_date($rdata["spec_start_date5"], text("DateFormat"));
        if(empty($spec_start_date5)) $spec_start_date5 = "NULL";
        else                   $spec_start_date5 = "'" . $dbw->format_datetime(strtotime($rdata["spec_start_date5"])) . "'";

        $spec_end_date5 = iso_date($rdata["spec_end_date5"], text("DateFormat"));
        if(empty($spec_end_date5)) $spec_end_date5 = "NULL";
        else                   $spec_end_date5 = "'" . $dbw->format_datetime(strtotime($rdata["spec_end_date5"])) . "'";

        $spec_email_tpl5 = null_if_empty($dbw->escape($rdata["spec_email_tpl5"]));
        $spec_receiver5 = null_if_empty($dbw->escape($rdata["spec_receiver5"]));

        $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_SPEC SET
                  BEGIN_DATE = $spec_start_date5,
                  END_DATE = $spec_end_date5,
                  ETEMPLATE_ID = $spec_email_tpl5,
                  RECEIVER = $spec_receiver5
                  WHERE ID = $rid
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }

    if(!empty($_REQUEST["delete_spec_ranges5"]))
    {
      $in_list = implode(",", $_REQUEST["delete_spec_ranges5"]);

      $query = "DELETE FROM {$prfx}_HTL_BOOKING_SETTINGS_SPEC
                WHERE ID IN ($in_list)
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_settings
  //-----------------------------------------------------------------

  public function save_ext_service_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(!$this->validate_service_settings()) return false;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $settings["external_service"] = null_if_empty($dbw->escape($_REQUEST["settings"]["external_service"]));

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
              SET
              USE_SERVICE = $settings[external_service]";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $settings["chanmanager_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_user"]));
    $settings["chanmanager_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_password"]));
    $settings["chanmanager_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_hotel_id"]));
    $settings["chanmanager_date"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_date"]));
    $settings["chanmanager_room_count"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_room_count"]));
    $settings["chanmanager_min_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_min_stays"]));
    $settings["chanmanager_max_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_max_stays"]));
    $settings["chanmanager_reserv_url"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_reserv_url"]));

    $settings["chanmanager_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price1"]));
    $settings["chanmanager_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price2"]));
    $settings["chanmanager_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price3"]));
    $settings["chanmanager_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price4"]));
    $settings["chanmanager_price5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price5"]));
    $settings["chanmanager_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price6"]));

    $settings["chanmanager_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price6"]));
    $settings["chanmanager_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_price6"]));

    $settings["chanmanager_cta"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_cta"]));
    $settings["chanmanager_ctd"] = null_if_empty($dbw->escape($_REQUEST["settings"]["chanmanager_ctd"]));

    $settings["chanmanager_take_counts"] = empty($_REQUEST["settings"]["chanmanager_take_counts"]) ? '0' : '1';
    $settings["chanmanager_take_prices"] = empty($_REQUEST["settings"]["chanmanager_take_prices"]) ? '0' : '1';

    $settings["sihot_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_user"]));
    $settings["sihot_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_password"]));
    $settings["sihot_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_hotel_id"]));
    $settings["sihot_date"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_date"]));
    $settings["sihot_room_count"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_room_count"]));
    $settings["sihot_min_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_min_stays"]));
    $settings["sihot_max_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_max_stays"]));

    $settings["sihot_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price1"]));
    $settings["sihot_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price2"]));
    $settings["sihot_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price3"]));
    $settings["sihot_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price4"]));
    $settings["sihot_price5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price5"]));
    $settings["sihot_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price6"]));

    $settings["sihot_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price6"]));
    $settings["sihot_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_price6"]));

    $settings["sihot_cta"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_cta"]));
    $settings["sihot_ctd"] = null_if_empty($dbw->escape($_REQUEST["settings"]["sihot_ctd"]));

    $settings["sihot_take_counts"] = empty($_REQUEST["settings"]["sihot_take_counts"]) ? '0' : '1';
    $settings["sihot_take_prices"] = empty($_REQUEST["settings"]["sihot_take_prices"]) ? '0' : '1';

    $settings["htspider_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_user"]));
    $settings["htspider_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_password"]));
    $settings["htspider_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_hotel_id"]));
    $settings["htspider_currency"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_currency"]));
    $settings["htspider_date"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_date"]));
    $settings["htspider_room_count"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_room_count"]));
    
    $settings["htspider_min_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_min_stays"]));
    $settings["htspider_max_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_max_stays"]));

    $settings["htspider_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price1"]));
    $settings["htspider_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price2"]));
    $settings["htspider_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price3"]));
    $settings["htspider_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price4"]));
    $settings["htspider_price5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price5"]));
    $settings["htspider_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price6"]));
    $settings["htspider_price7"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price7"]));
    $settings["htspider_price8"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price8"]));
    $settings["htspider_price9"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price9"]));
    $settings["htspider_price10"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price10"]));
    $settings["htspider_price11"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price11"]));
    $settings["htspider_price12"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price12"]));
    $settings["htspider_price13"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price13"]));
    $settings["htspider_price14"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price14"]));
    $settings["htspider_price15"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price15"]));

    $settings["htspider_cta"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_cta"]));
    $settings["htspider_ctd"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_ctd"]));

    $settings["htspider_take_counts"] = empty($_REQUEST["settings"]["htspider_take_counts"]) ? '0' : '1';
    $settings["htspider_take_prices"] = empty($_REQUEST["settings"]["htspider_take_prices"]) ? '0' : '1';

    $settings["htspider_user2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_user2"]));
    $settings["htspider_password2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_password2"]));
    $settings["htspider_hotel_id2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_hotel_id2"]));
    $settings["htspider_currency2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_currency2"]));
    $settings["htspider_date2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_date2"]));
    $settings["htspider_room_count2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_room_count2"]));
    
    $settings["htspider_min_stays2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_min_stays2"]));
    $settings["htspider_max_stays2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_max_stays2"]));

    $settings["htspider_price21"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price21"]));
    $settings["htspider_price22"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price22"]));
    $settings["htspider_price23"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price23"]));
    $settings["htspider_price24"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price24"]));
    $settings["htspider_price25"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price25"]));
    $settings["htspider_price26"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price26"]));
    $settings["htspider_price27"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price27"]));
    $settings["htspider_price28"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price28"]));
    $settings["htspider_price29"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price29"]));
    $settings["htspider_price210"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price210"]));
    $settings["htspider_price211"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price211"]));
    $settings["htspider_price212"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price212"]));
    $settings["htspider_price213"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price213"]));
    $settings["htspider_price214"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price214"]));
    $settings["htspider_price215"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_price215"]));

    $settings["htspider_cta2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_cta2"]));
    $settings["htspider_ctd2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider_ctd2"]));
        
    $settings["htspider_take_counts2"] = empty($_REQUEST["settings"]["htspider_take_counts2"]) ? '0' : '1';
    $settings["htspider_take_prices2"] = empty($_REQUEST["settings"]["htspider_take_prices2"]) ? '0' : '1';
        
    $settings["hotelpartner_drate_code"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_drate_code"]));
    $settings["hotelpartner_hotel_name"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_hotel_name"]));

    $settings["hotelpartner_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_user"]));
    $settings["hotelpartner_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_password"]));
    $settings["hotelpartner_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_hotel_id"]));

    $settings["hotelpartner_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price1"]));
    $settings["hotelpartner_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price2"]));
    $settings["hotelpartner_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price3"]));
    $settings["hotelpartner_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price4"]));
    $settings["hotelpartner_price_add_adult"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price_add_adult"]));
    $settings["hotelpartner_price_add_child"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_price_add_child"]));

    $settings["hotelpartner_take_counts"] = empty($_REQUEST["settings"]["hotelpartner_take_counts"]) ? '0' : '1';
    $settings["hotelpartner_take_prices"] = empty($_REQUEST["settings"]["hotelpartner_take_prices"]) ? '0' : '1';
    $settings["hotelpartner_push_reservations"] = empty($_REQUEST["settings"]["hotelpartner_push_reservations"]) ? '0' : '1';

    $settings["hotelpartner_reserv_url"] = null_if_empty($dbw->escape($_REQUEST["settings"]["hotelpartner_reserv_url"]));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICE_SETTINGS
              SET

              CHANMANAGER_USER = $settings[chanmanager_user],
              CHANMANAGER_PASSWORD = $settings[chanmanager_password],
              CHANMANAGER_HOTEL_ID = $settings[chanmanager_hotel_id],
              CHANMANAGER_DATE = $settings[chanmanager_date],
              CHANMANAGER_ROOM_count = $settings[chanmanager_room_count],
              CHANMANAGER_MIN_STAYS = $settings[chanmanager_min_stays],
              CHANMANAGER_MAX_STAYS = $settings[chanmanager_max_stays],
              CHANMANAGER_TAKE_COUNTS = '$settings[chanmanager_take_counts]',
              CHANMANAGER_TAKE_PRICES = '$settings[chanmanager_take_prices]',
              CHANMANAGER_PRICE1 = $settings[chanmanager_price1],
              CHANMANAGER_PRICE2 = $settings[chanmanager_price2],
              CHANMANAGER_PRICE3 = $settings[chanmanager_price3],
              CHANMANAGER_PRICE4 = $settings[chanmanager_price4],
              CHANMANAGER_PRICE5 = $settings[chanmanager_price5],
              CHANMANAGER_PRICE6 = $settings[chanmanager_price6],

              CHANMANAGER_CTA = $settings[chanmanager_cta],
              CHANMANAGER_CTD = $settings[chanmanager_ctd],

              CHANMANAGER_RESERV_URL = $settings[chanmanager_reserv_url],


              SIHOT_USER = $settings[sihot_user],
              SIHOT_PASSWORD = $settings[sihot_password],
              SIHOT_HOTEL_ID = $settings[sihot_hotel_id],
              SIHOT_DATE = $settings[sihot_date],
              SIHOT_ROOM_count = $settings[sihot_room_count],
              SIHOT_MIN_STAYS = $settings[sihot_min_stays],
              SIHOT_MAX_STAYS = $settings[sihot_max_stays],
              SIHOT_TAKE_COUNTS = '$settings[sihot_take_counts]',
              SIHOT_TAKE_PRICES = '$settings[sihot_take_prices]',
              SIHOT_PRICE1 = $settings[sihot_price1],
              SIHOT_PRICE2 = $settings[sihot_price2],
              SIHOT_PRICE3 = $settings[sihot_price3],
              SIHOT_PRICE4 = $settings[sihot_price4],
              SIHOT_PRICE5 = $settings[sihot_price5],
              SIHOT_PRICE6 = $settings[sihot_price6],

              SIHOT_CTA = $settings[sihot_cta],
              SIHOT_CTD = $settings[sihot_ctd],

              HTSPIDER_USER = $settings[htspider_user],
              HTSPIDER_PASSWORD = $settings[htspider_password],
              HTSPIDER_HOTEL_ID = $settings[htspider_hotel_id],
              HTSPIDER_CURRENCY = $settings[htspider_currency],
              HTSPIDER_DATE = $settings[htspider_date],
              HTSPIDER_ROOM_COUNT = $settings[htspider_room_count],
              HTSPIDER_MIN_STAYS = $settings[htspider_min_stays],
              HTSPIDER_MAX_STAYS = $settings[htspider_max_stays],
              HTSPIDER_TAKE_COUNTS = '$settings[htspider_take_counts]',
              HTSPIDER_TAKE_PRICES = '$settings[htspider_take_prices]',
              HTSPIDER_PRICE1 = $settings[htspider_price1],
              HTSPIDER_PRICE2 = $settings[htspider_price2],
              HTSPIDER_PRICE3 = $settings[htspider_price3],
              HTSPIDER_PRICE4 = $settings[htspider_price4],
              HTSPIDER_PRICE5 = $settings[htspider_price5],
              HTSPIDER_PRICE6 = $settings[htspider_price6],
              HTSPIDER_PRICE7 = $settings[htspider_price7],
              HTSPIDER_PRICE8 = $settings[htspider_price8],
              HTSPIDER_PRICE9 = $settings[htspider_price9],
              HTSPIDER_PRICE10 = $settings[htspider_price10],
              HTSPIDER_PRICE11 = $settings[htspider_price11],
              HTSPIDER_PRICE12 = $settings[htspider_price12],
              HTSPIDER_PRICE13 = $settings[htspider_price13],
              HTSPIDER_PRICE14 = $settings[htspider_price14],
              HTSPIDER_PRICE15 = $settings[htspider_price15],

              HTSPIDER_CTA = $settings[htspider_cta],
              HTSPIDER_CTD = $settings[htspider_ctd],

              HTSPIDER_USER2 = $settings[htspider_user2],
              HTSPIDER_PASSWORD2 = $settings[htspider_password2],
              HTSPIDER_HOTEL_ID2 = $settings[htspider_hotel_id2],
              HTSPIDER_CURRENCY2 = $settings[htspider_currency2],
              HTSPIDER_DATE2 = $settings[htspider_date2],
              HTSPIDER_ROOM_COUNT2 = $settings[htspider_room_count2],
              HTSPIDER_MIN_STAYS2 = $settings[htspider_min_stays2],
              HTSPIDER_MAX_STAYS2 = $settings[htspider_max_stays2],
              HTSPIDER_TAKE_COUNTS2 = '$settings[htspider_take_counts2]',
              HTSPIDER_TAKE_PRICES2 = '$settings[htspider_take_prices2]',
              HTSPIDER_PRICE21 = $settings[htspider_price21],
              HTSPIDER_PRICE22 = $settings[htspider_price22],
              HTSPIDER_PRICE23 = $settings[htspider_price23],
              HTSPIDER_PRICE24 = $settings[htspider_price24],
              HTSPIDER_PRICE25 = $settings[htspider_price25],
              HTSPIDER_PRICE26 = $settings[htspider_price26],
              HTSPIDER_PRICE27 = $settings[htspider_price27],
              HTSPIDER_PRICE28 = $settings[htspider_price28],
              HTSPIDER_PRICE29 = $settings[htspider_price29],
              HTSPIDER_PRICE210 = $settings[htspider_price210],
              HTSPIDER_PRICE211 = $settings[htspider_price211],
              HTSPIDER_PRICE212 = $settings[htspider_price212],
              HTSPIDER_PRICE213 = $settings[htspider_price213],
              HTSPIDER_PRICE214 = $settings[htspider_price214],
              HTSPIDER_PRICE215 = $settings[htspider_price215],

              HTSPIDER_CTA2 = $settings[htspider_cta2],
              HTSPIDER_CTD2 = $settings[htspider_ctd2],
              
              HOTELPARTNER_HOTEL_NAME = $settings[hotelpartner_hotel_name],
              HOTELPARTNER_DRATE_CODE = $settings[hotelpartner_drate_code],

              HOTELPARTNER_USER = $settings[hotelpartner_user],
              HOTELPARTNER_PASSWORD = $settings[hotelpartner_password],
              HOTELPARTNER_HOTEL_ID = $settings[hotelpartner_hotel_id],
              HOTELPARTNER_TAKE_COUNTS = '$settings[hotelpartner_take_counts]',
              HOTELPARTNER_TAKE_PRICES = '$settings[hotelpartner_take_prices]',
              HOTELPARTNER_PUSH_RESERVATIONS = '$settings[hotelpartner_push_reservations]',
              HOTELPARTNER_PRICE1 = $settings[hotelpartner_price1],
              HOTELPARTNER_PRICE2 = $settings[hotelpartner_price2],
              HOTELPARTNER_PRICE3 = $settings[hotelpartner_price3],
              HOTELPARTNER_PRICE4 = $settings[hotelpartner_price4],
              HOTELPARTNER_PRICE_ADD_ADULT = $settings[hotelpartner_price_add_adult],
              HOTELPARTNER_PRICE_ADD_CHILD = $settings[hotelpartner_price_add_child],
              HOTELPARTNER_RESERV_URL = $settings[hotelpartner_reserv_url]
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!reqvar_empty("mark_exist_reservations"))
    {
      $query = "UPDATE {$prfx}_HTL_ORDER SET HTSPIDER_DELIVERED = '1'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    $settings["htspider4_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_user"]));
    $settings["htspider4_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_password"]));
    $settings["htspider4_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_hotel_id"]));
    $settings["htspider4_currency"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_currency"]));
    $settings["htspider4_default_rate"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_default_rate"]));
    $settings["htspider4_date"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_date"]));
    $settings["htspider4_room_count"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_room_count"]));
    
    $settings["htspider4_min_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_min_stays"]));
    $settings["htspider4_max_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_max_stays"]));

    $settings["htspider4_forward_min_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_forward_min_stays"]));
    $settings["htspider4_forward_max_stays"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_forward_max_stays"]));

    $settings["htspider4_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price1"]));
    $settings["htspider4_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price2"]));
    $settings["htspider4_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price3"]));
    $settings["htspider4_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price4"]));
    $settings["htspider4_price5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price5"]));
    $settings["htspider4_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price6"]));
    $settings["htspider4_price7"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price7"]));
    $settings["htspider4_price8"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price8"]));
    $settings["htspider4_price9"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price9"]));
    $settings["htspider4_price10"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price10"]));
    $settings["htspider4_price11"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price11"]));
    $settings["htspider4_price12"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price12"]));
    $settings["htspider4_price13"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price13"]));
    $settings["htspider4_price14"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price14"]));
    $settings["htspider4_price15"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price15"]));

    $settings["htspider4_price_add_adult"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price_add_adult"]));
    $settings["htspider4_price_add_child"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_price_add_child"]));
    
    $settings["htspider4_cta"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_cta"]));
    $settings["htspider4_ctd"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_ctd"]));
    $settings["htspider4_closed"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_closed"]));

    $settings["htspider4_take_rules"] = empty($_REQUEST["settings"]["htspider4_take_rules"]) ? '0' : '1';
    $settings["htspider4_take_counts"] = empty($_REQUEST["settings"]["htspider4_take_counts"]) ? '0' : '1';
    $settings["htspider4_take_prices"] = empty($_REQUEST["settings"]["htspider4_take_prices"]) ? '0' : '1';
    $settings["htspider4_push_reservations"] = empty($_REQUEST["settings"]["htspider4_push_reservations"]) ? '0' : '1';
    $settings["htspider4_push_credicards"] = empty($_REQUEST["settings"]["htspider4_push_credicards"]) ? '0' : '1';
    if(empty($settings["htspider4_push_reservations"])) $settings["htspider4_push_credicards"] = '0';

    $settings["htspider4_reservation_url"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_reservation_url"]));
    $settings["htspider4_reservation_login"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_reservation_login"]));
    $settings["htspider4_reservation_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_reservation_password"]));
    $settings["htspider4_reservation_hcode"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_reservation_hcode"]));
    $settings["htspider4_reservation_channel"] = null_if_empty($dbw->escape($_REQUEST["settings"]["htspider4_reservation_channel"]));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICE_SETTINGS2
              SET

              HTSPIDER4_USER = $settings[htspider4_user],
              HTSPIDER4_PASSWORD = $settings[htspider4_password],
              HTSPIDER4_HOTEL_ID = $settings[htspider4_hotel_id],
              HTSPIDER4_CURRENCY = $settings[htspider4_currency],
              HTSPIDER4_DEFAULT_RATE = $settings[htspider4_default_rate],
              HTSPIDER4_DATE = $settings[htspider4_date],
              HTSPIDER4_ROOM_COUNT = $settings[htspider4_room_count],
              
              HTSPIDER4_MIN_STAYS = $settings[htspider4_min_stays],
              HTSPIDER4_MAX_STAYS = $settings[htspider4_max_stays],
              HTSPIDER4_FORWARD_MIN_STAYS = $settings[htspider4_forward_min_stays],
              HTSPIDER4_FORWARD_MAX_STAYS = $settings[htspider4_forward_max_stays],
              
              HTSPIDER4_PRICE1 = $settings[htspider4_price1],
              HTSPIDER4_PRICE2 = $settings[htspider4_price2],
              HTSPIDER4_PRICE3 = $settings[htspider4_price3],
              HTSPIDER4_PRICE4 = $settings[htspider4_price4],
              HTSPIDER4_PRICE5 = $settings[htspider4_price5],
              HTSPIDER4_PRICE6 = $settings[htspider4_price6],
              HTSPIDER4_PRICE7 = $settings[htspider4_price7],
              HTSPIDER4_PRICE8 = $settings[htspider4_price8],
              HTSPIDER4_PRICE9 = $settings[htspider4_price9],
              HTSPIDER4_PRICE10 = $settings[htspider4_price10],
              HTSPIDER4_PRICE11 = $settings[htspider4_price11],
              HTSPIDER4_PRICE12 = $settings[htspider4_price12],
              HTSPIDER4_PRICE13 = $settings[htspider4_price13],
              HTSPIDER4_PRICE14 = $settings[htspider4_price14],
              HTSPIDER4_PRICE15 = $settings[htspider4_price15],
              HTSPIDER4_PRICE_ADD_ADULT = $settings[htspider4_price_add_adult],
              HTSPIDER4_PRICE_ADD_CHILD = $settings[htspider4_price_add_child],

              HTSPIDER4_CLOSED = $settings[htspider4_closed],
              HTSPIDER4_CTA = $settings[htspider4_cta],
              HTSPIDER4_CTD = $settings[htspider4_ctd],

              HTSPIDER4_TAKE_COUNTS = '$settings[htspider4_take_counts]',
              HTSPIDER4_TAKE_RULES = '$settings[htspider4_take_rules]',
              HTSPIDER4_TAKE_PRICES = '$settings[htspider4_take_prices]',
              HTSPIDER4_PUSH_RESERVATIONS = '$settings[htspider4_push_reservations]',
              HTSPIDER4_PUSH_CREDICARDS = '$settings[htspider4_push_credicards]',

              HTSPIDER4_RESERVATION_URL = $settings[htspider4_reservation_url],
              HTSPIDER4_RESERVATION_LOGIN = $settings[htspider4_reservation_login],
              HTSPIDER4_RESERVATION_PASSWORD = $settings[htspider4_reservation_password],
              HTSPIDER4_RESERVATION_HCODE = $settings[htspider4_reservation_hcode],
              HTSPIDER4_RESERVATION_CHANNEL = $settings[htspider4_reservation_channel]
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!empty($settings["htspider4_push_credicards"]))
    {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
                SET CONFIRMATION_REQUIRED = '0'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_ext_service_settings
  //-----------------------------------------------------------------

  public function save_pms_service_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(!$this->validate_service_settings()) return false;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $settings["external_service"] = null_if_empty($dbw->escape($_REQUEST["settings"]["external_service"]));

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
              SET
              USE_SERVICE = $settings[external_service]";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $settings["reconline_service_address"] = null_if_empty($dbw->escape($_REQUEST["settings"]["reconline_service_address"]));
    $settings["reconline_book_url"] = null_if_empty($dbw->escape($_REQUEST["settings"]["reconline_book_url"]));
    $settings["reconline_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["reconline_user"]));
    $settings["reconline_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["reconline_password"]));
    $settings["reconline_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["reconline_hotel_id"]));
    $settings["reconline_submit_reserv"] = !empty($_REQUEST["settings"]["reconline_submit_reserv"]) ? "1" : "0";

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICE_SETTINGS
              SET
              RECONLINE_BOOK_URL = $settings[reconline_book_url],
              RECONLINE_ADRESS = $settings[reconline_service_address],
              RECONLINE_USER = $settings[reconline_user],
              RECONLINE_PASSWORD = $settings[reconline_password],
              RECONLINE_HOTEL_ID = $settings[reconline_hotel_id],
              RECONLINE_SUBMIT_RESERV = $settings[reconline_submit_reserv]              
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    $settings["protel_user"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_user"]));
    $settings["protel_password"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_password"]));
    $settings["protel_hotel_id"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_hotel_id"]));
    $settings["protel_hotel_name"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_hotel_name"]));
    $settings["protel_hotel_description"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_hotel_description"]));
    $settings["protel_take_counts"] = empty($_REQUEST["settings"]["protel_take_counts"]) ? '0' : '1';
    $settings["protel_take_prices"] = empty($_REQUEST["settings"]["protel_take_prices"]) ? '0' : '1';
    $settings["protel_take_rules"] = empty($_REQUEST["settings"]["protel_take_rules"]) ? '0' : '1';

    $settings["protel_lang"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_lang"]));
    $settings["protel_drate_code"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_drate_code"]));
    $settings["protel_currency"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_currency"]));

    $settings["protel_price1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price1"]));
    $settings["protel_price2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price2"]));
    $settings["protel_price3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price3"]));
    $settings["protel_price4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price4"]));
    $settings["protel_price5"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price5"]));
    $settings["protel_price6"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_price6"]));

    $settings["protel_add_adult"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_add_adult"]));
    $settings["protel_add_child1"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_add_child1"]));
    $settings["protel_add_child2"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_add_child2"]));
    $settings["protel_add_child3"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_add_child3"]));
    $settings["protel_add_child4"] = null_if_empty($dbw->escape($_REQUEST["settings"]["protel_add_child4"]));
    
    $query = "
              UPDATE {$prfx}_HTL_EXT_SERVICE_SETTINGS2
              SET              
              PROTEL_USER = $settings[protel_user],
              PROTEL_PASSWORD = $settings[protel_password],
              PROTEL_HOTEL_ID = $settings[protel_hotel_id],
              PROTEL_HOTEL_NAME = $settings[protel_hotel_name],
              PROTEL_HOTEL_DESCRIPTION = $settings[protel_hotel_description],
              PROTEL_TAKE_COUNTS = '$settings[protel_take_counts]',
              PROTEL_TAKE_PRICES = '$settings[protel_take_prices]',
              PROTEL_TAKE_RULES = '$settings[protel_take_rules]',

              PROTEL_LANG = $settings[protel_lang],
              PROTEL_DRATE_CODE = $settings[protel_drate_code],
              PROTEL_CURRENCY = $settings[protel_currency],

              PROTEL_PRICE1 = $settings[protel_price1],
              PROTEL_PRICE2 = $settings[protel_price2],
              PROTEL_PRICE3 = $settings[protel_price3],
              PROTEL_PRICE4 = $settings[protel_price4],
              PROTEL_PRICE5 = $settings[protel_price5],
              PROTEL_PRICE6 = $settings[protel_price6],

              PROTEL_ADD_ADULT = $settings[protel_add_adult],
              PROTEL_ADD_CHILD1 = $settings[protel_add_child1],
              PROTEL_ADD_CHILD2 = $settings[protel_add_child2],
              PROTEL_ADD_CHILD3 = $settings[protel_add_child3],
              PROTEL_ADD_CHILD4 = $settings[protel_add_child4]
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!reqvar_empty("mark_exist_reservations"))
    {
      $query = "UPDATE {$prfx}_HTL_ORDER SET HTSPIDER_DELIVERED = '1'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_pms_service_settings
  //-----------------------------------------------------------------
  
  public function save_trip_advisor_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $WARNING_MESSAGE;

    if(empty($_REQUEST["settings"]["ta_partner_id"]))
    {
      $ERROR = text("HotelPartnerIDEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_name"]))
    {
      $ERROR = text("HotelNameEmpty");
      return false;
    }
    
    if(empty($_REQUEST["settings"]["ta_hotel_address"]))
    {
      $ERROR = text("HotelAddressEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_zip"]))
    {
      $ERROR = text("HotelZIPEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_city"]))
    {
      $ERROR = text("HotelCityEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_country"]))
    {
      $ERROR = text("HotelCountryEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_phone"]))
    {
      $ERROR = text("HotelPhoneEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_email"]))
    {
      $ERROR = text("HotelEmailEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_url"]))
    {
      $ERROR = text("HotelWebseiteEmpty");
      return false;
    }
    
    if(!preg_match("/^https?:\\/\\/.*/", $_REQUEST["settings"]["ta_hotel_url"]))
    {
      $ERROR = text("HotelURLIncomplete");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_room_url"]))
    {
      $ERROR = text("HotelRoomURLEmpty");
      return false;
    }
    
    if(!preg_match("/^https?:\\/\\/.*/", $_REQUEST["settings"]["ta_room_url"]))
    {
      $ERROR = text("HotelURLIncomplete");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_description"]))
    {
      $ERROR = text("HotelDescriptionEmpty");
      return false;
    }

    if(utf8_strlen($_REQUEST["settings"]["ta_hotel_description"]) > 1000)
    {
      $ERROR = text("HotelDescriptionTooLarge");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_info_name1"]) ||
       empty($_REQUEST["settings"]["ta_info_phone1"]) ||
       empty($_REQUEST["settings"]["ta_info_email1"])       
      )
    {
      $ERROR = text("ContactPersonEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_emergency_name1"]) ||
       empty($_REQUEST["settings"]["ta_emergency_phone1"]) ||
       empty($_REQUEST["settings"]["ta_emergency_email1"])       
      )
    {
      $ERROR = text("EmergencyContactEmpty");
      return false;
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $old_ta_agreed = (!empty($_REQUEST["settings"]["ta_agreed"])) ? 1 : 0;
    
    $query = "SELECT
                TA_AGREED                   
              FROM {$prfx}_HTL_TA_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $old_ta_agreed = $dbw->field_by_name("TA_AGREED");
    }
    
    $dbw->free_result();

    $settings["ta_hotel_id"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_id"])));
    $settings["ta_partner_id"] = null_if_empty($dbw->escape(strtoupper(magic_quotes_from_req($_REQUEST["settings"]["ta_partner_id"]))));
    $settings["ta_hotel_name"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_name"])));
    $settings["ta_hotel_address"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_address"])));
    $settings["ta_hotel_zip"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_zip"])));
    $settings["ta_hotel_city"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_city"])));
    $settings["ta_hotel_state"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_state"])));
    $settings["ta_hotel_country"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_country"])));
    $settings["ta_hotel_phone"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_phone"])));
    $settings["ta_hotel_fax"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_fax"])));
    $settings["ta_hotel_email"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
    $settings["ta_hotel_url"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_url"])));
    $settings["ta_hotel_description"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_description"])));

    $settings["ta_emergency_name1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_name1"])));
    $settings["ta_emergency_phone1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_phone1"])));
    $settings["ta_emergency_email1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_email1"])));

    $settings["ta_emergency_name2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_name2"])));
    $settings["ta_emergency_phone2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_phone2"])));
    $settings["ta_emergency_email2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_email2"])));

    $settings["ta_emergency_name3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_name3"])));
    $settings["ta_emergency_phone3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_phone3"])));
    $settings["ta_emergency_email3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_emergency_email3"])));

    $settings["ta_info_name1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_name1"])));
    $settings["ta_info_phone1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_phone1"])));
    $settings["ta_info_email1"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_email1"])));

    $settings["ta_info_name2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_name2"])));
    $settings["ta_info_phone2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_phone2"])));
    $settings["ta_info_email2"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_email2"])));

    $settings["ta_info_name3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_name3"])));
    $settings["ta_info_phone3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_phone3"])));
    $settings["ta_info_email3"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_info_email3"])));

    $settings["ta_room_url"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_room_url"])));

    $settings["ta_vattax"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_vattax"]));
    if(empty($settings["ta_vattax"]) || !is_numeric($settings["ta_vattax"])) $settings["ta_vattax"] = 'NULL';

    $settings["ta_localtax"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_localtax"]));
    if(empty($settings["ta_localtax"]) || !is_numeric($settings["ta_localtax"])) $settings["ta_localtax"] = 'NULL';

    $settings["ta_occupancy_fees_adults"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_occupancy_fees_adults"]));
    if(empty($settings["ta_occupancy_fees_adults"]) || !is_numeric($settings["ta_occupancy_fees_adults"])) $settings["ta_occupancy_fees_adults"] = 'NULL';

    $settings["ta_occupancy_fees_children"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_occupancy_fees_children"]));
    if(empty($settings["ta_occupancy_fees_children"]) || !is_numeric($settings["ta_occupancy_fees_children"])) $settings["ta_occupancy_fees_children"] = 'NULL';

    $settings["ta_other_taxes"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_other_taxes"]));
    if(empty($settings["ta_other_taxes"]) || !is_numeric($settings["ta_other_taxes"])) $settings["ta_other_taxes"] = 'NULL';

    $settings["ta_resort_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_resort_fees"]));
    if(empty($settings["ta_resort_fees"]) || !is_numeric($settings["ta_resort_fees"])) $settings["ta_resort_fees"] = 'NULL';
    $settings["ta_resort_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["ta_resort_fees_percent"]);
    if($settings["ta_resort_fees_percent"] != 1) $settings["ta_resort_fees_percent"] = 0;

    $settings["ta_service_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_service_fees"]));
    if(empty($settings["ta_service_fees"]) || !is_numeric($settings["ta_service_fees"])) $settings["ta_service_fees"] = 'NULL';
    $settings["ta_service_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["ta_service_fees_percent"]);
    if($settings["ta_service_fees_percent"] != 1) $settings["ta_service_fees_percent"] = 0;
    
    $settings["ta_other_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_other_fees"]));
    if(empty($settings["ta_other_fees"]) || !is_numeric($settings["ta_other_fees"])) $settings["ta_other_fees"] = 'NULL';

    $settings["ta_prepayment"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["ta_prepayment"]));
    if(empty($settings["ta_prepayment"]) || !is_numeric($settings["ta_prepayment"])) $settings["ta_prepayment"] = 'NULL';
    
    $settings["ta_agreed"] = (!empty($_REQUEST["settings"]["ta_agreed"])) ? 1 : 0;
    
    $query = "UPDATE {$prfx}_HTL_TA_SETTINGS
              SET
              TA_HOTEL_ID = $settings[ta_hotel_id],
              TA_PARTNER_ID = $settings[ta_partner_id],
              TA_HOTEL_NAME = $settings[ta_hotel_name],
              TA_HOTEL_ADDRESS = $settings[ta_hotel_address],
              TA_HOTEL_ZIP = $settings[ta_hotel_zip],
              TA_HOTEL_CITY = $settings[ta_hotel_city],
              TA_HOTEL_STATE = $settings[ta_hotel_state],
              TA_HOTEL_COUNTRY = $settings[ta_hotel_country],
              TA_HOTEL_PHONE = $settings[ta_hotel_phone],
              TA_HOTEL_FAX = $settings[ta_hotel_fax],
              TA_HOTEL_EMAIL = $settings[ta_hotel_email],
              TA_HOTEL_URL = $settings[ta_hotel_url],
              TA_HOTEL_DESCRIPTION = $settings[ta_hotel_description],
              
              TA_AGREED = '$settings[ta_agreed]',

              TA_VATTAX = $settings[ta_vattax],
              TA_LOCALTAX = $settings[ta_localtax],
              TA_OCCUPANCY_FEES_ADULTS = $settings[ta_occupancy_fees_adults],
              TA_OCCUPANCY_FEES_CHILDREN = $settings[ta_occupancy_fees_children],
              TA_OTHER_TAXES = $settings[ta_other_taxes],
              TA_RESORT_FEES = $settings[ta_resort_fees],
              TA_RESORT_FEES_PERCENT = $settings[ta_resort_fees_percent],
              TA_SERVICE_FEES = $settings[ta_service_fees],
              TA_SERVICE_FEES_PERCENT = $settings[ta_service_fees_percent],
              TA_OTHER_FEES = $settings[ta_other_fees],
              TA_PREPAYMENT = $settings[ta_prepayment],
              
              TA_EMERGENCY_NAME1 = $settings[ta_emergency_name1],
              TA_EMERGENCY_PHONE1 = $settings[ta_emergency_phone1],
              TA_EMERGENCY_EMAIL1 = $settings[ta_emergency_email1],

              TA_EMERGENCY_NAME2 = $settings[ta_emergency_name2],
              TA_EMERGENCY_PHONE2 = $settings[ta_emergency_phone2],
              TA_EMERGENCY_EMAIL2 = $settings[ta_emergency_email2],

              TA_EMERGENCY_NAME3 = $settings[ta_emergency_name3],
              TA_EMERGENCY_PHONE3 = $settings[ta_emergency_phone3],
              TA_EMERGENCY_EMAIL3 = $settings[ta_emergency_email3],

              TA_INFO_NAME1 = $settings[ta_info_name1],
              TA_INFO_PHONE1 = $settings[ta_info_phone1],
              TA_INFO_EMAIL1 = $settings[ta_info_email1],

              TA_INFO_NAME2 = $settings[ta_info_name2],
              TA_INFO_PHONE2 = $settings[ta_info_phone2],
              TA_INFO_EMAIL2 = $settings[ta_info_email2],

              TA_INFO_NAME3 = $settings[ta_info_name3],
              TA_INFO_PHONE3 = $settings[ta_info_phone3],
              TA_INFO_EMAIL3 = $settings[ta_info_email3],
              TA_ROOM_BOOKING_URL = $settings[ta_room_url]
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!empty($old_ta_agreed) && empty($_REQUEST["settings"]["ta_agreed"]))
    {
      $err = send_email("protocol@masch.com", magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"]), text("AgreeEmailSubjectOff"), text("AgreeEmailBodyOff"), "protocol@masch.com");
      if(!empty($err))
      {
        GetEvent()->log_event("ErrMailFailed", array("%error%" => $err,
                                                     "subject" => text("AgreeEmailSubjectOff"),
                                                     "%receiver%" => magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
      }
    }
    
    if(empty($old_ta_agreed) && !empty($_REQUEST["settings"]["ta_agreed"]))
    {
      send_email("protocol@masch.com", magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"]), text("AgreeEmailSubjectOn"), text("AgreeEmailBodyOn"), "protocol@masch.com");
      if(!empty($err))
      {
        GetEvent()->log_event("ErrMailFailed", array("%error%" => $err,
                                                     "subject" => text("AgreeEmailSubjectOn"),
                                                     "%receiver%" => magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
      }
    }

    if(empty($_REQUEST["settings"]["ta_agreed"]))
    {
      $_SESSION["warn_proxy"] = text("CheckboxProxyAgreementWarn");
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_trip_advisor_settings
  //-----------------------------------------------------------------

  public function save_trivago_settings()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $FOCUS_ELEMENT;
    global $WARNING_MESSAGE;

    if(empty($_REQUEST["settings"]["tvg_hotel_id"]))
    {
      $ERROR = text("HotelPartnerIDEmpty");
      $FOCUS_ELEMENT = "settings[tvg_hotel_id]";
      return false;
    }

    if(!is_numeric($_REQUEST["settings"]["tvg_hotel_id"]))
    {
      $ERROR = text("ErrNumberExpected");
      $FOCUS_ELEMENT = "settings[tvg_hotel_id]";
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_name"]))
    {
      $ERROR = text("HotelNameEmpty");
      return false;
    }
    
    if(empty($_REQUEST["settings"]["ta_hotel_address"]))
    {
      $ERROR = text("HotelAddressEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_zip"]))
    {
      $ERROR = text("HotelZIPEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_city"]))
    {
      $ERROR = text("HotelCityEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_country"]))
    {
      $ERROR = text("HotelCountryEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_phone"]))
    {
      $ERROR = text("HotelPhoneEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_email"]))
    {
      $ERROR = text("HotelEmailEmpty");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_url"]))
    {
      $ERROR = text("HotelWebseiteEmpty");
      return false;
    }
    
    if(!preg_match("/^https?:\\/\\/.*/", $_REQUEST["settings"]["ta_hotel_url"]))
    {
      $ERROR = text("HotelURLIncomplete");
      return false;
    }

    if(empty($_REQUEST["settings"]["tvg_room_url"]))
    {
      $ERROR = text("HotelRoomURLEmpty");
      return false;
    }
    
    if(!preg_match("/^https?:\\/\\/.*/", $_REQUEST["settings"]["tvg_room_url"]))
    {
      $ERROR = text("HotelURLIncomplete");
      return false;
    }

    if(empty($_REQUEST["settings"]["ta_hotel_description"]))
    {
      $ERROR = text("HotelDescriptionEmpty");
      return false;
    }

    if(utf8_strlen($_REQUEST["settings"]["ta_hotel_description"]) > 1000)
    {
      $ERROR = text("HotelDescriptionTooLarge");
      return false;
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $old_tvg_agreed = (!empty($_REQUEST["settings"]["tvg_agreed"])) ? 1 : 0;
    
    $query = "SELECT
                TVG_AGREED                   
              FROM {$prfx}_HTL_TA_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $old_tvg_agreed = $dbw->field_by_name("TVG_AGREED");
    }
    
    $dbw->free_result();

    $settings["tvg_price_type"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["tvg_price_type"])));

    $settings["tvg_hotel_id"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["tvg_hotel_id"])));
    $settings["ta_hotel_name"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_name"])));
    $settings["ta_hotel_address"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_address"])));
    $settings["ta_hotel_zip"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_zip"])));
    $settings["ta_hotel_city"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_city"])));
    $settings["ta_hotel_state"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_state"])));
    $settings["ta_hotel_country"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_country"])));
    $settings["ta_hotel_phone"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_phone"])));
    $settings["ta_hotel_fax"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_fax"])));
    $settings["ta_hotel_email"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
    $settings["ta_hotel_url"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_url"])));
    $settings["ta_hotel_description"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_description"])));

    $settings["tvg_room_url"] = null_if_empty($dbw->escape(magic_quotes_from_req($_REQUEST["settings"]["tvg_room_url"])));

    $settings["tvg_vattax"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_vattax"]));
    if(empty($settings["tvg_vattax"]) || !is_numeric($settings["tvg_vattax"])) $settings["tvg_vattax"] = 'NULL';

    $settings["tvg_localtax"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_localtax"]));
    if(empty($settings["tvg_localtax"]) || !is_numeric($settings["tvg_localtax"])) $settings["tvg_localtax"] = 'NULL';

    $settings["tvg_hotel_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_hotel_fees"]));
    if(empty($settings["tvg_hotel_fees"]) || !is_numeric($settings["tvg_hotel_fees"])) $settings["tvg_hotel_fees"] = 'NULL';
    $settings["tvg_hotel_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["tvg_hotel_fees_percent"]);
    if($settings["tvg_hotel_fees_percent"] != 1) $settings["tvg_hotel_fees_percent"] = 0;

    $settings["tvg_service_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_service_fees"]));
    if(empty($settings["tvg_service_fees"]) || !is_numeric($settings["tvg_service_fees"])) $settings["tvg_service_fees"] = 'NULL';
    $settings["tvg_service_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["tvg_service_fees_percent"]);
    if($settings["tvg_service_fees_percent"] != 1) $settings["tvg_service_fees_percent"] = 0;

    $settings["tvg_booking_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_booking_fees"]));
    if(empty($settings["tvg_booking_fees"]) || !is_numeric($settings["tvg_booking_fees"])) $settings["tvg_booking_fees"] = 'NULL';
    $settings["tvg_booking_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["tvg_booking_fees_percent"]);
    if($settings["tvg_booking_fees_percent"] != 1) $settings["tvg_booking_fees_percent"] = 0;

    $settings["tvg_resort_fees"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_resort_fees"]));
    if(empty($settings["tvg_resort_fees"]) || !is_numeric($settings["tvg_resort_fees"])) $settings["tvg_resort_fees"] = 'NULL';
    $settings["tvg_resort_fees_percent"] = magic_quotes_from_req($_REQUEST["settings"]["tvg_resort_fees_percent"]);
    if($settings["tvg_resort_fees_percent"] != 1) $settings["tvg_resort_fees_percent"] = 0;
    
    $settings["tvg_occupancy_fees_adults"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_occupancy_fees_adults"]));
    if(empty($settings["tvg_occupancy_fees_adults"]) || !is_numeric($settings["tvg_occupancy_fees_adults"])) $settings["tvg_occupancy_fees_adults"] = 'NULL';

    $settings["tvg_occupancy_fees_children"] = str_ireplace(",", ".", magic_quotes_from_req($_REQUEST["settings"]["tvg_occupancy_fees_children"]));
    if(empty($settings["tvg_occupancy_fees_children"]) || !is_numeric($settings["tvg_occupancy_fees_children"])) $settings["tvg_occupancy_fees_children"] = 'NULL';
    
    $settings["tvg_agreed"] = (!empty($_REQUEST["settings"]["tvg_agreed"])) ? 1 : 0;
    
    $query = "UPDATE {$prfx}_HTL_TA_SETTINGS
              SET
              TVG_HOTEL_ID = $settings[tvg_hotel_id],
              TA_HOTEL_NAME = $settings[ta_hotel_name],
              TA_HOTEL_ADDRESS = $settings[ta_hotel_address],
              TA_HOTEL_ZIP = $settings[ta_hotel_zip],
              TA_HOTEL_CITY = $settings[ta_hotel_city],
              TA_HOTEL_STATE = $settings[ta_hotel_state],
              TA_HOTEL_COUNTRY = $settings[ta_hotel_country],
              TA_HOTEL_PHONE = $settings[ta_hotel_phone],
              TA_HOTEL_FAX = $settings[ta_hotel_fax],
              TA_HOTEL_EMAIL = $settings[ta_hotel_email],
              TA_HOTEL_URL = $settings[ta_hotel_url],
              TA_HOTEL_DESCRIPTION = $settings[ta_hotel_description],
              
              TVG_AGREED = '$settings[tvg_agreed]',

              TVG_OCCUPANCY_FEES_ADULTS = $settings[tvg_occupancy_fees_adults],
              TVG_OCCUPANCY_FEES_CHILDREN = $settings[tvg_occupancy_fees_children],

              TVG_PRICE_TYPE = $settings[tvg_price_type],
              TVG_VATTAX = $settings[tvg_vattax],
              TVG_LOCALTAX = $settings[tvg_localtax],
              TVG_HOTEL_FEES = $settings[tvg_hotel_fees],
              TVG_HOTEL_FEES_PERCENT = $settings[tvg_hotel_fees_percent],
              TVG_SERVICE_FEES = $settings[tvg_service_fees],
              TVG_SERVICE_FEES_PERCENT = $settings[tvg_service_fees_percent],
              TVG_BOOKING_FEES = $settings[tvg_booking_fees],
              TVG_BOOKING_FEES_PERCENT = $settings[tvg_booking_fees_percent],
              TVG_RESORT_FEES = $settings[tvg_resort_fees],
              TVG_RESORT_FEES_PERCENT = $settings[tvg_resort_fees_percent],
              
              TVG_ROOM_BOOKING_URL = $settings[tvg_room_url]
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!empty($old_tvg_agreed) && empty($_REQUEST["settings"]["tvg_agreed"]))
    {
      $err = send_email("protocol@masch.com", magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"]), text("AgreeEmailSubjectOff"), text("AgreeEmailBodyOff"), "protocol@masch.com");
      if(!empty($err))
      {
        GetEvent()->log_event("ErrMailFailed", array("%error%" => $err,
                                                     "subject" => text("AgreeEmailSubjectOff"),
                                                     "%receiver%" => magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
      }
    }
    
    if(empty($old_tvg_agreed) && !empty($_REQUEST["settings"]["tvg_agreed"]))
    {
      send_email("protocol@masch.com", magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"]), text("AgreeEmailSubjectOn"), text("AgreeEmailBodyOn"), "protocol@masch.com");
      if(!empty($err))
      {
        GetEvent()->log_event("ErrMailFailed", array("%error%" => $err,
                                                     "subject" => text("AgreeEmailSubjectOn"),
                                                     "%receiver%" => magic_quotes_from_req($_REQUEST["settings"]["ta_hotel_email"])));
      }
    }
    
    if(empty($_REQUEST["settings"]["tvg_agreed"]))
    {
      $_SESSION["warn_proxy"] = text("CheckboxProxyAgreementWarn");
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_trivago_settings
  //-----------------------------------------------------------------

  public function save_explain_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["explain_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                EXPLAIN_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, EXPLAIN_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_explain_text
  //-----------------------------------------------------------------
  public function save_bill_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["bill_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                BILL_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, BILL_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_bill_text
  //-----------------------------------------------------------------
  public function save_bill_cc_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["bill_cc_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                BILL_CC_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, BILL_CC_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_bill_cc_text
  //-----------------------------------------------------------------
  public function save_online_payment_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["online_payment_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                ONLINE_PAYMENT_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, ONLINE_PAYMENT_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_online_payment_text
  //-----------------------------------------------------------------
  public function save_data_privacy_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["data_privacy_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                DATAPRIVACY_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, DATAPRIVACY_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_data_privacy_text
  //-----------------------------------------------------------------
  public function save_dd_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["dd_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                DD_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, DD_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_dd_text
  //-----------------------------------------------------------------

  public function save_specoffer_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["specoffer_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                SPECOFFER_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, SPECOFFER_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_specoffer_text
  //-----------------------------------------------------------------

  public function save_payment_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["payment_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                PAYMENT_TEXT = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, PAYMENT_TEXT)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_payment_text
  //-----------------------------------------------------------------

  public function save_payment_text2()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_REQUEST["settings"] as $lang_id => $explain_text)
    {
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP WHERE LANG_ID = $lang_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $update = $dbw->field_by_name("CNT");
      }

      $text = null_if_empty($dbw->escape(magic_quotes_from_req($explain_text["payment_text"])));

      if($update)
      {
      $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS_PROP
                SET
                PAYMENT_TEXT2 = $text
                WHERE SETTING_ID = $id AND LANG_ID = $lang_id";
      }
      else
      {
        $query = "INSERT INTO {$prfx}_HTL_BOOKING_SETTINGS_PROP
                  (SETTING_ID, LANG_ID, PAYMENT_TEXT2)
                  VALUES ($id, $lang_id, $text)";
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $dbw->free_result();
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  } // save_payment_text2
  //-----------------------------------------------------------------

  private function fetch_currency_list_for_booking(&$currency_list, &$page_info)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_id = $dbw->escape($page_info["langid"]);

    //get available curencies id's from settings
    $query = "SELECT CURRENCIES FROM {$prfx}_HTL_BOOKING_SETTINGS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $available_currencies = '';
    while($dbw->fetch_row())
    {
      $available_currencies = $dbw->field_by_name("CURRENCIES");
    }

    $dbw->free_result();

    //get currencies data
    $where_clause = "AND ID IN ($available_currencies) OR IS_DEFAULT = 1";
    if(empty($available_currencies))
    {
      $where_clause = 'AND IS_DEFAULT = 1';
    }

    $query = "SELECT ID, I_NAME, SIGN, RATE, IS_DEFAULT, NAME
              FROM {$prfx}_HTL_CURRENCY
              LEFT JOIN {$prfx}_HTL_CURRENCY_PROPS ON (ID = CURRENCY_ID)
              WHERE ACTIVE = 1 AND LANGUAGE_ID = $lang_id {$where_clause}";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $sign = $dbw->field_by_name("SIGN");
      if(empty($sign)) $sign = $dbw->field_by_name("NAME");

      $currency_list[$dbw->field_by_name("ID")] = array("internal_name" => $dbw->field_by_name("I_NAME"),
                                                        "rate" => $dbw->field_by_name("RATE"),
                                                        "sign" => $sign,
                                                        "name" => $dbw->field_by_name("NAME"),
                                                        "is_default" => $dbw->field_by_name("IS_DEFAULT")
                                                       );
    }

    $dbw->free_result();
  } // fetch_currency_list_for_booking
  //-----------------------------------------------------------------

  public function fetch_currencies()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_id = $dbw->escape($_SESSION["lang"]);
    $query = "SELECT {$prfx}_HTL_CURRENCY.ID, {$prfx}_HTL_CURRENCY.I_NAME, SIGN, RATE, {$prfx}_HTL_CURRENCY.IS_DEFAULT, {$prfx}_HTL_CURRENCY_PROPS.NAME
              FROM {$prfx}_HTL_CURRENCY
              LEFT JOIN {$prfx}_HTL_CURRENCY_PROPS ON (ID = CURRENCY_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_id'))
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $currency_list = array();

    while($dbw->fetch_row())
    {
      $sign = $dbw->field_by_name("SIGN");
      if(empty($sign)) $sign = $dbw->field_by_name("NAME");
      if(empty($sign)) $sign = $dbw->field_by_name("I_NAME");

      $currency_list[$dbw->field_by_name("ID")] = array("internal_name" => $dbw->field_by_name("I_NAME"),
                                                        "rate" => $dbw->field_by_name("RATE"),
                                                        "sign" => $sign,
                                                        "name" => $dbw->field_by_name("NAME"),
                                                        "is_default" => $dbw->field_by_name("IS_DEFAULT")
                                                       );
    }

    $dbw->free_result();

    return $currency_list;
  } // fetch_currencies
  //-----------------------------------------------------------------

  private function get_room_image($room_id, $preview = false)
  {
    $SUPPORTED_FILE_TYPES=array(
        "jpg"=>1,
        "gif"=>1,
        "png"=>1
        );
      $extention='';
      $IMAGE_FOLDER="resources/hotel/rooms";


      foreach($SUPPORTED_FILE_TYPES as $extention=> $value)
      {
          $file=$IMAGE_FOLDER."/".$room_id.".".$extention;
          if(is_file($file))
          {
            $ext=$extention;
            break;
          }
      }
      if(empty($ext))
        return '';

        $IMAGE_FOLDER = "resources/hotel/rooms";
        $file_name_preview = $IMAGE_FOLDER."/".$room_id."_thumb.".$ext;
        $thumb = "<img src='$file_name_preview' />";
        $file_name_image = $IMAGE_FOLDER."/".$room_id.'.'.$ext;

        if(!$preview)
          return $file_name_image;

        if(is_file($file_name_preview))
          return $thumb;
  }

  function check_specoffer_selection()
  {
    $cnt = 0;

    $too_many_rooms = false;
    $nights_different = false;

    $nights_count = 0;

    $total_spec_persons = 0;

    foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $soid => $count)
    {
      $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$soid]["room_id"];

      if($count > 0 && $nights_count > 0 &&
        $nights_count != $_SESSION["booking"]["step1"]["available_spec_offers"][$soid]["nights_count"]) $nights_different = true;

      if($count > 0) $nights_count = $_SESSION["booking"]["step1"]["available_spec_offers"][$soid]["nights_count"];

      if(!empty($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["available_room_count"]) &&
         $count > $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["available_room_count"]
        )
      {
        $too_many_rooms = true;
      }

      if($count == 0)
        continue;

      $cnt = $count;

      $total_spec_persons += $_SESSION["booking"]["step1"]["available_spec_offers"][$soid]["persons_count"]*$count;
    }

    if($cnt == 0)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["ChooseAnyRoom"][$_SESSION["ulang"]];

      return false;
    }

    if(!empty($_SESSION["booking"]["data"]["persons"]) &&
       $_SESSION["booking"]["data"]["persons"] != $total_spec_persons)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["SpecOfferWrongGuestCount"][$_SESSION["ulang"]];

      return false;
    }

    if($too_many_rooms)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["RoomNumberTooLarge"][$_SESSION["ulang"]];

      return false;
    }

    if($nights_different)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["ErrDifferentSpecialOffer"][$_SESSION["ulang"]];
    }

    $_SESSION["booking"]["data"]["departure_date"] = date("Y-m-d", strtotime($_SESSION["booking"]["data"]["arrive_date"])+$nights_count*24*3600);
    $_SESSION["booking"]["data"]["nights"] = $nights_count;

    return true;
  }

  function calculate_order_prices(&$settings)
  {
    //currency
    $sign = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];
    $rate = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"];

    //nights
    $arrive_time = strtotime($_SESSION["booking"]["data"]["arrive_date"]);
    $departure_time = strtotime($_SESSION["booking"]["data"]["departure_date"]);
    $nights = round(($departure_time - $arrive_time)/(60*60*24));

    //debug_message(print_r($_SESSION["booking"], true));

    $total_booking_price = 0;

    foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $room_id => &$room_num)
    {
      $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];

      foreach($room_num as $i => $persons)
      {
        $adults = 0;
        $children = 0;

        if($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult')
        {
          $adults = 1;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'child')
        {
          $adults = 0;
          $children = 1;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult2')
        {
          $adults = 2;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult3')
        {
          $adults = 3;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult4')
        {
          $adults = 4;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child2' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child3' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child4'
              )
        {
          $adults = 1;
          $children = 1;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"] == 'child2')
        {
          $adults = 0;
          $children = 2;
        }

        if($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"] == "holiday_home_fixed" ||
           $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"] == "hotel_room_fixed")
        {
          $adults = 0;
        }

        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_adult"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_adult"] != 0)
        {
          $adults += $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_adult"];
        }

        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child2"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child2"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child2"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child3"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child3"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child3"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child4"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child4"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["add_child4"];
        }

        $persons_count = $adults + $children;
        $persons_count = (int) $persons_count;

        //price interpretation & price
        $price_interpretation = '';
        $pers_count = 0;
        $room_price = 0;
        $total_price = 0;

        if($persons["persons_count"] == 'adult')
        {
          $price = $room["average_price_adult"];

          if(ifnull($room["room_type"]) == "holiday_home_fixed" || 
             ifnull($room["room_type"]) == "hotel_room_fixed"
            )
          {
            //$price += $room["average_price_add_adult"]*($persons_count-1);
          }  
          
          $room_price = number_format($price, 2, ",", "").' '.$sign;
          $total_price = $price*$nights;
        }
        if($persons["persons_count"] == 'adult2')
        {
          $room_price = number_format($room["average_price_adult2"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult2"]*$nights;
        }
        if($persons["persons_count"] == 'adult3')
        {
          $room_price = number_format($room["average_price_adult3"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult3"]*$nights;
        }
        if($persons["persons_count"] == 'adult4')
        {
          $room_price = number_format($room["average_price_adult4"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult4"]*$nights;
        }

        if($persons["persons_count"] == 'child')
        {
          $room_price = number_format($room["average_price_child"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_child"]*$nights;
        }

        if($persons["persons_count"] == 'adult_child')
        {
          $room_price = number_format($room["average_price_adult_child"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult_child"]*$nights;
        }
        if($persons["persons_count"] == 'adult_child2')
        {
          $room_price = number_format($room["average_price_adult_child2"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult_child2"]*$nights;
        }
        if($persons["persons_count"] == 'adult_child3')
        {
          $room_price = number_format($room["average_price_adult_child3"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult_child3"]*$nights;
        }
        if($persons["persons_count"] == 'adult_child4')
        {
          $room_price = number_format($room["average_price_adult_child4"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_adult_child4"]*$nights;
        }

        if($persons["persons_count"] == 'child2')
        {
          $room_price = number_format($room["average_price_child2"], 2, ",", "").' '.$sign;
          $total_price = $room["average_price_child2"]*$nights;
        }

        if(isset($persons["add_adult"]) && $persons["add_adult"] != 0 && $room["room_type"] != "holiday_home_fixed" && $room["room_type"] != "hotel_room_fixed")
        {
          $room_price .= " + ".$persons["add_adult"]."&times;".number_format($room["average_price_add_adult"], 2, ",", "").' '.$sign;
          $total_price += $room["average_price_add_adult"]*$persons["add_adult"]*$nights;
        }

        if(isset($persons["add_child"]) && $persons["add_child"] != 0)
        {
          $room_price .= " + ".$persons["add_child"]."&times;".number_format($room["average_price_add_child"], 2, ",", "").' '.$sign;
          $total_price += $room["average_price_add_child"]*$persons["add_child"]*$nights;
        }
        if(isset($persons["add_child2"]) && $persons["add_child2"] != 0)
        {
          $room_price .= " + ".$persons["add_child2"]."&times;".number_format($room["average_price_add_child2"], 2, ",", "").' '.$sign;
          $total_price += $room["average_price_add_child2"]*$persons["add_child2"]*$nights;
        }
        if(isset($persons["add_child3"]) && $persons["add_child3"] != 0)
        {
          $room_price .= " + ".$persons["add_child3"]."&times;".number_format($room["average_price_add_child3"], 2, ",", "").' '.$sign;
          $total_price += $room["average_price_add_child3"]*$persons["add_child3"]*$nights;
        }
        if(isset($persons["add_child4"]) && $persons["add_child4"] != 0)
        {
          $room_price .= " + ".$persons["add_child4"]."&times;".number_format($room["average_price_add_child4"], 2, ",", "").' '.$sign;
          $total_price += $room["average_price_add_child4"]*$nights;
        }

        if((isset($persons["add_adult"]) && $persons["add_adult"] != 0) ||
           (isset($persons["add_child"]) && $persons["add_child"] != 0) ||
           (isset($persons["add_child2"]) && $persons["add_child2"] != 0) ||
           (isset($persons["add_child3"]) && $persons["add_child3"] != 0) ||
           (isset($persons["add_child4"]) && $persons["add_child4"] != 0)
          )
          $price_interpretation = '('.$room_price.') &times; '.$nights;
        else
          $price_interpretation = $room_price.' &times; '.$nights;
      
        $total_booking_price += $total_price;

        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["persons_count"] = $persons_count;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["adults_count"] = $adults;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["children_count"] = $children;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["total_price"] = $total_price;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["total_price_interpretation"] = $price_interpretation;
      }//foreach
    }//foreach

    $total_rooms_price = $total_booking_price;

    $total_service_price = 0;

    //additional_serices
    if(!empty($_SESSION["booking"]["step3_1"]["selected_services"]))
    {
      foreach($_SESSION["booking"]["step3_1"]["selected_services"] as $service_id => $amount)
      {
        $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];

        switch($service["calculate_type"])
        {
          case 3:
            $total_booking_price += $service["price"];
            $total_service_price += $service["price"];
          break;

          case 5:
            if($service["child_discount_flag"] == 0)
            {
              $total_booking_price -= $service["child_discount"];
            }
            else
            {
              $total_booking_price -= $service["child_discount"]*$total_rooms_price/100;
            }
          break;

          case 4:
            $total_booking_price += $service["price"]*$service["room_factor"];
            $total_service_price += $service["price"]*$service["room_factor"];
          break;

          case 0:
            $adults = $_SESSION["booking"]["data"]["adults"];
            $children = $_SESSION["booking"]["data"]["children"];
            $persons = $_SESSION["booking"]["data"]["persons"];

            $total_booking_price += $service["price"]*$adults*$nights;
            $total_service_price += $service["price"]*$adults*$nights;

            $total_booking_price += $service["children_price"]*$children*$nights;
            $total_service_price += $service["children_price"]*$children*$nights;
          break;

          case 1:
            $total_booking_price += $service["price"]*$amount;
            $total_service_price += $service["price"]*$amount;
          break;

          case 2:
            $total_booking_price += $service["price"]*$amount*$nights;
            $total_service_price += $service["price"]*$amount*$nights;
          break;
        }
      }
    }

    $_SESSION["booking"]["step4"]["booking_info"]["total_price"] = $total_booking_price;
    $_SESSION["booking"]["step4"]["booking_info"]["total_service_price"] = $total_service_price;
    $_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"] = $total_rooms_price;
  }

  function calculate_order_spec_prices(&$settings)
  {
    //currency
    $sign = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];
    $rate = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"];

    //nights
    $arrive_time = strtotime($_SESSION["booking"]["data"]["arrive_date"]);
    $departure_time = strtotime($_SESSION["booking"]["data"]["departure_date"]);
    $nights = round(($departure_time - $arrive_time)/(60*60*24));

    $total_booking_price = 0;

    foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $spoid => &$room_num)
    {
      $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["room_id"];

      $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
      $spec_offer = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid];

      foreach($room_num as $i => $persons)
      {
        //price interpretation & price
        $price_interpretation = '';
        $total_price = $spec_offer["price"];

        $price_interpretation = hotel::$words["Specialoffer"][$_SESSION["ulang"]] . ": " . $spec_offer["persons_count"] . ' ' . hotel::$words["persons"][$_SESSION["ulang"]] . ' &times; ' . $spec_offer["nights_count"] . ' ' . hotel::$words["NightsUpper"][$_SESSION["ulang"]];

        $total_booking_price += $total_price;

        //persons count
        $adults = 0;
        $children = 0;

        if($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult')
        {
          $adults = 1;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'child')
        {
          $adults = 0;
          $children = 1;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult2')
        {
          $adults = 2;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult3')
        {
          $adults = 3;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult4')
        {
          $adults = 4;
          $children = 0;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child2' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child3' ||
               $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child4'
               )
        {
          $adults = 1;
          $children = 1;
        }
        elseif($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"] == 'child2')
        {
          $adults = 0;
          $children = 2;
        }

        if($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"] == "holiday_home_fixed" ||
           $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"] == "hotel_room_fixed")
        {
          $adults = 0;
        }

        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_adult"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_adult"] != 0)
        {
          $adults += $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_adult"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child2"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child2"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child2"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child3"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child3"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child3"];
        }
        if(!empty($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child4"]) && $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child4"] != 0)
        {
          $children += $_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["add_child4"];
        }

        $persons_count = $adults + $children;
        $persons_count = (int) $persons_count;

        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["persons_count"] = $persons_count;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["adults_count"] = $adults;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["children_count"] = $children;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["total_price"] = $total_price;
        $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["total_price_interpretation"] = $price_interpretation;
      }//foreach
    }//foreach

    $total_service_price = 0;

    $total_rooms_price = $total_booking_price;

    //additional_serices
    if(!empty($_SESSION["booking"]["step3_1"]["selected_services"]))
    {
      foreach($_SESSION["booking"]["step3_1"]["selected_services"] as $service_id => $amount)
      {
        $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];

        switch($service["calculate_type"])
        {
          case 3:
            $total_booking_price += $service["price"];
            $total_service_price += $service["price"];
          break;

          case 4:
            $total_booking_price += $service["price"]*$service["room_factor"];
            $total_service_price += $service["price"]*$service["room_factor"];
          break;

          case 5:
            if($service["child_discount_flag"] == 0)
            {
              $total_booking_price -= $service["child_discount"];
            }
            else
            {
              $total_booking_price -= $service["child_discount"]*$total_rooms_price/100;
            }
          break;

          case 0:
            $adults = $_SESSION["booking"]["data"]["adults"];
            $children = $_SESSION["booking"]["data"]["children"];
            $persons = $_SESSION["booking"]["data"]["persons"];

            $total_booking_price += $service["price"]*$adults*$nights;
            $total_service_price += $service["price"]*$adults*$nights;

            $total_service_price += $service["children_price"]*$children*$nights;
          break;

          case 1:
            $total_booking_price += $service["price"]*$amount;
            $total_service_price += $service["price"]*$amount;
          break;

          case 2:
            $total_booking_price += $service["price"]*$amount*$nights;
            $total_service_price += $service["price"]*$amount*$nights;
          break;
        }

      }
    }

    $_SESSION["booking"]["step4"]["booking_info"]["total_price"] = $total_booking_price;
    $_SESSION["booking"]["step4"]["booking_info"]["total_service_price"] = $total_service_price;
    $_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"] = $total_rooms_price;
  }

  function check_room_selection()
  {
    $cnt = 0;

    $too_many_rooms = false;
    
    $rate_plans = array();
    $force_plan = null;
    $force_plan_caption = null;
    
    if(!empty($_SESSION["booking"]["step2"]["selected_rooms"]))
    foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $rid => $count)
    {
      if(!empty($_SESSION["booking"]["step1"]["available_rooms"][$rid]["available_room_count"]) &&
         $count > $_SESSION["booking"]["step1"]["available_rooms"][$rid]["available_room_count"]
        )
      {
        $too_many_rooms = true;
      }

      if($count == 0)
        continue;

      $cnt = $count;
      
      $rate_plan = ifnull($_SESSION["booking"]["step2"]["selected_plans"][$rid]);

      $rate_plans[$rate_plan] = $rate_plan;

      if(empty($rate_plan)) continue;
      
      if(!empty($_SESSION["booking"]["step1"]["available_rooms"][$rid]["add_rate_plans"][$rate_plan]["force_plan"])) 
      {
        $force_plan = $rate_plan;
        $force_plan_caption = $_SESSION["booking"]["step1"]["available_rooms"][$rid]["add_rate_plans"][$rate_plan]["caption"];
      }
    }
    
    if($cnt == 0)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["ChooseAnyRoom"][$_SESSION["ulang"]];
      return false;
    }

    if($too_many_rooms)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = hotel::$words["RoomNumberTooLarge"][$_SESSION["ulang"]];
      return false;
    }
    
    if(!empty($force_plan) && count($rate_plans) > 1)
    {
      $_SESSION["step"]--;
      $_SESSION["booking"]["error"] = sprintf(hotel::$words["ForcePlan"][$_SESSION["ulang"]], $force_plan_caption);
      return false;
    }

    return true;
  }

  function check_person_selection()
  {
    //check that all rooms has perosons
    foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $room_id => $count)
    {
      if($count == 0)
        continue;

      $rooms_count = (int) $count;
      for($i = 0; $i < $rooms_count; $i++)
      {
        if(!isset($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id][$i]["persons_count"]))
        {
          $_SESSION["booking"]["error"] = hotel::$words["ThereIsAtLeastOnePersonInTheRoom"][$_SESSION["ulang"]].' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["type"].')';
          break;
        }
      }
      if(!empty($_SESSION["booking"]["error"]))
        break;
    }

    if(!empty($_SESSION["booking"]["error"])) return false;

    //check that persons limit in each room doesn't exceeded
    foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $room_id => $room)
    {
      foreach($room as $room_num)
      {
        $persons_count = 0;
        $room_adults = 0;
        if($room_num["persons_count"] == 'adult' || $room_num["persons_count"] == 'child')
        {
          $persons_count = 1;
          $room_adults = 1;
        }
        elseif($room_num["persons_count"] == 'adult2' || $room_num["persons_count"] == 'child2' || $room_num["persons_count"] == 'adult_child' ||
               $room_num["persons_count"] == 'adult_child2' || $room_num["persons_count"] == 'adult_child3' || $room_num["persons_count"] == 'adult_child4')
        {
          $persons_count = 2;
          $room_adults = 1;
        }
        elseif($room_num["persons_count"] == 'adult3')
        {
          $persons_count = 3;
          $room_adults = 3;
        }
        elseif($room_num["persons_count"] == 'adult4')
        {
          $persons_count = 4;
          $room_adults = 4;
        }

        if(ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "holiday_home_fixed" ||
           ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "hotel_room_fixed")
        {
          $persons_count = 0;
        }

        if(!isset($room_num["add_adult"]))
        {
          $room_num["add_adult"] = 0;
        }
        else
        {
          $room_adults += $room_num["add_adult"];
        }

        if(!isset($room_num["add_child"]))
        {
          $room_num["add_child"] = 0;
        }
        if(!isset($room_num["add_child2"]))
        {
          $room_num["add_child2"] = 0;
        }
        if(!isset($room_num["add_child3"]))
        {
          $room_num["add_child3"] = 0;
        }
        if(!isset($room_num["add_child4"]))
        {
          $room_num["add_child4"] = 0;
        }

        $total_persons_in_room = $persons_count + $room_num["add_adult"] + $room_num["add_child"] + $room_num["add_child2"] + $room_num["add_child3"] + $room_num["add_child4"];

        if($total_persons_in_room > $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_persons"])
        {
          $_SESSION["booking"]["error"] = hotel::$words["TooManyPeopleInTheRoom"][$_SESSION["ulang"]].' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["type"].' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["category"].'))';
          break;
        }

        if($total_persons_in_room < $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["min_persons"])
        {
          $_SESSION["booking"]["error"] = sprintf(hotel::$words["MinPersonsInTheRoom"][$_SESSION["ulang"]], $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["min_persons"]);
          break;
        }

        if(empty($_SESSION["booking"]["error"]))
        {
          $_SESSION["booking"]["data"]["persons"] += $total_persons_in_room;
          if($room_num["persons_count"] == 'adult')
            $_SESSION["booking"]["data"]["adults"] += 1;
          elseif($room_num["persons_count"] == 'adult2')
            $_SESSION["booking"]["data"]["adults"] += 2;
          elseif($room_num["persons_count"] == 'adult3')
            $_SESSION["booking"]["data"]["adults"] += 3;
          elseif($room_num["persons_count"] == 'adult4')
            $_SESSION["booking"]["data"]["adults"] += 4;
          elseif($room_num["persons_count"] == 'adult_child' ||
                 $room_num["persons_count"] == 'adult_child2' ||
                 $room_num["persons_count"] == 'adult_child3' ||
                 $room_num["persons_count"] == 'adult_child4'
                )
          {
            $_SESSION["booking"]["data"]["adults"] += 1;
            $_SESSION["booking"]["data"]["children"] += 1;
          }

          if(ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "holiday_home_fixed" ||
             ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "hotel_room_fixed")
          {
            $_SESSION["booking"]["data"]["adults"]--;
          }

          $_SESSION["booking"]["data"]["adults"] += $room_num["add_adult"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child2"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child3"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child4"];
        }

        if($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["standard_allocation"] > 2 &&
           $room_adults > $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_adults"])
        {
          $_SESSION["booking"]["data"]["persons"] = 0;
          $_SESSION["booking"]["data"]["adults"] = 0;
          $_SESSION["booking"]["data"]["children"] = 0;

          $_SESSION["booking"]["error"] = sprintf(hotel::$words["MaxAdultsInTheRoom"][$_SESSION["ulang"]], $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_adults"]);
          break;
        }
      }//foreach
      if(!empty($_SESSION["booking"]["error"]))
        break;
    }//foreach

    return empty($_SESSION["booking"]["error"]);
  }

  function check_person_spec_selection()
  {
    //check that all rooms has perosons
    foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $spoid => $count)
    {
      if($count == 0)
        continue;

      $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["room_id"];

      $rooms_count = (int) $count;
      for($i = 0; $i < $rooms_count; $i++)
      {
        if(!isset($_SESSION["booking"]["step2_1"]["selected_persons"][$spoid][$i]["persons_count"]))
        {
          $_SESSION["booking"]["error"] = hotel::$words["ThereIsAtLeastOnePersonInTheRoom"][$_SESSION["ulang"]].' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["type"].')';
          break;
        }
      }
      if(!empty($_SESSION["booking"]["error"]))
        break;
    }

    if(!empty($_SESSION["booking"]["error"])) return false;

    //check that persons limit in each room doesn't exceeded
    foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $spoid => $room)
    {
      foreach($room as $room_num)
      {
        $persons_count = 0;
        if($room_num["persons_count"] == 'adult' || $room_num["persons_count"] == 'child')
          $persons_count = 1;
        elseif($room_num["persons_count"] == 'adult2' || $room_num["persons_count"] == 'child2' || $room_num["persons_count"] == 'adult_child' ||
               $room_num["persons_count"] == 'adult_child2' || $room_num["persons_count"] == 'adult_child3' || $room_num["persons_count"] == 'adult_child4')
          $persons_count = 2;
        elseif($room_num["persons_count"] == 'adult3')
          $persons_count = 3;
        elseif($room_num["persons_count"] == 'adult4')
          $persons_count = 4;

        if(ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "holiday_home_fixed" ||
           ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["room_type"]) == "hotel_room_fixed")
        {
          $persons_count = 0;
        }

        if(!isset($room_num["add_adult"]))
        {
          $room_num["add_adult"] = 0;
        }

        if(!isset($room_num["add_child"]))
        {
          $room_num["add_child"] = 0;
        }
        if(!isset($room_num["add_child2"]))
        {
          $room_num["add_child2"] = 0;
        }
        if(!isset($room_num["add_child3"]))
        {
          $room_num["add_child3"] = 0;
        }
        if(!isset($room_num["add_child4"]))
        {
          $room_num["add_child4"] = 0;
        }

        $total_persons_in_room = $persons_count + $room_num["add_adult"] + $room_num["add_child"] + $room_num["add_child2"] + $room_num["add_child3"] + $room_num["add_child4"];

        $persons_count = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["persons_count"];

        if($total_persons_in_room != $persons_count)
        {
          $_SESSION["booking"]["error"] = sprintf(hotel::$words["TooManyPeopleInTheSpecRoom"][$_SESSION["ulang"]], $persons_count) .' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["type"].' ('.$_SESSION["booking"]["step1"]["available_rooms"][$room_id]["category"].'))';
          break;
        }

        if(empty($_SESSION["booking"]["error"]))
        {
          $_SESSION["booking"]["data"]["persons"] += $total_persons_in_room;
          if($room_num["persons_count"] == 'adult')
            $_SESSION["booking"]["data"]["adults"] += 1;
          elseif($room_num["persons_count"] == 'adult2')
            $_SESSION["booking"]["data"]["adults"] += 2;
          elseif($room_num["persons_count"] == 'adult3')
            $_SESSION["booking"]["data"]["adults"] += 3;
          elseif($room_num["persons_count"] == 'adult4')
            $_SESSION["booking"]["data"]["adults"] += 4;
          elseif($room_num["persons_count"] == 'adult_child' ||
                 $room_num["persons_count"] == 'adult_child2' ||
                 $room_num["persons_count"] == 'adult_child3' ||
                 $room_num["persons_count"] == 'adult_child4'
                )
          {
            $_SESSION["booking"]["data"]["adults"] += 1;
            $_SESSION["booking"]["data"]["children"] += 1;
          }

          $_SESSION["booking"]["data"]["adults"] += $room_num["add_adult"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child2"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child3"];
          $_SESSION["booking"]["data"]["children"] += $room_num["add_child4"];
        }
      }//foreach
      if(!empty($_SESSION["booking"]["error"]))
        break;
    }//foreach

    return empty($_SESSION["booking"]["error"]);
  }

  function process_stripe_follow_form(&$page_info, &$content)
  {
    global $ERROR, $ERR_DETAILS;

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');
    
    if(empty($_SESSION["htl_follow_pay"]) || !is_numeric($_SESSION["htl_follow_pay"]))
    {
      $content = "<span class='booking_error'>" . escape_html(hotel::$words["FollowPaymentOrderInvalid"][$_SESSION["ulang"]]) . "</span>";
      return false;
    }

    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $order_id = $dbw->escape($_SESSION["htl_follow_pay"]);
    
    $query = "SELECT {$prfx}_HTL_ORDER.ID,
              ARRIVE_DATE, 
              DEPARTURE_DATE, 
              TOTAL_ORDER_PRICE, 
              PAID,
              FOLLOW_PAY_DEADLINE,
              CURRENCY_SIGN,
              {$prfx}_HTL_ORDER.ENCODED,
              {$prfx}_HTL_ORDER.FIRST_NAME,
              {$prfx}_HTL_ORDER.LAST_NAME,
              {$prfx}_HTL_ORDER.EMAIL
              
              FROM {$prfx}_HTL_ORDER
              WHERE {$prfx}_HTL_ORDER.ID = $order_id AND CONFIRMED = '7'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $total_sum = 0;
    $to_pay_sum = 0;
    $paid_sum = 0;
    $arrive_date = "";
    $departure_date = "";

    $first_name = "";
    $last_name = "";
    $email = "";
    
    if($dbw->fetch_row())
    {
      $arrive_date = format_date($dbw->field_by_name("ARRIVE_DATE"), $page_info["date_format"]);
      $departure_date = format_date($dbw->field_by_name("DEPARTURE_DATE"), $page_info["date_format"]);
      
      $first_name = $dbw->field_by_name("FIRST_NAME");
      $last_name = $dbw->field_by_name("LAST_NAME");
      $email = $dbw->field_by_name("EMAIL");
      
      $total_sum = $dbw->field_by_name("TOTAL_ORDER_PRICE");
      $paid_sum = $dbw->field_by_name("PAID");
      $to_pay_sum = $dbw->field_by_name("TOTAL_ORDER_PRICE") - $dbw->field_by_name("PAID");
      $curr = $dbw->field_by_name("CURRENCY_SIGN");
    }
    else
    {
      $dbw->free_result();
      $content = "<span class='booking_error'>" . escape_html(hotel::$words["FollowPaymentOrderInvalid"][$_SESSION["ulang"]]) . "</span>";
      return false;
    }

    $dbw->free_result();
    
    $cc_fee = 0;
    if(!empty($settings["stripe_cc_fee"])) $cc_fee = $settings["stripe_cc_fee"];
    if(!empty($settings["stripe_cc_fee_percent"])) $cc_fee = round($to_pay_sum*$cc_fee/100, 2);
    
    $pay_error = "";
    
    if(!reqvar_empty("next"))
    {
      if(reqvar_empty("stripe_sum") || !is_numeric(reqvar("stripe_sum")))
      {
        $content = "<span class='booking_error'>" . escape_html(hotel::$words["FollowPaymentOrderInvalid"][$_SESSION["ulang"]]) . "</span>";
        return false;
      }
      
      $stripe = new StripeManager();
      
      $stripe->do_payment($order_id, 
                          $_REQUEST['stripeToken'], 
                          $settings['stripe_secret_key'], 
                          $email, 
                          $curr, 
                          reqvar("stripe_sum"), 
                          trim($first_name . " " . $last_name), 
                          $pay_error);
      
      if(empty($pay_error)) 
      {
        $query = "UPDATE {$prfx}_HTL_ORDER SET PAID = TOTAL_ORDER_PRICE, CONFIRMED = '6', FOLLOW_PAY_DEADLINE = NULL WHERE ID = $order_id";
        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           return false;
        }
        
        unset($_SESSION["htl_follow_pay"]);
        $content = escape_html(hotel::$words["FollowPaymentOrderOK"][$_SESSION["ulang"]]);
        return true;
      }
    } // if pay    
    
    $url = make_url($page_info["lang"], $page_info["name"]);
    $payment_form = '<div class="booking"><form method="post" name="booking_form" id="booking_form" action="' . $url . '">';
    
    $payment_form .= "<input type='hidden' name='stripe_sum' value='" . escape_html(round($to_pay_sum + $cc_fee, 2)) . "'>";
    $payment_form .= "<input type='hidden' name='stripe_inactive' id='stripe_inactive' value='0'>";

    $payment_form .= '<div class="stripe_error booking_error">' . escape_html($pay_error) . '</div>';
    
    $payment_form .= '<div class="payment_form_wrapper">
                    
                    <table class="follow_pay_table">
                    <tr>
                    <td>' . escape_html(hotel::$words["Order"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . $order_id . '</td>
                    </tr>
                    <tr>
                    <td>' . escape_html(hotel::$words["ArrivalDate"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . escape_html($arrive_date) . '</td>
                    </tr>
                    <tr>
                    <td>' . escape_html(hotel::$words["DepartureDate"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . escape_html($departure_date) . '</td>
                    </tr>
                    <tr>
                    <td>' . escape_html(hotel::$words["TotalPrice"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . number_format($total_sum, 2, ",", "") . ' ' . $curr . '</td>
                    </tr>
                    <tr>
                    <td>' . escape_html(hotel::$words["PaidSum"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . number_format($paid_sum, 2, ",", "") . ' ' . $curr . '</td>
                    </tr>
                    <tr>
                    <td>' . escape_html(hotel::$words["PaySum"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . number_format($to_pay_sum, 2, ",", "") . ' ' . $curr . '</td>
                    </tr>';
    
    if(!empty($cc_fee))
    {
      $payment_form .= '<tr>
                    <td>' . escape_html(hotel::$words["CreditCardFee"][$_SESSION["ulang"]]) . ':</td>
                    <td>' . number_format($cc_fee, 2, ",", "") . ' ' . $curr . '</td>
                    </tr>';
    }
    
    $payment_form .= '</table>';
    
    $payment_form .= '<div class="form_control">
                    <div class="form_caption">' . escape_html(hotel::$words["CardNumber"][$_SESSION["ulang"]]) . '*:</div>
                    <div class="form_element"><input type="text" autocomplete="off" class="card-number" name="card-number"/></div>
                  </div>
                  <div class="form_control">
                    <div class="form_caption">' . escape_html(hotel::$words["ExpireDate"][$_SESSION["ulang"]]) . '*:</div>
                    <div class="form_element dates">';
    $payment_form .= '<select name="card-expiry-month" class="card-expiry-month">';
    $payment_form .= '<option value="01">01</option>';
    $payment_form .= '<option value="02">02</option>';
    $payment_form .= '<option value="03">03</option>';
    $payment_form .= '<option value="04">04</option>';
    $payment_form .= '<option value="05">05</option>';
    $payment_form .= '<option value="06">06</option>';
    $payment_form .= '<option value="07">07</option>';
    $payment_form .= '<option value="08">08</option>';
    $payment_form .= '<option value="09">09</option>';
    $payment_form .= '<option value="10">10</option>';
    $payment_form .= '<option value="11">11</option>';
    $payment_form .= '<option value="12">12</option>';
    $payment_form .= '</select>';
    $payment_form .= ' / ';
    $payment_form .= '<select name="card-expiry-year" class="card-expiry-year">';
    
    $yy = date("y");
    for($i = 0; $i < 10; $i++)
    {
      $payment_form .= "<option value='" . ($yy+$i) . "'>" . ($yy+$i) . "</option>";
    }
    
    $payment_form .= '</select>';
    $payment_form .= '</div>
                  </div>
                  <div class="form_control">
                    <div class="form_caption">' . escape_html(hotel::$words["CardCVV"][$_SESSION["ulang"]]) . '*:</div>
                    <div class="form_element"><input type="text" size="4" autocomplete="off" class="name" class="card-cvc"/></div>
                  </div>
                </div>
                ';
                
    $payment_form .= '<input class="booking_pay_order_button booking_button" type="submit" name="next" value="'.escape_html(hotel::$words["Pay"][$_SESSION["ulang"]]).'" />';
                
    $payment_form .= '</form></div>';
    
    $payment_form .= '<script type="text/javascript">' . "\n";
    $payment_form .= 'Stripe.setPublishableKey("' . escape_html($settings["stripe_publishable_key"]) . '");' . "\n";
    
    $payment_form .= "
      $(document).ready(function() {
          $('.booking_prev_step_button').click(function(event) {
            $('#stripe_inactive').val(1);
          });
        
          $('#booking_form').submit(function(event) {
              if($('#stripe_inactive').val() == '1') return true;
              
              $('.booking_pay_order_button').attr('disabled', 'disabled');
              
              Stripe.createToken({
                  number: $('.card-number').val(),
                  cvc: $('.card-cvc').val(),
                  exp_month: $('.card-expiry-month').val(),
                  exp_year: $('.card-expiry-year').val()
              }, stripeResponseHandler);
              return false; 
          });
      });
    ";
    
    $payment_form .= '</script>' . "\n";
    
    $content = $payment_form;
    
    return true;
  }
  
  function process_stripe_paymment($dbw, $order_id, &$page_info, &$settings, &$stripe_err)
  {
    global $ERROR, $ERR_DETAILS;
    
    $stripe = new StripeManager();
    
    $stripe->do_payment($order_id, 
                        $_REQUEST['stripeToken'], 
                        $settings['stripe_secret_key'], 
                        $_SESSION["booking"]["step5"]["personal_data"]["email"], 
                        ifnull($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"]), 
                        reqvar("stripe_sum"), 
                        trim($_SESSION["booking"]["step5"]["personal_data"]["first_name"] . " " . $_SESSION["booking"]["step5"]["personal_data"]["last_name"]), 
                        $stripe_err);
    
    if(!empty($stripe_err)) return false;
    
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $status = 5;
    $paid = $dbw->escape(reqvar("stripe_prepaid_sum"));
    $deadline = "NULL";
    if(empty($paid)) 
    {
      $paid = "NULL";
    }
    elseif($paid >= round($_SESSION["booking"]["step5"]["order"]["total_order_price"], 2))
    {
      $status = 6;
    }
    else
    {
      if(!empty($settings["stripe_follow_pay_days"]))
      {
        $deadline = strtotime($_SESSION["booking"]["data"]["arrive_date"]) - 24*3600*$settings["stripe_follow_pay_days"];
        $deadline = null_if_empty($dbw->format_datetime($deadline));
      }
      
      $status = 7;
    }
    
    $query = "UPDATE {$prfx}_HTL_ORDER SET PAID = $paid, CONFIRMED = '$status', FOLLOW_PAY_DEADLINE = $deadline WHERE ID = $order_id";
    if(!$dbw->execute_query($query))
    {
       $ERROR = text("ErrQueryFailed");
       $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                      $dbw->get_last_query();

       return false;
    }

    return true;
  }
  
  private function process_ext_booking_request(&$content, &$page_info, $light_calender)
  {
    global $ERROR, $ERR_DETAILS;

    if(!empty($_SESSION["step"]) && reqvar_empty("prev"))
      $_SESSION["prev_step"] = $_SESSION["step"];

    if(!empty($_SESSION["ibooking"]))
    {
      $_REQUEST["begin_date"] = ifnull($_SESSION["ibooking"]["arrive_date"]);
      $_REQUEST["end_date"] = ifnull($_SESSION["ibooking"]["departure_date"]);
      $_REQUEST["persons"] = ifnull($_SESSION["ibooking"]["persons"]);
      $_REQUEST["children"] = ifnull($_SESSION["ibooking"]["with_children"]);

      $_REQUEST["specoffer_search"] = ifnull($_SESSION["ibooking"]["specoffer_search"]);
      $_REQUEST["specoffer_modus"] = ifnull($_SESSION["ibooking"]["specoffer_modus"]);
      $_REQUEST["room_filter"] = ifnull($_SESSION["ibooking"]["room_filter"]);
      $_REQUEST["room_name_filter"] = ifnull($_SESSION["ibooking"]["room_name_filter"]);
      $_REQUEST["specoffer"] = ifnull($_SESSION["ibooking"]["specoffer"]);
      $_REQUEST["special_offer_filter"] = ifnull($_SESSION["ibooking"]["special_offer_filter"]);

      if(empty($_REQUEST["persons"])) $_REQUEST["persons"] = 1;

      unset($_SESSION["ibooking"]);
    }

    // rebboking takeover step 1

    if(!empty($_SESSION["rebooking"]))
    {
      $_REQUEST["begin_date"] = ifnull($_SESSION["rebooking"]["arrive_date"]);
      $_REQUEST["end_date"] = ifnull($_SESSION["rebooking"]["departure_date"]);

      $persons_count = 0;

      if(!empty($_SESSION["rebooking"]["rooms"]))
      {
        foreach($_SESSION["rebooking"]["rooms"] as $rid => $rms)
        {
          foreach($rms as $nr => $room_info)
          {
            $persons_count += $room_info["persons_count"];
          }
        }
      }

      if(empty($persons_count)) $persons_count = 1;

      $_REQUEST["persons"] = $persons_count;
    }

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    if(reqvar_empty("begin_date") && ((string)$settings["default_arrival"] !== "" || !empty($settings["arrival_weekday_flag"])))
    {
      if(!empty($settings["arrival_weekday_flag"]))
      {
        $nextdates = array();
        
        if($settings["arrival_weekday_flag"] & 1) $nextdates[] = strtotime("next Monday");
        if($settings["arrival_weekday_flag"] & 2) $nextdates[] = strtotime("next Tuesday");
        if($settings["arrival_weekday_flag"] & 4) $nextdates[] = strtotime("next Wednesday");
        if($settings["arrival_weekday_flag"] & 8) $nextdates[] = strtotime("next Thursday");
        if($settings["arrival_weekday_flag"] & 16) $nextdates[] = strtotime("next Friday");
        if($settings["arrival_weekday_flag"] & 32) $nextdates[] = strtotime("next Saturday");
        if($settings["arrival_weekday_flag"] & 64) $nextdates[] = strtotime("next Sunday");
        
        $_REQUEST["begin_date"] = date("Y-m-d", min($nextdates));
      }
      else
      {
        $_REQUEST["begin_date"] = date("Y-m-d", strtotime("+ " . $settings["default_arrival"] . " days"));
      }
    }
    
    if(reqvar_empty("begin_date"))
    {
      $_REQUEST["begin_date"] = date("Y-m-d");
    }
    
    if(reqvar_empty("end_date") && !reqvar_empty("begin_date"))
    {
      if((string)$settings["default_departure"] !== "")
      {
        $_REQUEST["end_date"] = date("Y-m-d", strtotime("+ " . $settings["default_departure"] . " days", strtotime(reqvar("begin_date"))));
      }
      else
      {
        $_REQUEST["end_date"] = date("Y-m-d", strtotime("+7 days", strtotime(reqvar("begin_date"))));
      }
    }

    if(!reqvar_empty("specoffer_modus") && !reqvar_empty("begin_date"))
    {
      $_REQUEST["end_date"] = date("Y-m-d", strtotime("+21day", strtotime(reqvar("begin_date"))));
    }
      
      
    //if new booking
    if(((reqvar_empty("prev") && reqvar_empty("next") && reqvar_empty("next2")) || !reqvar_empty("new_dates")))
    {
      unset($_SESSION["booking"]["data"]);
      unset($_SESSION["booking"]["step1"]);
      unset($_SESSION["booking"]["step2"]);
      unset($_SESSION["booking"]["step2_1"]);
      //unset($_SESSION["booking"]["step4"]);
      unset($_SESSION["booking"]["step6"]);
      unset($_SESSION["booking"]["step7"]);
      unset($_SESSION["booking"]["price_interpretations"]);
      $_SESSION["step"] = 1;
    }

    if(reqvar_empty("begin_date") ||
       (reqvar_empty("end_date") && empty($_SESSION["booking"]["specoffer_modus"]))
      ) 
    {
      unset($_SESSION["booking"]["data"]);
      unset($_SESSION["booking"]["step1"]);
      unset($_SESSION["booking"]["step2"]);
      unset($_SESSION["booking"]["step2_1"]);
      //unset($_SESSION["booking"]["step4"]);
      unset($_SESSION["booking"]["step6"]);
      unset($_SESSION["booking"]["step7"]);
      unset($_SESSION["booking"]["price_interpretations"]);

      $_SESSION["step"] = 0;
    }

    if(reqvar_empty("children"))
      $_REQUEST["children"] = 0;

    unset($_SESSION["booking"]["error"]);

    if(!reqvar_empty("from_date_day") &&
       !reqvar_empty("from_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("from_date_month"));

      $_REQUEST["begin_date"] = date("Y-m-d", mktime(0, 0, 0, $dy[0], reqvar("from_date_day"), $dy[1]));
    }

    if(!reqvar_empty("to_date_day") &&
       !reqvar_empty("to_date_month"))
    {
      $dy = preg_split("/\\./", reqvar("to_date_month"));

      $_REQUEST["end_date"] = date("Y-m-d", mktime(0, 0, 0, $dy[0], reqvar("to_date_day"), $dy[1]));
    }

    if(reqvar_empty("begin_date") ||
       (reqvar_empty("end_date") && empty($_SESSION["booking"]["specoffer_modus"])))
    {
      $_SESSION["booking"]["error"] = hotel::$words["DatesEmpty"][$_SESSION["ulang"]];;
    }

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    $booking = array();

    if(empty($_SESSION["booking"]["data"]["currencies"]))
    {
      //get currencies list ang default currency
      $currency_list = array();
      $this->fetch_currency_list_for_booking($currency_list, $page_info);
      $data["currencies"] = $currency_list;

      foreach($data["currencies"] as $cur_id => &$cur)
      {
        if($cur["is_default"] == 1)
        {
          $data["default_currency"] = $cur_id;
          $data["current_currency"] = $cur_id;
        }
      }
    }

    //if change currency
    if(!empty($_REQUEST["current_currency"]))
    {
      $data["current_currency"] = $_REQUEST["current_currency"];
    }

    //if next step
    if(!reqvar_empty("next"))
    {
      $_SESSION["step"]++;
    }

    //if previous step
    if(!reqvar_empty("prev"))
    {
      if($_SESSION["step"] == 4 && $_SESSION["prev_step"] == 2)
      {
        $_SESSION["step"] = $_SESSION["step"] - 2;
      }
      else
      {
        $_SESSION["step"]--;
      }
    }

    //if next step without additional services
    if(!reqvar_empty("next2"))
    {
      $_SESSION["step"] = $_SESSION["step"] + 2;
    }

    //get data from request
    if(empty($_SESSION["booking"]["data"]))
    {
      $data["arrive_date"] = magic_quotes_from_req(reqvar("begin_date"));
      $data["departure_date"] = magic_quotes_from_req(reqvar("end_date"));
      $data["persons"] = magic_quotes_from_req(reqvar("persons"));
      $data["with_children"] = magic_quotes_from_req(reqvar("children"));
      $data["persons"] = magic_quotes_from_req(reqvar("persons"));
      $data["coupon"] = magic_quotes_from_req(trim(reqvar("coupon")));
      $data["coupon_found"] = false;
      $data["coupon_multiple"] = false;

      if(!empty($data["arrive_date"]) && !empty($data["departure_date"]))
      {
        if(strtotime($data["arrive_date"]) > strtotime($data["departure_date"]))
        {
          $data["arrive_date"] = magic_quotes_from_req(reqvar("end_date"));
          $data["departure_date"] = magic_quotes_from_req(reqvar("begin_date"));
        }
      }

      $_SESSION["booking"]["data"] = $data;
    }
    else
    {
      $data["arrive_date"] = $_SESSION["booking"]["data"]["arrive_date"];
      $data["departure_date"] = $_SESSION["booking"]["data"]["departure_date"];
      $data["coupon"] = ifnull($_SESSION["booking"]["data"]["coupon"]);

      if(!reqvar_empty("persons"))
      {
        $_SESSION["booking"]["data"]["persons"] = magic_quotes_from_req(reqvar("persons"));
      }

      $data["persons"] = $_SESSION["booking"]["data"]["persons"];
      $data["with_children"] = $_SESSION["booking"]["data"]["with_children"];
    }


    // rebboking takeover step 2
    if(!empty($_SESSION["rebooking"]))
    {
      // add services
      if(!empty($_SESSION["rebooking"]["additional_services"]))
      {
        foreach($_SESSION["rebooking"]["additional_services"] as $sid => $sinfo)
        {
          $_SESSION["booking"]["step3_1"]["selected_services"][$sid] = $sinfo["amount"];
        }
      }

      $_SESSION["booking"]["step5"]["personal_data"]["title"] = ifnull($_SESSION["rebooking"]["title"]);
      $_SESSION["booking"]["step5"]["personal_data"]["first_name"] = ifnull($_SESSION["rebooking"]["first_name"]);
      $_SESSION["booking"]["step5"]["personal_data"]["last_name"] = ifnull($_SESSION["rebooking"]["last_name"]);
      $_SESSION["booking"]["step5"]["personal_data"]["firm"] = ifnull($_SESSION["rebooking"]["company"]);
      $_SESSION["booking"]["step5"]["personal_data"]["address"] = ifnull($_SESSION["rebooking"]["address"]);
      $_SESSION["booking"]["step5"]["personal_data"]["zip"] = ifnull($_SESSION["rebooking"]["zip"]);
      $_SESSION["booking"]["step5"]["personal_data"]["ort"] = ifnull($_SESSION["rebooking"]["city"]);
      $_SESSION["booking"]["step5"]["personal_data"]["land"] = country_to_code(ifnull($_SESSION["rebooking"]["country"]));
      $_SESSION["booking"]["step5"]["personal_data"]["telephone"] = ifnull($_SESSION["rebooking"]["telephone"]);
      $_SESSION["booking"]["step5"]["personal_data"]["email"] = ifnull($_SESSION["rebooking"]["email"]);
      $_SESSION["booking"]["step5"]["personal_data"]["other"] = ifnull($_SESSION["rebooking"]["note"]);
      $_SESSION["booking"]["step5"]["personal_data"]["payment_type"] = ifnull($_SESSION["rebooking"]["payment_type"]);


      unset($_SESSION["rebooking"]);
    }

    //nights
    $nights = '';
    if($_SESSION["step"] > 0)
    {
      $arrive_time = strtotime($_SESSION["booking"]["data"]["arrive_date"]);
      $departure_time = strtotime($_SESSION["booking"]["data"]["departure_date"]);
      $nights = round(($departure_time - $arrive_time)/(60*60*24));
      $_SESSION["booking"]["data"]["nights"] = $nights;
    }

    //hack for Martin
    if(!empty($_SESSION["booking"]["data"]["current_currency"]) && !empty($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"]))
      $rate = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"];
    else
      $rate = 1;    
    
        //logic of steps
    switch($_SESSION["step"])
    {
      case 0:
      //no actions
      break;

      case 1:
      //list of available rooms and select
        $_SESSION["booking"]["specoffer_modus"] = reqvar("specoffer_modus");
        $_SESSION["booking"]["data"]["room_filter"] = reqvar("room_filter");
        
        if(reqvar("special_offer_filter_old") != reqvar("special_offer_filter") ||
           reqvar("specoffer_old") != reqvar("specoffer"))
        {
          $_SESSION["booking"]["data"]["room_filter"] = "";
          $_SESSION["booking"]["data"]["room_name_filter"] = "";
        }
        
        $_SESSION["booking"]["data"]["special_offer_filter"] = reqvar("special_offer_filter");
        $_SESSION["booking"]["data"]["specoffer"] = reqvar("specoffer");
        
        if(!reqvar_empty("so_filter"))
          $_SESSION["booking"]["data"]["special_offer_filter"] = reqvar("so_filter");

        $_SESSION["booking"]["data"]["night_filter"] = reqvar("night_filter");
        $_SESSION["booking"]["data"]["person_filter"] = reqvar("person_filter");
        $_SESSION["booking"]["data"]["room_type_filter"] = reqvar("room_type_filter");
        $_SESSION["booking"]["data"]["room_name_filter"] = reqvar("room_name_filter");
        $_SESSION["booking"]["data"]["room_category_filter"] = reqvar("room_category_filter");
        $_SESSION["booking"]["data"]["show_not_available"] = reqvar("show_not_available");
        $_SESSION["booking"]["data"]["sort_field"] = reqvar("sort_field");
        $_SESSION["booking"]["data"]["sort_order"] = reqvar("sort_order");
        
        $booking["available_rooms"] = array();
        $booking["available_spec_offers"] = array();
        
        $this->get_available_rooms($page_info, $data["arrive_date"], $data["departure_date"], $data["persons"], $data["with_children"], $booking["available_rooms"], $booking["available_spec_offers"], $rate, $settings);
        
        $_SESSION["booking"]["step1"] = $booking;
        
        if(!empty($_SESSION["booking"]["data"]["coupon"]))
        {
          if(empty($_SESSION["booking"]["data"]["coupon_multiple"]))
            $this->check_coupon_used();
          
          if(!empty($_SESSION["booking"]["data"]["coupon_used"]))
          {
            $_SESSION["booking"]["error"] = hotel::$words["CouponAlreadyUsed"][$_SESSION["ulang"]];
            $_SESSION["booking"]["data"]["coupon"] = "";
          }
          elseif(empty($_SESSION["booking"]["data"]["coupon_found"]))
          {
            $_SESSION["booking"]["error"] = hotel::$words["CouponInvalid"][$_SESSION["ulang"]];
            $_SESSION["booking"]["data"]["coupon"] = "";
          }
        }
        
      break;

      case 2:
        //how many persons in rooms
        //check that count of selected rooms != 0
        if(isset($_REQUEST["booking"]["selected_rooms"]))
          $_SESSION["booking"]["step2"]["selected_rooms"] = $_REQUEST["booking"]["selected_rooms"];
        
        if(isset($_REQUEST["booking"]["selected_plans"]))
          $_SESSION["booking"]["step2"]["selected_plans"] = $_REQUEST["booking"]["selected_plans"];

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          if(!$this->check_specoffer_selection())
          {
            $booking["available_rooms"] = array();
            $booking["available_spec_offers"] = array();
            $this->get_available_rooms($page_info, $data["arrive_date"], $data["departure_date"], $data["persons"], $data["with_children"], $booking["available_rooms"], $booking["available_spec_offers"], $rate, $settings);
            $_SESSION["booking"]["step1"] = $booking;
            break;
          }
        }
        else
        {
          if(!$this->check_room_selection())
          {
            $booking["available_rooms"] = array();
            $booking["available_spec_offers"] = array();
            $this->get_available_rooms($page_info, $data["arrive_date"], $data["departure_date"], $data["persons"], $data["with_children"], $booking["available_rooms"], $booking["available_spec_offers"], $rate, $settings);
            $_SESSION["booking"]["step1"] = $booking;
            break;
          }
        }

        if(!reqvar_empty("prev"))
        {
          $_REQUEST["booking"]["selected_persons"] = $_SESSION["booking"]["step2_1"]["selected_persons"];
        }          
        else
        {
          // apply plan
          foreach($_SESSION["booking"]["step1"]["available_rooms"] as $rid => &$room)
          {
            if(empty($_SESSION["booking"]["step2"]["selected_plans"][$rid])) continue;
            
            $pid = $_SESSION["booking"]["step2"]["selected_plans"][$rid];
            if(empty($room["add_rate_plans"][$pid])) continue;
            
            $room["spec_discount_comment"] = $room["add_rate_plans"][$pid]["caption"];
            $room["restrict_payments"] = $room["add_rate_plans"][$pid]["payments"];
            
            if(!empty($room["add_rate_plans"][$pid]["max_persons"]))
              $room["max_persons"] = $room["add_rate_plans"][$pid]["max_persons"];
            
            foreach($room["add_rate_plans"][$pid]["price_info"] as $key => $val)
            {
              $room[$key] = $val;
            }            
          }
        }
      break;

      case 3:
      $_SESSION["booking"]["data"]["persons"] = 0;
      $_SESSION["booking"]["data"]["adults"] = 0;
      $_SESSION["booking"]["data"]["children"] = 0;

      if(isset($_REQUEST["booking"]["selected_persons"]))
        $_SESSION["booking"]["step2_1"]["selected_persons"] = $_REQUEST["booking"]["selected_persons"];

      if(!empty($_SESSION["booking"]["specoffer_modus"]))
      {
          if(!$this->check_person_spec_selection())
          {
            $_SESSION["step"]--;
            break;
          }
      }
      else
      {
        if(!$this->check_person_selection())
        {
          $_SESSION["step"]--;
          break;
        }
      }

      if(isset($_REQUEST["booking"]["additional_services"]))
        $_SESSION["booking"]["step3_1"]["selected_services"] = $_REQUEST["booking"]["additional_services"];

      if(isset($_REQUEST["booking"]["additional_services_coupon"]))
        $_SESSION["booking"]["step3_1"]["selected_services_coupon"] = $_REQUEST["booking"]["additional_services_coupon"];

      $booking["additional_services"] = array();
      $this->fetch_additional_services($page_info, $booking["additional_services"], $rate, $settings);
      $_SESSION["booking"]["step3"]["additional_services"] = $booking["additional_services"];
      break;

      case 4:

        if(empty($_SESSION["booking"]["step3"]))
        {
          $_SESSION["booking"]["step3"]["additional_services"] = array();
          $_SESSION["booking"]["step3_1"]["selected_services"] = array();
          $_SESSION["booking"]["step3_1"]["selected_services_coupon"] = array();
        }

        if(isset($_REQUEST["booking"]["selected_persons"]))
            $_SESSION["booking"]["step2_1"]["selected_persons"] = $_REQUEST["booking"]["selected_persons"];

        if(!empty($_REQUEST["booking"]["additional_services"]))
          $_SESSION["booking"]["step3_1"]["selected_services"] = $_REQUEST["booking"]["additional_services"];

        if(!empty($_REQUEST["booking"]["additional_services_coupon"]))
          $_SESSION["booking"]["step3_1"]["selected_services_coupon"] = $_REQUEST["booking"]["additional_services_coupon"];

        if(empty($_REQUEST["booking"]["additional_services"]) && !reqvar_empty("next"))
        {
          $_SESSION["booking"]["step3_1"]["selected_services"] = array();
          $_SESSION["booking"]["step3_1"]["selected_services_coupon"] = array();
        }

        // force person mandatory services
        $booking["additional_services"] = array();
        $this->fetch_additional_services($page_info, $booking["additional_services"], $rate, $settings);
        $_SESSION["booking"]["step3"]["additional_services"] = $booking["additional_services"];

        foreach($_SESSION["booking"]["step3"]["additional_services"] as $service_id => $service)
        {
          if(empty($service["person_mandatory"])) continue;

          $_SESSION["booking"]["step3_1"]["selected_services"][$service_id] = 1;
        }

        $_SESSION["booking"]["data"]["persons"] = 0;
        $_SESSION["booking"]["data"]["adults"] = 0;
        $_SESSION["booking"]["data"]["children"] = 0;

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          if(!$this->check_person_spec_selection())
          {
            $_SESSION["step"]--;
            $_SESSION["step"]--;
            break;
          }
        }
        else
        {
          if(!$this->check_person_selection())
          {
            $_SESSION["step"]--;
            $_SESSION["step"]--;
            break;
          }
        }

        if(!empty($_SESSION["booking"]["step3_1"]["selected_services"]))
        {
          foreach($_SESSION["booking"]["step3_1"]["selected_services"] as $service_id => $value)
          {
            if($value == '' || $value == 0)
              continue;

            $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];
            if(!is_numeric($value))
            {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["WrongServicesNumber"][$_SESSION["ulang"]].' ('.$service["title"].')';
                break;
            }
            $val = (int) $value;

            if(!is_int($val))
            {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["WrongServicesNumber"][$_SESSION["ulang"]].' ('.$service["title"].')';
                break;
            }

            if($service["calculate_type"] == 5)
            {
              $coupons = preg_split("/[\s,]+/", $service["coupons"]);
              $used_coupons = preg_split("/[\s,]+/", $service["used_coupons"]);

              if(empty($_SESSION["booking"]["step3_1"]["selected_services_coupon"][$service_id]))
              {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["CouponEmpty"][$_SESSION["ulang"]].' ('.$service["title"].')';
                break;
              }

              $coupon = $_SESSION["booking"]["step3_1"]["selected_services_coupon"][$service_id];
              if(!in_array($coupon, $coupons))
              {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["CouponInvalid"][$_SESSION["ulang"]].' ('.$service["title"].')';
                break;
              }

              if(!empty($service["coupon_one_time"]) && in_array($coupon, $used_coupons))
              {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["CouponAlreadyUsed"][$_SESSION["ulang"]].' ('.$service["title"].')';
                break;
              }
            }
          }
        }

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          $this->calculate_order_spec_prices($settings);
        }
        else
        {
          $this->calculate_order_prices($settings);
        }

      break;

      case 5:
        if(!empty($_REQUEST["booking"]["personal_data"]))
        {
          $_SESSION["booking"]["step5"] = array();

          $_SESSION["booking"]["step5"]["personal_data"] = $_REQUEST["booking"]["personal_data"];

          if(!empty($_REQUEST["booking"]["guest_names"]))
            $_SESSION["booking"]["step5"]["order"]["guest_names"] = $_REQUEST["booking"]["guest_names"];
        }

        $required_fields = array("title" => "title",
                                 "first_name" => "first_name", 
                                 "last_name" => "last_name", 
                                 "address" => "address", 
                                 "zip" => "zip", 
                                 "ort" => "ort", 
                                 "land" => "land", 
                                 "telephone" => "telephone", 
                                 "email" => "email"
                                );

        if(!empty($settings["ext_form"]))
        {
          $required_fields = array("last_name" => "last_name", 
                                   "email" => "email");
          
          if(ifnull($settings["title_field"]) == 2) $required_fields["title"] = "title";
          if(ifnull($settings["firstname_field"]) == 2) $required_fields["first_name"] = "first_name";
          if(ifnull($settings["company_field"]) == 2) $required_fields["firm"] = "firm";
          if(ifnull($settings["address_field"]) == 2) $required_fields["address"] = "address";
          if(ifnull($settings["zip_field"]) == 2) $required_fields["zip"] = "zip";
          if(ifnull($settings["city_field"]) == 2) $required_fields["ort"] = "ort";
          if(ifnull($settings["country_field"]) == 2) $required_fields["land"] = "land";
          if(ifnull($settings["phone_field"]) == 2) $required_fields["telephone"] = "telephone";
          if(ifnull($settings["comment_field"]) == 2) $required_fields["other"] = "other";
        }
        
        foreach($_SESSION["booking"]["step5"]["personal_data"] as $field_name => $data)
        {
          if($field_name == "email" && !filter_var($data, FILTER_VALIDATE_EMAIL))
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = hotel::$words["EmailInvalid"][$_SESSION["ulang"]];
            break;
          }
          
          if(empty($data) && !empty($required_fields[$field_name]))
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = hotel::$words["SomeRequiredFieldsAreEmpty"][$_SESSION["ulang"]];
            break;
          }
          
          if($field_name == "title")
          {
            $titleOptions = explode(", ", hotel::$words["TitleOptions"][$_SESSION["ulang"]]);
          }
        }
        
        if(!empty($_SESSION["booking"]["error"]))
          break;
        
        if(empty($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]))
        {
          $_SESSION["step"]--;
          $_SESSION["booking"]["error"] = hotel::$words["SomeRequiredFieldsAreEmpty"][$_SESSION["ulang"]];
        }
        elseif(empty($_REQUEST["agreement"]))
        {
          $_SESSION["step"]--;
          $_SESSION["booking"]["error"] = hotel::$words["AgreementRequired"][$_SESSION["ulang"]];
        }
        elseif(empty($_REQUEST["data_privacy"]))
        {
          $_SESSION["step"]--;
          $_SESSION["booking"]["error"] = hotel::$words["DataPrivacyRequired"][$_SESSION["ulang"]];
        }
        
        if(!empty($_SESSION["booking"]["error"]))
          break;

        if(empty($settings["no_guests_details"]))
        foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $room_id => $rooms)
        {
          foreach($rooms as $i => $persons)
          {
            foreach($_REQUEST["booking"]["guest_names"][$room_id][$i] as $guest_name)
            {
              if(empty($guest_name["name"]))
              {
                $_SESSION["step"]--;
                $_SESSION["booking"]["error"] = hotel::$words["SomeRequiredFieldsAreEmpty"][$_SESSION["ulang"]];
                break;
              }
            }
            if(!empty($_SESSION["booking"]["error"]))
              break;
          }
          if(!empty($_SESSION["booking"]["error"]))
            break;
        }

        if(!empty($_SESSION["booking"]["error"]))
        break;

        $_SESSION["booking"]["step5"]["order"]["arrive_date"] = $_SESSION["booking"]["data"]["arrive_date"];
        $_SESSION["booking"]["step5"]["order"]["departure_date"] = $_SESSION["booking"]["data"]["departure_date"];
        $_SESSION["booking"]["step5"]["order"]["total_order_price"] = $_SESSION["booking"]["step4"]["booking_info"]["total_price"];

        foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $room_id => $rooms)
        {
          foreach($rooms as $i => $persons)
          {
            $_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i] = array("room_id" => $room_id,
                                                                                  "room_counter" => $i,
                                                                                  "persons_count" => $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["persons_count"],
                                                                                  "adults_count" => $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["adults_count"],
                                                                                  "children_count" => $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["children_count"],
                                                                                  "total_price" => $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["total_price"]
                                                                                 );

            $_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i]["guest_names"] = '';

            if(!empty($_REQUEST["booking"]["guest_names"]))
            foreach($_REQUEST["booking"]["guest_names"][$room_id][$i] as $guest_name)
            {
              if(empty($guest_name["name"]))
                continue;

              if(empty($guest_name["yo"]))
                $_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i]["guest_names"] .= $guest_name["name"].', ';
              else
                $_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i]["guest_names"] .= $guest_name["name"].' ('.$guest_name["yo"].' '.escape_html(hotel::$words["YearsOld"][$_SESSION["ulang"]]).'), ';
            }

            $_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i]["guest_names"] = substr($_SESSION["booking"]["step5"]["order"]["rooms"][$room_id][$i]["guest_names"], 0, -2);
          }//foreach
        }//foreach

        if(!empty($_SESSION["booking"]["step3_1"]["selected_services"]))
        {
          foreach($_SESSION["booking"]["step3_1"]["selected_services"] as $service_id => $amount)
          {
            $_SESSION["booking"]["step5"]["order"]["additional_services"][$service_id] = $amount;
          }
        }
      break;

      case 6:
        
        if(!empty($_REQUEST["booking"]["payment_data"]))
        {
          $_SESSION["booking"]["step5"]["payment_data"] = array();

          $_SESSION["booking"]["step5"]["payment_data"] = $_REQUEST["booking"]["payment_data"];
        }

        $payment_type = ifnull($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]);

        if($payment_type == "CREDIT_CARD" || $payment_type == "BILL_CC" || $payment_type == "RECONLINE_CREDIT_CARD")
        {
          if(empty($_REQUEST["booking"]["payment_data"]["creditcart_type"]) ||
             empty($_REQUEST["booking"]["payment_data"]["creditcart_number"]) ||
             empty($_REQUEST["booking"]["payment_data"]["creditcart_owner"]) ||
             empty($_REQUEST["booking"]["payment_data"]["creditcart_month"]) ||
             empty($_REQUEST["booking"]["payment_data"]["creditcart_year"]) ||
             empty($_REQUEST["booking"]["payment_data"]["creditcart_cvv"])
            )
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = hotel::$words["SomeRequiredFieldsAreEmpty"][$_SESSION["ulang"]];
            break;
          }
        }

        if($payment_type == "DIRECT_DEBIT")
        {
          if(empty($_REQUEST["booking"]["payment_data"]["account_number"]) ||
             empty($_REQUEST["booking"]["payment_data"]["account_owner"]) ||
             empty($_REQUEST["booking"]["payment_data"]["bank_id"])
            )
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = hotel::$words["SomeRequiredFieldsAreEmpty"][$_SESSION["ulang"]];
            break;
          }

          if(empty($_REQUEST["booking"]["payment_data"]["directdebit_agree"]))
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = hotel::$words["ErrAcceptConditionRequired"][$_SESSION["ulang"]];
            break;
          }
        }

        if(!empty($_SESSION["booking"]["error"]))
            break;

        $_SESSION["booking"]["step5"]["payment_data"]["creditcart_date"] = $_SESSION["booking"]["step5"]["payment_data"]["creditcart_month"].'/'.substr($_SESSION["booking"]["step5"]["payment_data"]["creditcart_year"], -2);

        $arrive_time = strtotime($_SESSION["booking"]["data"]["arrive_date"]);
        $departure_time = strtotime($_SESSION["booking"]["data"]["departure_date"]);

        $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);
        if(!empty($ext_service_manager) && $ext_service_manager->supportsBooking()) 
        {
          $order_info = array();
          $this->fetch_order_info_frontend($order_info);

          $order_info["creditcart_type"] = ifnull($_REQUEST["booking"]["payment_data"]["creditcart_type"]);
          $order_info["creditcart_number"] = ifnull($_REQUEST["booking"]["payment_data"]["creditcart_number"]);
          $order_info["creditcart_owner"] = ifnull($_REQUEST["booking"]["payment_data"]["creditcart_owner"]);
          $order_info["creditcart_month"] = ifnull($_REQUEST["booking"]["payment_data"]["creditcart_month"]);
          $order_info["creditcart_year"] = ifnull($_REQUEST["booking"]["payment_data"]["creditcart_year"]);
          
          $order_info["payment_type"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]);
          
          if(!$ext_service_manager->submitReservation($order_info))
          {
            $_SESSION["step"]--;
            $_SESSION["booking"]["error"] = "RECONLINE Response: " . HotelServiceManager::$last_error;
            break;
          }
        }
          
        if(!$this->process_order($page_info, $arrive_time, $departure_time))
        {
          $_SESSION["step"]--;
          if(empty($_SESSION["booking"]["error"])) $_SESSION["booking"]["error"] = hotel::$words["SomeRoomsBooked"][$_SESSION["ulang"]];
          break;
        }
        
        $_SESSION["booking"]["online_payment"]["arrive_time"] = $arrive_time;
        $_SESSION["booking"]["online_payment"]["departure_time"] = $departure_time;
        
        $_SESSION["booking"]["online_payment"]["adults_count"] = $_SESSION["booking"]["data"]["adults"];
        $_SESSION["booking"]["online_payment"]["children_count"] = $_SESSION["booking"]["data"]["children"];
        $_SESSION["booking"]["online_payment"]["nights"] = $_SESSION["booking"]["data"]["nights"];
        
        $_SESSION["booking"]["online_payment"]["order_id"] = $_SESSION["booking"]["step5"]["personal_data"]["order_id"];
        $_SESSION["booking"]["online_payment"]["total_order_price"] = $_SESSION["booking"]["step5"]["personal_data"]["total_order_price"];
        $_SESSION["booking"]["online_payment"]["payment_type"] = $_SESSION["booking"]["step5"]["personal_data"]["payment_type"];
        $_SESSION["booking"]["online_payment"]["currency"] = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];

        $_SESSION["booking"]["online_payment"]["person_name"] = trim(ifnull($_SESSION["booking"]["step5"]["personal_data"]["first_name"]) . " " . ifnull($_SESSION["booking"]["step5"]["personal_data"]["last_name"]));
        $_SESSION["booking"]["online_payment"]["email"] = $_SESSION["booking"]["step5"]["personal_data"]["email"];
        $_SESSION["booking"]["online_payment"]["telephone"] = $_SESSION["booking"]["step5"]["personal_data"]["telephone"];
        $_SESSION["booking"]["online_payment"]["ort"] = $_SESSION["booking"]["step5"]["personal_data"]["ort"];
        $_SESSION["booking"]["online_payment"]["land"] = $_SESSION["booking"]["step5"]["personal_data"]["land"];
        $_SESSION["booking"]["online_payment"]["address"] = $_SESSION["booking"]["step5"]["personal_data"]["address"];
        
        unset($_SESSION["booking"]["step2"]);
        unset($_SESSION["booking"]["step2_1"]);
        unset($_SESSION["booking"]["step3"]);
        unset($_SESSION["booking"]["step3_1"]);
        unset($_SESSION["booking"]["step4"]);
        //unset($_SESSION["booking"]["step5"]);
      break;

      case 7:
        $_SESSION["step"] = 1;
        unset($_SESSION["booking"]["step2"]);
        unset($_SESSION["booking"]["step2_1"]);
        unset($_SESSION["booking"]["step3"]);
        unset($_SESSION["booking"]["step3_1"]);
        unset($_SESSION["booking"]["step4"]);
        //unset($_SESSION["booking"]["step5"]);

        $booking["available_rooms"] = array();
        $booking["available_spec_offers"] = array();
        $this->get_available_rooms($page_info, $data["arrive_date"], $data["departure_date"], $data["persons"], $data["with_children"], $booking["available_rooms"], $booking["available_spec_offers"], $rate, $settings);
        $_SESSION["booking"]["step1"] = $booking;

      break;
    }

    $this->render_ext_booking($content, $page_info, $light_calender);
    unset($_REQUEST);
  } // process_ext_booking_request
  //-----------------------------------------------------------------

  private function process_order(&$page_info, $arrive_time, $departure_time)
  {
    global $ERROR;
    global $ERR_DETAILS;
    
    $_SESSION["booking"]["error"] = "";

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //start transaction
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $checked = true;
    foreach($_SESSION["booking"]["step5"]["order"]["rooms"] as $room_id => $rooms)
    {
      if(!empty($_SESSION["booking"]["specoffer_modus"]))
      {
        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$room_id]["room_id"];
      }

      $rooms_count = count($rooms);
      $id = $dbw->escape($room_id);
      $arrive_date = null_if_empty($dbw->format_date($arrive_time));

      // we do not concider the departure day
      // for room count. If at the departure no romms, it is not important.
      $departure_date = null_if_empty($dbw->format_date($departure_time));
      $departure_date_check = null_if_empty($dbw->format_date($departure_time - 24*3600));

      $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY
                WHERE ROOM_ID = $id AND DATE >= $arrive_date AND DATE <= $departure_date_check";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      while($dbw->fetch_row())
      {
        if($rooms_count > $dbw->field_by_name("ROOM_COUNT"))
          $checked = false;
      }

      $dbw->free_result();
    }

    if(!$checked)
      return false;
    
    //let's go
    $user_data = array();

    $is_encrypted = !empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"]) ? "1" : "0";

    $user_data["TITLE"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["title"]), $is_encrypted);
    $user_data["FIRST_NAME"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["first_name"]);
    $user_data["LAST_NAME"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["last_name"]);
    $user_data["ADDRESS"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["address"]), $is_encrypted);
    $user_data["COMPANY"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["firm"]), $is_encrypted);
    $user_data["CITY"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["ort"]), $is_encrypted);
    $user_data["ZIP"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["zip"]), $is_encrypted);
    $user_data["COUNTRY"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["land"]), $is_encrypted);
    $user_data["PHONE"] = User::encrypt_data(ifnull($_SESSION["booking"]["step5"]["personal_data"]["telephone"]), $is_encrypted);
    $user_data["EMAIL"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["email"]);

    $company_data = array();

    if(!empty($user_data["COMPANY"]))
    {
      $company_data["ENCODED"] = $is_encrypted;
      $company_data["NAME"] = $user_data["COMPANY"];

      if(!empty($user_data["ADDRESS"])) $company_data["ADDRESS"] = $user_data["ADDRESS"];
      if(!empty($user_data["ZIP"])) $company_data["ZIP"] = $user_data["ZIP"];
      if(!empty($user_data["CITY"])) $company_data["CITY"] = $user_data["CITY"];
      if(!empty($user_data["STATE"])) $company_data["STATE"] = $user_data["STATE"];
      if(!empty($user_data["COUNTRY"])) $company_data["COUNTRY"] = $user_data["COUNTRY"];
      if(!empty($user_data["PHONE"])) $company_data["PHONE"] = $user_data["PHONE"];
      if(!empty($user_data["FAX"])) $company_data["FAX"] = $user_data["FAX"];
      if(!empty($user_data["WEBPAGE"])) $company_data["WEBPAGE"] = $user_data["WEBPAGE"];
    }

    //prepare user data
    $personal_data["title"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["title"], $is_encrypted)));
    $personal_data["first_name"] = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["first_name"]));
    $personal_data["last_name"] = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["last_name"]));
    $personal_data["address"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["address"], $is_encrypted)));
    $personal_data["firm"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["firm"], $is_encrypted)));
    $personal_data["ort"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["ort"], $is_encrypted)));
    $personal_data["zip"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["zip"], $is_encrypted)));
    $personal_data["land"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["land"], $is_encrypted)));
    $personal_data["telephone"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["personal_data"]["telephone"], $is_encrypted)));
    $personal_data["email"] = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["email"]));


    //1. we have to create a new user if needed
    $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_USER WHERE EMAIL =  $personal_data[email]";

     if(!$dbw->execute_query($query))
     {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
     }

     if($dbw->fetch_row())
     {
       $count = $dbw->field_by_name("CNT");
     }

     $cmanager = GetCRMManager();

     if(!$count)
     {
      $login = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["email"]));
      $lower_login = null_if_empty($dbw->escape(strtolower($_SESSION["booking"]["step5"]["personal_data"]["email"])));
      $hash = null_if_empty($dbw->escape(md5(strtolower($_SESSION["booking"]["step5"]["personal_data"]["email"]))));
      $lhash = null_if_empty($dbw->escape(md5("wtyfsd" . strtolower($_SESSION["booking"]["step5"]["personal_data"]["email"]) . "jhkfdf")));

      $now = $dbw->format_datetime(time());

      $query = "INSERT INTO ${prfx}_USER
               (LOGIN, ENCODED, COOKIE_HASH, LOGIN_HASH, LAST_NAME, FIRST_NAME, EMAIL, COUNTRY, CITY, COMPANY, ADDRESS, ZIP, PHONE, TITLE, IS_ACTIVE, AGREED, DT_CREATED, DT_CHANGED)
                VALUES
                ($login, '$is_encrypted', $hash, $lhash, $personal_data[last_name], $personal_data[first_name], $personal_data[email], $personal_data[land], $personal_data[ort], $personal_data[firm], $personal_data[address], $personal_data[zip], $personal_data[telephone], $personal_data[title],  1, 1, '$now', '$now')
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $dbw->rollback_transaction();
          return false;
      }

      $usrid = $dbw->insert_id();

      $query = "INSERT INTO ${prfx}_USER_GROUP (USER_ID, GROUP_ID)
                SELECT $usrid, ID FROM ${prfx}_GROUP WHERE FLAG = 4";

      if(!$dbw->execute_query($query))
      {
         $ERROR = text("ErrQueryFailed");
         $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                        $dbw->get_last_query();

         $dbw->rollback_transaction();
         return false;
      }

      if($cmanager)
      {
        if(!$cmanager->buildCompany($usrid, $company_data))
        {
          $dbw->rollback_transaction();
          return false;
        }
      }
     }
     else
     {
       $now = $dbw->format_datetime(time());

       if(!$dbw->execute_query("SELECT ID FROM ${prfx}_USER WHERE EMAIL = $personal_data[email]"))
       {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
       }

       if(!$dbw->fetch_row())
       {
          $ERROR = text("ErrWrongLogin");
          $dbw->rollback_transaction();
          $dbw->free_result();
          return false;
       }

       $usrid = $dbw->field_by_name("ID");
      if($cmanager)
      {
        unset($company_data["ENCODED"]);
        if(!$cmanager->checkDoublet($usrid, $user_data, $company_data))
        {
          $form_info["form_error"] = $form_info["general_error_msg"];
          $dbw->rollback_transaction();
          return false;
        }
      }
     }

    //2. we have to create the order
    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    $confirmed = 0;
    if($settings["confirmation"] == 0)
      $confirmed = 1;
    
    if($_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "POSTFIN_CCARD" || 
       $_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "POSTFIN_OTHERS" ||
       $_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "POSTBANK_CCARD" || 
       $_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "POSTBANK_OTHERS")
    {
      $confirmed = 5;
    }         

    $currency_code = null_if_empty($dbw->escape($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["internal_name"]));
    $sign = null_if_empty($dbw->escape($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"]));
    $rate = null_if_empty($dbw->escape($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"]));
    $order["total_order_price"] = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["order"]["total_order_price"]));
    $order["other"] = null_if_empty($dbw->escape(ifnull($_SESSION["booking"]["step5"]["personal_data"]["other"])));
    $order["sys_order_id"] = null_if_empty($dbw->escape(ifnull($_SESSION["booking"]["step5"]["order"]["sys_order_id"])));
    $lang = null_if_empty($dbw->escape($page_info["lang"]));
    
    $coupon = null_if_empty($dbw->escape(ifnull($_SESSION["booking"]["data"]["coupon"])));

    $payment_type = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]));

    $spec_offer = !empty($_SESSION["booking"]["specoffer_modus"]) ? "1" : "0";

    $query = "INSERT INTO {$prfx}_HTL_ORDER (ENCODED, USER_ID, FIRST_NAME, LAST_NAME, EMAIL, TELEPHONE,
                            SALUTATION, ADRESS, FIRM, CITY, ZIP, COUNTRY, PAYMENT_TYPE,
                            NOTE, ARRIVE_DATE, DEPARTURE_DATE, TOTAL_ORDER_PRICE, ORDER_LANG, CONFIRMED, CURRENCY_SIGN, CURRENCY_CODE, CURRENCY_RATE, ORDER_TM, SYS_ORDER_ID, COUPON)
              VALUES ('$is_encrypted', $usrid, $personal_data[first_name], $personal_data[last_name], $personal_data[email], $personal_data[telephone],
                        $personal_data[title], $personal_data[address], $personal_data[firm], $personal_data[ort], $personal_data[zip], $personal_data[land], $payment_type,
              $order[other], $arrive_date, $departure_date, $order[total_order_price], $lang, $confirmed, $sign, $currency_code, $rate, '$now', $order[sys_order_id], $coupon)";

    if(!$dbw->execute_query($query))
    {
       $ERROR = text("ErrQueryFailed");
       $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                      $dbw->get_last_query();

       $dbw->rollback_transaction();
       return false;
    }

    $order_id = $dbw->insert_id();
    
    $_SESSION["booking"]["step5"]["personal_data"]["order_id"] = $order_id;
    $_SESSION["booking"]["step5"]["personal_data"]["total_order_price"] = $_SESSION["booking"]["step5"]["order"]["total_order_price"];

    if($_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "STRIPE")
    {
      $stripe_err = "";
      if(!$this->process_stripe_paymment($dbw, $order_id, $page_info, $settings, $stripe_err))
      {
        $dbw->rollback_transaction();
        $_SESSION["booking"]["error"] = $stripe_err;
        return false;
      }
    }
    
    $counters = array();

    foreach($_SESSION["booking"]["step5"]["order"]["rooms"] as $room_id => $rooms)
    {
      // if special offer modus is used, $room_id is special offer id

      if(!empty($_SESSION["booking"]["specoffer_modus"]))
      {
        $special_offer_id = $room_id;
        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$room_id]["room_id"];
      }
      
      $discount_value = "NULL";
      $discount_comment = null_if_empty($dbw->escape(ifnull($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["spec_discount_comment"])));
      
      $rate_plan_id = "NULL";
      if(!empty($_SESSION["booking"]["step2"]["selected_plans"][$room_id]))
      {
        $rate_plan_id = $_SESSION["booking"]["step2"]["selected_plans"][$room_id];
      }
      
      if($spec_offer)
      {
        $discount_value = "NULL";
        $discount_comment = "NULL";        
      }
      
      if(empty($counters[$room_id])) $counters[$room_id] = 0;

      foreach($rooms as $i => $room)
      {
        $id = $dbw->escape($room_id);
        $persons_count = $dbw->escape($room["persons_count"]);
        $adults_count = $dbw->escape($room["adults_count"]);
        $children_count = $dbw->escape($room["children_count"]);

        $guest_names = null_if_empty($dbw->escape($room["guest_names"]));

        $total_price = null_if_empty($dbw->escape($room["total_price"]));
        
        $counter = $counters[$room_id]++;
        
        $special_offer_id_db = ifnull($special_offer_id);
        if(empty($special_offer_id_db)) $special_offer_id_db = "NULL";

        $query = "INSERT INTO {$prfx}_HTL_ORDER_PROP (ORDER_ID, ROOM_COUNTER, ROOM_ID, PERSONS_COUNT, ADULTS_COUNT, CHILDREN_COUNT, GUEST_NAMES, TOTAL_PRICE, SPEC_OFFER, DISCOUNT_COMMENT, DISCOUNT_VALUE, SPEC_OFFER_ID, RATE_PLAN_ID)
                  VALUES ($order_id, $counter, $id, $persons_count, $adults_count, $children_count, $guest_names, $total_price, '$spec_offer', $discount_comment, $discount_value, $special_offer_id_db, $rate_plan_id)";

        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           $dbw->rollback_transaction();
           return false;
        }

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          // single geusts
          if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$special_offer_id][$i]))
          {
            foreach($_SESSION["booking"]["step5"]["order"]["guest_names"][$special_offer_id][$i] as $guest_info)
            {
              $is_adult = empty($guest_info["yo"]) ? "1" : "0";
              $age = empty($guest_info["yo"]) ? "NULL" : $dbw->escape($guest_info["yo"]);
              $name = null_if_empty($dbw->escape($guest_info["name"]));

              $query = "INSERT INTO {$prfx}_HTL_ORDER_GUESTS (ORDER_ID, GUEST_NAME, GUEST_AGE, IS_ADULT, ROOM_ID, ROOM_COUNTER)
                        VALUES ($order_id, $name, $age, '$is_adult', $room_id, $i)";

              if(!$dbw->execute_query($query))
              {
                 $ERROR = text("ErrQueryFailed");
                 $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                                $dbw->get_last_query();

                 $dbw->rollback_transaction();
                 return false;
              }
            }
          }

          foreach($_SESSION["booking"]["step2_1"]["selected_persons"][$special_offer_id] as $i => $persons)
          {
            $so_nights = $_SESSION["booking"]["step1"]["available_spec_offers"][$special_offer_id]["nights_count"];

            $counter = 0;

            foreach($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["dates"] as $date => $pinfo)
            {
              if($counter >= $so_nights) break;
              $counter++;
              
              $day_price = $_SESSION["booking"]["step1"]["available_spec_offers"][$special_offer_id]["price"]/$so_nights;

              $day_price = $dbw->escape($day_price);

              $dt = $dbw->format_date(strtotime($date));

              $query = "INSERT INTO {$prfx}_HTL_ORDER_PRICES (ORDER_ID, PRICE, DT, ROOM_ID, ROOM_COUNTER)
                        VALUES ($order_id, $day_price, '$dt', $room_id, $i)";

              if(!$dbw->execute_query($query))
              {
                 $ERROR = text("ErrQueryFailed");
                 $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                                $dbw->get_last_query();

                 $dbw->rollback_transaction();
                 return false;
              }
            }
          }
        }
        else
        {
          // single geusts
          if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i]))
          {
            foreach($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i] as $guest_info)
            {
              $is_adult = empty($guest_info["yo"]) ? "1" : "0";
              $age = empty($guest_info["yo"]) ? "NULL" : $dbw->escape($guest_info["yo"]);
              $name = null_if_empty($dbw->escape($guest_info["name"]));

              $query = "INSERT INTO {$prfx}_HTL_ORDER_GUESTS (ORDER_ID, GUEST_NAME, GUEST_AGE, IS_ADULT, ROOM_ID, ROOM_COUNTER)
                        VALUES ($order_id, $name, $age, '$is_adult', $room_id, $i)";

              if(!$dbw->execute_query($query))
              {
                 $ERROR = text("ErrQueryFailed");
                 $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                                $dbw->get_last_query();

                 $dbw->rollback_transaction();
                 return false;
              }
            }
          } // if guests

          foreach($_SESSION["booking"]["step2_1"]["selected_persons"][$room_id] as $i => $persons)
          {
            $nights = $_SESSION["booking"]["data"]["nights"];

            $counter = 0;
            
            foreach($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["dates"] as $date => $pinfo)
            {
              if($counter >= $nights) break;
              $counter++;
              
              $day_price = 0;

              if($persons["persons_count"] == 'adult')
              {
                $day_price += $pinfo["price_adult"];
              }
              if($persons["persons_count"] == 'adult2')
              {
                $day_price += $pinfo["price_adult2"];
              }
              if($persons["persons_count"] == 'adult3')
              {
                $day_price += $pinfo["price_adult3"];
              }
              if($persons["persons_count"] == 'adult4')
              {
                $day_price += $pinfo["price_adult4"];
              }
              if($persons["persons_count"] == 'child')
              {
                $day_price += $pinfo["price_child"];
              }
              if($persons["persons_count"] == 'child2')
              {
                $day_price += $pinfo["price_child2"];
              }

              if($persons["persons_count"] == 'adult_child')
              {
                $day_price += $pinfo["price_adult_child"];
              }
              if($persons["persons_count"] == 'adult_child2')
              {
                $day_price += $pinfo["price_adult_child2"];
              }
              if($persons["persons_count"] == 'adult_child3')
              {
                $day_price += $pinfo["price_adult_child3"];
              }
              if($persons["persons_count"] == 'adult_child4')
              {
                $day_price += $pinfo["price_adult_child4"];
              }


              if(isset($persons["add_adult"]) && $persons["add_adult"] != 0)
              {
                $day_price += $pinfo["price_add_adult"];
              }

              if(isset($persons["add_child"]) && $persons["add_child"] != 0)
              {
                $day_price += $pinfo["price_add_child"];
              }
              if(isset($persons["add_child2"]) && $persons["add_child2"] != 0)
              {
                $day_price += $pinfo["price_add_child2"];
              }
              if(isset($persons["add_child3"]) && $persons["add_child3"] != 0)
              {
                $day_price += $pinfo["price_add_child3"];
              }
              if(isset($persons["add_child4"]) && $persons["add_child4"] != 0)
              {
                $day_price += $pinfo["price_add_child4"];
              }

              $day_price = $dbw->escape($day_price);

              $dt = $dbw->format_date(strtotime($date));

              $query = "INSERT INTO {$prfx}_HTL_ORDER_PRICES (ORDER_ID, PRICE, DT, ROOM_ID, ROOM_COUNTER)
                        VALUES ($order_id, $day_price, '$dt', $room_id, $i)";

              if(!$dbw->execute_query($query))
              {
                 $ERROR = text("ErrQueryFailed");
                 $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                                $dbw->get_last_query();

                 $dbw->rollback_transaction();
                 return false;
              }
            }
          }
        } // if special offer or not
      } // for each room of the current type
    } // for each room type

    $rate = ifnull($_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"]);
    if(empty($rate)) $rate = 1;

    //additional services
    if(!empty($_SESSION["booking"]["step5"]["order"]["additional_services"]))
    {
      foreach($_SESSION["booking"]["step5"]["order"]["additional_services"] as $service_id => $amount)
      {
        if(empty($amount))
          continue;

        $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];
        $total_price = 0;

        switch($service["calculate_type"])
        {
          case 3:
            $total_price = $service["price"];
          break;

          case 4:
            $total_price = $service["price"]*$service["room_factor"];
          break;

          case 5:
            if($service["child_discount_flag"] == 0)
            {
              $total_price = $service["child_discount"];
            }
            else
            {
              $total_price = $service["child_discount"]*$_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"]/100;
            }
          break;

          case 0:
            $persons = $_SESSION["booking"]["data"]["persons"];
            $adults = $_SESSION["booking"]["data"]["adults"];
            $children = $_SESSION["booking"]["data"]["children"];
            $nights = $_SESSION["booking"]["data"]["nights"];

            $total_price = $service["price"]*$adults*$nights + $service["children_price"]*$children*$nights;
          break;

          case 1:
            $total_price = $service["price"]*$amount;
          break;

          case 2:
            $nights = $_SESSION["booking"]["data"]["nights"];
            $total_price = $service["price"]*$amount*$nights;
          break;
        }

        $serv_id = $dbw->escape($service_id);
        $count = $dbw->escape($amount);
        $total_price = $dbw->escape($total_price);
        $price_interpretation = null_if_empty(ifnull($_SESSION["booking"]["price_interpretations"][$service_id]));

        $query = "INSERT INTO {$prfx}_HTL_ORDER_SERVICES (ORDER_ID, SERVICE_ID, AMOUNT, TOTAL_PRICE, PRICE_INTERPRETATION)
                  VALUES ($order_id, $serv_id, $count, $total_price, $price_interpretation)";

        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           $dbw->rollback_transaction();
           return false;
        }

        if($service["calculate_type"] != 5) continue;

        $coupon = ifnull($_SESSION["booking"]["step3_1"]["selected_services_coupon"][$service_id]);
        if(empty($coupon)) continue;

        $used_coupons = $service["used_coupons"];

        if(strpos($used_coupons, $coupon) === false)
        {
          $used_coupons .= "\n" . $coupon;
        }

        $used_coupons = $dbw->escape($used_coupons);

        $query = "UPDATE {$prfx}_HTL_EXTRA_SERVICES SET USED_COUPONS = '$used_coupons' WHERE ID = $service_id";

        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           $dbw->rollback_transaction();
           return false;
        }
      }
    }

    //we have to reduce the room count
    $days = round(($departure_time - $arrive_time)/(60*60*24));
    $dates = array();
    $arrive_date = date('Y-m-d', $arrive_time);
    $date = explode("-", $arrive_date);

    // 1 less because the last day is not counted
    for($i = 0; $i < $days; $i++)
    {
      $dates[] = mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]);
    }

    foreach($_SESSION["booking"]["step5"]["order"]["rooms"] as $room_id => $rooms)
    {
      if(!empty($_SESSION["booking"]["specoffer_modus"]))
      {
        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$room_id]["room_id"];
      }

      foreach($dates as $time)
      {
        $date = null_if_empty($dbw->format_date($time));

        $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           $dbw->rollback_transaction();
           return false;
        }

        while($dbw->fetch_row())
        {
          $room_count = $dbw->field_by_name("ROOM_COUNT");
        }

        $dbw->free_result();

        $room_count -= count($rooms);

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY
                  SET ROOM_COUNT = $room_count
                  WHERE DATE = $date AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           $dbw->rollback_transaction();
           return false;
        }

      }//foreach
    }//foreach

    if($_SESSION["booking"]["step5"]["personal_data"]["payment_type"] != "RECONLINE_CREDIT_CARD" &&
       !(!empty($settings["htspider4_push_reservations"]) && 
         !empty($settings["htspider4_push_credicards"]) && 
         ($_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "CREDIT_CARD" || $_SESSION["booking"]["step5"]["personal_data"]["payment_type"] == "BILL_CC"))
      )
    {
      //payment data
      $payment_data = array();
      $payment_data["creditcart_type"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_type"], 1)));
      $payment_data["creditcart_number"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_number"], 1)));
      $payment_data["creditcart_owner"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_owner"], 1)));
      $payment_data["creditcart_date"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_date"], 1)));
      $payment_data["creditcart_cvv"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_cvv"], 1)));

      $payment_data["account_number"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["account_number"], 1)));
      $payment_data["account_owner"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["account_owner"], 1)));
      $payment_data["bank_id"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["bank_id"], 1)));
      $payment_data["bank_name"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["bank_name"], 1)));

      $now = null_if_empty($dbw->format_date(time()));
      $query = "INSERT INTO {$prfx}_HTL_PAYMENT_DATA (ENCODED, ORDER_ID, USER_ID, CARD_TYPE, CARD_NUMBER, CARD_HOLDER, CARD_DATE, CARD_CVV, DATE,
                PAYMENT_TYPE, DD_ACCOUNT_NUMBER, DD_ACCOUNT_OWNER, DD_BANK_ID, DD_BANK_NAME)
                VALUES (1, $order_id, $usrid, $payment_data[creditcart_type], $payment_data[creditcart_number], $payment_data[creditcart_owner], $payment_data[creditcart_date], $payment_data[creditcart_cvv], $now,
                $payment_type, $payment_data[account_number], $payment_data[account_owner], $payment_data[bank_id], $payment_data[bank_name])";
      if(!$dbw->execute_query($query))
      {
         $ERROR = text("ErrQueryFailed");
         $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                        $dbw->get_last_query();

         $dbw->rollback_transaction();
         return false;
      }
    }
    else
    {
    }

    //commit
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    //send email notifications

    //Notification to admin about new bookng
    $this->send_email_notification(1, $order_id);

    //Notification to client that booking request was sent
    if($settings["confirmation"] == 1)
    {
      $this->send_email_notification(3, $order_id);
    }
    // awiting payment is equal to not confirmed
    elseif($confirmed == 4)
    {
      $this->send_email_notification(3, $order_id);
    }
    else
    {
      // push possibile reservations if without confirmation
      $this->push_reservation_info($order_id, "reservation");

      $this->send_email_notification(5, $order_id);
    }

    return true;
  } // process_order
  //-----------------------------------------------------------------

  private function fetch_additional_services(&$page_info, &$additional_services, $rate, &$settings)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_id = $dbw->escape($page_info["langid"]);

    $sub_appendix = "";
    $appendix = "";
    if(!empty($_SESSION["booking"]["specoffer_modus"]))
    {
      $sub_appendix .= " AND ({$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION IS NULL OR {$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION = 'special_offer')";
    }
    else
    {
      $sub_appendix .= " AND ({$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION IS NULL OR {$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION = 'normal_booking')";
    }

    // collect rooms
    $service_room_mapping = array();
    $service_room_factors = array();

    $query = "SELECT SERVICE_ID, ROOM_ID
              FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS
              WHERE 1 = 1 $sub_appendix
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $service_room_mapping[$dbw->field_by_name("ROOM_ID")][] = $dbw->field_by_name("SERVICE_ID");
    }

    $dbw->free_result();

    $selected_rooms = "";
    if(!empty($_SESSION["booking"]["step2"]["selected_rooms"]))
    {
      foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $rid => $cnt)
      {
        if(empty($cnt)) continue;

        $selected_rooms .= $rid . ",";

        if(empty($service_room_mapping[$rid])) continue;

        foreach($service_room_mapping[$rid] as $sid)
        {
          if(empty($service_room_factors[$sid])) $service_room_factors[$sid] = 0;

          $service_room_factors[$sid] += $cnt;
        }
      }
    }

    $selected_rooms = trim($selected_rooms, ", ");
    if(empty($selected_rooms)) $selected_rooms = "NULL";
    
    
    
    // in the case of so, the idas are offer ids
    if(!empty($_SESSION["booking"]["specoffer_modus"]))
    {
      $selected_rooms = "SELECT ROOM_ID FROM {$prfx}_HTL_SPECIAL_OFFER WHERE ID IN ($selected_rooms)";
    }

    $appendix = " AND (CALCULATE_TYPE = '5' OR 
                       ID IN (SELECT SERVICE_ID FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS WHERE ROOM_ID IN ($selected_rooms) $sub_appendix) OR
                       ID IN (SELECT ID FROM {$prfx}_HTL_EXTRA_SERVICES WHERE MANDATORY = 0 AND ID NOT IN (SELECT SERVICE_ID FROM {$prfx}_HTL_EXTRA_SERVICES_ROOMS)))";

    $query = "SELECT ID, TITLE, CAPTION, COMMENT, PRICE, CALCULATE_TYPE, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT,
              PERSON_MANDATORY, COUPONS, USED_COUPONS, COUPON_ONE_TIME
              FROM {$prfx}_HTL_EXTRA_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON (ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID)
              WHERE LANG_ID = $lang_id AND IS_ACTIVE = 1 AND MANDATORY = 0
              $appendix
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $sid = $dbw->field_by_name("ID");

      $child_discount = $dbw->field_by_name("CHILD_DISCOUNT");
      $price = $dbw->field_by_name("PRICE");
      $children_price = $dbw->field_by_name("PRICE");
      $child_discount_flag = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
      if($child_discount_flag == 1)
      {
        $children_price = $price - $price*$child_discount/100;
      }
      else
      {
        $children_price = $price - $child_discount;
      }
      
      //$price = aux_calc_round_price($price, $rate, $settings);
      //$children_price = aux_calc_round_price($children_price, $rate, $settings);
      
      // do not round additional services over special way, ask form Martin 
      
      $price = round($price*$rate, 2);
      $children_price = round($children_price*$rate, 2);
      
      // ccc
      $additional_services[$sid] = array("title" => $dbw->field_by_name("TITLE"),
                                        "caption" =>$dbw->field_by_name("CAPTION"),
                                        "comment" =>$dbw->field_by_name("COMMENT"),
                                        "person_mandatory" => $dbw->field_by_name("PERSON_MANDATORY"),
                                        "price" => $price,
                                        "children_price" => $children_price,
                                        "calculate_type" =>$dbw->field_by_name("CALCULATE_TYPE"),
                                        "child_discount_flag" => $child_discount_flag,
                                        "child_discount" => $child_discount,
                                        "coupons" =>$dbw->field_by_name("COUPONS"),
                                        "used_coupons" =>$dbw->field_by_name("USED_COUPONS"),
                                        "coupon_one_time" =>$dbw->field_by_name("COUPON_ONE_TIME"),
                                        "room_factor" => ifnull($service_room_factors[$sid])
                                        );
    }

    $dbw->free_result();

    //debug_message(print_r($additional_services, true));
  } // fetch_additional_services
  //-----------------------------------------------------------------
  public function get_ext_service_manager(&$page_info, &$settings)
  {
    if(empty($settings["external_service"])) return null;

    if($settings["external_service"] == "RECONLINE")
    {
      $parameters = array("URL" => $settings["reconline_service_address"],
                          "LOGIN" => $settings["reconline_user"],
                          "PASSWORD" => $settings["reconline_password"],
                          "LANGUAGE" => strtoupper($page_info["lang"]),
                          "HOTEL_ID" => $settings["reconline_hotel_id"],
                          "RECONLINE_SUBMIT_RESERV" => $settings["reconline_submit_reserv"],
                          "RECONLINE_BOOK_URL" => $settings["reconline_book_url"]
                         );

      $reconline_manager = HotelServiceManager::instance("RECONLINEHotelServiceManager");
      if(!$reconline_manager)
      {
        $_SESSION["booking"]["error"] = HotelServiceManager::$last_error;
        return null;
      }

      $reconline_manager->init($parameters);

      return $reconline_manager;
    }

    return null;
  } // get_ext_service_manager()
  //-----------------------------------------------------------------
  public function need_roomtype_filter()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT DISTINCT ROOM_TYPE FROM {$prfx}_HTL_ROOMS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $room_types = array();

    while($dbw->fetch_row())
    {
      $room_types[$dbw->field_by_name("ROOM_TYPE")] = 1;
    }

    $dbw->free_result();

    return (count($room_types) > 1);
  }

  //-----------------------------------------------------------------
  public function get_min_room_price(&$room)
  {
    $price = 100000000;
    
    if(!empty($room["average_price_adult"]) && $room["average_price_adult"] < $price) $price = $room["average_price_adult"];

    if(ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
    {
      if(!empty($room["average_price_adult2"]) && $room["average_price_adult2"] < $price) $price = $room["average_price_adult2"];
      if(!empty($room["average_price_adult3"]) && $room["average_price_adult3"] < $price) $price = $room["average_price_adult3"];
      if(!empty($room["average_price_adult4"]) && $room["average_price_adult4"] < $price) $price = $room["average_price_adult4"];

      if(!empty($room["average_price_adult_child"]) && $room["average_price_adult_child"] < $price) $price = $room["average_price_adult_child"];
      if(!empty($room["average_price_adult_child2"]) && $room["average_price_adult_child2"] < $price) $price = $room["average_price_adult_child2"];
      if(!empty($room["average_price_adult_child3"]) && $room["average_price_adult_child3"] < $price) $price = $room["average_price_adult_child3"];
      if(!empty($room["average_price_adult_child4"]) && $room["average_price_adult_child4"] < $price) $price = $room["average_price_adult_child4"];
    }
    
    if($price == 100000000) $price = 0;
    
    return $price;
  } // get_min_room_price
  //-----------------------------------------------------------------
  function calculate_alt_room_prices(&$room, &$pinfo, $arrive_date, $departure_date, $rate, &$settings)
  {
    $PRICE_INDEXES = array(
        "price_child",
        "price_child2",
        "price_adult",
        "price_adult2",
        "price_adult3",
        "price_adult4",
        "price_adult_child",
        "price_adult_child2",
        "price_adult_child3",
        "price_adult_child4",
        "price_add_adult",
        "price_add_child",
        "price_add_child2",
        "price_add_child3",
        "price_add_child4"
    );
    
    $PRICE_ADD_INDEXES = array(
        "price_add_adult",
        "price_add_child",
        "price_add_child2",
        "price_add_child3",
        "price_add_child4"
    );

    $total_price = 0;
    
    $arrive_time = strtotime($arrive_date);
    $departure_time = strtotime($departure_date);

    $now = mktime(0, 0, 0);
    $days_between = round(($arrive_time - $now)/(60*60*24));
    
    $nights = round(($departure_time - $arrive_time)/(60*60*24));
    
    $std_price = "price_adult" . trim($room["standard_allocation"], "1");

    if(!empty($room["dates"]))
    foreach($room["dates"] as $day => &$rm)
    {
      if(strtotime($day) == $departure_time)
        continue;
      
      foreach($PRICE_INDEXES as $prindex)
      {
        if(isset($rm[$prindex]) && $rm[$prindex] !== "") 
        {
          if(empty($pinfo["room_avg_price"][$prindex])) $pinfo["room_avg_price"][$prindex] = 0;
          
          if(!empty($pinfo["only_main"]) && in_array($prindex, $PRICE_ADD_INDEXES))
          {
            $pinfo["room_price"][$day][$prindex] = $rm[$prindex];
          }
          else
          {
            if(empty($pinfo["advanced_price_mode"]))
            {
              $pinfo["room_price"][$day][$prindex] = !empty($pinfo["is_absolute"]) ? ($rm[$prindex] + $pinfo["val"]) : ($rm[$prindex] + $rm[$prindex]*$pinfo["val"]/100.0);
            }
            else
            {
              $wd = date("N", strtotime($day));
              $pinfo["room_price"][$day][$prindex] = $rm[$prindex] + $rm[$prindex]*$pinfo["wd_values"][$wd]/100.0;
            }
            
            // we do not need to take rate, we need only to round
            $pinfo["room_price"][$day][$prindex] = aux_calc_round_price($pinfo["room_price"][$day][$prindex], 1, $settings);
          }
          
          if($pinfo["room_price"][$day][$prindex] < 0) $pinfo["room_price"][$day][$prindex] = 0;
          
          $pinfo["room_avg_price"][$prindex] += $pinfo["room_price"][$day][$prindex]/$nights;
          
          if($std_price == $prindex)
          {
            $total_price += $pinfo["room_price"][$day][$prindex];
          }
        }
      }  
    }
    
    return $total_price;
  } // calculate_alt_room_prices
  //-----------------------------------------------------------------
  function check_coupon_used()
  {
    if(empty($_SESSION["booking"]["data"]["coupon"])) return true;
    
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $coupon = $dbw->escape($_SESSION["booking"]["data"]["coupon"]);
    
    $query = "SELECT 1 FROM {$prfx}_HTL_ORDER WHERE COUPON = '$coupon'";
    
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $_SESSION["booking"]["data"]["coupon_used"] = false;
    if($dbw->fetch_row())
    {
      $_SESSION["booking"]["data"]["coupon_used"] = true;
    }

    $dbw->free_result();
    
    return true;
  }
  //-----------------------------------------------------------------
  public function get_room_rate_plans(&$page_info, $room_id, &$room, $arrive_date, $departure_date, $rate, &$settings)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $PRICE_INDEXES = array(
        "price_child",
        "price_child2",
        "price_adult",
        "price_adult2",
        "price_adult3",
        "price_adult4",
        "price_adult_child",
        "price_adult_child2",
        "price_adult_child3",
        "price_adult_child4",
        "price_add_adult",
        "price_add_child",
        "price_add_child2",
        "price_add_child3",
        "price_add_child4"
    );
    
    $PRICE_ADD_INDEXES = array(
        "price_add_adult",
        "price_add_child",
        "price_add_child2",
        "price_add_child3",
        "price_add_child4"
    );

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $arrive_time = strtotime($arrive_date);
    $departure_time = strtotime($departure_date);

    $now = mktime(0, 0, 0);
    $days_between = round(($arrive_time - $now)/(60*60*24));
    
    $nights = round(($departure_time - $arrive_time)/(60*60*24));

    $lang_id = $dbw->escape($page_info["langid"]);
    
    $arrive_date_db = null_if_empty($dbw->escape($dbw->format_date($arrive_time)));
    $departure_date_db = null_if_empty($dbw->escape($dbw->format_date($departure_time)));
    
    $uid = $dbw->escape($_SESSION["user_id"]);
    if(empty($uid)) $uid = "NULL";

    $query = "SELECT ID, NAME, INFO, ADDINFO, ADVANCED_PRICE_MODE, IS_ABSOLUTE, APPLY_ONLY_MAIN_PRICES, VAL,
                             PAYMENT_DIRECT_DEBIT,
                             PAYMENT_CCARD,
                             PAYMENT_BILL,
                             PAYMENT_BILL_CC,
                             PAYMENT_STRIPE,
                             PAYMENT_POSTFIN_CCARD,
                             PAYMENT_POSTFIN_OTHERS,
                             PAYMENT_POSTBANK_CCARD,
                             PAYMENT_POSTBANK_OTHERS,
                             MULTIPLE_COUPONS,
                             COUPONS,
                             TP
                FROM {$prfx}_HTL_RATE_PLAN
                INNER JOIN {$prfx}_HTL_RATE_PLAN_INFO ON ({$prfx}_HTL_RATE_PLAN.ID = {$prfx}_HTL_RATE_PLAN_INFO.RATE_PLAN_ID AND {$prfx}_HTL_RATE_PLAN_INFO.LANGUAGE_ID = $lang_id)
                WHERE 
                {$prfx}_HTL_RATE_PLAN.IS_ACTIVE = '1' AND {$prfx}_HTL_RATE_PLAN_INFO.IS_ACTIVE = '1'
                AND 
                ID IN (SELECT RATEPLAN_ID FROM {$prfx}_HTL_RATE_PLAN_ROOM WHERE ROOM_ID = $room_id)
                AND
                (FROM_DATE IS NULL OR $arrive_date_db >= FROM_DATE)
                AND
                (TO_DATE IS NULL OR $departure_date_db <= TO_DATE)
                AND
                (DURATION_FROM IS NULL OR $nights >= DURATION_FROM)
                AND
                (DURATION_TO IS NULL OR $nights <= DURATION_TO)
                AND
                (
                   (TP = 'regular' AND ID IN (SELECT RATE_PLAN_ID FROM {$prfx}_HTL_RATE_PLAN_GROUP WHERE GROUP_ID IN (SELECT GROUP_ID FROM {$prfx}_USER_GROUP WHERE USER_ID = $uid)))
                   OR
                   (TP = 'earlybird' AND $days_between >= DAY_INTERVAL)
                   OR 
                   (TP = 'lastminute' AND $days_between <= DAY_INTERVAL)
                   OR 
                   (TP = 'longstay' AND $nights >= DAY_INTERVAL)
                   OR
                    (TP = 'coupon')
                )   
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $alt_rate_plans = array();
    
    while($dbw->fetch_row())
    {
      $coupon = "";
      
      $caption = $dbw->field_by_name("INFO");
      if(empty($caption)) $caption = $dbw->field_by_name("NAME");
      
      if($dbw->field_by_name("TP") == "coupon")
      {
        $coupons = preg_split('/[\s,]+/', $dbw->field_by_name("COUPONS"), -1, PREG_SPLIT_NO_EMPTY);
        
        if(empty($_SESSION["booking"]["data"]["coupon"]) || !in_array($_SESSION["booking"]["data"]["coupon"], $coupons)) continue;
        
        $coupon = $_SESSION["booking"]["data"]["coupon"];
        
        $_SESSION["booking"]["data"]["coupon_found"] = true;
        $_SESSION["booking"]["data"]["coupon_multiple"] = $dbw->field_by_name("MULTIPLE_COUPONS");
        
        $caption .= " (" . hotel::$words["Coupon"][$_SESSION["ulang"]] . ": " . $coupon . ")";
      }
      
      $payments = array();
      
      if($dbw->field_by_name("PAYMENT_DIRECT_DEBIT")) $payments[] = "DIRECT_DEBIT"; 
      if($dbw->field_by_name("PAYMENT_CCARD")) $payments[] = "CREDIT_CARD"; 
      if($dbw->field_by_name("PAYMENT_BILL")) $payments[] = "BILL"; 
      if($dbw->field_by_name("PAYMENT_BILL_CC")) $payments[] = "BILL_CC"; 
      if($dbw->field_by_name("PAYMENT_BILL_CC")) $payments[] = "STRIPE"; 
      if($dbw->field_by_name("PAYMENT_POSTFIN_CCARD")) $payments[] = "POSTFIN_CCARD"; 
      if($dbw->field_by_name("PAYMENT_POSTFIN_OTHERS")) $payments[] = "POSTFIN_OTHERS"; 
      if($dbw->field_by_name("PAYMENT_POSTBANK_CCARD")) $payments[] = "POSTBANK_CCARD"; 
      if($dbw->field_by_name("PAYMENT_POSTBANK_OTHERS")) $payments[] = "POSTBANK_OTHERS"; 
      
      $alt_rate_plans[$dbw->field_by_name("ID")] = array("caption" => $caption,
                                                         "tp" => $dbw->field_by_name("TP"),
                                                         "addinfo" => $dbw->field_by_name("ADDINFO"),
                                                         "advanced_price_mode" => $dbw->field_by_name("ADVANCED_PRICE_MODE"),
                                                         "is_absolute" => $dbw->field_by_name("IS_ABSOLUTE"),
                                                         "only_main" => $dbw->field_by_name("APPLY_ONLY_MAIN_PRICES"),
                                                         "val" => $dbw->field_by_name("VAL"),
                                                         "coupon" => $coupon,
                                                         "payments" => $payments
                                                        );
    }

    $dbw->free_result();
    
    // advanced prices
    
    $plan_ids = implode(",", array_keys($alt_rate_plans));
    if(empty($plan_ids)) $plan_ids = "NULL";
    
    $query = "SELECT RATEPLAN_ID, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID IN ($plan_ids) AND DTYPE = 'A'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][1] = $dbw->field_by_name("VAL1");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][2] = $dbw->field_by_name("VAL2");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][3] = $dbw->field_by_name("VAL3");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][4] = $dbw->field_by_name("VAL4");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][5] = $dbw->field_by_name("VAL5");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][6] = $dbw->field_by_name("VAL6");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][7] = $dbw->field_by_name("VAL7");
    }

    $dbw->free_result();
    
    // override the values if there are additional prices due to last minute or early bird
    
    $query = "SELECT RATEPLAN_ID, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID IN ($plan_ids) AND DTYPE = 'EBLM' AND $days_between BETWEEN DAYS_MIN AND DAYS_MAX
              ";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][1] = $dbw->field_by_name("VAL1");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][2] = $dbw->field_by_name("VAL2");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][3] = $dbw->field_by_name("VAL3");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][4] = $dbw->field_by_name("VAL4");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][5] = $dbw->field_by_name("VAL5");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][6] = $dbw->field_by_name("VAL6");
      $alt_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][7] = $dbw->field_by_name("VAL7");
    }

    $dbw->free_result();
    
    $defaul_min_price = $this->get_min_room_price($room);

    $alt_plan = "";
    $std_price = "average_price_adult" . trim($room["standard_allocation"], "1");
    $min_price = $room[$std_price]*$nights;
    
    foreach($alt_rate_plans as $pid => &$pinfo)
    {
      //$curr_price = empty($pinfo["is_absolute"]) ? ($room[$std_price] + $pinfo["val"]) : round($room[$std_price] + $room[$std_price]*($pinfo["val"]/100.0), 2);
      $curr_price = $this->calculate_alt_room_prices($room, $pinfo, $arrive_date, $departure_date, $rate, $settings);
      
      if($curr_price < 0) $curr_price = 0;
      
      if($curr_price < $min_price)
      {
        $alt_plan = $pid;
        $min_price = $curr_price;
      }
    }
    
    if(!empty($alt_plan))
    {
      $pinfo = $alt_rate_plans[$alt_plan];
      
      $room["alt_plan_active"] = true;
      $room["alt_plan_id"] = $alt_plan;
      $room["alt_plan_tp"] = $pinfo["tp"];
      $room["spec_discount_comment"] = $pinfo["caption"];
      $room["addinfo"] = $pinfo["addinfo"];
      $room["restrict_payments"] = $pinfo["payments"];
      $room["coupon"] = $pinfo["coupon"];
      
      foreach($PRICE_INDEXES as $prindex)
      {
        if(!empty($room["average_$prindex"])) 
        {
          $room["default_plan"]["average_$prindex"] = $room["average_$prindex"];
          
          $room["average_$prindex"] = $pinfo["room_avg_price"][$prindex];
        }
      }
      
      if(!empty($room["dates"]))
      foreach($room["dates"] as $day => &$rm)
      {
        if(strtotime($day) == $departure_time)
          continue;

        foreach($PRICE_INDEXES as $prindex)
        {
          if(!empty($rm[$prindex])) 
          {
            $room["default_plan"]["dates"][$day][$prindex] = $rm[$prindex];
            
            $rm[$prindex] = $pinfo["room_price"][$day][$prindex];
          }
        }  
      }
    }
    elseif(!empty($room["std_tarif_caption"]))
    {
      $room["spec_discount_comment"] = $room["std_tarif_caption"];
    }
    else
    {
      $room["spec_discount_comment"] = hotel::$words["StandardTarif"][$_SESSION["ulang"]];
    }
    
    // info comments
    
    $query = "SELECT ID, NAME, INFO, IS_ABSOLUTE, VAL, DAY_INTERVAL, TP
                FROM {$prfx}_HTL_RATE_PLAN
                INNER JOIN {$prfx}_HTL_RATE_PLAN_INFO ON ({$prfx}_HTL_RATE_PLAN.ID = {$prfx}_HTL_RATE_PLAN_INFO.RATE_PLAN_ID AND {$prfx}_HTL_RATE_PLAN_INFO.LANGUAGE_ID = $lang_id)
                WHERE 
                {$prfx}_HTL_RATE_PLAN.IS_ACTIVE = '1' AND {$prfx}_HTL_RATE_PLAN_INFO.IS_ACTIVE = '1'
                AND 
                ID IN (SELECT RATEPLAN_ID FROM {$prfx}_HTL_RATE_PLAN_ROOM WHERE ROOM_ID = $room_id)
                AND
                (FROM_DATE IS NULL OR $arrive_date_db >= FROM_DATE)
                AND
                (TO_DATE IS NULL OR $departure_date_db <= TO_DATE)
                AND
                (DURATION_FROM IS NULL OR $nights >= DURATION_FROM)
                AND
                (DURATION_TO IS NULL OR $nights <= DURATION_TO)
                AND
                (
                   (TP = 'earlybird' AND $days_between <= DAY_INTERVAL AND $days_between >= INFO_DAY_INTERVAL)
                   OR 
                   (TP = 'lastminute' AND $days_between >= DAY_INTERVAL AND $days_between <= INFO_DAY_INTERVAL)
                   OR 
                   (TP = 'longstay' AND $nights < DAY_INTERVAL AND $nights >= INFO_DAY_INTERVAL)
                   OR
                   (TP = 'coupon')
                )   
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $info_rate_plans = array();
    
    $min_price = $this->get_min_room_price($room);
    
    
    
    $room["rate_comment"] = "";
    
    while($dbw->fetch_row())
    {
      $caption = $dbw->field_by_name("INFO");
      if(empty($caption)) $caption = $dbw->field_by_name("NAME");
      
      $curr_price = $dbw->field_by_name("IS_ABSOLUTE") ? ($defaul_min_price + $dbw->field_by_name("VAL")) : round($defaul_min_price + $defaul_min_price*($dbw->field_by_name("VAL")/100.0), 2);
      if($curr_price < 0) $curr_price = 0;
      
      $comment = "";
      switch($dbw->field_by_name("TP"))
      {
        case "earlybird": $comment =  hotel::$words["EarlyBirdComment"][$_SESSION["ulang"]]; break;
        case "lastminute": $comment =  hotel::$words["LastMinuteComment"][$_SESSION["ulang"]]; break;
        case "longstay": $comment =  hotel::$words["LongStayComment"][$_SESSION["ulang"]]; break;
      }

      $comment = sprintf($comment, $dbw->field_by_name("DAY_INTERVAL"), number_format($curr_price, 2, ",", ""));
      
      $room["rate_comment"] .= escape_html(str_ireplace("{tarif}", $caption, $comment)) . "\n";
    }

    $dbw->free_result();
    
    $room["rate_comment"] = trim($room["rate_comment"]);
    
    // additional rates
    
    $query = "SELECT ID, NAME, INFO, ADDINFO, IS_ABSOLUTE, ADVANCED_PRICE_MODE, APPLY_ONLY_MAIN_PRICES, VAL, TP, APPLY_TO_ALTERNATIVE, FORCE_PLAN,
                             PAYMENT_DIRECT_DEBIT,
                             PAYMENT_CCARD,
                             PAYMENT_BILL,
                             PAYMENT_BILL_CC,
                             PAYMENT_STRIPE,
                             PAYMENT_POSTFIN_CCARD,
                             PAYMENT_POSTFIN_OTHERS,
                             PAYMENT_POSTBANK_CCARD,
                             PAYMENT_POSTBANK_OTHERS,
                             MAX_PERSONS
                FROM {$prfx}_HTL_RATE_PLAN
                INNER JOIN {$prfx}_HTL_RATE_PLAN_INFO ON ({$prfx}_HTL_RATE_PLAN.ID = {$prfx}_HTL_RATE_PLAN_INFO.RATE_PLAN_ID AND {$prfx}_HTL_RATE_PLAN_INFO.LANGUAGE_ID = $lang_id)
                WHERE 
                {$prfx}_HTL_RATE_PLAN.IS_ACTIVE = '1' AND {$prfx}_HTL_RATE_PLAN_INFO.IS_ACTIVE = '1' AND IS_SOFFER = '0'
                AND 
                ID IN (SELECT RATEPLAN_ID FROM {$prfx}_HTL_RATE_PLAN_ROOM WHERE ROOM_ID = $room_id)
                AND
                (FROM_DATE IS NULL OR $arrive_date_db >= FROM_DATE)
                AND
                (TO_DATE IS NULL OR $departure_date_db <= TO_DATE)
                AND
                (DURATION_FROM IS NULL OR $nights >= DURATION_FROM)
                AND
                (DURATION_TO IS NULL OR $nights <= DURATION_TO)
                AND
                TP IN ('additional', 'additionalownprice', 'additionalandservices')
                ORDER BY SORT_ORDER, INFO";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $add_rate_plans = array();
    
    while($dbw->fetch_row())
    {
      $caption = $dbw->field_by_name("INFO");
      if(empty($caption)) $caption = $dbw->field_by_name("NAME");
      
      $payments = array();
      
      if($dbw->field_by_name("PAYMENT_DIRECT_DEBIT")) $payments[] = "DIRECT_DEBIT"; 
      if($dbw->field_by_name("PAYMENT_CCARD")) $payments[] = "CREDIT_CARD"; 
      if($dbw->field_by_name("PAYMENT_BILL")) $payments[] = "BILL"; 
      if($dbw->field_by_name("PAYMENT_BILL_CC")) $payments[] = "BILL_CC"; 
      if($dbw->field_by_name("PAYMENT_STRIPE")) $payments[] = "STRIPE"; 
      if($dbw->field_by_name("PAYMENT_POSTFIN_CCARD")) $payments[] = "POSTFIN_CCARD"; 
      if($dbw->field_by_name("PAYMENT_POSTFIN_OTHERS")) $payments[] = "POSTFIN_OTHERS"; 
      if($dbw->field_by_name("PAYMENT_POSTBANK_CCARD")) $payments[] = "POSTBANK_CCARD"; 
      if($dbw->field_by_name("PAYMENT_POSTBANK_OTHERS")) $payments[] = "POSTBANK_OTHERS"; 
      
      $pid = $dbw->field_by_name("ID");
      $pinfo = array("caption" => $caption,
                                    "addinfo" => $dbw->field_by_name("ADDINFO"),
                                    "tp" => $dbw->field_by_name("TP"),
                                    "is_absolute" => $dbw->field_by_name("IS_ABSOLUTE"),
                                    "advanced_price_mode" => $dbw->field_by_name("ADVANCED_PRICE_MODE"),
                                    "apply_to_alternative" => $dbw->field_by_name("APPLY_TO_ALTERNATIVE"),
                                    
                                    "only_main" => $dbw->field_by_name("APPLY_ONLY_MAIN_PRICES"),
                                    "val" => $dbw->field_by_name("VAL"),
                                    "force_plan" => $dbw->field_by_name("FORCE_PLAN"),
                                    "max_persons" => $dbw->field_by_name("MAX_PERSONS"),
                                    
                                    "payments" => $payments
                                   );
      
      $add_rate_plans[$pid] = $pinfo;
    }

    $dbw->free_result();
    
    // advanced prices
    
    $plan_ids = implode(",", array_keys($add_rate_plans));
    if(empty($plan_ids)) $plan_ids = "NULL";
    
    $query = "SELECT RATEPLAN_ID, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID IN ($plan_ids) AND DTYPE = 'A'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][1] = $dbw->field_by_name("VAL1");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][2] = $dbw->field_by_name("VAL2");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][3] = $dbw->field_by_name("VAL3");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][4] = $dbw->field_by_name("VAL4");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][5] = $dbw->field_by_name("VAL5");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][6] = $dbw->field_by_name("VAL6");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["wd_values"][7] = $dbw->field_by_name("VAL7");
    }

    $dbw->free_result();
    
    $query = "SELECT RATEPLAN_ID, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID IN ($plan_ids) AND DTYPE = 'EBLM' AND $days_between BETWEEN DAYS_MIN AND DAYS_MAX
              ";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $advanced_price_mode = !empty($add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["advanced_price_mode"]);
      
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["1"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL1");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["2"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL2");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["3"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL3");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["4"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL4");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["5"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL5");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["6"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL6");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["eblm_values"]["7"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL7");
    }

    $dbw->free_result();
    
    $query = "SELECT RATEPLAN_ID, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID IN ($plan_ids) AND DTYPE = 'LS' AND $nights BETWEEN DAYS_MIN AND DAYS_MAX
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $advanced_price_mode = !empty($add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["advanced_price_mode"]);

      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["1"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL1");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["2"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL2");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["3"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL3");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["4"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL4");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["5"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL5");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["6"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL6");
      $add_rate_plans[$dbw->field_by_name("RATEPLAN_ID")]["ls_values"]["7"] = $dbw->field_by_name(!$advanced_price_mode ? "VAL0" : "VAL7");
    }

    $dbw->free_result();
    
    foreach($add_rate_plans as $pid => &$pinfo)
    {
      if($pinfo["tp"] == "additionalandservices") 
      {
        // included over rate plan
        $query = "SELECT ID, TITLE, CAPTION, PRICE, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT
                  FROM {$prfx}_HTL_EXTRA_SERVICES
                  INNER JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON (ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID = $lang_id)
                  INNER JOIN {$prfx}_HTL_RATE_PLAN_SERVICE ON (ID = {$prfx}_HTL_RATE_PLAN_SERVICE.SERVICE_ID)
                  WHERE IS_ACTIVE = 1 AND MANDATORY = 1 AND FOR_SOFFER = '1' AND RATE_PLAN_ID = $pid
                  ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }

        while($dbw->fetch_row())
        {
          $child_discount = $dbw->field_by_name("CHILD_DISCOUNT");
          $price = $dbw->field_by_name("PRICE");
          $children_price = $dbw->field_by_name("PRICE");
          $child_discount_flag = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
          if($child_discount_flag == 1)
          {
            $children_price = $price - $price*$child_discount/100;
          }
          else
          {
            $children_price = $price - $child_discount;
          }
          
          $price = aux_calc_round_price($price, $rate, $settings);
          $children_price = aux_calc_round_price($children_price, $rate, $settings);
          
          if(empty($pinfo["service_add_price"]["adult"])) $pinfo["service_add_price"]["adult"] = 0;
          if(empty($pinfo["service_add_price"]["child"])) $pinfo["service_add_price"]["child"] = 0;
          
          $pinfo["service_add_price"]["adult"] += $price;
          $pinfo["service_add_price"]["child"] += $children_price;
          
          $pinfo["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                               "caption" =>$dbw->field_by_name("CAPTION"),
                                                               "price" => $price,
                                                               "children_price" => $children_price,
                                                               "child_discount_flag" => $child_discount_flag,
                                                               "child_discount" => $child_discount
                                                               );
        }
        
        $dbw->free_result();
      }

      if($pinfo["tp"] == "additional" || $pinfo["tp"] == "additionalandservices")        
      {
        $pinfo["price_info"]["room_type"] = $room["room_type"];
        
        if(!empty($room["force_add_child"])) $pinfo["price_info"]["force_add_child"] = $room["force_add_child"];
        if(!empty($room["force_add_child2"])) $pinfo["price_info"]["force_add_child2"] = $room["force_add_child2"];
        if(!empty($room["force_add_child3"])) $pinfo["price_info"]["force_add_child3"] = $room["force_add_child3"];
        if(!empty($room["force_add_child4"])) $pinfo["price_info"]["force_add_child4"] = $room["force_add_child4"];
        
        if(!empty($room["dates"]))
        foreach($room["dates"] as $day => &$rm_prices)
        {
          if(strtotime($day) == $departure_time)
            continue;

          foreach($PRICE_INDEXES as $prindex)
          {
            if(!isset($rm_prices[$prindex]) || $rm_prices[$prindex] === "") continue;
            
            $tmp_price = ifnull($rm_prices[$prindex]);
            if(!empty($room["alt_plan_active"]) && empty($pinfo["apply_to_alternative"])) $tmp_price = ifnull($room["default_plan"]["dates"][$day][$prindex]);
            
            if(empty($tmp_price)) $tmp_price = 0;
            
            if($pinfo["tp"] == "additionalandservices")
            {
              $pinfo["price_info"]["dates"][$day][$prindex] = $tmp_price;
              
              switch($prindex)
              {
                case "price_child": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["child"]; break;
                case "price_child2": $pinfo["price_info"]["dates"][$day][$prindex] += 2*$pinfo["service_add_price"]["child"]; break;
                case "price_adult": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]; break;
                case "price_adult2": $pinfo["price_info"]["dates"][$day][$prindex] += 2*$pinfo["service_add_price"]["adult"]; break;
                case "price_adult3": $pinfo["price_info"]["dates"][$day][$prindex] += 3*$pinfo["service_add_price"]["adult"]; break;
                case "price_adult4": $pinfo["price_info"]["dates"][$day][$prindex] += 4*$pinfo["service_add_price"]["adult"]; break;
                case "price_adult_child": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]+$pinfo["service_add_price"]["child"]; break;
                case "price_adult_child2": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]+$pinfo["service_add_price"]["child"]; break;
                case "price_adult_child3": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]+$pinfo["service_add_price"]["child"]; break;
                case "price_adult_child4": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]+$pinfo["service_add_price"]["child"]; break;
                case "price_add_adult": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["adult"]; break;
                case "price_add_child": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["child"]; break;
                case "price_add_child2": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["child"]; break;
                case "price_add_child3": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["child"]; break;
                case "price_add_child4": $pinfo["price_info"]["dates"][$day][$prindex] += $pinfo["service_add_price"]["child"]; break;
              }
              
              // for fixed price we store the price of services in price_add_adult
              if(ifnull($room["room_type"]) == "holiday_home_fixed" || 
                 ifnull($room["room_type"]) == "hotel_room_fixed"
                )
              {
                $pinfo["price_info"]["dates"][$day]["price_add_adult"] = $pinfo["service_add_price"]["adult"];
              }  
              
              $spec_discount = 0;
              if(!empty($pinfo["eblm_values"]))
              {
                $wd = date("N", strtotime($day));
                $spec_discount += $pinfo["eblm_values"][$wd];
              }
              if(!empty($pinfo["ls_values"]))
              {
                $wd = date("N", strtotime($day));
                $spec_discount += $pinfo["ls_values"][$wd];
              }
              
              if(!empty($spec_discount))
                $pinfo["price_info"]["dates"][$day][$prindex] = round($pinfo["price_info"]["dates"][$day][$prindex] + $pinfo["price_info"]["dates"][$day][$prindex]*($spec_discount/100.0), 2);
            } 
            elseif(!empty($pinfo["only_main"]) && in_array($prindex, $PRICE_ADD_INDEXES))
            {
              $pinfo["price_info"]["dates"][$day][$prindex] = $tmp_price;
            }
            else  
            {
              if(empty($pinfo["advanced_price_mode"]))
              {
                $pinfo["price_info"]["dates"][$day][$prindex] = !empty($pinfo["is_absolute"]) ? ($tmp_price + $pinfo["val"]) : round($tmp_price + $tmp_price*($pinfo["val"]/100.0), 2);
              }
              else
              {
                $wd = date("N", strtotime($day));
                
                $spec_discount = 0;
                if(!empty($pinfo["eblm_values"]))
                {
                  $wd = date("N", strtotime($day));
                  $spec_discount += $pinfo["eblm_values"][$wd];
                }
                if(!empty($pinfo["ls_values"]))
                {
                  $wd = date("N", strtotime($day));
                  $spec_discount += $pinfo["ls_values"][$wd];
                }
                
                if(empty($spec_discount)) $spec_discount = $pinfo["wd_values"][$wd];
                
                $pinfo["price_info"]["dates"][$day][$prindex] = round($tmp_price + $tmp_price*$spec_discount/100.0, 2);
              }
            }
            
            if($pinfo["price_info"]["dates"][$day][$prindex] < 0) $pinfo["price_info"]["dates"][$day][$prindex] = 0;
            
            // we do not need to take rate, we need only to round
            $pinfo["price_info"]["dates"][$day][$prindex] = aux_calc_round_price($pinfo["price_info"]["dates"][$day][$prindex], 1, $settings);
            
            if(empty($pinfo["price_info"]["average_$prindex"])) $pinfo["price_info"]["average_$prindex"] = 0;
            
            $pinfo["price_info"]["average_$prindex"] += $pinfo["price_info"]["dates"][$day][$prindex]/$nights;
          }  
        }
      }        
    
      if($pinfo["tp"] == "additional" || $pinfo["tp"] == "additionalandservices") continue;
      
      $query = "SELECT
      PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4,
              PRICE_CHILD, PRICE_CHILD2,
              PRICE_ADULT_CHILD,
              PRICE_ADULT_CHILD2,
              PRICE_ADULT_CHILD3,
              PRICE_ADULT_CHILD4,
              PRICE_ADD_ADULT,
              PRICE_ADD_CHILD,
              PRICE_ADD_CHILD2,
              PRICE_ADD_CHILD3,
              PRICE_ADD_CHILD4,
              CLOSED,
              ARRIVAL,
              DEPARTURE,
              MIN_NIGHTS,
              DATE
      FROM {$prfx}_HTL_RATE_PRICE        
      WHERE RATE_PLAN_ID = $pid AND ROOM_ID = $room_id AND DATE >= $arrive_date_db AND DATE <= $departure_date_db
      ";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      
      while($dbw->fetch_row())
      {
        $date = date("Y-m-d", strtotime($dbw->field_by_name("DATE")));
        $wd = date("N", strtotime($dbw->field_by_name("DATE")));
        
        $pinfo["price_info"]["dates"][$date] = array();
        
        $pinfo["price_info"]["dates"][$date]["closed"] = $dbw->field_by_name("CLOSED");
        
        if(strtotime($dbw->field_by_name("DATE")) == $arrive_time && $dbw->field_by_name("ARRIVAL") != '1')
        {
          unset($add_rate_plans[$pid]);
          continue 2;
        }
        if(strtotime($dbw->field_by_name("DATE")) == $arrive_time && $dbw->field_by_name("MIN_NIGHTS") > $nights)
        {
          unset($add_rate_plans[$pid]);
          continue 2;
        }
        if(strtotime($dbw->field_by_name("DATE")) == $departure_time && $dbw->field_by_name("DEPARTURE") != '1')
        {
          unset($add_rate_plans[$pid]);
          continue 2;
        }

        $spec_discount = 0;
        if(!empty($pinfo["eblm_values"]))
        {
          $spec_discount += $pinfo["eblm_values"][$wd];
        }
        if(!empty($pinfo["ls_values"]))
        {
          $spec_discount += $pinfo["ls_values"][$wd];
        }
        
        $price = $dbw->field_by_name("PRICE_CHILD"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_child"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_CHILD2"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_child2"] = aux_calc_round_price($price, $rate, $settings);

        $price = $dbw->field_by_name("PRICE_ADULT"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT2"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult2"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT3"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult3"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT4"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult4"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT_CHILD"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult_child"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT_CHILD2"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult_child2"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT_CHILD3"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult_child3"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADULT_CHILD4"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_adult_child4"] = aux_calc_round_price($price, $rate, $settings);

        $price = $dbw->field_by_name("PRICE_ADD_ADULT"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_add_adult"] = aux_calc_round_price($price, $rate, $settings);

        $price = $dbw->field_by_name("PRICE_ADD_CHILD"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_add_child"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADD_CHILD2"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_add_child2"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADD_CHILD3"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_add_child3"] = aux_calc_round_price($price, $rate, $settings);
        $price = $dbw->field_by_name("PRICE_ADD_CHILD4"); if(!empty($spec_discount)) $price = round($price + $price*($spec_discount/100.0), 2); if($price < 0) $price = 0;
        $pinfo["price_info"]["dates"][$date]["price_add_child4"] = aux_calc_round_price($price, $rate, $settings);

        // now restrict person combination due to room settings
         $children_active = (
             !empty($room["add_max_child_age"]) ||
             !empty($room["add_max_child_age2"]) ||
             !empty($room["add_max_child_age3"]) ||
             !empty($room["add_max_child_age4"])
         );

         $children_std_active = (
             !empty($room["max_child_age"]) ||
             !empty($room["max_child_age2"]) ||
             !empty($room["max_child_age3"]) ||
             !empty($room["max_child_age4"])
         );

        if($children_active || $room["min_persons"] < 2)
        {
          // ok
        }
        else
        {
          $pinfo["price_info"]["dates"][$date]["price_adult"] = "";
        }

        if(($children_active || $room["min_persons"] < 3) &&
            $room["max_persons"] > 1 &&
           ($room["max_adults"] >= 2 || $room["standard_allocation"] < 3)
          )
        {
          // ok
        }
        else
        {
          $pinfo["price_info"]["dates"][$date]["price_adult2"] = "";
        }

        if(empty($room["max_child_age"])) $pinfo["price_info"]["dates"][$date]["price_adult_child"] = "";
        if(empty($room["max_child_age2"])) $pinfo["price_info"]["dates"][$date]["price_adult_child2"] = "";
        if(empty($room["max_child_age3"])) $pinfo["price_info"]["dates"][$date]["price_adult_child3"] = "";
        if(empty($room["max_child_age4"])) $pinfo["price_info"]["dates"][$date]["price_adult_child4"] = "";

        if(($children_active || $room["min_persons"] < 4) &&
           $room["max_adults"] >= 3 && $room["standard_allocation"] >= 3
          )
        {
          // ok
        }
        else
        {
          $pinfo["price_info"]["dates"][$date]["price_adult3"] = "";
        }

        if(($children_active || $room["min_persons"] < 5) &&
           $room["max_adults"] >= 4 && $room["standard_allocation"] >= 4
          )
        {
          // ok
        }
        else
        {
          $pinfo["price_info"]["dates"][$date]["price_adult4"] = "";
        }

        if(($room["standard_allocation"] < 3 && $room["max_persons"] > $room["standard_allocation"] && $room["max_persons"] > 2) ||
           ($room["standard_allocation"] >= 3 && $room["max_adults"] > $room["standard_allocation"])
          )
        {
          // ok
        }
        else
        {
          $pinfo["price_info"]["dates"][$date]["price_add_adult"] = "";
        }

        if(empty($room["add_max_child_age"])) $pinfo["price_info"]["dates"][$date]["price_add_child"] = "";
        else                                             $pinfo["price_info"]["force_add_child"] = 1;

        if(empty($room["add_max_child_age2"])) $pinfo["price_info"]["dates"][$date]["price_add_child2"] = "";
        else                                             $pinfo["price_info"]["force_add_child2"] = 1;

        if(empty($room["add_max_child_age3"])) $pinfo["price_info"]["dates"][$date]["price_add_child3"] = "";
        else                                             $pinfo["price_info"]["force_add_child3"] = 1;

        if(empty($room["add_max_child_age4"])) $pinfo["price_info"]["dates"][$date]["price_add_child4"] = "";
        else                                             $pinfo["price_info"]["force_add_child4"] = 1;

        // end restrict person combination due to room settings

        if(empty($pinfo["price_info"]["dates"][$date]["price_adult"]))
        {
          $pinfo["price_info"]["adult_no_price"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult2"]))
        {
          $pinfo["price_info"]["adult_no_price2"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult3"]))
        {
          $pinfo["price_info"]["adult_no_price3"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult4"]))
        {
          $pinfo["price_info"]["adult_no_price4"] = 1;
        }

        if(empty($pinfo["price_info"]["dates"][$date]["price_adult_child"]))
        {
          $pinfo["price_info"]["adult_child_no_price"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult_child2"]))
        {
          $pinfo["price_info"]["adult_child_no_price2"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult_child3"]))
        {
          $pinfo["price_info"]["adult_child_no_price3"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_adult_child4"]))
        {
          $pinfo["price_info"]["adult_child_no_price4"] = 1;
        }

        if(empty($pinfo["price_info"]["dates"][$date]["price_add_adult"]))
        {
          $pinfo["price_info"]["add_adult_no_price"] = 1;
        }

        if(empty($pinfo["price_info"]["dates"][$date]["price_add_child"]))
        {
          $pinfo["price_info"]["add_child_no_price"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_add_child2"]))
        {
          $pinfo["price_info"]["add_child_no_price2"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_add_child3"]))
        {
          $pinfo["price_info"]["add_child_no_price3"] = 1;
        }
        if(empty($pinfo["price_info"]["dates"][$date]["price_add_child4"]))
        {
          $pinfo["price_info"]["add_child_no_price4"] = 1;
        }

        if(!empty($pinfo["price_info"]["dates"][$date]["closed"]))
        {
          $pinfo["price_info"]["unavailable_dates"][$date] = format_date($date, "Y-m-d");
        }

        if(empty($pinfo["price_info"]["dates"][$date]["price_adult"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult2"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult3"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult4"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult_child"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult_child2"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult_child3"]) &&
           empty($pinfo["price_info"]["dates"][$date]["price_adult_child4"])
          )
        {
          $pinfo["price_info"]["unavailable_dates"][$date] = format_date($date, "Y-m-d");
        }
      }  
      
      $dbw->free_result();
      
      if(!empty($pinfo["price_info"]["unavailable_dates"]) || empty($pinfo["price_info"]["dates"]))
      {
        unset($add_rate_plans[$pid]);
        continue;
      }
      
      //average price
      $average["price_child"] = 0;
      $average["price_child2"] = 0;

      $average["price_adult"] = 0;
      $average["price_adult2"] = 0;
      $average["price_adult3"] = 0;
      $average["price_adult4"] = 0;
      $average["price_adult_child"] = 0;
      $average["price_adult_child2"] = 0;
      $average["price_adult_child3"] = 0;
      $average["price_adult_child4"] = 0;
      $average["price_add_adult"] = 0;
      $average["price_add_child"] = 0;
      $average["price_add_child2"] = 0;
      $average["price_add_child3"] = 0;
      $average["price_add_child4"] = 0;

      if(!empty($pinfo["price_info"]["dates"]))
      foreach($pinfo["price_info"]["dates"] as $day => $date)
      {
        if(strtotime($day) == $departure_time)
          continue;

        $average["price_child"] += $date["price_child"];
        $average["price_child2"] += $date["price_child2"];

        $average["price_adult"] += $date["price_adult"];
        $average["price_adult2"] += $date["price_adult2"];
        $average["price_adult3"] += $date["price_adult3"];
        $average["price_adult4"] += $date["price_adult4"];
        $average["price_adult_child"] += $date["price_adult_child"];
        $average["price_adult_child2"] += $date["price_adult_child2"];
        $average["price_adult_child3"] += $date["price_adult_child3"];
        $average["price_adult_child4"] += $date["price_adult_child4"];
        $average["price_add_adult"] += $date["price_add_adult"];
        $average["price_add_child"] += $date["price_add_child"];
        $average["price_add_child2"] += $date["price_add_child2"];
        $average["price_add_child3"] += $date["price_add_child3"];
        $average["price_add_child4"] += $date["price_add_child4"];
      }

      $pinfo["price_info"]["average_price_child"] = $average["price_child"]/$nights;
      $pinfo["price_info"]["average_price_child2"] = $average["price_child2"]/$nights;
      $pinfo["price_info"]["average_price_adult"] = $average["price_adult"]/$nights;
      $pinfo["price_info"]["average_price_adult2"] = $average["price_adult2"]/$nights;
      $pinfo["price_info"]["average_price_adult3"] = $average["price_adult3"]/$nights;
      $pinfo["price_info"]["average_price_adult4"] = $average["price_adult4"]/$nights;
      $pinfo["price_info"]["average_price_adult_child"] = $average["price_adult_child"]/$nights;
      $pinfo["price_info"]["average_price_adult_child2"] = $average["price_adult_child2"]/$nights;
      $pinfo["price_info"]["average_price_adult_child3"] = $average["price_adult_child3"]/$nights;
      $pinfo["price_info"]["average_price_adult_child4"] = $average["price_adult_child4"]/$nights;
      $pinfo["price_info"]["average_price_add_adult"] = $average["price_add_adult"]/$nights;
      $pinfo["price_info"]["average_price_add_child"] = $average["price_add_child"]/$nights;
      $pinfo["price_info"]["average_price_add_child2"] = $average["price_add_child2"]/$nights;
      $pinfo["price_info"]["average_price_add_child3"] = $average["price_add_child3"]/$nights;
      $pinfo["price_info"]["average_price_add_child4"] = $average["price_add_child4"]/$nights;
      
    } // foreach($add_rate_plans as $pid => &$pinfo)
    
    $room["add_rate_plans"] = $add_rate_plans;
    
    return true;    
  } // get_room_rate_plans
  //-----------------------------------------------------------------
  public function get_available_rooms(&$page_info, $arrive_date, $departure_date, $persons, $with_children, &$rooms, &$specoffers, $rate, &$settings)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $hide_not_available = !empty($settings["hide_notavailable_per_default"]) && empty($_SESSION["booking"]["data"]["show_not_available"]);
    
    $arrive_date_raw = $arrive_date;
    $departure_date_raw = $departure_date;
    
    //days quantity
    $arrive_time = strtotime($arrive_date);
    $arrive_time_int = $arrive_time;
    $departure_time = strtotime($departure_date);

    $arrive_time_2 = $arrive_time - 2*24*3600;
    $departure_time_2 = $departure_time + 2*24*3600;

    //create dates array for compare with filled dates in ROOMS_AVAILABILITY table
    $dates = array();
    $date = explode("-", $arrive_date);
    for($i = $arrive_time; $i <= $departure_time; $i = strtotime("+1 day", $i))
    {
      $dates[] = date('Y-m-d', $i);
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    // get discount periods
    $query="SELECT ROOM_ID, TP, TO_DATE, FROM_DATE  
            FROM ${prfx}_HTL_ROOM_DISCOUNT_PERIODS";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $discount_periods = array();
    
    $tmp_date_from = array();
    $tmp_date_to = array();
    while($dbw->fetch_row())
    {
      $room_id = $dbw->row["ROOM_ID"];
      $tp = $dbw->row["TP"];
      
      if(empty($tmp_date_from[$dbw->row["FROM_DATE"]]) || empty($tmp_date_to[$dbw->row["TO_DATE"]]))
      {
        $discount_periods[$room_id]["discount_data$tp"]["from_date"][] = strtotime($dbw->row["FROM_DATE"]);
        $discount_periods[$room_id]["discount_data$tp"]["to_date"][] = strtotime($dbw->row["TO_DATE"]);
      }
      $tmp_date_from[$dbw->row["FROM_DATE"]] = true;
      $tmp_date_to[$dbw->row["TO_DATE"]] = true;
    }

    $dbw->free_result();
    
    $persons = $dbw->escape($persons);

    $arrive_date = null_if_empty($dbw->escape($dbw->format_date($arrive_time)));
    $departure_date = null_if_empty($dbw->escape($dbw->format_date($departure_time)));

    $arrive_date_2 = null_if_empty($dbw->escape($dbw->format_date($arrive_time_2)));
    $departure_date_2 = null_if_empty($dbw->escape($dbw->format_date($departure_time_2)));

    $now = mktime(0, 0, 0);
    $days_between = round(($arrive_time - $now)/(60*60*24));
    
    $nights = round(($departure_time - $arrive_time)/(60*60*24));
    $lang_id = $dbw->escape($page_info["langid"]);
    
    $with_children_clause = '';
    /*
    if($with_children == 1)
      $with_children_clause = ' AND WITH_CHILDREN = 1';
    */

    $where_appendix = "";

    if(!empty($_SESSION["booking"]["data"]["room_type_filter"]))
    {
      $where_appendix = " AND {$prfx}_HTL_ROOMS.ROOM_TYPE = '" . $dbw->escape($_SESSION["booking"]["data"]["room_type_filter"]) . "'";
    }

    if(!empty($_SESSION["booking"]["data"]["room_category_filter"]))
    {
      $where_appendix = " AND {$prfx}_HTL_ROOMS_PROPS.CATEGORY = '" . $dbw->escape($_SESSION["booking"]["data"]["room_category_filter"]) . "'";
    }
    
    if(!empty($_SESSION["booking"]["data"]["room_name_filter"]))
    {
      $where_appendix = " AND {$prfx}_HTL_ROOMS.I_NAME = '" . $dbw->escape($_SESSION["booking"]["data"]["room_name_filter"]) . "'";
    }
    
    $query = "SELECT {$prfx}_HTL_ROOMS.ID, ARRIVAL, DEPARTURE, CLOSED,
              ROOM_CODE, ROOM_COUNT, MIN_NIGHTS, MAX_NIGHTS, I_NAME, MIN_PERSONS,
              MAX_PERSONS, TYPE, DESCRIPTION, CATEGORY, WITH_CHILDREN, YOUTUBE_CODE, ROOM_URL, ROOM_TA_CODE, ROOM_TVG_CODE,

              ROOM_TYPE,
              MAX_ADULTS,

              MAX_CHILD_AGE, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT,
              MAX_CHILD_AGE2, CHILD_DISCOUNT_FLAG2, CHILD_DISCOUNT2,
              MAX_CHILD_AGE3, CHILD_DISCOUNT_FLAG3, CHILD_DISCOUNT3,
              MAX_CHILD_AGE4, CHILD_DISCOUNT_FLAG4, CHILD_DISCOUNT4,

              ADD_MAX_CHILD_AGE, ADD_CHILD_DISCOUNT_FLAG, ADD_CHILD_DISCOUNT,
              ADD_MAX_CHILD_AGE2, ADD_CHILD_DISCOUNT_FLAG2, ADD_CHILD_DISCOUNT2,
              ADD_MAX_CHILD_AGE3, ADD_CHILD_DISCOUNT_FLAG3, ADD_CHILD_DISCOUNT3,
              ADD_MAX_CHILD_AGE4, ADD_CHILD_DISCOUNT_FLAG4, ADD_CHILD_DISCOUNT4,

              SHOW_PARTNER_IF_EMPTY,
              SHOW_PARTNER_IF_LOWER,
              
              STD_TARIF_CAPTION,
              
              PARTNER_NAME1,
              PARTNER_URL1,
              PARTNER_NAME2,
              PARTNER_URL2,
              PARTNER_NAME3,
              PARTNER_URL3,
              PARTNER_NAME4,
              PARTNER_URL4,
              PARTNER_NAME5,
              PARTNER_URL5,
              
       EARLY_BOOK_DAYS1,
       EARLY_BOOK_DISCOUNT1,
       EARLY_BOOK_DAYS2,
       EARLY_BOOK_DISCOUNT2,
       EARLY_BOOK_DAYS3,
       EARLY_BOOK_DISCOUNT3,
       EARLY_BOOK_DAYS4,
       EARLY_BOOK_DISCOUNT4,
       EARLY_BOOK_DAYS5,
       EARLY_BOOK_DISCOUNT5,
       
       LMINUTE_BOOK_DAYS1,
       LMINUTE_BOOK_DISCOUNT1,
       LMINUTE_BOOK_DAYS2,
       LMINUTE_BOOK_DISCOUNT2,
       LMINUTE_BOOK_DAYS3,
       LMINUTE_BOOK_DISCOUNT3,
       LMINUTE_BOOK_DAYS4,
       LMINUTE_BOOK_DISCOUNT4,
       LMINUTE_BOOK_DAYS5,
       LMINUTE_BOOK_DISCOUNT5,
              
       LONGSTAY_BOOK_DAYS1,
       LONGSTAY_BOOK_DISCOUNT1,
       LONGSTAY_BOOK_DAYS2,
       LONGSTAY_BOOK_DISCOUNT2,
       LONGSTAY_BOOK_DAYS3,
       LONGSTAY_BOOK_DISCOUNT3,
       LONGSTAY_BOOK_DAYS4,
       LONGSTAY_BOOK_DISCOUNT4,
       LONGSTAY_BOOK_DAYS5,
       LONGSTAY_BOOK_DISCOUNT5,
       
              PRICING_TYPE, PRICE_TYPE, STANDARD_ALLOCATION, DISCOUNT_FLAG, DISCOUNT,
              PRICE_ADULT, PRICE_ADULT2, PRICE_ADULT3, PRICE_ADULT4,
              PRICE_CHILD, PRICE_CHILD2,
              PRICE_ADULT_CHILD,
              PRICE_ADULT_CHILD2,
              PRICE_ADULT_CHILD3,
              PRICE_ADULT_CHILD4,
              PRICE_ADD_ADULT,
              PRICE_ADD_CHILD,
              PRICE_ADD_CHILD2,
              PRICE_ADD_CHILD3,
              PRICE_ADD_CHILD4,
              DATE
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOM_AVAILABILITY ON (ID = ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID)
              WHERE LANGUAGE_ID = $lang_id AND ACTIVE = 1 AND DATE >= $arrive_date AND DATE <= $departure_date {$with_children_clause}
              $where_appendix
              ORDER BY SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    //$available_dates = array();
    while($dbw->fetch_row())
    {
      $date = date("Y-m-d", strtotime($dbw->field_by_name("DATE")));

      $room_id = $dbw->field_by_name("ID");
      $rooms[$room_id]["room_id"] = $room_id;
      $rooms[$room_id]["internal_name"] = $dbw->field_by_name("I_NAME");
      $rooms[$room_id]["room_count"] = $dbw->field_by_name("ROOM_COUNT");
      $rooms[$room_id]["room_code"] = $dbw->field_by_name("ROOM_CODE");
      $rooms[$room_id]["room_type"] = $dbw->field_by_name("ROOM_TYPE");
      $rooms[$room_id]["min_persons"] = $dbw->field_by_name("MIN_PERSONS");
      $rooms[$room_id]["max_persons"] = $dbw->field_by_name("MAX_PERSONS");

      $rooms[$room_id]["type"] = $dbw->field_by_name("TYPE");
      $rooms[$room_id]["description"] = $dbw->field_by_name("DESCRIPTION");
      $rooms[$room_id]["std_tarif_caption"] = $dbw->field_by_name("STD_TARIF_CAPTION");
      
      $rooms[$room_id]["youtube_code"] = $dbw->field_by_name("YOUTUBE_CODE");
      $rooms[$room_id]["room_ta_code"] = $dbw->field_by_name("ROOM_TA_CODE");
      $rooms[$room_id]["room_tvg_code"] = $dbw->field_by_name("ROOM_TVG_CODE");
      $rooms[$room_id]["room_url"] = $dbw->field_by_name("ROOM_URL");

      $rooms[$room_id]["partner_display_if_empty"] = $dbw->field_by_name("SHOW_PARTNER_IF_EMPTY");
      $rooms[$room_id]["partner_display_if_lower"] = $dbw->field_by_name("SHOW_PARTNER_IF_LOWER");

      $rooms[$room_id]["partner_name1"] = $dbw->field_by_name("PARTNER_NAME1");
      $rooms[$room_id]["partner_url1"] = $dbw->field_by_name("PARTNER_URL1");
      $rooms[$room_id]["partner_name2"] = $dbw->field_by_name("PARTNER_NAME2");
      $rooms[$room_id]["partner_url2"] = $dbw->field_by_name("PARTNER_URL2");
      $rooms[$room_id]["partner_name3"] = $dbw->field_by_name("PARTNER_NAME3");
      $rooms[$room_id]["partner_url3"] = $dbw->field_by_name("PARTNER_URL3");
      $rooms[$room_id]["partner_name4"] = $dbw->field_by_name("PARTNER_NAME4");
      $rooms[$room_id]["partner_url4"] = $dbw->field_by_name("PARTNER_URL4");
      $rooms[$room_id]["partner_name5"] = $dbw->field_by_name("PARTNER_NAME5");
      $rooms[$room_id]["partner_url5"] = $dbw->field_by_name("PARTNER_URL5");
      
      $rooms[$room_id]["category"] = $dbw->field_by_name("CATEGORY");
      $rooms[$room_id]["with_children"] = $dbw->field_by_name("WITH_CHILDREN");
      $rooms[$room_id]["pricing_type"] = $dbw->field_by_name("PRICING_TYPE");
      $rooms[$room_id]["standard_allocation"] = $dbw->field_by_name("STANDARD_ALLOCATION");
      $rooms[$room_id]["discount_flag"] = $dbw->field_by_name("DISCOUNT_FLAG");
      $rooms[$room_id]["discount"] = $dbw->field_by_name("DISCOUNT");

      $rooms[$room_id]["max_adults"] = $dbw->field_by_name("MAX_ADULTS");

      $rooms[$room_id]["max_child_age"] = $dbw->field_by_name("MAX_CHILD_AGE");
      $rooms[$room_id]["child_discount_flag"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG");
      $rooms[$room_id]["child_discount"] = $dbw->field_by_name("CHILD_DISCOUNT");

      $rooms[$room_id]["max_child_age2"] = $dbw->field_by_name("MAX_CHILD_AGE2");
      $rooms[$room_id]["child_discount_flag2"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG2");
      $rooms[$room_id]["child_discount2"] = $dbw->field_by_name("CHILD_DISCOUNT2");

      $rooms[$room_id]["max_child_age3"] = $dbw->field_by_name("MAX_CHILD_AGE3");
      $rooms[$room_id]["child_discount_flag3"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG3");
      $rooms[$room_id]["child_discount3"] = $dbw->field_by_name("CHILD_DISCOUNT3");

      $rooms[$room_id]["max_child_age4"] = $dbw->field_by_name("MAX_CHILD_AGE4");
      $rooms[$room_id]["child_discount_flag4"] = $dbw->field_by_name("CHILD_DISCOUNT_FLAG4");
      $rooms[$room_id]["child_discount4"] = $dbw->field_by_name("CHILD_DISCOUNT4");

      $rooms[$room_id]["add_max_child_age"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE");
      $rooms[$room_id]["add_child_discount_flag"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG");
      $rooms[$room_id]["add_child_discount"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT");

      $rooms[$room_id]["add_max_child_age2"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE2");
      $rooms[$room_id]["add_child_discount_flag2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG2");
      $rooms[$room_id]["add_child_discount2"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT2");

      $rooms[$room_id]["add_max_child_age3"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE3");
      $rooms[$room_id]["add_child_discount_flag3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG3");
      $rooms[$room_id]["add_child_discount3"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT3");

      $rooms[$room_id]["add_max_child_age4"] = $dbw->field_by_name("ADD_MAX_CHILD_AGE4");
      $rooms[$room_id]["add_child_discount_flag4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT_FLAG4");
      $rooms[$room_id]["add_child_discount4"] = $dbw->field_by_name("ADD_CHILD_DISCOUNT4");

      // we ignore last day
      if(strtotime($dbw->field_by_name("DATE")) != $departure_time)
        if(!isset($rooms[$room_id]["available_room_count"]) ||
          $dbw->field_by_name("ROOM_COUNT") < $rooms[$room_id]["available_room_count"])
        {
          $rooms[$room_id]["available_room_count"] = $dbw->field_by_name("ROOM_COUNT");
        }

      $rooms[$room_id]["price_type"] = $dbw->field_by_name("PRICE_TYPE");

      $rooms[$room_id]["dates"][$date] = array();

      $rooms[$room_id]["dates"][$date]["closed"] = $dbw->field_by_name("CLOSED");
      
      $rooms[$room_id]["dates"][$date]["arrival"] = $dbw->field_by_name("ARRIVAL");
      $rooms[$room_id]["dates"][$date]["departure"] = $dbw->field_by_name("DEPARTURE");
      $rooms[$room_id]["dates"][$date]["min_nights"] = $dbw->field_by_name("MIN_NIGHTS");
      $rooms[$room_id]["dates"][$date]["max_nights"] = $dbw->field_by_name("MAX_NIGHTS");
      $rooms[$room_id]["dates"][$date]["room_count"] = $dbw->field_by_name("ROOM_COUNT");

      $rooms[$room_id]["dates"][$date]["price_child"] = aux_calc_round_price($dbw->field_by_name("PRICE_CHILD"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_child2"] = aux_calc_round_price($dbw->field_by_name("PRICE_CHILD2"), $rate, $settings);

      $rooms[$room_id]["dates"][$date]["price_adult"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult2"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT2"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult3"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT3"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult4"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT4"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult_child"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT_CHILD"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult_child2"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT_CHILD2"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult_child3"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT_CHILD3"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_adult_child4"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADULT_CHILD4"), $rate, $settings);

      $rooms[$room_id]["dates"][$date]["price_add_adult"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADD_ADULT"), $rate, $settings);

      $rooms[$room_id]["dates"][$date]["price_add_child"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADD_CHILD"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_add_child2"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADD_CHILD2"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_add_child3"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADD_CHILD3"), $rate, $settings);
      $rooms[$room_id]["dates"][$date]["price_add_child4"] = aux_calc_round_price($dbw->field_by_name("PRICE_ADD_CHILD4"), $rate, $settings);

      // now restrict person combination due to room settings
       $children_active = (
           !empty($rooms[$room_id]["add_max_child_age"]) ||
           !empty($rooms[$room_id]["add_max_child_age2"]) ||
           !empty($rooms[$room_id]["add_max_child_age3"]) ||
           !empty($rooms[$room_id]["add_max_child_age4"])
       );

       $children_std_active = (
           !empty($rooms[$room_id]["max_child_age"]) ||
           !empty($rooms[$room_id]["max_child_age2"]) ||
           !empty($rooms[$room_id]["max_child_age3"]) ||
           !empty($rooms[$room_id]["max_child_age4"])
       );

      if($children_active || $rooms[$room_id]["min_persons"] < 2)
      {
        // ok
      }
      else
      {
        $rooms[$room_id]["dates"][$date]["price_adult"] = "";
      }

      if(($children_active || $rooms[$room_id]["min_persons"] < 3) &&
          $rooms[$room_id]["max_persons"] > 1 &&
         ($rooms[$room_id]["max_adults"] >= 2 || $rooms[$room_id]["standard_allocation"] < 3)
        )
      {
        // ok
      }
      else
      {
        $rooms[$room_id]["dates"][$date]["price_adult2"] = "";
      }

      if(empty($rooms[$room_id]["max_child_age"])) $rooms[$room_id]["dates"][$date]["price_adult_child"] = "";
      if(empty($rooms[$room_id]["max_child_age2"])) $rooms[$room_id]["dates"][$date]["price_adult_child2"] = "";
      if(empty($rooms[$room_id]["max_child_age3"])) $rooms[$room_id]["dates"][$date]["price_adult_child3"] = "";
      if(empty($rooms[$room_id]["max_child_age4"])) $rooms[$room_id]["dates"][$date]["price_adult_child4"] = "";

      if(($children_active || $rooms[$room_id]["min_persons"] < 4) &&
         $rooms[$room_id]["max_adults"] >= 3 && $rooms[$room_id]["standard_allocation"] >= 3
        )
      {
        // ok
      }
      else
      {
        $rooms[$room_id]["dates"][$date]["price_adult3"] = "";
      }

      if(($children_active || $rooms[$room_id]["min_persons"] < 5) &&
         $rooms[$room_id]["max_adults"] >= 4 && $rooms[$room_id]["standard_allocation"] >= 4
        )
      {
        // ok
      }
      else
      {
        $rooms[$room_id]["dates"][$date]["price_adult4"] = "";
      }

      if(($rooms[$room_id]["standard_allocation"] < 3 && $rooms[$room_id]["max_persons"] > $rooms[$room_id]["standard_allocation"] && $rooms[$room_id]["max_persons"] > 2) ||
         ($rooms[$room_id]["standard_allocation"] >= 3 && $rooms[$room_id]["max_adults"] > $rooms[$room_id]["standard_allocation"])
        )
      {
        // ok
      }
      else
      {
        $rooms[$room_id]["dates"][$date]["price_add_adult"] = "";
      }

      if(empty($rooms[$room_id]["add_max_child_age"])) $rooms[$room_id]["dates"][$date]["price_add_child"] = "";
      else                                             $rooms[$room_id]["force_add_child"] = 1;

      if(empty($rooms[$room_id]["add_max_child_age2"])) $rooms[$room_id]["dates"][$date]["price_add_child2"] = "";
      else                                             $rooms[$room_id]["force_add_child2"] = 1;

      if(empty($rooms[$room_id]["add_max_child_age3"])) $rooms[$room_id]["dates"][$date]["price_add_child3"] = "";
      else                                             $rooms[$room_id]["force_add_child3"] = 1;

      if(empty($rooms[$room_id]["add_max_child_age4"])) $rooms[$room_id]["dates"][$date]["price_add_child4"] = "";
      else                                             $rooms[$room_id]["force_add_child4"] = 1;

      // end restrict person combination due to room settings

      if(empty($_SESSION["booking"]["specoffer_modus"]))
      {
        if(empty($rooms[$room_id]["dates"][$date]["price_adult"]))
        {
          $rooms[$room_id]["adult_no_price"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult2"]))
        {
          $rooms[$room_id]["adult_no_price2"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult3"]))
        {
          $rooms[$room_id]["adult_no_price3"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult4"]))
        {
          $rooms[$room_id]["adult_no_price4"] = 1;
        }

        if(empty($rooms[$room_id]["dates"][$date]["price_adult_child"]))
        {
          $rooms[$room_id]["adult_child_no_price"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult_child2"]))
        {
          $rooms[$room_id]["adult_child_no_price2"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult_child3"]))
        {
          $rooms[$room_id]["adult_child_no_price3"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_adult_child4"]))
        {
          $rooms[$room_id]["adult_child_no_price4"] = 1;
        }

        if(empty($rooms[$room_id]["dates"][$date]["price_add_adult"]))
        {
          $rooms[$room_id]["add_adult_no_price"] = 1;
        }

        if(empty($rooms[$room_id]["dates"][$date]["price_add_child"]))
        {
          $rooms[$room_id]["add_child_no_price"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_add_child2"]))
        {
          $rooms[$room_id]["add_child_no_price2"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_add_child3"]))
        {
          $rooms[$room_id]["add_child_no_price3"] = 1;
        }
        if(empty($rooms[$room_id]["dates"][$date]["price_add_child4"]))
        {
          $rooms[$room_id]["add_child_no_price4"] = 1;
        }
      }

      if(empty($rooms[$room_id]["dates"][$date]["price_adult"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult2"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult3"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult4"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult_child"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult_child2"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult_child3"]) &&
         empty($rooms[$room_id]["dates"][$date]["price_adult_child4"])
        )
      {
        $rooms[$room_id]["unavailable_dates"][$date] = format_date($date, "Y-m-d");
        $rooms[$room_id]["unavailable_dates_status_6"][$date] = format_date($date, "Y-m-d");
      }
    }//while

    $dbw->free_result();

    if(count($rooms) == 0)
      return false;

    // get availability info on date +-2
    $query = "SELECT {$prfx}_HTL_ROOMS.ID, ARRIVAL, DEPARTURE, ROOM_COUNT, MIN_NIGHTS, MAX_NIGHTS, I_NAME, MIN_PERSONS, MAX_PERSONS, TYPE, DESCRIPTION, CATEGORY, WITH_CHILDREN, MAX_CHILD_AGE, PRICING_TYPE, PRICE_TYPE, STANDARD_ALLOCATION, DISCOUNT_FLAG, DISCOUNT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, ROOM_COUNT, PRICE_ADULT, PRICE_ADULT2, PRICE_CHILD, PRICE_CHILD2, PRICE_ADULT_CHILD, PRICE_ADD_ADULT, PRICE_ADD_CHILD, DATE
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOM_AVAILABILITY ON (ID = ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID)
              WHERE LANGUAGE_ID = $lang_id AND ACTIVE = 1
              AND DATE < $arrive_date AND DATE >= $arrive_date_2
              {$with_children_clause}
              $where_appendix
              ORDER BY DATE";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $date = date("Y-m-d", strtotime($dbw->field_by_name("DATE")));

      $rooms[$dbw->field_by_name("ID")]["arrive_dates_2"][$date] = $dbw->field_by_name("ARRIVAL");
    }

    $dbw->free_result();

    $query = "SELECT {$prfx}_HTL_ROOMS.ID, ARRIVAL, DEPARTURE, ROOM_COUNT, MIN_NIGHTS, MAX_NIGHTS, I_NAME, MIN_PERSONS, MAX_PERSONS, TYPE, DESCRIPTION, CATEGORY, WITH_CHILDREN, MAX_CHILD_AGE, PRICING_TYPE, PRICE_TYPE, STANDARD_ALLOCATION, DISCOUNT_FLAG, DISCOUNT, CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT, ROOM_COUNT, PRICE_ADULT, PRICE_ADULT2, PRICE_CHILD, PRICE_CHILD2, PRICE_ADULT_CHILD, PRICE_ADD_ADULT, PRICE_ADD_CHILD, DATE
              FROM {$prfx}_HTL_ROOMS
              LEFT JOIN {$prfx}_HTL_ROOM_AVAILABILITY ON (ID = ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID)
              WHERE LANGUAGE_ID = $lang_id AND ACTIVE = 1
              AND DATE > $departure_date AND DATE <= $departure_date_2
              {$with_children_clause}
              $where_appendix
              ORDER BY DATE";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $date = date("Y-m-d", strtotime($dbw->field_by_name("DATE")));

      $rooms[$dbw->field_by_name("ID")]["departure_dates_2"][$date] = $dbw->field_by_name("DEPARTURE");
    }

    $dbw->free_result();
    
    //if in the selected period a booking data not filled for some room, delete it from the list
    foreach($rooms as $room_id => &$room)
    {
      //average price
      $average["price_child"] = 0;
      $average["price_child2"] = 0;

      $average["price_adult"] = 0;
      $average["price_adult2"] = 0;
      $average["price_adult3"] = 0;
      $average["price_adult4"] = 0;
      $average["price_adult_child"] = 0;
      $average["price_adult_child2"] = 0;
      $average["price_adult_child3"] = 0;
      $average["price_adult_child4"] = 0;
      $average["price_add_adult"] = 0;
      $average["price_add_child"] = 0;
      $average["price_add_child2"] = 0;
      $average["price_add_child3"] = 0;
      $average["price_add_child4"] = 0;

      if(!empty($room["dates"]))
      foreach($room["dates"] as $day => $date)
      {
        if(strtotime($day) == $departure_time)
          continue;

        $average["price_child"] += $date["price_child"];
        $average["price_child2"] += $date["price_child2"];

        $average["price_adult"] += $date["price_adult"];
        $average["price_adult2"] += $date["price_adult2"];
        $average["price_adult3"] += $date["price_adult3"];
        $average["price_adult4"] += $date["price_adult4"];
        $average["price_adult_child"] += $date["price_adult_child"];
        $average["price_adult_child2"] += $date["price_adult_child2"];
        $average["price_adult_child3"] += $date["price_adult_child3"];
        $average["price_adult_child4"] += $date["price_adult_child4"];
        $average["price_add_adult"] += $date["price_add_adult"];
        $average["price_add_child"] += $date["price_add_child"];
        $average["price_add_child2"] += $date["price_add_child2"];
        $average["price_add_child3"] += $date["price_add_child3"];
        $average["price_add_child4"] += $date["price_add_child4"];
      }

      $room["average_price_child"] = $average["price_child"]/$nights;
      $room["average_price_child2"] = $average["price_child2"]/$nights;
      $room["average_price_adult"] = $average["price_adult"]/$nights;
      $room["average_price_adult2"] = $average["price_adult2"]/$nights;
      $room["average_price_adult3"] = $average["price_adult3"]/$nights;
      $room["average_price_adult4"] = $average["price_adult4"]/$nights;
      $room["average_price_adult_child"] = $average["price_adult_child"]/$nights;
      $room["average_price_adult_child2"] = $average["price_adult_child2"]/$nights;
      $room["average_price_adult_child3"] = $average["price_adult_child3"]/$nights;
      $room["average_price_adult_child4"] = $average["price_adult_child4"]/$nights;
      $room["average_price_add_adult"] = $average["price_add_adult"]/$nights;
      $room["average_price_add_child"] = $average["price_add_child"]/$nights;
      $room["average_price_add_child2"] = $average["price_add_child2"]/$nights;
      $room["average_price_add_child3"] = $average["price_add_child3"]/$nights;
      $room["average_price_add_child4"] = $average["price_add_child4"]/$nights;

      if(ifnull($room["average_price_adult"]) == 0 &&
         ifnull($room["average_price_adult2"]) == 0 &&
         ifnull($room["average_price_adult3"]) == 0 &&
         ifnull($room["average_price_adult4"]) == 0 &&
         ifnull($room["average_price_adult_child"]) == 0 &&
         ifnull($room["average_price_adult_child2"]) == 0 &&
         ifnull($room["average_price_adult_child3"]) == 0 &&
         ifnull($room["average_price_adult_child4"]) == 0
        )
      {
        unset($rooms[$room_id]);
        continue;
      }
      
      if(!$this->get_room_rate_plans($page_info, $room_id, $room, $arrive_date_raw, $departure_date_raw, $rate, $settings))
      {
        return false;
      }
    }
    
    $problem_rooms = array();
    
    //if arrive_date and arrival == 0 or if departure date and departure == 0 => unset room
    foreach($rooms as $room_id => &$room)
    {
      $has_add_ownprice_plans = false;
      if(!empty($room["add_rate_plans"]))
      {
        foreach($room["add_rate_plans"] as $rate_plan)
        {
          if($rate_plan["tp"] == "additionalownprice")
          {
            $has_add_ownprice_plans = true;
            break;
          }
        }
      }
      
      foreach($dates as $date)
      {
        if(empty($room["dates"][format_date($date, 'Y-m-d')]))
        {
          $problem_rooms[$room_id] = $room_id;
          
          $room["unavailable_dates"][$date] = format_date($date, "Y-m-d");
          $room["unavailable_dates_status_0"][$date] = format_date($date, "Y-m-d");
          continue;
        }

        $data = $room["dates"][format_date($date, 'Y-m-d')];

        if(ifnull($settings["min_nights_method"]) == "arrival_day")
          $min_nights_error = (strtotime($date) == $arrive_time && $data["min_nights"] > $nights);
        else
          $min_nights_error = ($data["min_nights"] > $nights && strtotime($date) != $departure_time);
        if($min_nights_error)
        {
          $problem_rooms[$room_id] = $room_id;

          $room["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
          $room["unavailable_dates_status_1"][$date] = format_date($date, "Y-m-d");
        }

        if(!empty($data["max_nights"]))
        {
          if(strtotime($date) == $arrive_time && $data["max_nights"] < $nights && strtotime($date) != $departure_time)
          {
            $problem_rooms[$room_id] = $room_id;
            
            $room["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
            $room["unavailable_dates_status_2"][$date] = format_date($date, "Y-m-d");
          }
        }

        // if the rate closed and there is no other open rates
        
        if(!empty($data["closed"]) && strtotime($date) != $departure_time)
        {
          if($has_add_ownprice_plans)
          {
            $room["hide_closed"] = true;
          }
          else
          {
            $problem_rooms[$room_id] = $room_id;

            $room["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
            $room["unavailable_dates_status_7"][$date] = format_date($date, "Y-m-d");
          }
        }
        
        if(strtotime($date) == $arrive_time && $data["arrival"] == 0)
        {
          $problem_rooms[$room_id] = $room_id;

          $room["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
          $room["unavailable_dates_status_3"][$date] = format_date($date, "Y-m-d");
        }

        if($data["room_count"] == 0 && strtotime($date) != $departure_time)
        {
          $problem_rooms[$room_id] = $room_id;

          $room["unavailable_dates"][$date] = format_date($date, "Y-m-d");
          $room["unavailable_dates_status_5"][$date] = format_date($date, "Y-m-d");
        }

        if(strtotime($date) == $departure_time && $data["departure"] == 0)
        {
          $problem_rooms[$room_id] = $room_id;
          
          $room["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
          $room["unavailable_dates_status_4"][$date] = format_date($date, "Y-m-d");
        }
      }
    }

    if($hide_not_available && empty($_SESSION["booking"]["specoffer_modus"]))
    {
      foreach($problem_rooms as $room_id)
      {
        unset($rooms[$room_id]);
      }
    }
    
    $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);

    if(!empty($ext_service_manager) && $ext_service_manager->supportsRoomAvailability())
    {
      $room_availability = array();
      $parameters = array(
                  "START_DATE" => trim($arrive_date, "'"),
                  "END_DATE" => trim($departure_date, "'"),
                  "PERSONS" => $persons
      );

      $ext_service_manager->init($parameters);
      if(!$ext_service_manager->retrieveRoomAvailability($room_availability))
      {
        $rooms = array();
        $_SESSION["booking"]["error"] = HotelServiceManager::$last_error;
        return false;
      }

      foreach($rooms as $room_id => &$room)
      {
        if(!in_array($room["room_code"], array_keys($room_availability)))
        {
          $room["available_room_count"] = 0;
          unset($room["unavailable_dates_status_5"]);
        }
        else
        {
          $room["available_room_count"] = $room_availability[$room["room_code"]];
          unset($room["unavailable_dates_status_5"]);
        }
      }

      unset($room);
    } // external service

    $rooms_ids = '';

    foreach($rooms as $room_id => &$room2)
    {
      //for extra services
      $rooms_ids .= $room_id.", ";
    }

    $rooms_ids = trim($rooms_ids, ", ");
    if(empty($rooms_ids)) $rooms_ids = "NULL";

    $query = "SELECT ID, ROOM_ID, TITLE, CAPTION, PRICE, PRICING_TYPE, CALCULATE_TYPE, SERVICE_TA_CODE, {$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION
              FROM {$prfx}_HTL_EXTRA_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON (ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_ROOMS ON (ID = {$prfx}_HTL_EXTRA_SERVICES_ROOMS.SERVICE_ID)
              WHERE LANG_ID = $lang_id AND IS_ACTIVE = 1 AND MANDATORY = 1 AND FOR_SOFFER = '0' AND ROOM_ID IN ($rooms_ids)
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rooms[$dbw->field_by_name("ROOM_ID")]["additional_services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                                                       "caption" =>$dbw->field_by_name("CAPTION"),
                                                                                                       "price" =>$dbw->field_by_name("PRICE"),
                                                                                                       "pricing_type" =>$dbw->field_by_name("PRICING_TYPE"),
                                                                                                       "service_ta_code" =>$dbw->field_by_name("SERVICE_TA_CODE"),
                                                                                                       "calculate_type" =>$dbw->field_by_name("CALCULATE_TYPE"),
                                                                                                       "restriction" =>$dbw->field_by_name("RESTRICTION")
                                                                                                       );
    }

    $dbw->free_result();

    // special offers
    
    $where_appendix = "";

    if(!empty($_SESSION["booking"]["data"]["room_filter"]))
    {
      $where_appendix .= " AND {$prfx}_HTL_SPECIAL_OFFER.ROOM_ID = " . $dbw->escape($_SESSION["booking"]["data"]["room_filter"]);
    }
    if(!empty($_SESSION["booking"]["data"]["room_name_filter"]))
    {
      $where_appendix .= " AND {$prfx}_HTL_SPECIAL_OFFER.ROOM_ID IN (SELECT ID FROM {$prfx}_HTL_ROOMS WHERE I_NAME = '" . $dbw->escape($_SESSION["booking"]["data"]["room_name_filter"]) . "')";
    }
    if(!empty($_SESSION["booking"]["data"]["specoffer"]))
    {
      $where_appendix .= " AND {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID IN (SELECT ID FROM {$prfx}_HTL_PRICELIST WHERE I_NAME = '" . $dbw->escape($_SESSION["booking"]["data"]["specoffer"]) . "')";
    }
    if(!empty($_SESSION["booking"]["data"]["special_offer_filter"]))
    {
      $where_appendix .= " AND {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID = " . $dbw->escape($_SESSION["booking"]["data"]["special_offer_filter"]);
    }
    if(!empty($_SESSION["booking"]["data"]["night_filter"]))
    {
      $where_appendix .= " AND NIGHTS_COUNT = " . $dbw->escape($_SESSION["booking"]["data"]["night_filter"]);
    }
    if(!empty($_SESSION["booking"]["data"]["person_filter"]))
    {
      $where_appendix .= " AND PERSONS_COUNT = " . $dbw->escape($_SESSION["booking"]["data"]["person_filter"]);
    }

    $order = "ASC";
    if(ifnull($_SESSION["booking"]["data"]["sort_order"]) == "DESC") $order = "DESC";

    $sort_field = "PRICE";
    if(ifnull($_SESSION["booking"]["data"]["sort_field"]) == "SORT_ORDER") $sort_field = "SORT_ORDER";
    if(ifnull($_SESSION["booking"]["data"]["sort_field"]) == "PRICE") $sort_field = "PRICE";
    if(ifnull($_SESSION["booking"]["data"]["sort_field"]) == "PERSONS_COUNT") $sort_field = "PERSONS_COUNT";
    if(ifnull($_SESSION["booking"]["data"]["sort_field"]) == "NIGHTS_COUNT") $sort_field = "NIGHTS_COUNT";

    $query = "SELECT {$prfx}_HTL_SPECIAL_OFFER.ID, {$prfx}_HTL_SPECIAL_OFFER.ROOM_ID, PRICE, NIGHTS_COUNT, PERSONS_COUNT, CONCERN_ROOM_RULES, WEEKDAY_FLAG,
              {$prfx}_HTL_PRICELIST_PROPS.NAME, {$prfx}_HTL_PRICELIST_PROPS.DESCRIPTION, {$prfx}_HTL_PRICELIST_PROPS.INFO,
              {$prfx}_HTL_ROOMS_PROPS.TYPE ROOM
              FROM {$prfx}_HTL_SPECIAL_OFFER
              INNER JOIN {$prfx}_HTL_PRICELIST ON ({$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID = {$prfx}_HTL_PRICELIST.ID)
              INNER JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_SPECIAL_OFFER.ROOM_ID = {$prfx}_HTL_ROOMS.ID)
              LEFT JOIN {$prfx}_HTL_PRICELIST_PROPS ON ({$prfx}_HTL_PRICELIST_PROPS.PRICELIST_ID = {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID AND {$prfx}_HTL_PRICELIST_PROPS.LANGUAGE_ID = $lang_id)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS_PROPS.ROOM_ID = {$prfx}_HTL_ROOMS.ID AND {$prfx}_HTL_ROOMS_PROPS.LANGUAGE_ID = $lang_id)
              WHERE {$prfx}_HTL_SPECIAL_OFFER.ROOM_ID IN ($rooms_ids)
              $where_appendix
              AND SEASON_ID IN (SELECT SEASON_ID FROM {$prfx}_HTL_SEASON_PERIODS WHERE $arrive_date BETWEEN FROM_DATE AND TO_DATE)
              AND {$prfx}_HTL_PRICELIST_PROPS.ACTIVE = '1' AND {$prfx}_HTL_PRICELIST.ACTIVE = '1'
              ORDER BY $sort_field $order";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $specoffers[$dbw->field_by_name("ID")] = array("price" => aux_calc_round_price($dbw->field_by_name("PRICE"), $rate, $settings),
                                                     "nights_count" =>$dbw->field_by_name("NIGHTS_COUNT"),
                                                     "name" =>$dbw->field_by_name("NAME"),
                                                     "description" =>$dbw->field_by_name("DESCRIPTION"),
                                                     "info" =>$dbw->field_by_name("INFO"),
                                                     "persons_count" =>$dbw->field_by_name("PERSONS_COUNT"),
                                                     "room_id" =>$dbw->field_by_name("ROOM_ID"),
                                                     "room" =>$dbw->field_by_name("ROOM"),
                                                     "concern_room_rules" =>$dbw->field_by_name("CONCERN_ROOM_RULES"),
                                                     "weekday_flag" =>$dbw->field_by_name("WEEKDAY_FLAG")
                                                     );
    }

    $dbw->free_result();

    unset($room);

    foreach($specoffers as $soid => $specoffer)
    {
      $room = $rooms[$specoffer["room_id"]];
      
      //debug_message($specoffer["name"] . ":" . $room["type"] . ": " . $specoffer["nights_count"]);
      //debug_message(date("d.m.Y H:i:s", $arrive_time));
      
      $departure_time = $arrive_time + 3600*24*$specoffer["nights_count"];
      
      //debug_message(date("d.m.Y H:i:s", $departure_time));
      //debug_message("-----");
      
      foreach($dates as $date)
      {
        if(empty($room["dates"][format_date($date, 'Y-m-d')]))
        {
          $specoffers[$soid]["unavailable_dates"][$date] = format_date($date, "Y-m-d");
          $specoffers[$soid]["unavailable_dates_status_0"][$date] = format_date($date, "Y-m-d");
          continue;
        }

        $rdata = $room["dates"][format_date($date, 'Y-m-d')];

        // if integrated with external services
        // we do not set $room["unavailable_dates_status_5"]

        if($rdata["room_count"] == 0 && strtotime($date) != $departure_time && isset($room["unavailable_dates_status_5"]))
        {
          $specoffers[$soid]["unavailable_dates"][$date] = format_date($date, "Y-m-d");
          $specoffers[$soid]["unavailable_dates_status_5"][$date] = format_date($date, "Y-m-d");
        }

        $w = date("w", strtotime(format_date($date, "Y-m-d")));
        if($w == 0) $w = 7;
        $w--;
        $may_not_arrive = (pow(2, $w) & $specoffer["weekday_flag"]) == 0;

        $specoffers[$soid]["dates"][$date]["may_not_arrive"] = $may_not_arrive || (!empty($specoffer["concern_room_rules"]) && empty($rdata["arrival"]));

        $specoffers[$soid]["dates"][$date]["may_not_depart"] = (!empty($specoffer["concern_room_rules"]) && empty($rdata["departure"]));

        if( (!empty($specoffer["concern_room_rules"]) && strtotime($date) == $arrive_time && empty($rdata["arrival"])) ||
            ($may_not_arrive && strtotime($date) == $arrive_time)
          )
        {
          $specoffers[$soid]["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
          $specoffers[$soid]["unavailable_dates_status_3"] = $dates;
        }

        if(!empty($specoffer["concern_room_rules"]) && strtotime($date) == $departure_time && empty($rdata["departure"]))
        {
          $specoffers[$soid]["unavailable_dates"][$date] = format_date($date, 'Y-m-d');
          $specoffers[$soid]["unavailable_dates_status_4"] = $dates;
        }
        
        if(strtotime($date) >= $departure_time) break;
      }
      
      if(!empty($room["arrive_dates_2"]))
      foreach($room["arrive_dates_2"] as $date => $status)
      {
        $w = date("w", strtotime(format_date($date, "Y-m-d")));
        if($w == 0) $w = 7;
        $w--;
        $may_not_arrive = (pow(2, $w) & $specoffers[$soid]["weekday_flag"]) == 0;

        $specoffers[$soid]["dates"][$date]["may_not_arrive"] = $may_not_arrive || (!empty($specoffer["concern_room_rules"]) && empty($room["arrive_dates_2"][$date]));
      }

      if(!empty($room["departure_dates_2"]))
      foreach($room["departure_dates_2"] as $date => $status)
      {
        $w = date("w", strtotime(format_date($date, "Y-m-d")));
        if($w == 0) $w = 7;
        $w--;
        $may_not_arrive = (pow(2, $w) & $specoffers[$soid]["weekday_flag"]) == 0;

        $specoffers[$soid]["dates"][$date]["may_not_depart"] = (!empty($specoffer["concern_room_rules"]) && empty($room["departure_dates_2"][$date]));
      }
    }
  } // get_available_rooms
  //-----------------------------------------------------------------
  function get_total_spec_offer_list($arrive_date, &$page_info, &$spec_offer_list, &$room_list, &$person_list, &$night_list)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_id = $dbw->escape($page_info["langid"]);

    $arrive_date = $dbw->format_datetime($arrive_date);

    $query = "SELECT {$prfx}_HTL_SPECIAL_OFFER.ID, PRICE, NIGHTS_COUNT, PERSONS_COUNT, {$prfx}_HTL_PRICELIST.I_NAME PL_NAME,
              {$prfx}_HTL_ROOMS.I_NAME RNAME,
              {$prfx}_HTL_PRICELIST_PROPS.NAME SO_NAME, {$prfx}_HTL_ROOMS_PROPS.TYPE ROOM, {$prfx}_HTL_PRICELIST_PROPS.PRICELIST_ID,
              {$prfx}_HTL_SPECIAL_OFFER.ROOM_ID
              FROM {$prfx}_HTL_SPECIAL_OFFER
              INNER JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_SPECIAL_OFFER.ROOM_ID = {$prfx}_HTL_ROOMS.ID)
              INNER JOIN {$prfx}_HTL_PRICELIST ON ({$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID = {$prfx}_HTL_PRICELIST.ID)
              LEFT JOIN {$prfx}_HTL_PRICELIST_PROPS ON ({$prfx}_HTL_PRICELIST_PROPS.PRICELIST_ID = {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID AND {$prfx}_HTL_PRICELIST_PROPS.LANGUAGE_ID = $lang_id)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS_PROPS.ROOM_ID = {$prfx}_HTL_ROOMS.ID AND {$prfx}_HTL_ROOMS_PROPS.LANGUAGE_ID = $lang_id)
              WHERE {$prfx}_HTL_PRICELIST_PROPS.ACTIVE = '1' AND {$prfx}_HTL_PRICELIST.ACTIVE = '1'
              ORDER BY SORT_ORDER, PERSONS_COUNT, NIGHTS_COUNT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $name = $dbw->field_by_name("SO_NAME") . ", " . $dbw->field_by_name("ROOM") . " (" .
                    hotel::$words["persons"][$_SESSION["ulang"]] . ": " . $dbw->field_by_name("PERSONS_COUNT") . ", " .
                    hotel::$words["Nights"][$_SESSION["ulang"]] . ": " . $dbw->field_by_name("NIGHTS_COUNT") . ")";

      $spec_offer_list[$dbw->field_by_name("PRICELIST_ID")]["name"] = $dbw->field_by_name("SO_NAME");
      $spec_offer_list[$dbw->field_by_name("PRICELIST_ID")]["iname"] = $dbw->field_by_name("PL_NAME");

      $spec_offer_list[$dbw->field_by_name("PRICELIST_ID")]["rooms"][$dbw->field_by_name("RNAME")] = $dbw->field_by_name("ROOM");
      
      $room_list[$dbw->field_by_name("RNAME")] = $dbw->field_by_name("ROOM");
      $person_list[$dbw->field_by_name("PERSONS_COUNT")] = $dbw->field_by_name("PERSONS_COUNT");
      $night_list[$dbw->field_by_name("NIGHTS_COUNT")] = $dbw->field_by_name("NIGHTS_COUNT");
    }

    sort($person_list);
    sort($night_list);

    $dbw->free_result();
  } // get_total_spec_offer_list
  //-----------------------------------------------------------------
  function render_available_spec_rooms(&$page_info, &$rooms, $template, $rate, $sign, &$settings)
  {
    if(count($_SESSION["booking"]["step1"]["available_spec_offers"]) == 0)
    {
       if(preg_match("/<!--[\s]*no available rooms:begin[\s]*-->.+<!--[\s]*no available rooms:end[\s]*-->/Us", $template, $matches))
           $rooms = $matches[0];
    }
    else
    {
      $rooms = '';
      foreach($_SESSION["booking"]["step1"]["available_spec_offers"] as $spid => $spec_offer_data)
      {
        $room_id = $spec_offer_data["room_id"];

        $room = array();
        if(!empty($_SESSION["booking"]["step1"]["available_rooms"][$room_id]))
        {
          $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        }

        if(preg_match("/<!--[\s]*available spec_room:begin[\s]*-->.+<!--[\s]*available spec_room:end[\s]*-->/Us", $template, $matches))
        {
          $rooms .= $matches[0];

          $this->render_room_data($rooms, $room, $room_id);
          //room count select
          $room_count_select = '';
          $unavailable_dates_list = '';
          $count = '&mdash;';

          $error_exists = false;
          
          if((!isset($spec_offer_data["unavailable_dates"]) || count($spec_offer_data["unavailable_dates"]) == 0))
          {
            $room_count_select .= "<select name='booking[selected_rooms][$spid]'>";

              $count = (int) $room["available_room_count"];
              for($i = 0; $i <= $count; $i++)
              {
                $selected = (isset($_SESSION["booking"]["step2"]) && ifnull($_SESSION["booking"]["step2"]["selected_rooms"][$spid]) == $i) ? ' selected="true"' : '';
                if($i == 0 && !isset($_SESSION["booking"]["step2"]))
                  $selected = ' selected="true"';
                if($i == 0)
                {
                  $room_count_select .= "<option value='' {$selected}>&mdash;</option>";
                  continue;
                }
                $room_count_select .= "<option value={$i}{$selected}>{$i}</option>";
              }

            $room_count_select .= "</select>";
          }
          else
          {
            if(preg_match("/<!--[\s]*unavailable dates:begin[\s]*-->.+<!--[\s]*unavailable dates:end[\s]*-->/Us", $template, $matches2))
            {
              $room_count_select = $matches2[0];

              $unavailable_statuses_list = '<ul class="unavailable_dates">';

              if(!empty($spec_offer_data["unavailable_dates_status_0"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRecordOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($spec_offer_data["unavailable_dates_status_0"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("RoomIsNotAvailable", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($spec_offer_data["unavailable_dates_status_6"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRecordOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($spec_offer_data["unavailable_dates_status_6"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("RoomIsNotAvailable", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($spec_offer_data["unavailable_dates_status_3"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["ArrivalIsNotAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                if(!empty($room["arrive_dates_2"]))
                foreach($room["arrive_dates_2"] as $date => $status)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(!empty($spec_offer_data["dates"][$date]["may_not_arrive"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoArrive", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayArrive", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                foreach($spec_offer_data["unavailable_dates_status_3"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(!empty($spec_offer_data["dates"][$date]["may_not_arrive"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoArrive", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayArrive", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($spec_offer_data["unavailable_dates_status_4"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["DepartureIsNotAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                foreach($spec_offer_data["unavailable_dates_status_4"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(!empty($spec_offer_data["dates"][$date]["may_not_depart"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoDeparture", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayDeparture", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                if(!empty($room["departure_dates_2"]))
                foreach($room["departure_dates_2"] as $date => $status)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(!empty($spec_offer_data["dates"][$date]["may_not_depart"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoDeparture", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayDeparture", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($spec_offer_data["unavailable_dates_status_5"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRoomsAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
                if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
                {
                  $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
                }

                foreach($spec_offer_data["unavailable_dates_status_5"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.$CountText.': '.$room["dates"][$date]["room_count"];
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }
              elseif(empty($room["available_room_count"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRoomsAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '</li>';
              }

              $unavailable_statuses_list .= '</ul>';
            }
            $room_count_select = str_ireplace("{unavailable_statuses_list}", $unavailable_statuses_list, $room_count_select);
            $error_exists = true;
          }

          if(!empty($settings["hide_freerooms"]))
          {
            $val = "";
            if(!empty($_SESSION["booking"]["step2"]["selected_rooms"][$spid]))
              $val = $_SESSION["booking"]["step2"]["selected_rooms"][$spid];

            $input = "<input type='text' name='booking[selected_rooms][$spid]' value='$val' class='room_count'>";

            $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
            if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
            {
              $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
            }

            if($error_exists)
            {
              $rooms = str_ireplace("{choose_room_select}", $room_count_select, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count}", "", $rooms);
            }
            else
            {
              $rooms = str_ireplace("{choose_room_select}", $input, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count}", $CountText, $rooms);
            }
          }
          else
          {
            $rooms = str_ireplace("{choose_room_select}", $room_count_select, $rooms);
            $rooms = str_ireplace("{free_rooms_count}", $count, $rooms);
          }

          if(!empty($settings["hide_freerooms_mobile"]))
          {
            $val = "";
            if(!empty($_SESSION["booking"]["step2"]["selected_rooms"][$spid]))
              $val = $_SESSION["booking"]["step2"]["selected_rooms"][$spid];

            $input = "<input type='text' name='booking[selected_rooms][$spid]' value='$val' class='room_count'>";

            $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
            if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
            {
              $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
            }

            if($error_exists)
            {
              $rooms = str_ireplace("{choose_room_select_mb}", $room_count_select, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count_mb}", "", $rooms);
            }
            else
            {
              $rooms = str_ireplace("{choose_room_select_mb}", $input, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count_mb}", $CountText, $rooms);
            }
          }
          else
          {
            $rooms = str_ireplace("{choose_room_select_mb}", $room_count_select, $rooms);
            $rooms = str_ireplace("{free_rooms_count_mb}", $count, $rooms);
          }

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          $rooms = str_ireplace("{mandatory_services}", $services, $rooms);

          $rooms = str_ireplace("{specoffer_nights}", $spec_offer_data["nights_count"], $rooms);
          $rooms = str_ireplace("{specoffer_persons}", $spec_offer_data["persons_count"], $rooms);
          $rooms = str_ireplace("{specoffer_name}", $spec_offer_data["name"], $rooms);
          $rooms = str_ireplace("{specoffer_info}", $spec_offer_data["info"], $rooms);

          $room_price =  $spec_offer_data["price"];
          $rooms = str_ireplace("{specoffer_price}", $room_price, $rooms);
        }//preg_match(available_room)
      }//foreach
    }//else
  } // render_available_spec_rooms
  //-----------------------------------------------------------------
  function render_complex_plan_block(&$price_text, &$room, $sign, $page_info, $rate, $template, $settings)
  {
    $caption = ifnull($room["spec_discount_comment"]);
    if(empty($caption)) $caption = hotel::$words["StandardTarif"][$_SESSION["ulang"]];
    
    $minprice = hotel::$words["From"][$_SESSION["ulang"]] . " " . number_format($this->get_min_room_price($room), 2, ",", "") . " " . $sign;
    
    $display = "";
    if(!empty($room["hide_closed"])) $display = "style='display:none'";
    
    $block = "";
    $block .= "<div class='plan_block_caption' $display>";
    $checked = (empty($_SESSION["booking"]["step2"]["selected_plans"][$room["room_id"]]) ||!empty($room["hide_closed"])) ? "checked" : "";

    $addinfo = "";
    if(!empty($room["addinfo"]))
    {
      $addinfo = '<img class="htl_price_info" alt="info" src="modules/hotel/img/info.gif" onclick="show_in_lightbox(\'arp_add_info_' . $room["room_id"] . '\')"><div style="display:none" id="arp_add_info_' . $room["room_id"] . '">' . $room["addinfo"] . '</div>';
    }

    $block .= "<table><tr><td><input type='radio' value='' name='booking[selected_plans][$room[room_id]]' $checked></td><td>" . escape_html($caption) . " $addinfo</td><td>" . $minprice . "</td><td class='toggle_plan_details' onclick='toggle_plan_details(this)'></td></tr></table>";
    $block .= "</div>";

    $block .= "<div class='plan_block' style='display:none'>";
    $block .= $price_text;
    $block .= "</div>";
    
    $first_additional_plan = true;
    foreach($room["add_rate_plans"] as $pid => &$pinfo)
    {
      $minprice = hotel::$words["From"][$_SESSION["ulang"]] . " " . number_format($this->get_min_room_price($pinfo["price_info"]), 2, ",", "") . " " . $sign;
      
      $block .= "<div class='plan_block_caption'>";
      $checked = (ifnull($_SESSION["booking"]["step2"]["selected_plans"][$room["room_id"]]) == $pid || ($first_additional_plan && !empty($room["hide_closed"]) && empty($_SESSION["booking"]["step2"]["selected_plans"][$room["room_id"]]))) ? "checked" : "";
      
      $addinfo = "";
      if(!empty($pinfo["addinfo"]))
      {
        $addinfo = '<img alt="info" class="htl_price_info" src="modules/hotel/img/info.gif" onclick="show_in_lightbox(\'rp_add_info_' . $pid . '\')"><div style="display:none" id="rp_add_info_' . $pid . '">' . $pinfo["addinfo"] . '</div>';
      }
      
      $block .= "<table><tr><td><input type='radio' value='$pid' name='booking[selected_plans][$room[room_id]]' $checked></td><td>" . escape_html($pinfo["caption"]) . " $addinfo</td><td>" . $minprice . "</td><td class='toggle_plan_details' onclick='toggle_plan_details(this)'></td></tr></table>";
      $block .= "</div>";
      
      $price = "";
      
      if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches))
      {
        if(!empty($pinfo["price_info"]["average_price_adult"]) && empty($pinfo["price_info"]["adult_no_price"]))
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);

          $price_type = "price_adult";
          if(ifnull($room["room_type"]) == "holiday_home_fixed") $price_type .= " apartment_fixed";
          if(ifnull($room["room_type"]) == "hotel_room_fixed") $price_type .= " room_fixed";

          $price = str_ireplace("{price_type}", $price_type, $price);
          $price = str_ireplace("{age}", "", $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult2"]) && empty($pinfo["price_info"]["adult_no_price2"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult2"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult2", $price);
          $price = str_ireplace("{age}", "", $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult2") && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult2", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult_child"]) && empty($pinfo["price_info"]["adult_child_no_price"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult_child"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult_child", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult_child"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult_child", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult_child2"]) && empty($pinfo["price_info"]["adult_child_no_price2"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult_child2"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult_child2", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult_child2"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult_child2", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult_child3"]) && empty($pinfo["price_info"]["adult_child_no_price3"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult_child3"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult_child3", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult_child3"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult_child3", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult_child4"]) && empty($pinfo["price_info"]["adult_child_no_price4"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult_child4"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult_child4", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult_child4"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult_child4", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult3"]) && empty($pinfo["price_info"]["adult_no_price3"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult3"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult3", $price);
          $price = str_ireplace("{age}", "", $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult3"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult3", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_adult4"]) && empty($pinfo["price_info"]["adult_no_price4"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_adult4"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_adult4", $price);
          $price = str_ireplace("{age}", "", $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_adult4"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_adult4", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if(!empty($pinfo["price_info"]["average_price_add_adult"]) && empty($pinfo["price_info"]["add_adult_no_price"]) && 
           ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_add_adult"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_add_adult", $price);
          $price = str_ireplace("{age}", "", $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_add_adult"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_add_adult", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if((!empty($pinfo["price_info"]["average_price_add_child"]) && empty($pinfo["price_info"]["add_child_no_price"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($pinfo["price_info"]["force_add_child"]))
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_add_child"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_add_child", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_add_child"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_add_child", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if((!empty($pinfo["price_info"]["average_price_add_child2"]) && empty($pinfo["price_info"]["add_child_no_price2"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($pinfo["price_info"]["force_add_child2"]))
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_add_child2"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_add_child2", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_add_child2"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_add_child2", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if((!empty($pinfo["price_info"]["average_price_add_child3"]) && empty($pinfo["price_info"]["add_child_no_price3"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($pinfo["price_info"]["force_add_child3"]))
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_add_child3"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_add_child3", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_add_child3"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_add_child3", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }

        if((!empty($pinfo["price_info"]["average_price_add_child4"]) && empty($pinfo["price_info"]["add_child_no_price4"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($pinfo["price_info"]["force_add_child4"]))
        {
          $blprice =  number_format($pinfo["price_info"]["average_price_add_child4"], 2, ',', '');
          $price .= str_ireplace("{price}", $blprice, $matches[0]);
          $price = str_ireplace("{price_type}", "price_add_child4", $price);
          $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
          $average_price = '';

          if(!$this->compare_prices(1, $pinfo["price_info"], "price_add_child4"))
          {
            $average_price = '';
            $this->render_average_price_block($average_price, $pinfo["price_info"], $sign, $rate, "price_add_child4", $page_info, $template, $settings);
          }
          $price = str_ireplace("{average_price}", $average_price, $price);
        }
      }//preg_match(price per person)

      $block .= "<div class='plan_block' style='display:none'>";
      $block .= $price;
      
      if(!empty($pinfo["services"]))
      {
        $block .= "<div class='plan_block_services'>";
        $block .= hotel::$words["Inklusive"][$_SESSION["ulang"]] . ":";
        $block .= "<ul>";
        foreach($pinfo["services"] as $iservice)
        {
          $child_discount = "";
          if(!empty($iservice["child_discount"]))
          {
            $child_discount = ", " . hotel::$words["Children"][$_SESSION["ulang"]] . ": " . number_format($iservice["children_price"], 2, ",", "").' '.$sign;
          }
          
          $block .= "<li>" . $iservice["title"] . " (" . hotel::$words["PerPerson"][$_SESSION["ulang"]] . ": " . $iservice["price"] . " " . $sign . $child_discount . ")</li>\n";
        }
        $block .= "</ul></div>";
      }
      
      $block .= "</div>";
      $first_additional_plan = false;
    }
    
    $price_text = $block;    
  } // render_complex_plan_block
  //-----------------------------------------------------------------
  function render_available_rooms(&$page_info, &$rooms, $template, $rate, $sign, &$settings)
  {
    if(count($_SESSION["booking"]["step1"]["available_rooms"]) == 0)
    {
       if(preg_match("/<!--[\s]*no available rooms:begin[\s]*-->.+<!--[\s]*no available rooms:end[\s]*-->/Us", $template, $matches))
           $rooms = $matches[0];
    }
    else
    {
      $rooms = '';
      foreach($_SESSION["booking"]["step1"]["available_rooms"] as $room_id => $room)
      {
        if(preg_match("/<!--[\s]*available room:begin[\s]*-->.+<!--[\s]*available room:end[\s]*-->/Us", $template, $matches))
        {
          $rooms .= $matches[0];

          $this->render_room_data($rooms, $room, $room_id);
          //room count select
          $room_count_select = '';
          $unavailable_dates_list = '';
          $count = '&mdash;';

          $error_exists = false;

          if((!isset($room["unavailable_dates"]) || count($room["unavailable_dates"]) == 0) && !empty($room["available_room_count"]))
          {
            $room_count_select .= "<select name='booking[selected_rooms][$room_id]'>";

              $count = (int) $room["available_room_count"];
              for($i = 0; $i <= $count; $i++)
              {
                $selected = (isset($_SESSION["booking"]["step2"]) && ifnull($_SESSION["booking"]["step2"]["selected_rooms"][$room_id]) == $i) ? ' selected="true"' : '';
                if($i == 0 && !isset($_SESSION["booking"]["step2"]))
                  $selected = ' selected="true"';
                if($i == 0)
                {
                  $room_count_select .= "<option value='' {$selected}>&mdash;</option>";
                  continue;
                }
                $room_count_select .= "<option value={$i}{$selected}>{$i}</option>";
              }

            $room_count_select .= "</select>";
          }
          else
          {
            if(preg_match("/<!--[\s]*unavailable dates:begin[\s]*-->.+<!--[\s]*unavailable dates:end[\s]*-->/Us", $template, $matches2))
            {
              $room_count_select = $matches2[0];

              $unavailable_statuses_list = '<ul class="unavailable_dates">';

              if(!empty($room["unavailable_dates_status_0"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRecordOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($room["unavailable_dates_status_0"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("RoomIsNotAvailable", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($room["unavailable_dates_status_6"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRecordOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($room["unavailable_dates_status_6"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("RoomIsNotAvailable", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($room["unavailable_dates_status_1"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["MinNightsRestriction"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["MinNightsRestrictionTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($room["unavailable_dates_status_1"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MinNights", $page_info["lang"]).': '.$room["dates"][$date]["min_nights"];
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($room["unavailable_dates_status_2"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["MaxNightsRestriction"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["MaxNightsRestrictionTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                foreach($room["unavailable_dates_status_2"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MaxNights", $page_info["lang"]).': '.$room["dates"][$date]["max_nights"];
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($room["unavailable_dates_status_3"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["ArrivalIsNotAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                if(!empty($room["arrive_dates_2"]))
                foreach($room["arrive_dates_2"] as $date => $status)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(empty($status))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoArrive", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayArrive", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                foreach($room["unavailable_dates_status_3"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(empty($room["dates"][$date]["arrival"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoArrive", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayArrive", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              if(!empty($room["unavailable_dates_status_4"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["DepartureIsNotAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                foreach($room["unavailable_dates_status_4"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(empty($room["dates"][$date]["departure"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoDeparture", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayDeparture", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                if(!empty($room["departure_dates_2"]))
                foreach($room["departure_dates_2"] as $date => $status)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(empty($status))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("NoDeparture", $page_info["lang"]);
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.try_translate("MayDeparture", $page_info["lang"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }

              
              if(!empty($room["unavailable_dates_status_7"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["RoomsClosedOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';

                foreach($room["unavailable_dates_status_7"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  if(!empty($room["dates"][$date]["closed"]))
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.hotel::$words["RoomClosed"][$_SESSION["ulang"]];
                  else
                    $unavailable_statuses_list .= '&nbsp;-&nbsp;'.hotel::$words["RoomOpen"][$_SESSION["ulang"]];
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }

                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }
              
              if(!empty($room["unavailable_dates_status_5"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRoomsAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '<img alt="error" src="modules/hotel_extended/images/error.png" onclick="htl_booking.show_unavailable_dates_details(this);" onmouseout="htl_booking.hide_unavailable_text(this);" onmouseover="htl_booking.show_unavailable_text(this);" style="cursor:pointer;">';
                $unavailable_statuses_list .= '<div class="text" style="position:absolute; display:none;">'.hotel::$words["NoRoomsAvailableOnThisDateTooltip"][$_SESSION["ulang"]].'</div>';
                $unavailable_statuses_list .= '<div class="dates" style="display:none;">';
                $unavailable_statuses_list .= '<table>';
                $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
                if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
                {
                  $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
                }
                foreach($room["unavailable_dates_status_5"] as $date)
                {
                  $unavailable_statuses_list .= '<tr>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= format_date($date, $page_info["date_format"]);
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '<td>';
                  $unavailable_statuses_list .= '&nbsp;-&nbsp;'.$CountText.': '.$room["dates"][$date]["room_count"];
                  $unavailable_statuses_list .= '</td>';
                  $unavailable_statuses_list .= '</tr>';
                }
                $unavailable_statuses_list .= '</table>';
                $unavailable_statuses_list .= '</div>';
                $unavailable_statuses_list .= '</li>';
              }
              elseif(empty($room["available_room_count"]))
              {
                $unavailable_statuses_list .= '<li>';
                $unavailable_statuses_list .= hotel::$words["NoRoomsAvailableOnThisDate"][$_SESSION["ulang"]];
                $unavailable_statuses_list .= '</li>';
              }


              $unavailable_statuses_list .= '</ul>';
            }
            $room_count_select = str_ireplace("{unavailable_statuses_list}", $unavailable_statuses_list, $room_count_select);
            $error_exists = true;
          }

          if(!empty($settings["hide_freerooms"]))
          {
            $val = "";
            if(!empty($_SESSION["booking"]["step2"]["selected_rooms"][$room_id]))
              $val = $_SESSION["booking"]["step2"]["selected_rooms"][$room_id];

            $input = "<input type='text' name='booking[selected_rooms][$room_id]' value='$val' class='room_count'>";

            if($error_exists)
            {
              $rooms = str_ireplace("{choose_room_select}", $room_count_select, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count}", "", $rooms);
            }
            else
            {
              $rooms = str_ireplace("{choose_room_select}", $input, $rooms);
              $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
              if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
              {
                $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
              }
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count}", $CountText, $rooms);
            }
          }
          else
          {
            $rooms = str_ireplace("{choose_room_select}", $room_count_select, $rooms);

            $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
            if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
            {
              $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
            }
            $rooms = str_ireplace("{word:FreeRooms}", $CountText, $rooms);

            $rooms = str_ireplace("{free_rooms_count}", $count, $rooms);
          }

          if(!empty($settings["hide_freerooms_mobile"]))
          {
            $val = "";
            if(!empty($_SESSION["booking"]["step2"]["selected_rooms"][$room_id]))
              $val = $_SESSION["booking"]["step2"]["selected_rooms"][$room_id];

            $input = "<input type='text' name='booking[selected_rooms][$room_id]' value='$val' class='room_count'>";

            if($error_exists)
            {
              $rooms = str_ireplace("{choose_room_select_mb}", $room_count_select, $rooms);
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count_mb}", "", $rooms);
            }
            else
            {
              $rooms = str_ireplace("{choose_room_select_mb}", $input, $rooms);
              $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
              if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
              {
                $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
              }
              $rooms = str_ireplace("{word:FreeRooms}:{free_rooms_count_mb}", $CountText, $rooms);
            }
          }
          else
          {
            $rooms = str_ireplace("{choose_room_select_mb}", $room_count_select, $rooms);

            $CountText = hotel::$words["RoomsCount"][$_SESSION["ulang"]];
            if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
            {
              $CountText = hotel::$words["ApartsCount"][$_SESSION["ulang"]];
            }
            $rooms = str_ireplace("{word:FreeRooms}", $CountText, $rooms);

            $rooms = str_ireplace("{free_rooms_count_mb}", $count, $rooms);
          }
          
          // partners
          
          $partner_token = "";
          $partner_text = "";

          if(preg_match("/<!--[\s]*partners:begin[\s]*-->(.+)<!--[\s]*partners:end[\s]*-->/Us", $rooms, $matches2))
          {
            $partner_token = $matches2[0];
            $partner_text = $matches2[1];
          }
          
          $partner_exists = (!empty($room["partner_name1"]) && !empty($room["partner_url1"])) ||
                            (!empty($room["partner_name2"]) && !empty($room["partner_url2"])) ||
                            (!empty($room["partner_name3"]) && !empty($room["partner_url3"])) ||
                            (!empty($room["partner_name4"]) && !empty($room["partner_url4"])) ||
                            (!empty($room["partner_name5"]) && !empty($room["partner_url5"]));
          
          if($partner_exists &&
               ( ($error_exists && !empty($room["partner_display_if_empty"])) ||
                 ($room["available_room_count"] < ifnull($room["partner_display_if_lower"])) 
               )
            )
          {
            $partner_list = "<ul>";     
            
            for($i = 1; $i<= 5; $i++)
            {
              if(empty($room["partner_name$i"]) || empty($room["partner_url$i"])) continue;
              
              $url = $room["partner_url$i"];
              
              $url = str_ireplace("{lang}", $page_info["lang"], $url);
              $url = str_ireplace("{begin_date}", $_SESSION["booking"]["data"]["arrive_date"], $url);
              $url = str_ireplace("{end_date}", $_SESSION["booking"]["data"]["departure_date"], $url);
              $url = str_ireplace("{persons}", $_SESSION["booking"]["data"]["persons"], $url);

              $partner_list .= "<li><a href='$url' target='_blank'>" . escape_html($room["partner_name$i"]) . "</a></li>";
            }
            
            $partner_list .= "</ul>";     
            $partner_text = str_ireplace("{partners}", $partner_list, $partner_text);
          }
          else
          {
            $partner_text = "";
          }
          
          if(!empty($matches2[0]))
            $rooms = str_replace($matches2[0], $partner_text, $rooms); 
          
          //room prices
          
          $rooms = str_ireplace("{pricing_type}", try_translate("PricePerPerson", $page_info["lang"]), $rooms);
          $price = '';

          if(empty($room["unavailable_dates_status_0"]) && empty($room["unavailable_dates_status_6"]))
          {
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches))
            {
              if(!empty($room["average_price_adult"]) && empty($room["adult_no_price"]))
              {
                $room_price =  number_format($room["average_price_adult"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);

                $price_type = "price_adult";
                if(ifnull($room["room_type"]) == "holiday_home_fixed") $price_type .= " apartment_fixed";
                if(ifnull($room["room_type"]) == "hotel_room_fixed") $price_type .= " room_fixed";

                $price = str_ireplace("{price_type}", $price_type, $price);
                $price = str_ireplace("{age}", "", $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult2"]) && empty($room["adult_no_price2"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult2"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult2", $price);
                $price = str_ireplace("{age}", "", $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult2") && 
                   ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult2", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult_child"]) && empty($room["adult_child_no_price"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult_child"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult_child", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult_child"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult_child2"]) && empty($room["adult_child_no_price2"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult_child2"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult_child2", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult_child2"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child2", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult_child3"]) && empty($room["adult_child_no_price3"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult_child3"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult_child3", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult_child3"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child3", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult_child4"]) && empty($room["adult_child_no_price4"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult_child4"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult_child4", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult_child4"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child4", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult3"]) && empty($room["adult_no_price3"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult3"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult3", $price);
                $price = str_ireplace("{age}", "", $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult3"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult3", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_adult4"]) && empty($room["adult_no_price4"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_adult4"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_adult4", $price);
                $price = str_ireplace("{age}", "", $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_adult4"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult4", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if(!empty($room["average_price_add_adult"]) && empty($room["add_adult_no_price"]) && 
                 ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
              {
                $room_price =  number_format($room["average_price_add_adult"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_add_adult", $price);
                $price = str_ireplace("{age}", "", $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_add_adult"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_adult", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if((!empty($room["average_price_add_child"]) && empty($room["add_child_no_price"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child"]))
              {
                $room_price =  number_format($room["average_price_add_child"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_add_child", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_add_child"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if((!empty($room["average_price_add_child2"]) && empty($room["add_child_no_price2"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child2"]))
              {
                $room_price =  number_format($room["average_price_add_child2"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_add_child2", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_add_child2"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child2", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if((!empty($room["average_price_add_child3"]) && empty($room["add_child_no_price3"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child3"]))
              {
                $room_price =  number_format($room["average_price_add_child3"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_add_child3", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_add_child3"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child3", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }

              if((!empty($room["average_price_add_child4"]) && empty($room["add_child_no_price4"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child4"]))
              {
                $room_price =  number_format($room["average_price_add_child4"], 2, ',', '');
                $price .= str_ireplace("{price}", $room_price, $matches[0]);
                $price = str_ireplace("{price_type}", "price_add_child4", $price);
                $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
                $average_price = '';

                if(!$this->compare_prices(1, $room, "price_add_child4"))
                {
                  $average_price = '';
                  $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child4", $page_info, $template, $settings);
                }
                $price = str_ireplace("{average_price}", $average_price, $price);
              }
            }//preg_match(price per person)
          }
          
          if(!empty($room["add_rate_plans"]))
          {
            $this->render_complex_plan_block($price, $room, $sign, $page_info, $rate, $template, $settings);
          }
          elseif(!empty($room["spec_discount_comment"]) && !empty($room["alt_plan_active"]))
          {
            $addinfo = "";
            if(!empty($room["addinfo"]))
            {
              $addinfo = '<img alt="info" class="htl_price_info" src="modules/hotel/img/info.gif" onclick="show_in_lightbox(\'arp_add_info_' . $room["room_id"] . '\')"><div style="display:none" id="arp_add_info_' . $room["room_id"] . '">' . $room["addinfo"] . '</div>';
            }
            
            $price .= '<div class="room_discount_comment">' . escape_html($room["spec_discount_comment"]) . ' ' . $addinfo . '</div>';
          }
          
          $rooms = str_ireplace("{rate_comment}", nl2br(escape_html(str_ireplace("{sign}", $sign, ifnull($room["rate_comment"])))), $rooms);

          $rooms = str_ireplace("{room_prices}", $price, $rooms);

          $room_price_type = hotel::$words["PricePerRoom"][$_SESSION["ulang"]];
          if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
          {
            $room_price_type = hotel::$words["PricePerApartment"][$_SESSION["ulang"]];
          }
          $rooms = str_ireplace("{room_price_type}", $room_price_type, $rooms);

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          $rooms = str_ireplace("{mandatory_services}", $services, $rooms);
          $rooms = str_ireplace("{max_persons}", $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_persons"], $rooms);
        }//preg_match(available_room)
      }//foreach
    }//else
  } // render_available_rooms
  //-----------------------------------------------------------------
  function render_selected_rooms(&$page_info, &$rooms, $template, $rate, $sign, &$settings)
  {
    $rooms = '';

    if(preg_match("/<!--[\s]*selected rooms:begin[\s]*-->.+<!--[\s]*selected rooms:end[\s]*-->/Us", $template, $matches))
    {
      foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $room_id => $count)
      {
        if($count == 0)
          continue;

        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        
        $rooms_count = (int) $count;
        for($i = 0; $i < $rooms_count; $i++)
        {
          $rooms .= $matches[0];
          $this->render_room_data($rooms, $room, $room_id);

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          
          $rate_plan = ifnull($_SESSION["booking"]["step2"]["selected_plans"][$room_id]);
          if(!empty($room["add_rate_plans"][$rate_plan]["services"]))
          {
            $services .= '<ul class="rate_additional_services_list">';
            
            foreach($room["add_rate_plans"][$rate_plan]["services"] as $iservice)
            {
              $child_discount = "";
              if(!empty($iservice["child_discount"]))
              {
                switch($iservice["child_discount_flag"])
                {
                  case 0: 
                    $child_discount = ", " . hotel::$words["Children"][$_SESSION["ulang"]] . ": " . number_format($iservice["price"] - $iservice["child_discount"], 2, ",", "").' '.$sign;
                  break;
                  
                  case 1:
                    $child_discount = ", " . hotel::$words["Children"][$_SESSION["ulang"]] . ": " . number_format($iservice["price"] - $iservice["price"]*$iservice["child_discount"]/100, 2, ",", "") . ' '.$sign;
                  break;
                }      
              }
              $services .= "<li>" . $iservice["title"] . " (" . hotel::$words["PerPerson"][$_SESSION["ulang"]] . ": " . number_format($iservice["price"], 2, ",", "") . " " . $sign . $child_discount . ")</li>\n";
            }
            
            $services .= '</ul>';
          }
          
          $rooms = str_ireplace("{mandatory_services}", $services, $rooms);

          //select persons
          $select_persons = '';
          if($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["with_children"] == 1)
          {
            $child_yo = str_ireplace("%s", $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_child_age"], try_translate("UnderYO", $page_info["lang"]));
          }
          else
          {
            $child_yo = '';
          }

          $std_allocation_price_name = trim("adult" . $room["standard_allocation"], "1");
          
          $rooms = str_ireplace("{pricing_type}", try_translate("PricePerPerson", $page_info["lang"]), $rooms);
          $select_persons .= '<ul>';

          if(!empty($room["average_price_adult"]) && empty($room["adult_no_price"]))
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult')
              $checked = ' checked="true"';

            if(ifnull($room["room_type"]) == "holiday_home_fixed" || ifnull($room["room_type"]) == "hotel_room_fixed") $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);

              $price_type = "price_adult";
              if(ifnull($room["room_type"]) == "holiday_home_fixed") $price_type .= " apartment_fixed";
              if(ifnull($room["room_type"]) == "hotel_room_fixed") $price_type .= " room_fixed";

              $price = str_ireplace("{price_type}", $price_type, $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';

            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult2"]) && empty($room["adult_no_price2"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult2')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult2')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult2"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child"]) && empty($room["adult_child_no_price"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult_child"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child2"]) && empty($room["adult_child_no_price2"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child2')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult_child2"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child3"]) && empty($room["adult_child_no_price3"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child3')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult_child3"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child4"]) && empty($room["adult_child_no_price4"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult_child4')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult_child3"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult3"]) && empty($room["adult_no_price3"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult3')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult3')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult3"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult4"]) && empty($room["adult_no_price4"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$room_id][$i]["persons_count"] == 'adult4')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult4')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$room_id.']['.$i.'][persons_count]" type="radio" value="adult4"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_adult"]) &&
               empty($room["add_adult_no_price"])) || ifnull($room["room_type"]) == "holiday_home_fixed" || ifnull($room["room_type"]) == "hotel_room_fixed")
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_adult"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_adult"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_adult", $page_info, $template, $settings);
              }
              if(ifnull($room["room_type"]) == "holiday_home_fixed" || ifnull($room["room_type"]) == "hotel_room_fixed")
              {
                $price = str_ireplace("{price}", "", $price);
                $price = str_ireplace("{currency_sign}", "", $price);
                $price = str_ireplace("{average_price}", "", $price);
              }

              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_adult", $price);

              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$room_id.']['.$i.'][add_adult]">';

            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_adult"]) && $j == $_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_adult"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select>';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child"]) && empty($room["add_child_no_price"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$room_id.']['.$i.'][add_child]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child"]) && $j == $_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child2"]) && empty($room["add_child_no_price2"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child2"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$room_id.']['.$i.'][add_child2]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child2"]) && $j == $_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child2"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child3"]) && empty($room["add_child_no_price3"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child3"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$room_id.']['.$i.'][add_child3]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child3"]) && $j == $_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child3"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child4"]) && empty($room["add_child_no_price4"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child4"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person:begin[\s]*-->.+<!--[\s]*price per person:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$room_id.']['.$i.'][add_child4]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child4"]) && $j == $_REQUEST["booking"]["selected_persons"][$room_id][$i]["add_child4"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          $select_persons .= '</ul>';
        
          $room_price_type = hotel::$words["PricePerRoom"][$_SESSION["ulang"]];
          if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
          {
            $room_price_type = hotel::$words["PricePerApartment"][$_SESSION["ulang"]];
          }
          $rooms = str_ireplace("{room_price_type}", $room_price_type, $rooms);

          $amount_enter_comment = hotel::$words["AmountCommentRoom"][$_SESSION["ulang"]];
          if(ifnull($room["room_type"]) == "holiday_home")
          {
            $amount_enter_comment = hotel::$words["AmountCommentApartment"][$_SESSION["ulang"]];
          }
          if(ifnull($room["room_type"]) == "holiday_home_fixed")
          {
            $amount_enter_comment = hotel::$words["AmountCommentApartment"][$_SESSION["ulang"]];
          }

          $rooms = str_ireplace("{amount_enter_comment}", $amount_enter_comment, $rooms);

          $rooms = str_ireplace("{select_persons}", $select_persons, $rooms);

          $rooms = str_ireplace("{max_persons}", $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_persons"], $rooms);
          $rooms = str_ireplace("{rate_plan}", $room["spec_discount_comment"], $rooms);
        }//for
      }//foreach
    }//preg_match(selected rooms)
  } // render_selected_rooms
  //-----------------------------------------------------------------
  function render_selected_spec_rooms(&$page_info, &$rooms, $template, $rate, $sign, &$settings)
  {
    $rooms = '';

    if(preg_match("/<!--[\s]*selected spec_rooms:begin[\s]*-->.+<!--[\s]*selected spec_rooms:end[\s]*-->/Us", $template, $matches))
    {
      foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $spoid => $count)
      {
        if($count == 0)
          continue;

        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["room_id"];
        $spec_offer_data = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid];

        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        $rooms_count = (int) $count;
        for($i = 0; $i < $rooms_count; $i++)
        {
          $rooms .= $matches[0];
          $this->render_room_data($rooms, $room, $room_id);

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          $rooms = str_ireplace("{mandatory_services}", $services, $rooms);

          //select persons
          $select_persons = '';
          if($_SESSION["booking"]["step1"]["available_rooms"][$room_id]["with_children"] == 1)
          {
            $child_yo = str_ireplace("%s", $_SESSION["booking"]["step1"]["available_rooms"][$room_id]["max_child_age"], try_translate("UnderYO", $page_info["lang"]));
          }
          else
          {
            $child_yo = '';
          }

          $std_allocation_price_name = trim("adult" . $room["standard_allocation"], "1");

          $rooms = str_ireplace("{pricing_type}", try_translate("PricePerPerson", $page_info["lang"]), $rooms);
          $select_persons .= '<ul>';

          if(!empty($room["average_price_adult"]) && empty($room["adult_no_price"]))
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult')
              $checked = ' checked="true"';

            if(ifnull($room["room_type"]) == "holiday_home_fixed" || ifnull($room["room_type"]) == "hotel_room_fixed") $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);

              $price_type = "price_adult";
              if(ifnull($room["room_type"]) == "holiday_home_fixed") $price_type .= " apartment_fixed";
              if(ifnull($room["room_type"]) == "hotel_room_fixed") $price_type .= " room_fixed";

              $price = str_ireplace("{price_type}", $price_type, $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult2"]) && empty($room["adult_no_price2"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult2')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult2')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult2"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child"]) && empty($room["adult_child_no_price"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult_child"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child2"]) && empty($room["adult_child_no_price2"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child2')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult_child2"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child3"]) && empty($room["adult_child_no_price3"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child3')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult_child3"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult_child4"]) && empty($room["adult_child_no_price4"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult_child4')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult_child4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult_child4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult_child4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult_child4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult_child4"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult3"]) && empty($room["adult_no_price3"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult3')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult3')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult3"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if(!empty($room["average_price_adult4"]) && empty($room["adult_no_price4"]) && 
             ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $checked = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"]) && $_REQUEST["booking"]["selected_persons"][$spoid][$i]["persons_count"] == 'adult4')
              $checked = ' checked="true"';
            elseif($std_allocation_price_name == 'adult4')
              $checked = ' checked="true"';

            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_adult4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_adult4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_adult4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_adult4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton">';
            $select_persons .= '<input name="booking[selected_persons]['.$spoid.']['.$i.'][persons_count]" type="radio" value="adult4"'.$checked.'> ';
            $select_persons .= '</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '</tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_adult"]) && empty($room["add_adult_no_price"])) || 
              ifnull($room["room_type"]) == "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed")
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_adult"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_adult"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_adult", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_adult", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", "", $price);
            }

            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$spoid.']['.$i.'][add_adult]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_adult"]) && $j == $_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_adult"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select>';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child"]) && empty($room["add_child_no_price"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$spoid.']['.$i.'][add_child]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child"]) && $j == $_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child2"]) && empty($room["add_child_no_price2"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child2"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child2"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child2"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child2", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child2", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age2"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$spoid.']['.$i.'][add_child2]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child2"]) && $j == $_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child2"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child3"]) && empty($room["add_child_no_price3"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child3"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child3"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child3"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child3", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child3", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age3"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$spoid.']['.$i.'][add_child3]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child3"]) && $j == $_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child3"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          if((!empty($room["average_price_add_child4"]) && empty($room["add_child_no_price4"]) && ifnull($room["room_type"]) != "holiday_home_fixed" && ifnull($room["room_type"]) != "hotel_room_fixed") || !empty($room["force_add_child4"]))
          {
            $price = '';
            if(preg_match("/<!--[\s]*price per person_spec:begin[\s]*-->.+<!--[\s]*price per person_spec:end[\s]*-->/Us", $template, $matches2))
            {
              $price .= $matches2[0];
              $room_price =  number_format($room["average_price_add_child4"], 2, ',', '');
              $average_price = '';
              if(!$this->compare_prices(1, $room, "price_add_child4"))
              {
                $average_price = '';
                $this->render_average_price_block($average_price, $room, $sign, $rate, "price_add_child4", $page_info, $template, $settings);
              }
              $price = str_ireplace("{price}", $room_price, $price);
              $price = str_ireplace("{price_type}", "price_add_child4", $price);
              $price = str_ireplace("{average_price}", $average_price, $price);
              $price = str_ireplace("{age}", hotel::$words["AgeUpTo"][$_SESSION["ulang"]] . " " . $room["add_max_child_age4"] . " " . hotel::$words["Years"][$_SESSION["ulang"]], $price);
            }
            $select_persons .= '<li>';
            $select_persons .= '<table class="select_person_table"><tr>';
            $select_persons .= '<td class="select_person_radiobutton_empty">&nbsp;</td>';
            $select_persons .= '<td class="room_price_wrapper">';
            $select_persons .= $price;
            $select_persons .= '</td>';
            $select_persons .= '<td class="persons_select">';
            $select_persons .= ' <select name="booking[selected_persons]['.$spoid.']['.$i.'][add_child4]">';
            for($j = 0; $j <= $room["max_persons"]; $j++)
            {
              $selected = '';
            if(!empty($_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child4"]) && $j == $_REQUEST["booking"]["selected_persons"][$spoid][$i]["add_child4"])
              $selected = ' selected="true"';

              $select_persons .= '<option value="'.$j.'"'.$selected.'>'.$j.'</option>';
            }
            $select_persons .= '</select> ';
            $select_persons .= '</td></tr></table>';
            $select_persons .= '</li>';
          }

          $select_persons .= '</ul>';

          $room_price_type = hotel::$words["PricePerRoom"][$_SESSION["ulang"]];
          if(ifnull($room["room_type"]) == "holiday_home" || ifnull($room["room_type"]) == "holiday_home_fixed")
          {
            $room_price_type = hotel::$words["PricePerApartment"][$_SESSION["ulang"]];
          }
          $rooms = str_ireplace("{room_price_type}", $room_price_type, $rooms);

          $amount_enter_comment = hotel::$words["AmountCommentRoom"][$_SESSION["ulang"]];
          if(ifnull($room["room_type"]) == "holiday_home")
          {
            $amount_enter_comment = hotel::$words["AmountCommentApartment"][$_SESSION["ulang"]];
          }
          if(ifnull($room["room_type"]) == "holiday_home_fixed")
          {
            $amount_enter_comment = hotel::$words["AmountCommentApartmentFixed"][$_SESSION["ulang"]];
          }
          $rooms = str_ireplace("{amount_enter_comment}", $amount_enter_comment, $rooms);

          $rooms = str_ireplace("{select_persons}", $select_persons, $rooms);

          $rooms = str_ireplace("{specoffer_nights}", $spec_offer_data["nights_count"], $rooms);
          $rooms = str_ireplace("{specoffer_persons}", $spec_offer_data["persons_count"], $rooms);
          $rooms = str_ireplace("{specoffer_name}", $spec_offer_data["name"], $rooms);
          $rooms = str_ireplace("{specoffer_info}", $spec_offer_data["info"], $rooms);

          $room_price =  number_format($spec_offer_data["price"], 2, ',', '');
          $rooms = str_ireplace("{specoffer_price}", $room_price, $rooms);

        }//for
      }//foreach
    }//preg_match(selected rooms)
  } // render_selected_spec_rooms
  //-----------------------------------------------------------------
  function render_order_info(&$page_info, &$order_info, $template, $rate, $sign, &$settings)
  {
    $order_info = "";

    if(preg_match("/<!--[\s]*order info:begin[\s]*-->.+<!--[\s]*order info:end[\s]*-->/Us", $template, $matches))
    {
      foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $room_id => &$room_num)
      {
        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];

        foreach($room_num as $i => $persons)
        {
          $order_info .= $matches[0];

          $this->render_room_data($order_info, $room, $room_id);

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          $order_info = str_ireplace("{mandatory_services}", $services, $order_info);

          //price interpretation & price
          $total_price_formatted = number_format($_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["total_price"], 2, ',', '');

          $order_info = str_ireplace("{price_interpretation}", $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["total_price_interpretation"], $order_info);
          $order_info = str_ireplace("{total_price_per_room}", $total_price_formatted, $order_info);

          $order_info = str_ireplace("{rate_plan}", $room["spec_discount_comment"], $order_info);
          
          $order_info = str_ireplace("{room_discount_comment}", nl2br(ifnull($room["spec_discount_comment"])), $order_info);

          //guest inputs
          $guest_inputs = '';
          $guest_inputs .= '<table class="guest_names_fields">';
          for($j = 1; $j <= $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["adults_count"]; $j++)
          {
            $guest_inputs .= '<tr>';
            $guest_inputs .= '<td class="guest_name_caption">';
            $guest_inputs .= escape_html(hotel::$words["Adult"][$_SESSION["ulang"]]).' '.$j.'*: ';
            $guest_inputs .= '</td>';
            $name = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$j]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$j]['name'];
            }
            $guest_inputs .= '<td colspan="2" class="guest_name_field">';
            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$room_id][$i][$j][name]' class='text_field' />";
            $guest_inputs .= '</td>';
            $guest_inputs .= '</tr>';
          }
          $j--;
          for($z = 1; $z <= $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$room_id][$i]["children_count"]; $z++)
          {
            $num = $j+$z;

            $guest_inputs .= '<tr>';
            $guest_inputs .= '<td class="guest_name_caption">';
            $guest_inputs .= escape_html(hotel::$words["Child"][$_SESSION["ulang"]]).' '.$z.'*: ';
            $guest_inputs .= '</td>';
            $name = '';
            $old = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name'];
            }

            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo']))
            {
              $old = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo'];
            }
            $guest_inputs .= '<td class="guest_name_field">';
            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$room_id][$i][".$num."][name]' class='text_field' />";
            $guest_inputs .= '</td>';
            $guest_inputs .= '<td class="guest_name_years_old">';
            $guest_inputs .= "<select style='width:auto;' name='booking[guest_names][$room_id][$i][".$num."][yo]' class='child_years_old'>";
            for($k=1; $k <= 18; $k++)
            {
              $selected = '';
              if($k == $old)
                $selected = ' selected="true"';
              $guest_inputs .= "<option value='$k'$selected>$k</option>";
            }
            $guest_inputs .= "</select> ".escape_html(hotel::$words["YearsOld"][$_SESSION["ulang"]]);
            $guest_inputs .= '</td>';
            $guest_inputs .= '</tr>';

            /*
            $guest_inputs .= '<div class="guest_name_field">';
            $guest_inputs .= "<span class='title'>".escape_html(hotel::$words["Child"][$_SESSION["ulang"]]).' '.$z.'</span> ';
            $name = '';
            $old = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name'];
            }

            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo']))
            {
              $old = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo'];
            }

            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$room_id][$i][".$num."][name]' class='text_field' /> <input value='".$old."' type='text' name='booking[guest_names][$room_id][$i][".$num."][yo]' class='child_years_old text_field' />";
            $guest_inputs .= '</div>';
            */
          }

          $guest_inputs .= '</table>';

          if(!empty($settings["no_guests_details"])) $guest_inputs = "";
          
          $order_info = str_ireplace("{guest_name_inputs}", $guest_inputs, $order_info);
        }
      }//foreach
    }
  } // render_order_info
  //-----------------------------------------------------------------
  function render_order_spec_info(&$page_info, &$order_info, $template, $rate, $sign, &$settings)
  {
    $order_info = "";

    if(preg_match("/<!--[\s]*order spec_info:begin[\s]*-->.+<!--[\s]*order spec_info:end[\s]*-->/Us", $template, $matches))
    {
      foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $spoid => &$room_num)
      {
        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["room_id"];

        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        $spec_offer_data = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid];

        foreach($room_num as $i => $persons)
        {
          $order_info .= $matches[0];

          $this->render_room_data($order_info, $room, $room_id);

          //room services
          $services = '';
          $this->render_mandatory_services($services, $room, $template);
          $order_info = str_ireplace("{mandatory_services}", $services, $order_info);

          $order_info = str_ireplace("{extra_charge}", "", $order_info);

          //price interpretation & price
          $total_price_formatted = number_format($_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["total_price"], 2, ',', '');

          $order_info = str_ireplace("{price_interpretation}", $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["total_price_interpretation"], $order_info);
          $order_info = str_ireplace("{total_price_per_room}", $total_price_formatted, $order_info);

          $order_info = str_ireplace("{specoffer_nights}", $spec_offer_data["nights_count"], $order_info);
          $order_info = str_ireplace("{specoffer_persons}", $spec_offer_data["persons_count"], $order_info);
          $order_info = str_ireplace("{specoffer_name}", $spec_offer_data["name"], $order_info);
          $order_info = str_ireplace("{specoffer_info}", $spec_offer_data["info"], $order_info);

          $room_price =  number_format($spec_offer_data["price"], 2, ',', '');
          $order_info = str_ireplace("{specoffer_price}", $room_price, $order_info);

          //guest inputs
          $guest_inputs = '';
          $guest_inputs .= '<table class="guest_names_fields">';
          for($j = 1; $j <= $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["adults_count"]; $j++)
          {
            $guest_inputs .= '<tr>';
            $guest_inputs .= '<td class="guest_name_caption">';
            $guest_inputs .= escape_html(hotel::$words["Adult"][$_SESSION["ulang"]]).' '.$j.'*: ';
            $guest_inputs .= '</td>';
            $name = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$j]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$j]['name'];
            }
            $guest_inputs .= '<td colspan="2" class="guest_name_field">';
            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$spoid][$i][$j][name]' class='text_field' />";
            $guest_inputs .= '</td>';
            $guest_inputs .= '</tr>';
          }
          $j--;
          for($z = 1; $z <= $_SESSION["booking"]["step4"]["booking_info"]["rooms_info"][$spoid][$i]["children_count"]; $z++)
          {
            $num = $j+$z;

            $guest_inputs .= '<tr>';
            $guest_inputs .= '<td class="guest_name_caption">';
            $guest_inputs .= escape_html(hotel::$words["Child"][$_SESSION["ulang"]]).' '.$z.'*: ';
            $guest_inputs .= '</td>';
            $name = '';
            $old = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$num]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$num]['name'];
            }

            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$num]['yo']))
            {
              $old = $_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i][$num]['yo'];
            }
            $guest_inputs .= '<td class="guest_name_field">';
            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$spoid][$i][".$num."][name]' class='text_field' />";
            $guest_inputs .= '</td>';
            $guest_inputs .= '<td class="guest_name_years_old">';
            $guest_inputs .= "<select style='width:auto;' name='booking[guest_names][$spoid][$i][".$num."][yo]' class='child_years_old'>";
            for($k=1; $k <= 18; $k++)
            {
              $selected = '';
              if($k == $old)
                $selected = ' selected="true"';
              $guest_inputs .= "<option value='$k'$selected>$k</option>";
            }
            $guest_inputs .= "</select> ".escape_html(hotel::$words["YearsOld"][$_SESSION["ulang"]]);
            $guest_inputs .= '</td>';
            $guest_inputs .= '</tr>';

            /*
            $guest_inputs .= '<div class="guest_name_field">';
            $guest_inputs .= "<span class='title'>".escape_html(hotel::$words["Child"][$_SESSION["ulang"]]).' '.$z.'</span> ';
            $name = '';
            $old = '';
            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name']))
            {
              $name = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['name'];
            }

            if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo']))
            {
              $old = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i][$num]['yo'];
            }

            $guest_inputs .= "<input value='".$name."' type='text' name='booking[guest_names][$room_id][$i][".$num."][name]' class='text_field' /> <input value='".$old."' type='text' name='booking[guest_names][$room_id][$i][".$num."][yo]' class='child_years_old text_field' />";
            $guest_inputs .= '</div>';
            */
          }

          $guest_inputs .= '</table>';

          if(!empty($settings["no_guests_details"])) $guest_inputs = "";
          
          $order_info = str_ireplace("{guest_name_inputs}", $guest_inputs, $order_info);
        }
      }//foreach
    }
  } // render_order_spec_info
  //-----------------------------------------------------------------
  function build_payment_form(&$payment_form, &$settings, &$page_info)
  {
    global $URL_PATH;

    $payment_type = ifnull($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]);
    
    if($payment_type == "POSTFIN_CCARD" || $payment_type == "POSTFIN_OTHERS") 
    {
      $now = mktime(0, 0, 0);
      $days_between = round(($_SESSION["booking"]["online_payment"]["arrive_time"] - $now)/(60*60*24));
      
      $prepayment_rate = 1;
      $cc_fee = 0;
      
      if(!empty($settings["postfin_cc_fee"])) $cc_fee = $settings["postfin_cc_fee"];
      
      $max_days_between = -1;
      
      for($i = 1; $i <= 4; $i++)
      {
        if($settings["postfin_days_$i"] === "" || empty($settings["postfin_rate_$i"])) continue;
        
        if($settings["postfin_days_$i"] <= $days_between &&
           $settings["postfin_days_$i"] > $max_days_between)
        {
          $max_days_between = $settings["postfin_days_$i"];
          $prepayment_rate = $settings["postfin_rate_$i"]/100;
        }
      }

      $PARAMS["AMOUNT"] = round((ifnull($_SESSION["booking"]["online_payment"]["total_order_price"])*$prepayment_rate + $cc_fee)*100);
      $PARAMS["CN"] = ifnull($_SESSION["booking"]["online_payment"]["person_name"]);
      $PARAMS["CURRENCY"] = ifnull($_SESSION["booking"]["online_payment"]["currency"]);
      $PARAMS["EMAIL"] = ifnull($_SESSION["booking"]["online_payment"]["email"]);
      $PARAMS["LANGUAGE"] = strtolower($page_info["lang"]) . "_" . strtoupper($page_info["lang"]);
      $PARAMS["OPERATION"] = "SAL";
      $PARAMS["ORDERID"] = ifnull($_SESSION["booking"]["online_payment"]["order_id"]);
      $PARAMS["OWNERADDRESS"] = ifnull($_SESSION["booking"]["online_payment"]["address"]);
      $PARAMS["OWNERCTY"] = ifnull($_SESSION["booking"]["online_payment"]["land"]);
      $PARAMS["OWNERTELNO"] = ifnull($_SESSION["booking"]["online_payment"]["telephone"]);
      $PARAMS["OWNERTOWN"] = ifnull($_SESSION["booking"]["online_payment"]["ort"]);
      $PARAMS["PSPID"] = $settings["postfin_pspid"];

      $base = get_host_address();
      
      if(!empty($settings["postfin_homeurl"])) $PARAMS["HOMEURL"] = $base . make_url($page_info["lang"], $settings["postfin_homeurl"]); 
      if(!empty($settings["postfin_accepturl"])) $PARAMS["ACCEPTURL"] = $base . make_url($page_info["lang"], $settings["postfin_accepturl"]); 
      if(!empty($settings["postfin_exceptionurl"])) $PARAMS["EXCEPTIONURL"] = $base . make_url($page_info["lang"], $settings["postfin_exceptionurl"]); 

      //$PARAMS["AMOUNT"] = "999900";

      ksort($PARAMS);

      $SEP = $settings["postfin_shain"];

      $IN = "";
      foreach($PARAMS as $KEY => $VAL)
      {
        $IN .= $KEY . "=" . $VAL . $SEP;
      }

      $SHASIGN = strtoupper(sha1($IN));
      
      $payment_form = '<div style="display:none"><form id="postfin_form" method="get" action="' . $settings["postfin_targeturl"] . '">
<!-- allgemeine Parameter: siehe Allgemeine ZahlungsParameter -->
PSPID: <input type="text" style="width:400px" name="PSPID" value="' . escape_html($PARAMS["PSPID"]) . '"><br>
ORDERID: <input type="text" style="width:400px" name="ORDERID" value="' . escape_html($PARAMS["ORDERID"]) . '"><br>
AMOUNT: <input type="text" style="width:400px" name="AMOUNT" value="' . escape_html($PARAMS["AMOUNT"]) . '"><br>
CURRENCY: <input type="text" style="width:400px" name="CURRENCY" value="' . escape_html($PARAMS["CURRENCY"]) . '"><br>
LANGUAGE: <input type="text" style="width:400px" name="LANGUAGE" value="' . escape_html($PARAMS["LANGUAGE"]) . '"><br>
<!-- optionale Kundendaten, dringend empfohlen zur Betrugsprävention: siehe
Allgemeine Parameter und optionale Kundendaten -->
CN: <input type="text" style="width:400px" name="CN" value="' . escape_html($PARAMS["CN"]) . '"><br>
EMAIL: <input type="text" style="width:400px" name="EMAIL" value="' . escape_html($PARAMS["EMAIL"]) . '"><br>
OWNERADDRESS: <input type="text" style="width:400px" name="OWNERADDRESS" value="' . escape_html($PARAMS["OWNERADDRESS"]) . '"><br>
OWNERCTY: <input type="text" style="width:400px" name="OWNERCTY" value="' . escape_html($PARAMS["OWNERCTY"]) . '"><br>
OWNERTOWN: <input type="text" style="width:400px" name="OWNERTOWN" value="' . escape_html($PARAMS["OWNERTOWN"]) . '"><br>
OWNERTELNO: <input type="text" style="width:400px" name="OWNERTELNO" value="' . escape_html($PARAMS["OWNERTELNO"]) . '"><br>
COM: <input type="text" style="width:400px" name="COM" value=""><br>
<!-- vor der Zahlung prüfen: siehe SHA-IN-Signatur -->
SHASIGN: <input type="text" style="width:400px" name="SHASIGN" value="' . $SHASIGN .'"><br>
<!-- Layoutinformationen: siehe Look & Feel der Zahlungsseite -->
TITLE: <input type="text" style="width:400px" name="TITLE" value=""><br>
BGCOLOR: <input type="text" style="width:400px" name="BGCOLOR" value=""><br>
TXTCOLOR: <input type="text" style="width:400px" name="TXTCOLOR" value=""><br>
TBLBGCOLOR: <input type="text" style="width:400px" name="TBLBGCOLOR" value=""><br>
TBLTXTCOLOR: <input type="text" style="width:400px" name="TBLTXTCOLOR" value=""><br>
BUTTONBGCOLOR: <input type="text" style="width:400px" name="BUTTONBGCOLOR" value=""><br>
BUTTONTXTCOLOR: <input type="text" style="width:400px" name="BUTTONTXTCOLOR" value=""><br>

LOGO: <input type="text" style="width:400px" name="LOGO" value=""><br>
FONTTYPE: <input type="text" style="width:400px" name="FONTTYPE" value=""><br>
<!-- dynamische Vorlagenseite: siehe Look & Feel der Zahlungsseite -->
TP: <input type="text" style="width:400px" name="TP" value=""><br>
<!-- Zahlungsmethoden/Seitenspezifika: siehe Zahlungsmethode und
Zahlungsseite -->
PM: <input type="text" style="width:400px" name="PM" value=""><br>
BRAND: <input type="text" style="width:400px" name="BRAND" value=""><br>
WIN3DS: <input type="text" style="width:400px" name="WIN3DS" value=""><br>
PMLIST: <input type="text" style="width:400px" name="PMLIST" value=""><br>
PMLISTTYPE: <input type="text" style="width:400px" name="PMLISTTYPE" value=""><br>
<!-- Verknüpfung zur Händler-Webseite: siehe Standard-Rückmeldung -->
HOMEURL: <input type="text" style="width:400px" name="HOMEURL" value="' . escape_html($PARAMS["HOMEURL"]) . '"><br>
CATALOGURL: <input type="text" style="width:400px" name="CATALOGURL" value=""><br>
<!-- Parameter nach erfolgter Zahlung: siehe Umleitung gemäß Zahlungsergebnis
-->
COMPLUS: <input type="text" style="width:400px" name="COMPLUS" value=""><br>
PARAMPLUS: <input type="text" style="width:400px" name="PARAMPLUS" value=""><br>

<!-- Variable Parameter nach erfolgter Zahlung: siehe Direktes Feedback über HTTP-Server-zu-Server-Anfrage -->
PARAMVAR: <input type="text" style="width:400px" name="PARAMVAR" value=""><br>
<!-- Umleitung nach erfolgter Zahlung: siehe Umleitung gemäß Zahlungsergebnis -->
ACCEPTURL: <input type="text" style="width:400px" name="ACCEPTURL" value="' . escape_html(ifnull($PARAMS["ACCEPTURL"])) . '"><br>
DECLINEURL: <input type="text" style="width:400px" name="DECLINEURL" value=""><br>
EXCEPTIONURL: <input type="text" style="width:400px" name="EXCEPTIONURL" value="' . escape_html(ifnull($PARAMS["EXCEPTIONURL"])) . '"><br>
CANCELURL: <input type="text" style="width:400px" name="CANCELURL" value=""><br>
<!-- Optionaler Standardoperationswert: siehe Standardoperationswert -->
OPERATION: <input type="text" style="width:400px" name="OPERATION" value="' . escape_html(ifnull($PARAMS["OPERATION"])) . '"><br>
<!-- Optionales Benutzer-Identifikationsfeld: siehe Benutzer-Identifikationsfeld -->
USERID: <input type="text" style="width:400px" name="USERID" value=""><br>
<!-- Alias-Daten: siehe Alias Manager Dokumentation -->
ALIAS: <input type="text" style="width:400px" name="ALIAS" value=""><br>
ALIASUSAGE: <input type="text" style="width:400px" name="ALIASUSAGE" value=""><br>
ALIASOPERATION: <input type="text" style="width:400px" name="ALIASOPERATION" value=""><br><br>
<input type="submit">

</form></div><script>
var postfin_form = document.getElementById("postfin_form");
if(postfin_form) postfin_form.submit();
</script>
      ';
    }
    
    if($payment_type == "POSTBANK_CCARD" || $payment_type == "POSTBANK_OTHERS") 
    {
      $now = mktime(0, 0, 0);
      $days_between = round(($_SESSION["booking"]["online_payment"]["arrive_time"] - $now)/(60*60*24));
      
      $prepayment_rate = 1;
      $cc_fee = 0;
      
      if(!empty($settings["postbank_cc_fee"])) $cc_fee = $settings["postbank_cc_fee"];
      
      $max_days_between = -1;
      
      for($i = 1; $i <= 4; $i++)
      {
        if($settings["postbank_days_$i"] === "" || empty($settings["postbank_rate_$i"])) continue;
        
        if($settings["postbank_days_$i"] <= $days_between &&
           $settings["postbank_days_$i"] > $max_days_between)
        {
          $max_days_between = $settings["postbank_days_$i"];
          $prepayment_rate = $settings["postbank_rate_$i"]/100;
        }
      }

      $base = get_host_address();
      
      $PARAMS = array();

      $PARAMS["amount"] = number_format($_SESSION["booking"]["online_payment"]["total_order_price"]*$prepayment_rate + $cc_fee, 2, ",", "");
      $PARAMS["command"] = "sslform";
      $PARAMS["basketid"] = $page_info["lang"] . time();
      $PARAMS["date"] = date("Ymd_H:i:s");
      $PARAMS["orderid"] = $_SESSION["booking"]["online_payment"]["order_id"];
      $PARAMS["sessionid"] = session_id();
      $PARAMS["sslmerchant"] = $settings["postbank_user"];
      $PARAMS["notificationfailedurl"] = $base . make_url($page_info["lang"], $settings["postbank_exceptionurl"]);

      if($payment_type == "POSTBANK_CCARD")
      {
        $PARAMS["notifyurl"] = $settings["postbank_notifyurl"];
        $PARAMS["transactiontype"] = "authorization";
        $PARAMS["paymentmethod"] = "creditcard";
        $PARAMS["currency"] = $_SESSION["booking"]["online_payment"]["currency"];
        $PARAMS["locale"] = strtolower($page_info["lang"]);
        $PARAMS["version"] = "1.8";
      }
      else
      {
        $PARAMS["paymentmethod"] = "banktransfer";
        $PARAMS["currency"] = "EUR";
      }
      
      ksort($PARAMS);

      $sslpassword = $settings["postbank_ssl_password"];

      $string = "";
      foreach($PARAMS as $KEY => $VAL)
      {
        $string .= $VAL;
      }
      $mac = hmac($sslpassword, $string);

      $payment_form = '<div style="display:none"><form id="postbank_form" method="get" action="' . $settings["postbank_targeturl"] . '">';
      
      foreach($PARAMS as $KEY => $VAL)
      {
        $payment_form .= escape_html($KEY) . ': <input type="text" name="' . escape_html($KEY) . '" value="' . escape_html($VAL) . '"><br>'; 
      }
      
      $payment_form .= '<input type="text" name="mac" value="' . escape_html($mac) . '"><br>';
      
      $payment_form .= '<input type="submit"></form></div><script>
                        var postbank_form = document.getElementById("postbank_form");
                        if(postbank_form) postbank_form.submit();
                        </script>';
    }
    
    if($payment_type == "STRIPE") 
    {
      $now = mktime(0, 0, 0);
      $days_between = round((strtotime($_SESSION["booking"]["data"]["arrive_date"]) - $now)/(60*60*24));
      
      $prepayment_rate = 1;
      
      $max_days_between = -1;
      
      for($i = 1; $i <= 4; $i++)
      {
        if($settings["stripe_days_$i"] === "" || empty($settings["stripe_rate_$i"])) continue;
        
        if($settings["stripe_days_$i"] <= $days_between &&
           $settings["stripe_days_$i"] > $max_days_between)
        {
          $max_days_between = $settings["stripe_days_$i"];
          $prepayment_rate = $settings["stripe_rate_$i"]/100;
        }
      }
      
      if(!empty($settings["stripe_follow_pay_days"]) && $days_between <= $settings["stripe_follow_pay_days"])
      {
        $prepayment_rate = 1;
      }

      $cc_fee = 0;
      if(!empty($settings["stripe_cc_fee"])) $cc_fee = $settings["stripe_cc_fee"];
      if(!empty($settings["stripe_cc_fee_percent"])) $cc_fee = round($_SESSION["booking"]["step4"]["booking_info"]["total_price"]*$prepayment_rate*$cc_fee/100, 2);
      
      $curr = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];
      
      $payment_form = "<input type='hidden' name='stripe_sum' value='" . escape_html(round($_SESSION["booking"]["step4"]["booking_info"]["total_price"]*$prepayment_rate + $cc_fee, 2)) . "'>";
      $payment_form .= "<input type='hidden' name='stripe_prepaid_sum' value='" . escape_html(round($_SESSION["booking"]["step4"]["booking_info"]["total_price"]*$prepayment_rate, 2)) . "'>";
      $payment_form .= "<input type='hidden' name='stripe_inactive' id='stripe_inactive' value='0'>";

      $payment_form .= '<div class="stripe_error booking_error"></div>';
      
      $payment_form .= '<div class="payment_form_wrapper">
                    <div class="form_control">
                      <div class="form_caption">' . escape_html(hotel::$words["TotalPrice"][$_SESSION["ulang"]]) . ':</div>
                      <div class="form_element">' . number_format($_SESSION["booking"]["step4"]["booking_info"]["total_price"], 2, ",", "") . ' ' . $curr . '</div>
                    </div>
                    <div class="form_control">
                      <div class="form_caption">' . escape_html(hotel::$words["PaySum"][$_SESSION["ulang"]]) . ':</div>
                      <div class="form_element">' . number_format($_SESSION["booking"]["step4"]["booking_info"]["total_price"]*$prepayment_rate, 2, ",", "") . ' ' . $curr . '</div>
                    </div>';
                    
      if(!empty($cc_fee))
      {
        $payment_form .= '<div class="form_control">
                        <div class="form_caption">' . escape_html(hotel::$words["CreditCardFee"][$_SESSION["ulang"]]) . ':</div>
                        <div class="form_element">' . number_format($cc_fee, 2, ",", "") . ' ' . $curr . '</div>
                      </div>';
      }
      
      $payment_form .= '<div class="form_control">
                      <div class="form_caption">' . escape_html(hotel::$words["CardNumber"][$_SESSION["ulang"]]) . '*:</div>
                      <div class="form_element"><input type="text" autocomplete="off" class="card-number" name="card-number"/></div>
                    </div>
                    <div class="form_control">
                      <div class="form_caption">' . escape_html(hotel::$words["ExpireDate"][$_SESSION["ulang"]]) . '*:</div>
                      <div class="form_element dates">';
      $payment_form .= '<select name="card-expiry-month" class="card-expiry-month">';
      $payment_form .= '<option value="01">01</option>';
      $payment_form .= '<option value="02">02</option>';
      $payment_form .= '<option value="03">03</option>';
      $payment_form .= '<option value="04">04</option>';
      $payment_form .= '<option value="05">05</option>';
      $payment_form .= '<option value="06">06</option>';
      $payment_form .= '<option value="07">07</option>';
      $payment_form .= '<option value="08">08</option>';
      $payment_form .= '<option value="09">09</option>';
      $payment_form .= '<option value="10">10</option>';
      $payment_form .= '<option value="11">11</option>';
      $payment_form .= '<option value="12">12</option>';
      $payment_form .= '</select>';
      $payment_form .= ' / ';
      $payment_form .= '<select name="card-expiry-year" class="card-expiry-year">';
      
      $yy = date("y");
      for($i = 0; $i < 10; $i++)
      {
        $payment_form .= "<option value='" . ($yy+$i) . "'>" . ($yy+$i) . "</option>";
      }
      
      $payment_form .= '</select>';
      $payment_form .= '</div>
                    </div>
                    <div class="form_control">
                      <div class="form_caption">' . escape_html(hotel::$words["CardCVV"][$_SESSION["ulang"]]) . '*:</div>
                      <div class="form_element"><input type="text" size="4" autocomplete="off" class="name" class="card-cvc"/></div>
                    </div>
                  </div>
                  ';
                  
      $payment_form .= '<script type="text/javascript">' . "\n";
      $payment_form .= 'Stripe.setPublishableKey("' . escape_html($settings["stripe_publishable_key"]) . '");' . "\n";
      
      $payment_form .= "
        $(document).ready(function() {
            $('.booking_prev_step_button').click(function(event) {
              $('#stripe_inactive').val(1);
            });
          
            $('#booking_form').submit(function(event) {
                if($('#stripe_inactive').val() == '1') return true;
                
                $('.booking_prev_step_button').attr('disabled', 'disabled');
                $('.booking_send_order_button').attr('disabled', 'disabled');
                
                Stripe.createToken({
                    number: $('.card-number').val(),
                    cvc: $('.card-cvc').val(),
                    exp_month: $('.card-expiry-month').val(),
                    exp_year: $('.card-expiry-year').val()
                }, stripeResponseHandler);
                return false; 
            });
        });
      ";
      
      $payment_form .= '</script>' . "\n";
    }
    
    return true;
  } // build_payment_form
  //-----------------------------------------------------------------
  function adjust_payment_types(&$payment_list, &$payment_sort, &$page_info, &$settings)
  {
    if(empty($_SESSION["booking"]["step2"]["selected_rooms"])) return true;
      
    $payments = array_keys($payment_list);
    
    foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $rid => $count)
    {
      if(empty($_SESSION["booking"]["step1"]["available_rooms"][$rid]["restrict_payments"])) continue;
      
      $payments = array_intersect($payments, $_SESSION["booking"]["step1"]["available_rooms"][$rid]["restrict_payments"]);
    }
    
    foreach($payment_list as $key => $val)
    {
      if(!in_array($key, $payments)) 
      {
        unset($payment_list[$key]);
      }
    }
      
    if($settings["external_service"] == "RECONLINE")
    {
      $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);
      if(empty($ext_service_manager) || !$ext_service_manager->supportsBooking()) return true;
      
      $CreditCardRequired = false;
      $CreditCardSupported = true;
      
      foreach($_SESSION["booking"]["step2"]["selected_rooms"] as $rid => $count)
      {
        if(empty($count)) continue;
        
        $code = ifnull($_SESSION["booking"]["step1"]["available_rooms"][$rid]["room_code"]);

        if(!empty($_SESSION[S_CONTEXT]["RECONLINE"]["rooms"][$code]["CreditCardRequired"])) $CreditCardRequired = true;
        
        if(empty($_SESSION[S_CONTEXT]["RECONLINE"]["rooms"][$code]["CreditCardSupported"])) $CreditCardSupported = false;
      } 

      if($CreditCardRequired)      
      {
        $payment_list = array();
        $payment_sort["RECONLINE_CREDIT_CARD"] = "0";
        $payment_list["RECONLINE_CREDIT_CARD"] = hotel::$words["PaymentCreditCardReconline"][$_SESSION["ulang"]];
      }
      elseif($CreditCardSupported)
      {
        $payment_sort["RECONLINE_CREDIT_CARD"] = "10000";
        $payment_list["RECONLINE_CREDIT_CARD"] = hotel::$words["PaymentCreditCardReconline"][$_SESSION["ulang"]];
      }
    }
  } // adjust_payment_types 
  //-----------------------------------------------------------------
  private function render_ext_booking(&$content, &$page_info, $light_calender)
  {
    global $URL_PATH;
    global $JS_INCLUDES;

    $content = '';
    $sample = '';
    $template = '';
    $matches = array();

    //get template of booking process
    $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/booking_process_$page_info[lang].tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "templates/$page_info[template]/modules/booking_process.tpl");
    if(empty($sample))
      $sample = get_file_content(app_path() . "modules/hotel/include/tpl/booking_process.tpl");

    //get templates of components of booking steps
    $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking_$page_info[lang].tpl");
    if(empty($template))
      $template = get_file_content(app_path() . "templates/$page_info[template]/modules/ext_booking.tpl");
    if(empty($template))
      $template = get_file_content(app_path() . "modules/hotel/include/tpl/ext_booking.tpl");


    /*
      $sign = current currency sign
      $rate = current currency rate
      $nights - number of nights
      $persons - number of persons
    */
    if(!empty($_SESSION["booking"]["data"]["currencies"]))
    {
      $sign = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];
      $rate = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"];
    }
    else
    {
      $sign = "";
      $rate = 1;
    }

    $persons_count_string = '';

    if($_SESSION["step"] != 0 && $_SESSION["step"] != 1)
    {
      $persons_count_string = $_SESSION["booking"]["data"]["persons"];
      if($persons_count_string == 0)
        $persons_count_string = '&mdash;';
    }
    else
    {
      $persons_count_string = "<input id='persons_count' type='text' value='".$_SESSION["booking"]["data"]["persons"]."' onchange='\$(\"input[name=persons]\").val(\$(this).val());' />";
    }

    $nights = '';
    if($_SESSION["step"] > 0)
    {
       $nights = $_SESSION["booking"]["data"]["nights"];
    }

    $url = make_url($page_info["lang"], $page_info["name"]);
    $content .= '<form method="post" name="booking_form" id="booking_form" action="' . $url . '">';

    //settings
    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    //render steps
    switch($_SESSION["step"])
    {
      case 0:
        if(preg_match("/<!--[\s]*step 0:begin[\s]*-->.+<!--[\s]*step 0:end[\s]*-->/Us", $sample, $matches))
          $content .= $matches[0];
      break;

      case 1:

        // process special offers

        $specoffer_back_button = "";
        $specoffer_banner_contents = "";
        $special_offer_header = "";
        $special_offer_filter = "";
        $room_type_filter = "";
        $room_name_filter = "";
        $room_category_filter = "";
        $show_not_available_flag = "";

        if(count($_SESSION["booking"]["step1"]["available_spec_offers"]) > 0 &&
           empty($_SESSION["booking"]["specoffer_modus"])
           )
        {
          if(preg_match("/<!--[\s]*special_offer_banner:begin[\s]*-->.+<!--[\s]*special_offer_banner:end[\s]*-->/Us", $template, $matches))
          {
            $specoffer_banner_contents = $matches[0];

            $special_offer_text = "";
            $this->get_special_offer_text($page_info["langid"], $_SESSION["booking"]["data"]["arrive_date"], $special_offer_text);

            $specoffer_banner_contents = str_ireplace("{special_offer_text}", $special_offer_text, $specoffer_banner_contents);
          }
        }

        $rooms = "";

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          $now = time();
          $so_list = array();
          $filter_room_list = array();
          $person_list = array();
          $night_list = array();
          $this->get_total_spec_offer_list($now, $page_info, $so_list, $filter_room_list, $person_list, $night_list);

          $specoffer_back_button = '<input onclick="htl_booking.switch_specoffer(0);" class="booking_prev_step_button booking_button" type="button" value="'.try_translate("Previous", $page_info["lang"]).'" />';
          $special_offer_header = "<h3>" . try_translate("Specialoffers", $page_info["lang"]) . "</h3>";


          $special_offer_filter = "<input type='hidden' name='special_offer_filter_old' value='" . escape_html(ifnull($_SESSION["booking"]["data"]["special_offer_filter"])) . "'>";
          $special_offer_filter = "<input type='hidden' name='specoffer_old' value='" . escape_html(ifnull($_SESSION["booking"]["data"]["specoffer"])) . "'>";
          $special_offer_filter .= "<table class='spec_offer_filter'>";

          //--------------------------------------------------------------
          $special_offer_filter .= "<tr>";

          $special_offer_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["Specialoffer"][$_SESSION["ulang"]]) . ":</td>";
          $special_offer_filter .= "<td><select name='special_offer_filter' id='special_offer_filter' onchange='htl_booking.submit_booking_form();'>";

          $special_offer_filter .= "<option value=''>-</option>";

          foreach($so_list as $rid => $soinfo)
          {
            $selected = (ifnull($_SESSION["booking"]["data"]["special_offer_filter"]) == $rid || ifnull($_SESSION["booking"]["data"]["specoffer"]) == $soinfo["iname"]) ? " selected" : "";
            $special_offer_filter .= "<option value='" . escape_html($rid) . "' $selected>" . escape_html($soinfo["name"]) . "</option>";
          }

          $special_offer_filter .= "</select></td>";

          $special_offer_filter .= "</tr>";
          //--------------------------------------------------------------
          $special_offer_filter .= "<tr>";

          $special_offer_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["Room"][$_SESSION["ulang"]]) . ":</td>";
          $special_offer_filter .= "<td><select name='room_name_filter' id='room_filter' onchange='htl_booking.submit_booking_form();'>";

          $special_offer_filter .= "<option value=''>-</option>";
          
          if(!empty($_SESSION["booking"]["data"]["special_offer_filter"]) &&
             !empty($so_list[$_SESSION["booking"]["data"]["special_offer_filter"]]["rooms"]))
            $filter_room_list = $so_list[$_SESSION["booking"]["data"]["special_offer_filter"]]["rooms"];

          foreach($filter_room_list as $rid => $rname)
          {
            $selected = (ifnull($_SESSION["booking"]["data"]["room_filter"]) == $rid || ifnull($_SESSION["booking"]["data"]["room_name_filter"]) == $rid) ? " selected" : "";
            $special_offer_filter .= "<option value='" . escape_html($rid) . "' $selected>" . escape_html($rname) . "</option>";
          }

          $special_offer_filter .= "</select></td>";

          $special_offer_filter .= "</tr>";
          //--------------------------------------------------------------
          $special_offer_filter .= "<tr>";

          $special_offer_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["GuestsPerPoom"][$_SESSION["ulang"]]) . ":</td>";
          $special_offer_filter .= "<td><select name='person_filter' id='person_filter' onchange='htl_booking.submit_booking_form();'>";

          $special_offer_filter .= "<option value=''>-</option>";

          foreach($person_list as $pcount)
          {
            $selected = (ifnull($_SESSION["booking"]["data"]["person_filter"]) == $pcount) ? " selected" : "";
            $special_offer_filter .= "<option value='" . escape_html($pcount) . "' $selected>" . escape_html($pcount) . "</option>";
          }

          $special_offer_filter .= "</select></td>";

          $special_offer_filter .= "</tr>";
          $special_offer_filter .= "<tr>";

          $special_offer_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["NumberOfNights"][$_SESSION["ulang"]]) . ":</td>";
          $special_offer_filter .= "<td><select name='night_filter' id='night_filter' onchange='htl_booking.submit_booking_form();'>";

          $special_offer_filter .= "<option value=''>-</option>";

          foreach($night_list as $ncount)
          {
            $selected = (ifnull($_SESSION["booking"]["data"]["night_filter"]) == $ncount) ? " selected" : "";
            $special_offer_filter .= "<option value='" . escape_html($ncount) . "' $selected>" . escape_html($ncount) . "</option>";
          }

          $special_offer_filter .= "</select></td>";

          $special_offer_filter .= "</tr>";


          $special_offer_filter .= "<tr>";

          $special_offer_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["Sort"][$_SESSION["ulang"]]) . ":</td>";
          $special_offer_filter .= "<td>";

          $special_offer_filter .= "<select name='sort_field' id='sort_field' onchange='htl_booking.submit_booking_form();'>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_field"]) == 'PRICE') ? " selected" : "";
          $special_offer_filter .= "<option value='PRICE' $selected>" . escape_html(hotel::$words["Price"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_field"]) == 'NIGHTS_COUNT') ? " selected" : "";
          $special_offer_filter .= "<option value='NIGHTS_COUNT' $selected>" . escape_html(hotel::$words["NumberOfNights"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_field"]) == 'PERSONS_COUNT') ? " selected" : "";
          $special_offer_filter .= "<option value='PERSONS_COUNT' $selected>" . escape_html(hotel::$words["PersonsCount"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_field"]) == 'SORT_ORDER') ? " selected" : "";
          $special_offer_filter .= "<option value='SORT_ORDER' $selected>" . escape_html(hotel::$words["Room"][$_SESSION["ulang"]]) . "</option>";


          $special_offer_filter .= "</select>";

          $special_offer_filter .= " ";

          $special_offer_filter .= "<select name='sort_order' id='sort_order' onchange='htl_booking.submit_booking_form();'>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_order"]) == 'ASC') ? " selected" : "";
          $special_offer_filter .= "<option value='ASC' $selected>" . escape_html(hotel::$words["Ascending"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["sort_order"]) == 'DESC') ? " selected" : "";
          $special_offer_filter .= "<option value='DESC' $selected>" . escape_html(hotel::$words["Descending"][$_SESSION["ulang"]]) . "</option>";

          $special_offer_filter .= "</select>";


          $special_offer_filter .= "</td>";

          $special_offer_filter .= "</tr>";


          $special_offer_filter .= "</table>";

          $this->render_available_spec_rooms($page_info, $rooms, $template, $rate, $sign, $settings);
        }
        else
        {
          $room_type_filter = "<table class='room_type_filter'>";

          $room_type_filter .= "<tr>";

          $room_type_filter .= "<td class='filter_field_caption'>" . escape_html(hotel::$words["RoomType"][$_SESSION["ulang"]]) . ":</td>";
          $room_type_filter .= "</tr>";
          $room_type_filter .= "<tr>";
          $room_type_filter .= "<td><select name='room_type_filter' id='room_type_filter' onchange='htl_booking.submit_booking_form();'>";

          $room_type_filter .= "<option value=''>-</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["room_type_filter"]) == 'hotel_room') ? " selected" : "";
          $room_type_filter .= "<option value='hotel_room' $selected>" . escape_html(hotel::$words["HotelRoom"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["room_type_filter"]) == 'holiday_home') ? " selected" : "";
          $room_type_filter .= "<option value='holiday_home' $selected>" . escape_html(hotel::$words["HolidayHome"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["room_type_filter"]) == 'holiday_home_fixed') ? " selected" : "";
          $room_type_filter .= "<option value='holiday_home_fixed' $selected>" . escape_html(hotel::$words["HolidayHomeFixedPrice"][$_SESSION["ulang"]]) . "</option>";

          $selected = (ifnull($_SESSION["booking"]["data"]["room_type_filter"]) == 'hotel_room_fixed') ? " selected" : "";
          $room_type_filter .= "<option value='hotel_room_fixed' $selected>" . escape_html(hotel::$words["RoomFixedPrice"][$_SESSION["ulang"]]) . "</option>";
          
          $room_type_filter .= "</select></td>";

          $room_type_filter .= "</tr>";
          $room_type_filter .= "</table>";

          if(!$this->need_roomtype_filter())
          {
            $room_type_filter = "";
          }

          $room_category_filter = "<table class='room_category_filter'>";

          $room_category_filter .= "<tr>";
          
          $tmp = hotel::$words["RoomCategory"][$_SESSION["ulang"]];
          if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["fewo"])) $tmp = hotel::$words["ApartmentCategory"][$_SESSION["ulang"]]; 

          $room_category_filter .= "<td class='filter_field_caption'>" . escape_html($tmp) . ":</td>";
          $room_category_filter .= "</tr>";
          $room_category_filter .= "<tr>";
          $room_category_filter .= "<td><select name='room_category_filter' id='room_category_filter' onchange='htl_booking.submit_booking_form();'>";

          $room_category_filter .= "<option value=''>-</option>";

          $this->get_category_list();         
          if(!empty(hotel::$data["CATEGORY"][$page_info["langid"]]))          
          {
            foreach(hotel::$data["CATEGORY"][$page_info["langid"]] as $cat)
            {
              $selected = (ifnull($_SESSION["booking"]["data"]["room_category_filter"]) == $cat) ? " selected" : "";
              $room_category_filter .= "<option value='" . escape_html($cat) . "' $selected>" . escape_html($cat) . "</option>";
            }
          }
          
          $room_category_filter .= "</select></td>";

          $room_category_filter .= "</tr>";
          $room_category_filter .= "</table>";
          
          $room_name_filter = "<table class='room_name_filter'>";

          $room_name_filter .= "<tr>";

          $tmp = hotel::$words["Room"][$_SESSION["ulang"]];
          if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["fewo"])) $tmp = hotel::$words["Apartment"][$_SESSION["ulang"]]; 
          
          $room_name_filter .= "<td class='filter_field_caption'>" . escape_html($tmp) . ":</td>";
          $room_name_filter .= "</tr>";
          $room_name_filter .= "<tr>";
          $room_name_filter .= "<td><select name='room_name_filter' id='room_name_filter' onchange='htl_booking.submit_booking_form();'>";

          $room_name_filter .= "<option value=''>-</option>";
          
          $room_list = array();
          $this->get_room_list_for_filter($room_list, $page_info);         
          
          foreach($room_list as $room_i_name => $room_name)
          {
            $selected = (ifnull($_SESSION["booking"]["data"]["room_name_filter"]) == $room_i_name) ? " selected" : "";
            $room_name_filter .= "<option value='" . escape_html($room_i_name) . "' $selected>" . escape_html($room_name) . "</option>";
          }

          $room_name_filter .= "</select></td>";

          $room_name_filter .= "</tr>";
          $room_name_filter .= "</table>";
          
          $checked = empty($_SESSION["booking"]["data"]["show_not_available"]) ? "" : " checked";
          $show_not_available_flag = "<table class='not_available_flag'><tr><td><input type='checkbox' name='show_not_available' $checked onchange='htl_booking.submit_booking_form();'></td><td>" . hotel::$words["DisplayNotAvailableAlso"][$_SESSION["ulang"]] . "</td></tr></table>";
          
          $this->render_available_rooms($page_info, $rooms, $template, $rate, $sign, $settings);
        }

        if(preg_match("/<!--[\s]*step 1:begin[\s]*-->.+<!--[\s]*step 1:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];

          $content = str_ireplace("{available_rooms_list}", $rooms, $content);

          $content = str_ireplace("{special_offer_banner}", $specoffer_banner_contents, $content);
          $content = str_ireplace("{spec_offerback_button}", $specoffer_back_button, $content);
          $content = str_ireplace("{special_offer_header}", $special_offer_header, $content);
          $content = str_ireplace("{special_offer_filter}", $special_offer_filter, $content);
          $content = str_ireplace("{room_type_filter}", $room_type_filter, $content);
          $content = str_ireplace("{room_category_filter}", $room_category_filter, $content);
          $content = str_ireplace("{room_name_filter}", $room_name_filter, $content);
          $content = str_ireplace("{show_not_available_flag}", $show_not_available_flag, $content);

          if(!empty($settings["hide_condition_warning"]))
            $content = str_ireplace("{next_button}", '<input class="booking_next_step_button booking_button" type="submit" name="next" value="'.try_translate("Next", $page_info["lang"]).'" />', $content);
          else
            $content = str_ireplace("{next_button}", '<input onclick="return htl_booking.explain_text_confirm(\''.escape_js(hotel::$words["BookingConditions"][$_SESSION["ulang"]]).'\');" class="booking_next_step_button booking_button" type="submit" name="next" value="'.try_translate("Next", $page_info["lang"]).'" />', $content);
            
          if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_tripadvisor"]))
          {
            $content .= "\n<script type='text/JavaScript'>\n";
            $content .= "$(document).ready(function(){ TAPixel.impressionWithReferer('001F0000018SaiW'); });" . "\n";  
            $content .= "</script>" . "\n";  
          }
          
          if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_trivago"]) && !reqvar_empty("trivago"))
          {
            // set the session var to mark that the booking should be tracked
            $_SESSION[S_CONTEXT]["trivago_tracking"] = 1;
          }
        }

      break;
      //end step 1

      case 2:
        $rooms = "";
        $special_offer_header = "";

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          $special_offer_header = "<h3>" . try_translate("Specialoffers", $page_info["lang"]) . "</h3>";

          $this->render_selected_spec_rooms($page_info, $rooms, $template, $rate, $sign, $settings);
        }
        else
        {
          $this->render_selected_rooms($page_info, $rooms, $template, $rate, $sign, $settings);
        }

        if(preg_match("/<!--[\s]*step 2:begin[\s]*-->.+<!--[\s]*step 2:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];
          $content = str_ireplace("{selected_rooms}", $rooms, $content);

          $content = str_ireplace("{special_offer_header}", $special_offer_header, $content);

          $additional_services = array();
          $this->fetch_additional_services($page_info, $additional_services, $rate, $settings);

          if(count($additional_services) == 0)
            $content = str_ireplace("{next_button}", '', $content);
          else
            $content = str_ireplace("{next_button}", '<input class="booking_next_step_button booking_button" type="submit" name="next" value="'.escape_html(hotel::$words["AdditionalServices"][$_SESSION["ulang"]]).'" />', $content);

          $content = str_ireplace("{fill_guest_data_button}", '<input class="booking_additional_services_step_button booking_button" type="submit" name="next2" value="'.try_translate("Next", $page_info["lang"]).'" />', $content);
        }
      break;
      //end step 2

      //step 3
      case 3:
          /*
          $total_persons_count = 0;
          foreach($_SESSION["booking"]["step2_1"]["selected_persons"] as $rooms)
          {
            foreach($rooms as $persons)
            {
              $count = $persons["persons_count"];
              if($count == '2_1')
              {
                $count = 3;
              }
              $total_persons_count += $count;

              if(isset($persons["add_adult"]))
                $total_persons_count += $persons["add_adult"];

              if(isset($persons["add_children"]))
                $total_persons_count += $persons["add_children"];
            }
          }
          */
          $services_list = '<ul class="services_list">';
          
          foreach($_SESSION["booking"]["step3"]["additional_services"] as $service_id => &$service)
          {
            if(preg_match("/<!--[\s]*additional services:begin[\s]*-->.+<!--[\s]*additional services:end[\s]*-->/Us", $template, $matches))
            {
              $services_list .= $matches[0];
              $service_select = '';
              $service_check = '';
              switch($service["calculate_type"])
              {
                case 3:
                  $service_price = number_format($service["price"], 2, ',', '');
                  $disabled = '';
                  $disabled_hidden = '';

                  if(!empty($service["person_mandatory"]))
                  {
                    $disabled = ' disabled';
                    $disabled_hidden = "<input type='hidden' name='booking[additional_services][$service_id]' value='1'>";
                  }

                  $checked = '';
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]) ||
                     !empty($service["person_mandatory"])
                    )
                    $checked = " checked='true'";
                  $service_check = "<input type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked." $disabled/>" . $disabled_hidden;
                  $service_select = '<span class="result">';

                  $total_service_price = number_format($service["price"], 2, ',', '') . ' '.$sign;

                  $service_select .= $total_service_price;
                  $service_select .= '</span>';
                  break;

                case 5:
                  if($service["child_discount_flag"] == 0)
                    $service_price = number_format($service["child_discount"], 2, ',', '').' '.$sign;
                  else
                    $service_price = $service["child_discount"].' %';

                  $value = ifnull($_SESSION["booking"]["step3_1"]["selected_services_coupon"][$service_id]);

                  $checked = '';
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]))
                    $checked = " checked='true'";
                  $service_check = "<input type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked."/>";
                  $service_select = '<span class="result">';
                  $service_select .= $service_price;
                  $service_select .= '<br>';
                  $service_select .= hotel::$words["Coupon"][$_SESSION["ulang"]].'*: '."<input type='text' class='discount_coupon' name='booking[additional_services_coupon][$service_id]' value='$value'>";
                  $service_select .= '</span>';
                break;

                case 4:
                  $service_price = number_format($service["price"], 2, ',', '');
                  $disabled = '';
                  $disabled_hidden = '';

                  if(!empty($service["person_mandatory"]))
                  {
                    $disabled = ' disabled';
                    $disabled_hidden = "<input type='hidden' name='booking[additional_services][$service_id]' value='1'>";
                  }

                  $checked = '';
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]) ||
                     !empty($service["person_mandatory"])
                    )
                    $checked = " checked='true'";
                  $service_check = "<input type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked." $disabled/>" . $disabled_hidden;
                  $service_select = '<span class="result">';
                  $total_service_price = number_format($service["price"]*$service["room_factor"], 2, ',', '');
                  $service_select .= $service["room_factor"].' '.hotel::$words["Rooms"][$_SESSION["ulang"]]."/".hotel::$words["ApartsCount"][$_SESSION["ulang"]].' &times; '.$service_price.' '.$sign.' = '.$total_service_price.' '.$sign;
                  $service_select .= '</span>';
                  break;

                case 0:
                  $disabled = '';
                  $disabled_hidden = '';

                  if(!empty($service["person_mandatory"]))
                  {
                    $disabled = ' disabled';
                    $disabled_hidden = "<input type='hidden' name='booking[additional_services][$service_id]' value='1'>";
                  }

                  $checked = '';
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]) ||
                     !empty($service["person_mandatory"])
                    )
                    $checked = " checked='true'";
                  $service_check = "<input type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked." $disabled/>" . $disabled_hidden;
                  $service_select = '<span class="result">';
                  
                  $persons = $_SESSION["booking"]["data"]["persons"];
                  $adults = $_SESSION["booking"]["data"]["adults"];
                  $children = $_SESSION["booking"]["data"]["children"];
                  
                  if($children == 0)
                  {
                    $total_service_price = number_format($service["price"]*$persons*$nights, 2, ',', '');
                    $service_select .= $persons.' '.hotel::$words["Persons"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["price"], 2, ",", "").' '.$sign.' = '.$total_service_price.' '.$sign;
                  }
                  else
                  {
                    $total_service_price = number_format($service["price"]*$adults*$nights + $service["children_price"]*$children*$nights, 2, ',', '');

                    $service_select .= '('.$adults.' '.hotel::$words["Adults"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["price"], 2, ",", "").' '.$sign.') + ('.$children.' '.hotel::$words["Children"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["children_price"], 2, ",", "").' '.$sign.') = '.$total_service_price.' '.$sign;
                  }
                  
                  $service_select .= '</span>';
                break;

                case 1:
                  $service_price = number_format($service["price"], 2, ',', '');
                  $value = '';
                  $checked = '';
                  $result_hide = "style='display:none;'";
                  $disabled = " disabled='true'";
                  $total_price = '';
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]))
                  {
                    $value = $_SESSION["booking"]["step3_1"]["selected_services"][$service_id];
                    $checked = " checked='true'";
                    $result_hide = '';
                    $disabled = '';
                    $total_price = number_format($service["price"]*$value, 2, ',', '');
                  }
                  $service_check = "<input id='add_serv_check_".$service_id."' onclick='htl_booking.additional_services_toggle(this);' onchange='htl_booking.additional_services_toggle(this);' type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked."/>";
                  $service_select = "<input".$disabled." onkeyup='htl_booking.set_result(this, ".$service["calculate_type"].", \"".$service_price."\");' onchange='htl_booking.set_result(this, ".$service["calculate_type"].", \"".$service_price."\");' id='add_serv_input_".$service_id."' type='text' name='booking[additional_services][$service_id]' value='$value' /> &times; ".$service_price.' '.$sign.'<span class="result"'.$result_hide.'> = <span class="total">'.$total_price.'</span> '.$sign.'</span>';
                break;

                case 2:
                  $service_price =  number_format($service["price"], 2, ',', '');
                  $value = '';
                  $total_price = '';
                  $checked = '';
                  $result_hide = "style='display:none;'";
                  $disabled = " disabled='true'";
                  if(!empty($_SESSION["booking"]["step3_1"]["selected_services"][$service_id]))
                  {
                    $value = $_SESSION["booking"]["step3_1"]["selected_services"][$service_id];
                    $checked = " checked='true'";
                    $result_hide = '';
                    $disabled = '';
                    $total_price = number_format($value*$service["price"]*$nights, 2, ',', '');
                  }
                  $service_check = "<input id='add_serv_check_".$service_id."' onclick='htl_booking.additional_services_toggle(this);' onchange='htl_booking.additional_services_toggle(this);' type='checkbox' name='booking[additional_services][$service_id]' value='1'".$checked."/>";
                  $service_select = "<input".$disabled." onkeyup='htl_booking.set_result(this, ".$service["calculate_type"].", \"".$service_price."\", ".$nights.");' onchange='htl_booking.set_result(this, ".$service["calculate_type"].", \"".$service_price."\", ".$nights.");' id='add_serv_input_".$service_id."' type='text' name='booking[additional_services][$service_id]' value='$value' /> &times; ".$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.$service_price.' '.$sign.'<span class="result"'.$result_hide.'> = <span class="total">'.$total_price.'</span> '.$sign.'</span>';
                break;
              }
              
              $room_image = "";
              $thumb = "";
              $add_pictures = array();
              
              if($this->get_first_room_image($service_id, $pict, $thumb, $add_pictures, "s") &&
                 !empty($pict) && !empty($thumb))
              {
                $ipath = "resources/hotel/rooms/s".$service_id."/";
                $room_image = '<a class="fancybox-thumb" rel="service'.$service_id.'" title="' . escape_html($service["title"]) . '" href="'.$ipath.$pict.'">';
                $room_image .= '<img class="room-thumb" src="'.$ipath.$thumb.'?room_id=s'.$service_id.'&picture='. escape_html($pict) .'" alt="' . escape_html($service["title"]) . '" title="' . escape_html($service["title"]) . '" /><br>';
                $room_image .= hotel::$words["MorePictures"][$_SESSION["ulang"]];
                $room_image .= '</a>';
                
                $room_image .= '<div style="display:none">';
                foreach($add_pictures as $pinfo)
                {
                  $room_image .= '<a class="fancybox-thumb" rel="service'.$service_id.'" title="' . escape_html($service["title"]) . '" href="'.$ipath.$pinfo["picture"].'">';
                  $room_image .= '<img class="room-thumb" src="'.$ipath.$pinfo["thumb"].'?room_id=s'.$service_id.'&picture='. escape_html($pict) .'" alt="' . escape_html($service["title"]) . '" title="' . escape_html($service["title"]) . '" /><br>';
                  $room_image .= '</a>';
                }
                $room_image .= '</div>';        
                
                $room_image .= '<script type="text/javascript">';
                $room_image .= "$(document).ready(function() {
                                $(\"[rel='service$service_id']\").fancybox({
                                  helpers : {
                                    thumbs : true
                                  }
                                });
                              });
                          ";
                $room_image .= '</script>';
              }
              
              
              $services_list = str_ireplace("{amount}", $service["comment"], $services_list);
              $services_list = str_ireplace("{service_select}", $service_select, $services_list);
              $services_list = str_ireplace("{service_image}", $room_image, $services_list);
              $services_list = str_ireplace("{service_check}", $service_check, $services_list);
              $services_list = str_ireplace("{title}", $service["title"], $services_list);
              $services_list = str_ireplace("{caption}", $service["caption"], $services_list);
            }
          }

          $services_list .= '</ul>';

        if(preg_match("/<!--[\s]*step 3:begin[\s]*-->.+<!--[\s]*step 3:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];
          $content = str_ireplace("{additional_services}", $services_list, $content);
        }
      break;

      case 4:
        //rooms
        $order_info = '';

        if(!empty($_SESSION["booking"]["specoffer_modus"]))
        {
          $this->render_order_spec_info($page_info, $order_info, $template, $rate, $sign, $settings);
        }
        else
        {
          $this->render_order_info($page_info, $order_info, $template, $rate, $sign, $settings);
        }

        //additional services
        if(!empty($_SESSION["booking"]["step3_1"]["selected_services"]))
        {
          $additional_services = '<ul class="services_list">';
          foreach($_SESSION["booking"]["step3_1"]["selected_services"] as $service_id => $amount)
          {
            if($amount == 0)
              continue;

            $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];

            $price_interpretation = '';
            $total_price = 0;
            switch($service["calculate_type"])
            {
              case 3:
                $total_price = $service["price"];
                $service_price =  number_format($total_price, 2, ',', '');
                $price_interpretation = 1 . ' &times; ' . $service_price.' '.$sign;
              break;

              case 4:
                $total_price = $service["price"]*$service["room_factor"];
                $service_price =  number_format($service["price"], 2, ',', '');
                $price_interpretation = $service["room_factor"] . ' '. hotel::$words["Rooms"][$_SESSION["ulang"]] . ' &times; ' . $service_price.' '.$sign;
              break;

              case 5:
                if($service["child_discount_flag"] == 0)
                {
                  $total_price = $service["child_discount"];
                  $service_price = number_format($service["child_discount"], 2, ',', '');
                  $price_interpretation = $service_price.' '.$sign;
                }
                else
                {
                  $total_price = $_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"]*$service["child_discount"]/100;
                  $total_rooms_price = number_format($_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"], 2, ',', '');
                  $price_interpretation = $total_rooms_price.' '.$sign.' &times; '.$service["child_discount"].' %';
                }
              break;

              case 0:
                $persons = $_SESSION["booking"]["data"]["persons"];
                $adults = $_SESSION["booking"]["data"]["adults"];
                $children = $_SESSION["booking"]["data"]["children"];
                
                if($children == 0)
                {
                  $total_price = $service["price"]*$persons*$nights;
                  $price_interpretation = $persons.' '.hotel::$words["Persons"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["price"], 2, ',', '').' '.$sign;
                }
                else
                {
                  $total_price = ($service["price"]*$adults*$nights) + ($service["children_price"]*$children*$nights);
                  $price_interpretation = '('.$adults.' '.hotel::$words["Adults"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["price"], 2, ',', '').' '.$sign.') + ('.$children.' '.hotel::$words["Children"][$_SESSION["ulang"]].' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.number_format($service["children_price"], 2, ',', '').' '.$sign.')';
                }
              break;

              case 1:
                $total_price = $service["price"]*$amount;
                $service_price =  number_format($service["price"], 2, ',', '');
                $price_interpretation = $amount.' &times; '.$service_price.' '.$sign;
              break;

              case 2:
                $total_price = $service["price"]*$amount*$nights;
                $service_price =  number_format($service["price"], 2, ',', '');
                $price_interpretation = $amount.' &times; '.$nights.' '.hotel::$words["Nights"][$_SESSION["ulang"]].' &times; '.$service_price.' '.$sign;

              break;
            }

            $_SESSION["booking"]["price_interpretations"][$service_id] = $price_interpretation;

            if(preg_match("/<!--[\s]*additional services order:begin[\s]*-->.+<!--[\s]*additional services order:end[\s]*-->/Us", $template, $matches))
            {
              $additional_services .= $matches[0];

              $additional_services = str_ireplace("{price_interpretation}", $price_interpretation, $additional_services);
              $additional_services = str_ireplace("{title}", $service["title"], $additional_services);
              $additional_services = str_ireplace("{caption}", $service["caption"], $additional_services);
              $additional_services = str_ireplace("{price}", $service["price"], $additional_services);
              $additional_services = str_ireplace("{total_price}", number_format($total_price, 2, ',', ''), $additional_services);
            }
          }
          $additional_services .= '</ul>';
        }

        //booking form
        if(preg_match("/<!--[\s]*booking form:begin[\s]*-->.+<!--[\s]*booking form:end[\s]*-->/Us", $template, $matches))
        {
          $booking_form = $matches[0];
          
          if(!empty($settings["ext_form"]))
          {
            $booking_form = '<div class="booking_form_wrapper">
                              <table>
                              <tr>
                              <td>
                              ';
                              
            $counter = 1;
            $is_mobile = is_mobile(ifnull($_SERVER["HTTP_USER_AGENT"]));
            
            if(!empty($settings["title_field"]))
            {
              $required = ($settings["title_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
                <div class="form_caption">{word:Title}'.$required.'</div>
                <div class="form_element">{element:title}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["firstname_field"]))
            {
              $required = ($settings["firstname_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:FirstName}'.$required.'</div>
  <div class="form_element">{element:first_name}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:LastName}*</div>
  <div class="form_element">{element:last_name}</div>
            </div>
            ';
            if(++$counter > 5 && empty($is_mobile))
            {
              $counter = 1;
              $booking_form .= '</td><td>';
            }
            if(!empty($settings["company_field"]))
            {
              $required = ($settings["company_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Firm}'.$required.'</div>
  <div class="form_element">{element:firm}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["address_field"]))
            {
              $required = ($settings["address_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Address}'.$required.'</div>
  <div class="form_element">{element:address}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["zip_field"]))
            {
              $required = ($settings["zip_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Zip}'.$required.'</div>
  <div class="form_element">{element:zip}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["city_field"]))
            {
              $required = ($settings["city_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:City}'.$required.'</div>
  <div class="form_element">{element:ort}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["country_field"]))
            {
              $required = ($settings["country_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Land}'.$required.'</div>
  <div class="form_element">{element:land}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            if(!empty($settings["phone_field"]))
            {
              $required = ($settings["phone_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Phone}'.$required.'</div>
  <div class="form_element">{element:telephone}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
            $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Email}*</div>
  <div class="form_element">{element:email}</div>
            </div>
            ';
            if(!empty($settings["comment_field"]))
            {
              $required = ($settings["comment_field"] == 2) ? "*" : "";
              $booking_form .= '<div class="form_control">
  <div class="form_caption">{word:Note}'.$required.'</div>
  <div class="form_element">{element:other}</div>
              </div>
              ';
              if(++$counter > 5 && empty($is_mobile))
              {
                $counter = 1;
                $booking_form .= '</td><td>';
              }
            }
                              
            $booking_form .= '</td>
</tr>
</table>
<br>

<h1>{word:PaymentTypeText}</h1>

<div class="form_element">{element:payment_type}</div>

<br>
<table><tr><td><input type="checkbox" name="agreement" {agreement_checked}></td><td>{word:Agreement}</td></tr></table>
<table><tr><td><input type="checkbox" name="data_privacy" {agreement_checked}></td><td>{DataPrivacy}
<div style="display:none" id="data_privacy_info">{DataPrivacyText}</div></td></tr></table>

</div>';
          }
          
          
          $agreement_checked = "";
          if(!empty($settings["preselect_agreement"]))
            $agreement_checked = "checked";
          
          $booking_form = str_ireplace("{agreement_checked}", $agreement_checked, $booking_form);

          $data_privacy = hotel::$words["DataPrivacy"][$_SESSION["ulang"]];
          
          $data_privacy = preg_replace("/\\{([^\\{\\}]+)\\}/", "<a href='#' onclick='{ show_in_lightbox(\"data_privacy_info\"); return false; }'>$1</a>", $data_privacy);
          
          $booking_form = str_ireplace("{DataPrivacy}", $data_privacy, $booking_form);
          $booking_form = str_ireplace("{DataPrivacyText}", ifnull($settings["data_privacy_text"]), $booking_form);
          
          if(preg_match_all("/\{element:(.+)\}/", $booking_form, $matches))
          {
            foreach($matches[1] as $field_name)
            {
              $type = 'text';

              if($field_name == 'address' || $field_name == 'other')
                $type = 'textarea';

              if($field_name == 'land' || $field_name == 'title' || $field_name == 'payment_type')
                $type = 'select';

              switch($type)
              {
                case 'text':
                  $value = '';
                  if(!empty($_SESSION["booking"]["step5"]["personal_data"][$field_name]))
                    $value = $_SESSION["booking"]["step5"]["personal_data"][$field_name];
                  $element = '<input class="text_field" type="text" name="booking[personal_data]['.$field_name.']" value="'.$value.'" />';
                break;

                case 'select':
                  if($field_name == 'land')
                  {
                    $country_list = array();
                    $country_list[""] = "-";
                    get_country_list($country_list, $page_info["lang"]);

                    $element = '<select class="select_field" name="booking[personal_data]['.$field_name.']">';
                    foreach($country_list as $country_key => $country_name)
                    {
                      $selected = '';
                      if(!empty($_SESSION["booking"]["step5"]["personal_data"][$field_name]) && $_SESSION["booking"]["step5"]["personal_data"][$field_name] == $country_key)
                       $selected = ' selected="true"';

                      $element .= '<option value="'.$country_key.'"'.$selected.'>'.$country_name.'</option>';
                    }
                    $element .= '</select>';
                  }

                  if($field_name == 'payment_type')
                  {
                    $payment_sort = array();
                    $payment_list = array();
                    
                    if(!empty($settings["payment_ccard"]))
                    {
                      $payment_sort["CREDIT_CARD"] = empty($settings["payment_ccard_sort"]) ? 0 : $settings["payment_ccard_sort"];
                      $payment_list["CREDIT_CARD"] = hotel::$words["PaymentCreditCardDeposit"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_direct_debit"]))
                    {
                      $payment_sort["DIRECT_DEBIT"] = empty($settings["payment_direct_debit_sort"]) ? 0 : $settings["payment_direct_debit_sort"];
                      $payment_list["DIRECT_DEBIT"] = hotel::$words["PaymentDirectDebit"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_bill"]))
                    {
                      $payment_sort["BILL"] = empty($settings["payment_bill_sort"]) ? 0 : $settings["payment_bill_sort"];
                      $payment_list["BILL"] = hotel::$words["PaymentBill"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_bill_cc"]))
                    {
                      $payment_sort["BILL_CC"] = empty($settings["payment_bill_cc_sort"]) ? 0 : $settings["payment_bill_cc_sort"];
                      $payment_list["BILL_CC"] = hotel::$words["PaymentBillCreditCardDeposit"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_stripe"]))
                    {
                      $payment_sort["STRIPE"] = empty($settings["payment_stripe_sort"]) ? 0 : $settings["payment_stripe_sort"];
                      $payment_list["STRIPE"] = hotel::$words["PaymentCreditCardStripe"][$_SESSION["ulang"]];
                    }  
                    
                    if(!empty($settings["payment_postfin_ccard"]))
                    {
                      $payment_sort["POSTFIN_CC"] = empty($settings["payment_postfin_ccard_sort"]) ? 0 : $settings["payment_postfin_ccard_sort"];
                      $payment_list["POSTFIN_CCARD"] = hotel::$words["PaymentCreditCardPostfin"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_postfin_others"]))
                    {
                      $payment_sort["POSTFIN_OTHERS"] = empty($settings["payment_postfin_others_sort"]) ? 0 : $settings["payment_postfin_others_sort"];
                      $payment_list["POSTFIN_OTHERS"] = hotel::$words["PaymentOtherPostfin"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_postbank_ccard"]))
                    {
                      $payment_sort["POSTBANK_CCARD"] = empty($settings["payment_postbank_ccard_sort"]) ? 0 : $settings["payment_postbank_ccard_sort"];
                      $payment_list["POSTBANK_CCARD"] = hotel::$words["PaymentCreditCardPostbank"][$_SESSION["ulang"]];
                    }  

                    if(!empty($settings["payment_postbank_others"]))
                    {
                      $payment_sort["POSTBANK_OTHERS"] = empty($settings["payment_postbank_others_sort"]) ? 0 : $settings["payment_postbank_others_sort"];
                      $payment_list["POSTBANK_OTHERS"] = hotel::$words["PaymentOtherPostbank"][$_SESSION["ulang"]];
                    }  
                    
                    asort($payment_sort);
                    
                    $this->adjust_payment_types($payment_list, $payment_sort, $page_info, $settings);
                    
                    $element = '<select class="select_field payment_type" name="booking[personal_data]['.$field_name.']">';

                    $element .= '<option value="">-</option>';
                    
                    //foreach($payment_list as $payment_key => $payment_name)
                    foreach($payment_sort as $payment_key => $dummy)
                    {
                      if(empty($payment_list[$payment_key])) continue;
                        
                      $payment_name = $payment_list[$payment_key];
                      
                      $selected = '';
                      if(!empty($_SESSION["booking"]["step5"]["personal_data"][$field_name]) && $_SESSION["booking"]["step5"]["personal_data"][$field_name] == $payment_key)
                       $selected = ' selected="true"';

                      $element .= '<option value="'.$payment_key.'"'.$selected.'>'.$payment_name.'</option>';
                    }
                    $element .= '</select>';
                  }

                  if($field_name == 'title')
                  {
                    $options = array();
                    $options = explode(", ", hotel::$words["TitleOptions"][$_SESSION["ulang"]]);

                    $element = '<select class="select_field" name="booking[personal_data]['.$field_name.']">';
                    $element .= '<option value="">-</option>';
                    foreach($options as $key => $name)
                    {
                      $selected = '';
                      if(!empty($_SESSION["booking"]["step5"]["personal_data"][$field_name]) && $_SESSION["booking"]["step5"]["personal_data"][$field_name] == $name)
                       $selected = ' selected="true"';

                      $element .= '<option value="'.$name.'"'.$selected.'>'.$name.'</option>';
                    }
                    $element .= '</select>';
                  }
                break;

                case 'textarea':
                  $value = '';
                  if(!empty($_SESSION["booking"]["step5"]["personal_data"][$field_name]))
                    $value = $_SESSION["booking"]["step5"]["personal_data"][$field_name];
                  $element = '<textarea class="textarea_field" name="booking[personal_data]['.$field_name.']">'.$value.'</textarea>';
                break;
              }

              $booking_form = str_ireplace("{element:$field_name}", $element, $booking_form);
            }
          }
        }

        if(preg_match("/<!--[\s]*step 4:begin[\s]*-->.+<!--[\s]*step 4:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];

          $content = str_ireplace("{order_info}", $order_info, $content);
          $content = str_ireplace("{total_price}", number_format($_SESSION["booking"]["step4"]["booking_info"]["total_price"], 2, ',', ''), $content);

          if(!empty($additional_services))
            $content = str_ireplace("{additional_services}", $additional_services, $content);
          else
            $content = str_ireplace("{additional_services}", '', $content);

          $content = str_ireplace("{booking_form}", $booking_form, $content);
          $content = str_ireplace("{booking_button}", '<input class="booking_send_order_button booking_button" type="submit" name="next" value="'.escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]]).'" />', $content);
        }
      break;

      case 5:
        $payment_form = "";
        $directdebit_form = "";

        //payment form
        if(preg_match("/<!--[\s]*payment form:begin[\s]*-->.+<!--[\s]*payment form:end[\s]*-->/Us", $template, $matches))
        {
          $payment_form = $matches[0];

          if(preg_match_all("/\{element:(.+)\}/U", $payment_form, $matches))
          {
            foreach($matches[1] as $field_name)
            {
              $type = 'text';

              if($field_name == 'creditcart_type' ||
                 $field_name == 'creditcart_month' ||
                 $field_name == 'creditcart_year')
              {
                $type = 'select';
              }

              switch($type)
              {
                case 'text':
                  $value = '';
                  if(!empty($_SESSION["booking"]["step5"]["payment_data"][$field_name]))
                    $value = $_SESSION["booking"]["step5"]["payment_data"][$field_name];
                  $element = '<input class="text_field '.$field_name.'" type="text" name="booking[payment_data]['.$field_name.']" value="'.$value.'" />';
                break;

                case 'select':
                  $element = '';
                  if($field_name == 'creditcart_type')
                  {
                    $options = array();

                    if(!empty($settings["visa"])) $options[3] = "VISA";
                    if(!empty($settings["american_express"])) $options[1] = "American Express";
                    if(!empty($settings["master_card"])) $options[2] = "Master Card";
                    if(!empty($settings["jsb"])) $options[4] = "JSB";
                    if(!empty($settings["dinner_club"])) $options[5] = "Diners Club";

                    $element .= '<select class="'.$field_name.'" name="booking[payment_data]['.$field_name.']">';
                      foreach($options as $value => $name)
                      {
                        $selected = '';
                        if(isset($_SESSION["booking"]["step5"]["payment_data"][$field_name]) &&
                           $_SESSION["booking"]["step5"]["payment_data"][$field_name] == $value)
                          $selected = ' selected="true"';
                        $element .= "<option value='$value'$selected>$name</option>";
                      }
                    $element .= '</select>';
                  }

                  if($field_name == 'creditcart_month')
                  {
                    $options = array();
                    for($i = 1; $i <= 12; $i++)
                    {
                      if($i < 10)
                      {
                        $i = '0'.$i;
                      }
                      $options[$i] = $i;
                    }

                    $element .= '<select class="'.$field_name.'" name="booking[payment_data]['.$field_name.']">';
                      foreach($options as $value => $name)
                      {
                        $selected = '';
                        if(isset($_SESSION["booking"]["step5"]["payment_data"][$field_name]) &&
                           $_SESSION["booking"]["step5"]["payment_data"][$field_name] == $value)
                          $selected = ' selected="true"';
                        $element .= "<option value='$value'$selected>$name</option>";
                      }
                    $element .= '</select>';
                  }

                  if($field_name == 'creditcart_year')
                  {
                    $options = array();
                    for($i = date('Y'); $i <= date('Y') + 10; $i++)
                    {
                      $options[$i] = $i;
                    }

                    $element .= '<select class="'.$field_name.'" name="booking[payment_data]['.$field_name.']">';
                      foreach($options as $value => $name)
                      {
                        $selected = '';
                        if(isset($_SESSION["booking"]["step5"]["payment_data"][$field_name]) &&
                           $_SESSION["booking"]["step5"]["payment_data"][$field_name] == $value)
                          $selected = ' selected="true"';
                        $element .= "<option value='$value'$selected>$name</option>";
                      }
                    $element .= '</select>';
                  }
                break;
              }

              $payment_form = str_ireplace("{element:$field_name}", $element, $payment_form);
            }
          }
        }

        //directdebit form
        if(preg_match("/<!--[\s]*directdebit form:begin[\s]*-->.+<!--[\s]*directdebit form:end[\s]*-->/Us", $template, $matches))
        {
          $directdebit_form = $matches[0];

          if(preg_match_all("/\{element:(.+)\}/U", $directdebit_form, $matches))
          {
            foreach($matches[1] as $field_name)
            {
              $value = '';
              if(!empty($_SESSION["booking"]["step5"]["payment_data"][$field_name]))
                $value = $_SESSION["booking"]["step5"]["payment_data"][$field_name];
              $element = '<input class="text_field" type="text" name="booking[payment_data]['.$field_name.']" value="'.$value.'" />';

              $directdebit_form = str_ireplace("{element:$field_name}", $element, $directdebit_form);
            }
          }
        }

        $stripe_form = "";
        $this->build_payment_form($stripe_form, $settings, $page_info);
        
        if(preg_match("/<!--[\s]*step 5:begin[\s]*-->.+<!--[\s]*step 5:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];

          $content = str_ireplace("{directdebit_form}", $directdebit_form, $content);
          $content = str_ireplace("{payment_form}", $payment_form, $content);
          $content = str_ireplace("{stripe_form}", $stripe_form, $content);
          $content = str_ireplace("{booking_button}", '<input class="booking_send_order_button booking_button" type="submit" name="next" value="'.escape_html(hotel::$words["BookButton"][$_SESSION["ulang"]]).'" />', $content);
          $content = str_ireplace("{preview_button}", '<input class="booking_button" type="button" value="'.try_translate("Preview", $page_info["lang"]).'" onclick="window.open(\'' . $URL_PATH . 'modules/hotel_extended/order_info2.php?langid=' . $page_info["langid"] . '&lang=' . $page_info["lang"] . '\', \'htl_preview_order_window\', \'width=1000,height=700,menubar=yes,location=no,resizable=yes,scrollbars=yes,status=yes\');"/>', $content);
        }
      break;

      case 6:
        if(preg_match("/<!--[\s]*step 6:begin[\s]*-->.+<!--[\s]*step 6:end[\s]*-->/Us", $sample, $matches))
        {
          $content .= $matches[0];

          if($settings["confirmation"] == 0)
            $msg = hotel::$words["BookingIsSuccessfull"][$_SESSION["ulang"]];
          else
            $msg = hotel::$words["BookingIsSent"][$_SESSION["ulang"]];

          $partner_id = $settings["ta_partner_id"];
          $currency = $_SESSION["booking"]["online_payment"]["currency"];
          $order_id = $_SESSION["booking"]["online_payment"]["order_id"];
          $arrive_time = date("Y-m-d", $_SESSION["booking"]["online_payment"]["arrive_time"]);
          $departure_time = date("Y-m-d", $_SESSION["booking"]["online_payment"]["departure_time"]);
          $adults_count = $_SESSION["booking"]["online_payment"]["adults_count"];        
          $children_count = $_SESSION["booking"]["online_payment"]["children_count"];        
          $nights = $_SESSION["booking"]["online_payment"]["nights"];        
          
          if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_tripadvisor"]))
          {
            //------------------------------------------------------------------
            $brutto = $_SESSION["booking"]["online_payment"]["total_order_price"];

            $vattax = $settings["ta_vattax"];
            $vnetto = $brutto / (1 + $vattax / 100);
            $vattax_sum = $brutto - $vnetto;

            $localtax = $settings["ta_localtax"];
            $localtax_sum = $vnetto * $localtax / 100;

            $occupancy_fees_adults = $settings["ta_occupancy_fees_adults"];
            $occupancy_fees_children = $settings["ta_occupancy_fees_children"];

            $occupancy_fees_adults_sum = $occupancy_fees_adults * $adults_count * $nights;
            $occupancy_fees_children_sum = $occupancy_fees_children * $children_count * $nights;

            $other_taxes = $settings["ta_other_taxes"];
            $other_taxes_sum = $vnetto * $other_taxes / 100;

            $resort_fees = $settings["ta_resort_fees"];
            if(!empty($settings["ta_resort_fees_percent"]))
              $resort_fees_sum = $vnetto * $resort_fees / 100;
            else
              $resort_fees_sum = $resort_fees;

            $service_fees = $settings["ta_service_fees"];
            if(!empty($settings["ta_service_fees_percent"]))
              $service_fees_sum = $vnetto * $service_fees / 100;
            else
              $service_fees_sum = $service_fees;

            $other_fees = $settings["ta_other_fees"];
            
            $prepayment = $settings["ta_prepayment"];

            $ta_tax = 0;
            $ta_fees = 0;
            $ta_tax_at_checkout = $vattax_sum + $localtax_sum + $occupancy_fees_adults_sum + $occupancy_fees_children_sum + $other_taxes_sum;
            $ta_fees_at_checkout = $resort_fees_sum + $service_fees_sum + $other_fees;

            if(!empty($prepayment))
            {
              $ta_tax = $ta_tax_at_checkout * $prepayment / 100;
              $ta_fees = $ta_fees_at_checkout * $prepayment / 100;

              $ta_tax_at_checkout -= $ta_tax;
              $ta_fees_at_checkout -= $ta_fees;
            }

            $ta_price = $brutto - $ta_tax - $ta_fees - $ta_tax_at_checkout - $ta_fees_at_checkout;
            
            $ta_price = round($ta_price*100);
            $ta_tax = round($ta_tax*100);
            $ta_fees = round($ta_fees*100);
            //------------------------------------------------------------------
          
            $msg .= "<script type='text/JavaScript'>\n";
            $msg .= "$(document).ready(function(){ TAPixel.conversionWithReferer('001F0000018SaiW',
                                       '$partner_id',
                                       '$ta_price',
                                       '$currency', 	
                                       '$ta_tax',
                                       '$ta_fees',
                                       '$arrive_time', 
                                       '$departure_time', 
                                       '$adults_count', 
                                       '$order_id' 
                                      ); });" . "\n";  
            $msg .= "</script>" . "\n";  
          }
          
          if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_trivago"]) && !empty($_SESSION[S_CONTEXT]["trivago_tracking"]))
          {
            $hotel_ref = urlencode($settings["tvg_hotel_id"]);
            $ref = "1944";
            $currency = urlencode($_SESSION["booking"]["online_payment"]["currency"]);

            $arrival = urlencode($_SESSION["booking"]["online_payment"]["arrive_time"]+12*3600);
            $departure = urlencode($_SESSION["booking"]["online_payment"]["departure_time"]+12*3600);
            
            $volume = urlencode($_SESSION["booking"]["online_payment"]["total_order_price"]);
            $booking_id = urlencode($_SESSION["booking"]["online_payment"]["order_id"]);
            
            $currency = urlencode($_SESSION["booking"]["online_payment"]["currency"]);

            $msg .= "<img height='1' width='1' style='border-style:none;' alt='trivago' src='https://secde.trivago.com/page_check.php?pagetype=track&ref=$ref&hotel=$hotel_ref&arrival=$arrival&departure=$departure&volume=$volume&currency=$currency&booking_id=$booking_id'/>" . "\n";  
          }
          
          $content = str_ireplace("{thanks_for_booking_msg}", $msg, $content);
          
          $payment_type = ifnull($_SESSION["booking"]["online_payment"]["payment_type"]);
          if($payment_type == "POSTFIN_CCARD" || $payment_type == "POSTFIN_OTHERS" ||
             $payment_type == "POSTBANK_CCARD" || $payment_type == "POSTBANK_OTHERS") 
          {
            $payment_form = "";
            
            $this->build_payment_form($payment_form, $settings, $page_info);
            
            $content = hotel::$words["RedirectingToPayment"][$_SESSION["ulang"]] . "<br><br>" .
            "<img src='admin/images/common/ajax-loader-bar.gif' alt='loading'>";
            
            if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_tripadvisor"]))
            {
              $content .= "<script type='text/JavaScript'>\n";
              $content .= "TAPixel.conversionWithReferer('001F0000018SaiW',
                                       '$partner_id',
                                       '$ta_price',
                                       '$currency', 	
                                       '$ta_tax',
                                       '$ta_fees',
                                       '$arrive_time', 
                                       '$departure_time', 
                                       '$adults_count', 
                                       '$order_id' 
                                        );" . "\n";  
              $content .= "</script>" . "\n";  
            }
            
            if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel_dc_trivago"]) && !empty($_SESSION[S_CONTEXT]["trivago_tracking"]))
            {
              $content .= "<img height='1' width='1' style='border-style:none;' alt='trivago' src='https://secde.trivago.com/page_check.php?pagetype=track&ref=$ref&hotel=$hotel_ref&arrival=$arrival&departure=$departure&volume=$volume&currency=$currency&booking_id=$booking_id'/>" . "\n";  
            }
            
            $content .= $payment_form;
          }
        }
      break;

    }//switch


    /****************************************************
    COMMON COMPONENTS
    ****************************************************/

    $pattern = "/<!--[\s]*dates:begin[\s]*-->.+<!--[\s]*dates:end[\s]*-->/Us";
    
    if(!empty($_SESSION["booking"]["specoffer_modus"]))
      $pattern = "/<!--[\s]*so_dates:begin[\s]*-->.+<!--[\s]*so_dates:end[\s]*-->/Us";
    
    //dates
    if(preg_match($pattern, $template, $matches))
    {
      if(!$this->ext_js_included)
      {
        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
          $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_ibooking.js" type="text/javascript"></script>';
        else
          $JS_INCLUDES .= '<script src="modules/hotel_extended/js/ext_booking.js" type="text/javascript"></script>';

        $this->ext_js_included = true;
      }
      if($_SESSION["step"] < 2)
      {
        $calendar_url = app_url_path("index.php");

        $from_date = time();
        $to_date = time() + 1*24*3600;

        if(!reqvar_empty("begin_date"))
        {
          $dt = date("Y-m-d", strtotime(reqvar("begin_date")));
          $from_date = strtotime(reqvar("begin_date"));
        }
        else
          $dt = "";

        $lang = $page_info["lang"];

        $month[1] = try_translate("January", $lang);
        $month[2] = try_translate("February", $lang);
        $month[3] = try_translate("March", $lang);
        $month[4] = try_translate("April", $lang);
        $month[5] = try_translate("May", $lang);
        $month[6] = try_translate("June", $lang);
        $month[7] = try_translate("July", $lang);
        $month[8] = try_translate("August", $lang);
        $month[9] = try_translate("September", $lang);
        $month[10] = try_translate("October", $lang);
        $month[11] = try_translate("November", $lang);
        $month[12] = try_translate("December", $lang);

        $datefield = "<input onclick='htl_booking.open_calendar(\"arrive\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_begin_date1' readonly='readonly' value='".format_date($_SESSION["booking"]["data"]["arrive_date"], $page_info["date_format"])."' /><input type='hidden' id='htl_begin_date_hidden1' name='begin_date' value='".$dt."' />";
        $datefield_dl = $datefield;
        if($light_calender)
        {
          $datefield = "<input type='text' id='htl_begin_date1' name='begin_date' value='".format_date($_SESSION["booking"]["data"]["arrive_date"], $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_begin_date1', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
          ";

          $datefield_dl = "<select id='from_date_day' name='from_date_day' onchange=''>\n";
          for($i = 1; $i <= 31; $i++)
          {
            $selected = "";
            if(date("j", $from_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='$i' $selected>$i</option>\n";
          }
          $datefield_dl .= "</select> ";

          $datefield_dl .= "<select id='from_date_month' name='from_date_month' onchange=''>\n";
          $y = date("Y");
          for($i = date("n"); $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $y++;
          for($i = 1; $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $y++;
          for($i = 1; $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $from_date) == $y && date("n", $from_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $datefield_dl .= "</select>";
          $datefield_dl .= "<input type='hidden' id='htl_begin_date1' name='begin_date' value='".format_date($_SESSION["booking"]["data"]["arrive_date"], $page_info["date_format"])."' />";
        }
        $dates = str_ireplace("{arrive_date}", $datefield, $matches[0]);
        $dates = str_ireplace("{arrive_date_dl}", $datefield_dl, $dates);

        if(!reqvar_empty("end_date"))
        {
          $dt = date("Y-m-d", strtotime(reqvar("end_date")));
          $to_date = strtotime(reqvar("end_date"));
        }
        else
          $dt = "";

        $datefield = "<input onclick='htl_booking.open_calendar(\"departure\", \"$calendar_url\", \"$page_info[lang]\", \"$page_info[template]\", \"$page_info[date_format]\");' type='text' id='htl_end_date1' readonly='readonly' value='".format_date($_SESSION["booking"]["data"]["departure_date"], $page_info["date_format"])."' /><input type='hidden' id='htl_end_date_hidden1' name='end_date' value='".$dt."' />";
        $datefield_dl = $datefield;
        if($light_calender)
        {
          $datefield = "<input type='text' id='htl_end_date1' name='end_date' value='".format_date($_SESSION["booking"]["data"]["departure_date"], $page_info["date_format"])."' />
                          <script type='text/JavaScript'>
                            init_datepicker('htl_end_date1', '" . escape_html(hotel::$words["DateFormatDatePicker"][$_SESSION["ulang"]]) . "');
                          </script>
          ";

          $datefield_dl = "<select id='to_date_day' name='to_date_day' onchange=''>\n";
          for($i = 1; $i <= 31; $i++)
          {
            $selected = "";
            if(date("j", $to_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='$i' $selected>$i</option>\n";
          }
          $datefield_dl .= "</select> ";

          $datefield_dl .= "<select id='to_date_month' name='to_date_month' onchange=''>\n";
          $y = date("Y");
          for($i = date("n"); $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $y++;
          for($i = 1; $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $y++;
          for($i = 1; $i <= 12; $i++)
          {
            $selected = "";
            if(date("Y", $to_date) == $y && date("n", $to_date) == $i) $selected = " selected";
            $datefield_dl .= "<option value='${i}.${y}' $selected>" . $month[$i] . " " . $y . "</option>\n";
          }
          $datefield_dl .= "</select> ";
          $datefield_dl .= "<input type='hidden' id='htl_end_date1' name='end_date' value='".format_date($_SESSION["booking"]["data"]["departure_date"], $page_info["date_format"])."' />";
        }
        $dates = str_ireplace("{departure_date}", $datefield, $dates);
        $dates = str_ireplace("{departure_date_dl}", $datefield_dl, $dates);

        $dates = str_ireplace("{change_dates_button}", "<input id='htl_search_button' name='new_dates' type='submit' value='".try_translate("Search", $page_info["lang"])."' />", $dates);
      }
      else
      {
        $dates = str_ireplace("{arrive_date}", format_date($_SESSION["booking"]["data"]["arrive_date"], $page_info["date_format"]), $matches[0]);
        $dates = str_ireplace("{arrive_date_dl}", format_date($_SESSION["booking"]["data"]["arrive_date"], $page_info["date_format"]), $dates);
        $dates = str_ireplace("{departure_date}", format_date($_SESSION["booking"]["data"]["departure_date"], $page_info["date_format"]), $dates);
        $dates = str_ireplace("{departure_date_dl}", format_date($_SESSION["booking"]["data"]["departure_date"], $page_info["date_format"]), $dates);
        $dates = str_ireplace("{change_dates_button}", '', $dates);
      }
    }
    
    // coupon_input
    if($_SESSION["step"] < 2)
    {
      $coupon_input = "<input type='text' class='coupon_input' name='coupon' value='" . escape_html(ifnull($_SESSION["booking"]["data"]["coupon"])) . "'>";
    }
    else
    {
      $coupon_input = escape_html(ifnull($_SESSION["booking"]["data"]["coupon"]));
    }

    //currency_select
    $currency_select = '';
    if(count($_SESSION["booking"]["data"]["currencies"]) > 1)
    {
      $currency_select = '<select class="currency_select" name="current_currency" onchange="$(\'#booking_form\').submit();">';

      foreach($_SESSION["booking"]["data"]["currencies"] as $cur_id => $cur)
      {
        $selected = '';
        if($cur_id == $_SESSION["booking"]["data"]["current_currency"])
          $selected = 'selected="true"';

        $currency_select .= "<option value='{$cur_id}'{$selected}>$cur[sign]</option>";
      }

      $currency_select .= '</select>';
    }

    //Explain and Payment texts
    $explain_text = array();
    $this->fetch_settings($explain_text, "EXPLAIN_TEXT");
    if(isset($explain_text[$page_info["langid"]]["explain_text"]))
      $explain_texts = $explain_text[$page_info["langid"]];
    else
    {
      $explain_texts["explain_text"] = '';
      $explain_texts["payment_text"] = '';
      $explain_texts["payment_text2"] = '';
    }

    //Booking errors
    if(isset($_SESSION["booking"]["error"]) && !empty($_SESSION["booking"]["error"]))
      $booking_error = "<div class='booking_error'>".$_SESSION["booking"]["error"]."</div>";
    else
      $booking_error = '';

    //$content .= '<input type="hidden" name="act" value="" />';
    if($_SESSION["step"] != 0 && $_SESSION["step"] != 1)
    {
      $content .= '<input id="htl_begin_date_hidden2" type="hidden" name="begin_date" value="'.reqvar("begin_date").'" />';
      $content .= '<input id="htl_end_date_hidden2" type="hidden" name="end_date" value="'.reqvar("end_date").'" />';
    }
    $content .= '<input type="hidden" name="booking[arrive_date]" value="'.reqvar("begin_date").'" />';
    $content .= '<input type="hidden" name="booking[departure_date]" value="'.reqvar("end_date").'" />';

    $value = ifnull($_SESSION["booking"]["data"]["persons"]);
    if(empty($value)) $value = 1;
    $content .= '<input type="hidden" name="persons" value="'.$value.'" />';
    $content .= '<input type="hidden" name="children" value="'.reqvar("children").'" />';

    $content .= '<input type="hidden" name="specoffer_modus" id="specoffer_modus" value="'.reqvar("specoffer_modus").'" />';

    $content .= '</form>';

    //debug_message(print_r($_SESSION["booking"], true));

    //Replace common placeholders
    $payment_type = ifnull($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]);

    $bill_display = 'style="display:none"';
    $bill_cc_display = 'style="display:none"';
    $direct_debit_display = 'style="display:none"';
    $payment_ccard_display = 'style="display:none"';
    $online_payment_display = 'style="display:none"';
    $stripe_display = 'style="display:none"';

    if($payment_type == "CREDIT_CARD" || $payment_type == "RECONLINE_CREDIT_CARD") $payment_ccard_display = "";
    if($payment_type == "DIRECT_DEBIT") $direct_debit_display = "";
    if($payment_type == "BILL") $bill_display = "";
    if($payment_type == "BILL_CC") 
    {
      $bill_cc_display = "";
      $payment_ccard_display = "";
    }
    
    if($payment_type == "POSTFIN_CCARD" || $payment_type == "POSTFIN_OTHERS" ||
       $payment_type == "POSTBANK_CCARD" || $payment_type == "POSTBANK_OTHERS") $online_payment_display = "";

    if($payment_type == "STRIPE") $stripe_display = "";
       
    $content = str_ireplace("{bill_display}", $bill_display, $content);
    $content = str_ireplace("{bill_cc_display}", $bill_cc_display, $content);
    $content = str_ireplace("{online_payment_display}", $online_payment_display, $content);
    $content = str_ireplace("{stripe_display}", $stripe_display, $content);
    
    $content = str_ireplace("{direct_debit_display}", $direct_debit_display, $content);
    $content = str_ireplace("{payment_ccard_display}", $payment_ccard_display, $content);

    $content = str_ireplace("{booking_error}", $booking_error, $content);
    $content = str_ireplace("{dates}", $dates, $content);
    $content = str_ireplace("{nights}", $nights, $content);
    $content = str_ireplace("{persons}", $persons_count_string, $content);
    $content = str_ireplace("{currency_select}", $currency_select, $content);
    $content = str_ireplace("{coupon_input}", $coupon_input, $content);
    $content = str_ireplace("{currency_sign}", $sign, $content);
    $content = str_ireplace("{explain_text}", '<a id="htl_booking_explain_text"></a>'.$explain_texts["explain_text"], $content);

    $content = str_ireplace("{dd_text}", ifnull($explain_texts["dd_text"]), $content);
    $content = str_ireplace("{bill_text}", ifnull($explain_texts["bill_text"]), $content);
    $content = str_ireplace("{bill_cc_text}", ifnull($explain_texts["bill_cc_text"]), $content);
    $content = str_ireplace("{online_payment_text}", ifnull($explain_texts["online_payment_text"]), $content);
    $content = str_ireplace("{payment_text}", ifnull($explain_texts["payment_text"]), $content);
    $content = str_ireplace("{payment_text2}", ifnull($explain_texts["payment_text2"]), $content);

    $content = str_ireplace("{next_button}", '<input class="booking_next_step_button booking_button" type="submit" name="next" value="'.try_translate("Next", $page_info["lang"]).'" />', $content);
    $content = str_ireplace("{prev_button}", '<input class="booking_prev_step_button booking_button" type="submit" name="prev" value="'.try_translate("Previous", $page_info["lang"]).'" />', $content);
    $content = str_ireplace("{fill_guest_data_button}", '<input type="submit" name="next2" value="'.try_translate("NextWithoutServices", $page_info["lang"]).'" />', $content);

    $content = str_ireplace("{obligatory_booking_button}", '<input class="booking_send_order_button booking_button" type="submit" name="next" value="'.escape_html(hotel::$words["ObligatoryBookButton"][$_SESSION["ulang"]]).'" />', $content);

    $this->pror_parse_word($content, $page_info);

    /*
    $content .= '<pre>';
    $content .= 'SESSION<br />';
    $content .= 'Step:'.print_r($_SESSION["step"], true).'<br />';
    $content .= print_r($_SESSION["booking"], true);
    $content .= 'REQUEST<br />';
    $content .= print_r($_REQUEST, true);
    $content .= '</pre>';
    */
  } // render_ext_booking
  //-----------------------------------------------------------------

  public function fetch_default_currency()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $query = "SELECT {$prfx}_HTL_CURRENCY.ID, I_NAME, SIGN, RATE, {$prfx}_HTL_CURRENCY_PROPS.NAME, ACTIVE
              FROM {$prfx}_HTL_CURRENCY
              LEFT JOIN {$prfx}_HTL_CURRENCY_PROPS ON (ID = CURRENCY_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              WHERE {$prfx}_HTL_CURRENCY.IS_DEFAULT = 1";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

   $currency = array();

    while($dbw->fetch_row())
    {
      $sign = $dbw->field_by_name("SIGN");
      if(empty($sign)) $sign = $dbw->field_by_name("NAME");

      if($dbw->field_by_name("ACTIVE") != 1) $sign = $dbw->field_by_name("I_NAME");

      $currency = array("internal_name" => $dbw->field_by_name("I_NAME"),
                        "rate" => $dbw->field_by_name("RATE"),
                        "sign" => $sign,
                        "name" => $dbw->field_by_name("NAME")
                       );
    }

    $dbw->free_result();

    return $currency;
  } // fetch_default_currency
  //-----------------------------------------------------------------

  public function fetch_booking_list(&$booking_list, $modus = 'ALL', $archive = false)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $now = $dbw->format_date(time());

    if($modus == 'ALL')
      $where_clause = '';
    if($modus == 'CONFIRMED')
      $where_clause = ' AND CONFIRMED = 1';
    if($modus == 'NOT_CONFIRMED')
      $where_clause = ' AND CONFIRMED = 0';
    if($modus == 'CANCELED')
      $where_clause = ' AND CONFIRMED = 2';
    if($modus == 'REJECTED')
      $where_clause = ' AND CONFIRMED = 3';
    if($modus == 'NOT_PAID')
      $where_clause = ' AND CONFIRMED = 5';
    if($modus == 'PAID')
      $where_clause = ' AND CONFIRMED = 6';
    if($modus == 'PART_PAID')
      $where_clause = ' AND CONFIRMED = 7';
    if($modus == 'OVERDUE')
      $where_clause = " AND CONFIRMED = 7 AND FOLLOW_PAY_DEADLINE < '$now'";

    if(!$archive)
      $where_clause .= " AND (ARRIVE_DATE >= '$now' AND ARCHIVED <> '1')";
    else
      $where_clause .= " AND (ARRIVE_DATE < '$now' OR ARCHIVED = '1')";

    if(!reqvar_empty("begin_date"))
    {
      $begin_date = format_date(reqvar("begin_date"), 'Y-m-d');
      $begin_time = $this->date_to_time($begin_date);
      $begin_date = $dbw->format_date($begin_time);

      $where_clause .= " AND (ARRIVE_DATE >= '$begin_date')";
    }

    if(!reqvar_empty("end_date"))
    {
      $end_date = format_date(reqvar("end_date"), 'Y-m-d');
      $end_time = $this->date_to_time($end_date);
      $end_date = $dbw->format_date($end_time);

      $where_clause .= " AND (ARRIVE_DATE <= '$end_date')";
    }

    //fetch rooms
    $query = "SELECT ENCODED, {$prfx}_HTL_ORDER.ID, ARRIVE_DATE, DEPARTURE_DATE, TOTAL_ORDER_PRICE, CONFIRMED, 
              SPEC_OFFER, CURRENCY_RATE, CURRENCY_SIGN, ORDER_TM, FIRST_NAME, LAST_NAME, EMAIL, TELEPHONE, {$prfx}_HTL_ORDER_PROP.ROOM_ID, ROOM_COUNTER, PERSONS_COUNT, ADULTS_COUNT, CHILDREN_COUNT, I_NAME, TYPE, CATEGORY, TOTAL_PRICE,
              PAID, FOLLOW_PAY_DEADLINE, CONNECTOR_PUSH_ERROR
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_ORDER_PROP.ORDER_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID  AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              WHERE 1=1 {$where_clause}
              ORDER BY ORDER_TM DESC";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rate = $dbw->field_by_name("CURRENCY_RATE");
      if(empty($rate))
        $rate = 1;

      $is_encrypted = $dbw->field_by_name("ENCODED");

      $booking_list[$dbw->field_by_name("ID")]["arrive_date_int"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));

      $booking_list[$dbw->field_by_name("ID")]["arrive_date"] = $dbw->field_by_name("ARRIVE_DATE");
      $booking_list[$dbw->field_by_name("ID")]["departure_date"] = $dbw->field_by_name("DEPARTURE_DATE");
      $booking_list[$dbw->field_by_name("ID")]["total_order_price"] = number_format($dbw->field_by_name("TOTAL_ORDER_PRICE"), 2, ',', '');
      $booking_list[$dbw->field_by_name("ID")]["confirmed"] = $dbw->field_by_name("CONFIRMED");
      $booking_list[$dbw->field_by_name("ID")]["spec_offer"] = $dbw->field_by_name("SPEC_OFFER");
      $booking_list[$dbw->field_by_name("ID")]["sign"] = $dbw->field_by_name("CURRENCY_SIGN");
      $booking_list[$dbw->field_by_name("ID")]["rate"] = $rate;
      $booking_list[$dbw->field_by_name("ID")]["order_datetime"] = $dbw->field_by_name("ORDER_TM");

      $booking_list[$dbw->field_by_name("ID")]["follow_pay"] = number_format($dbw->field_by_name("TOTAL_ORDER_PRICE") - $dbw->field_by_name("PAID"), 2, ',', '');
      $booking_list[$dbw->field_by_name("ID")]["pay_deadline"] = $dbw->field_by_name("FOLLOW_PAY_DEADLINE");

      $booking_list[$dbw->field_by_name("ID")]["connector_push_error"] = $dbw->field_by_name("CONNECTOR_PUSH_ERROR");
      
      $booking_list[$dbw->field_by_name("ID")]["personal_info"]["first_name"] = $dbw->field_by_name("FIRST_NAME");
      $booking_list[$dbw->field_by_name("ID")]["personal_info"]["last_name"] = $dbw->field_by_name("LAST_NAME");
      $booking_list[$dbw->field_by_name("ID")]["personal_info"]["phone"] = User::decrypt_data($dbw->field_by_name("TELEPHONE"), $is_encrypted);
      $booking_list[$dbw->field_by_name("ID")]["personal_info"]["email"] = $dbw->field_by_name("EMAIL");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = array();
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["internal_name"] = $dbw->field_by_name("I_NAME");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["type"] = $dbw->field_by_name("TYPE");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["category"] = $dbw->field_by_name("CATEGORY");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["persons_count"] = $dbw->field_by_name("PERSONS_COUNT");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["adults_count"] = $dbw->field_by_name("ADULTS_COUNT");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["children_count"] = $dbw->field_by_name("CHILDREN_COUNT");
      $booking_list[$dbw->field_by_name("ID")]["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["total_price"] = number_format($dbw->field_by_name("TOTAL_PRICE"), 2, ',', '');
    }

    $dbw->free_result();

    //fetch services
    foreach($booking_list as $order_id => &$order)
    {
      $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, AMOUNT, TOTAL_PRICE
                FROM {$prfx}_HTL_ORDER
                LEFT JOIN {$prfx}_HTL_ORDER_SERVICES ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_ORDER_SERVICES.ORDER_ID)
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID)
                LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID)
                WHERE LANG_KEY = '$lang_key' AND {$prfx}_HTL_ORDER.ID = $order_id
                ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $order["additional_services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                         "amount" => $dbw->field_by_name("AMOUNT"),
                                                                         "total_price" => number_format($dbw->field_by_name("TOTAL_PRICE"), 2, ',', ''));
      }
    }
  } // fetch_booking_list
  //-----------------------------------------------------------------
  public function change_booking($order_id, &$settings)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $page = $settings["booking_page"];

    $_SESSION["rebooking"] = array();

    if(!$this->fetch_order_info($_SESSION["rebooking"], $order_id)) return false;

    if(!$this->cancel_booking($order_id)) return false;

    //debug_message(print_r($_SESSION["rebooking"], true));

    $lang = ifnull($_SESSION["rebooking"]["order_lang"]);
    if(empty($lang)) $lang = "de";

    $params = array();
    $url = make_url2($lang, $page, $params);

    $is_ssl = false;
    $site = GetWebsite();
    if($site) $is_ssl = $site->is_ssl($page);

    if($is_ssl)
    {
      $url = str_replace("http://", "https://", get_host_address() . $url);
    }

    header("Location: " . $url);
    exit();

    return true;
  } // change_booking
  //-----------------------------------------------------------------
  public function delete_booking($order_id)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $settings = array();
    $this->fetch_settings($settings, "SETTINGS");

    $order_info = array();
    $this->fetch_order_info($order_info, $order_id);
    
    $page_info["lang"] = $order_info["order_lang"];
    
    $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);
    if(!empty($ext_service_manager) && $ext_service_manager->supportsCancellation()) 
    {
      if(!$ext_service_manager->submitCancellation($order_info))
      {
        $ERROR = "RECONLINE Response: " . HotelServiceManager::$last_error;
        return false;
      }
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "SELECT ARRIVE_DATE, DEPARTURE_DATE, ROOM_ID, ROOM_COUNTER, CONFIRMED
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();

    while($dbw->fetch_row())
    {
      $arrive_date = $dbw->field_by_name("ARRIVE_DATE");
      $departure_date = $dbw->field_by_name("DEPARTURE_DATE");

      $rooms[$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = 1;
      $confirmed = $dbw->field_by_name("CONFIRMED");
    }

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    if($confirmed != 2)
    {
      // push possibile cancellation if deleting confirmed
      $this->push_reservation_info($order_id, "cancellation");

      foreach($rooms as $room_id => $room)
      {
        $order_rooms_count = count($room);

        $arrive_date = format_date($arrive_date, 'Y-m-d');
        $departure_date = format_date($departure_date, 'Y-m-d');
        $date = explode("-", $arrive_date);
        $arrive_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);
        $date = explode("-", $departure_date);
        $departure_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);

        $days = round(($departure_time - $arrive_time)/(60*60*24));
        $dates = array();
        $date = explode("-", $arrive_date);
        for($i = 0; $i < $days; $i++)
        {
          $dates[] = mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]);
        }

        foreach($dates as $time)
        {
          $date = $dbw->format_date($time);
          $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY
                    WHERE ROOM_ID = $room_id AND DATE = '$date'";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          while($dbw->fetch_row())
          {
            $room_count = $dbw->field_by_name("ROOM_COUNT");
          }

          $dbw->free_result();

          $room_count += $order_rooms_count;

          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY
                    SET
                    ROOM_COUNT = $room_count
                    WHERE ROOM_ID = $room_id AND DATE = '$date'";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $dbw->free_result();

          $query = "DELETE FROM {$prfx}_HTL_ORDER
                    WHERE ID = $order_id";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $dbw->free_result();
        }//foreach
      }//foreach
    }
    else
    {
      $query = "DELETE FROM {$prfx}_HTL_ORDER
                    WHERE ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $dbw->free_result();
    }

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("BookingSuccessfullyDeleted");
    return true;
  } // delete_booking
  //-----------------------------------------------------------------

  public function cancel_booking($order_id, $page_info = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $settings = array();
    $this->fetch_settings($settings, "SETTINGS");

    $order_info = array();
    $this->fetch_order_info($order_info, $order_id);
    
    $page_info["lang"] = $order_info["order_lang"];
    
    $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);
    if(!empty($ext_service_manager) && $ext_service_manager->supportsCancellation()) 
    {
      if(!$ext_service_manager->submitCancellation($order_info))
      {
        $ERROR = "RECONLINE Response: " . HotelServiceManager::$last_error;
        return false;
      }
    }
    
    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "SELECT ARRIVE_DATE, DEPARTURE_DATE, ROOM_ID, ROOM_COUNTER
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();

    while($dbw->fetch_row())
    {
      $arrive_date = $dbw->field_by_name("ARRIVE_DATE");
      $departure_date = $dbw->field_by_name("DEPARTURE_DATE");

      $rooms[$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = 1;
    }

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    foreach($rooms as $room_id => $room)
    {
      $order_rooms_count = count($room);

      $arrive_date = format_date($arrive_date, 'Y-m-d');
      $departure_date = format_date($departure_date, 'Y-m-d');
      $date = explode("-", $arrive_date);
      $arrive_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);
      $date = explode("-", $departure_date);
      $departure_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);

      $days = round(($departure_time - $arrive_time)/(60*60*24));
      $dates = array();
      $date = explode("-", $arrive_date);
      for($i = 0; $i < $days; $i++)
      {
        $dates[] = mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]);
      }

      foreach($dates as $time)
      {
        $date = $dbw->format_date($time);
        $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        while($dbw->fetch_row())
        {
          $room_count = $dbw->field_by_name("ROOM_COUNT");
        }

        $dbw->free_result();

        $room_count += $order_rooms_count;

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY
                  SET
                  ROOM_COUNT = $room_count
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $dbw->free_result();
      }//foreach
    }//foreach

    $now = $dbw->format_datetime(time());

    $query = "UPDATE {$prfx}_HTL_ORDER
              SET CONFIRMED = 2, HTSPIDER_DELIVERED = '0', ORDER_TM = '$now'
              WHERE ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    // push possibile reservations
    $this->push_reservation_info($order_id, "cancellation");

    if(!$page_info)
      $INFO_MESSAGE = text("BookingSuccessfullyCanceled");

    if($page_info)
    {
      //Notification to client that booking was canceled
      $this->send_email_notification(4, $order_id);

      //Notification to admin about cancelation of booking
      $this->send_email_notification(2, $order_id);
    }
    else
    {
      //Notification to client that booking was canceled
      $this->send_email_notification(4, $order_id);
    }

    return true;
  } // cancel_booking
  //-----------------------------------------------------------------

  public function reject_booking($order_id)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $settings = array();
    $this->fetch_settings($settings, "SETTINGS");

    $order_info = array();
    $this->fetch_order_info($order_info, $order_id);
    
    $page_info["lang"] = $order_info["order_lang"];
    
    $ext_service_manager = $this->get_ext_service_manager($page_info, $settings);
    if(!empty($ext_service_manager) && $ext_service_manager->supportsCancellation()) 
    {
      if(!$ext_service_manager->submitCancellation($order_info))
      {
        $ERROR = "RECONLINE Response: " . HotelServiceManager::$last_error;
        return false;
      }
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "SELECT ARRIVE_DATE, DEPARTURE_DATE, ROOM_ID, ROOM_COUNTER
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();

    while($dbw->fetch_row())
    {
      $arrive_date = $dbw->field_by_name("ARRIVE_DATE");
      $departure_date = $dbw->field_by_name("DEPARTURE_DATE");

      $rooms[$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = 1;
    }

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    foreach($rooms as $room_id => $room)
    {
      $order_rooms_count = count($room);

      $arrive_date = format_date($arrive_date, 'Y-m-d');
      $departure_date = format_date($departure_date, 'Y-m-d');
      $date = explode("-", $arrive_date);
      $arrive_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);
      $date = explode("-", $departure_date);
      $departure_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);

      $days = round(($departure_time - $arrive_time)/(60*60*24));
      $dates = array();
      $date = explode("-", $arrive_date);
      for($i = 0; $i < $days; $i++)
      {
        $dates[] = mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]);
      }

      foreach($dates as $time)
      {
        $date = $dbw->format_date($time);
        $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        while($dbw->fetch_row())
        {
          $room_count = $dbw->field_by_name("ROOM_COUNT");
        }

        $dbw->free_result();

        $room_count += $order_rooms_count;

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY
                  SET
                  ROOM_COUNT = $room_count
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $dbw->free_result();
      }//foreach
    }//foreach

    $now = $dbw->format_datetime(time());

    $query = "UPDATE {$prfx}_HTL_ORDER
              SET CONFIRMED = 3, HTSPIDER_DELIVERED = '0', ORDER_TM = '$now'
              WHERE ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    // push possibile reservations
    $this->push_reservation_info($order_id, "cancellation");

    if(empty($page_info))
      $INFO_MESSAGE = text("BookingSuccessfullyRejected");

    //Notification to client that booking was rejected
    $this->send_email_notification(6, $order_id);

    return true;
  } // reject_booking
  //-----------------------------------------------------------------

  public function restore_booking($order_id, $status)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $order_info = array();
    $this->fetch_order_info($order_info, $order_id);
    
    $page_info["lang"] = $order_info["order_lang"];

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "SELECT ARRIVE_DATE, DEPARTURE_DATE, ROOM_ID, ROOM_COUNTER
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();

    while($dbw->fetch_row())
    {
      $arrive_date = $dbw->field_by_name("ARRIVE_DATE");
      $departure_date = $dbw->field_by_name("DEPARTURE_DATE");

      $rooms[$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = 1;
    }

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    foreach($rooms as $room_id => $room)
    {
      $order_rooms_count = count($room);

      $arrive_date = format_date($arrive_date, 'Y-m-d');
      $departure_date = format_date($departure_date, 'Y-m-d');
      $date = explode("-", $arrive_date);
      $arrive_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);
      $date = explode("-", $departure_date);
      $departure_time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);

      $days = round(($departure_time - $arrive_time)/(60*60*24));
      $dates = array();
      $date = explode("-", $arrive_date);
      for($i = 0; $i < $days; $i++)
      {
        $dates[] = mktime(00, 00, 00, $date[1], $date[2]+$i, $date[0]);
      }

      foreach($dates as $time)
      {
        $date = $dbw->format_date($time);
        $query = "SELECT ROOM_COUNT FROM {$prfx}_HTL_ROOM_AVAILABILITY
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        while($dbw->fetch_row())
        {
          $room_count = $dbw->field_by_name("ROOM_COUNT");
        }

        $dbw->free_result();

        $room_count -= $order_rooms_count;

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY
                  SET
                  ROOM_COUNT = $room_count
                  WHERE ROOM_ID = $room_id AND DATE = '$date'";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $dbw->free_result();
      }//foreach
    }//foreach

    $now = $dbw->format_datetime(time());

    $query = "UPDATE {$prfx}_HTL_ORDER
              SET CONFIRMED = $status
              WHERE ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(empty($page_info))
      $INFO_MESSAGE = text("BookingSuccessfullyRestored");

    return true;
  } // restore_booking
  //-----------------------------------------------------------------

  public function confirm_booking($order_id, $page_info = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "UPDATE {$prfx}_HTL_ORDER
              SET CONFIRMED = 1
              WHERE ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    $INFO_MESSAGE = text("BookingSuccessfullyConfirmed");

    // push possibile reservations if without confirmation
    $this->push_reservation_info($order_id, "reservation");

    //Notification to client that booking request was confirmed
    $this->send_email_notification(5, $order_id);

    return true;
  } // confirm_booking
  //-----------------------------------------------------------------

  public function archive_booking($order_id, $page_info = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    $query = "UPDATE {$prfx}_HTL_ORDER
              SET ARCHIVED = 1
              WHERE ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    $INFO_MESSAGE = text("BookingSuccessfullyArchived");

    return true;
  } // archive_booking
  //-----------------------------------------------------------------

  public function fetch_order_info(&$order_info, $order_id)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $order_id = $dbw->escape($order_id);

    //fetch rooms
    $query = "SELECT {$prfx}_HTL_ORDER.ID, {$prfx}_HTL_ORDER.ENCODED,
              {$prfx}_HTL_PAYMENT_DATA.ENCODED PD_ENCODED,
              {$prfx}_HTL_ORDER.FIRST_NAME,
              {$prfx}_HTL_ORDER.LAST_NAME,
              {$prfx}_HTL_ORDER.EMAIL, TELEPHONE,
              {$prfx}_HTL_ORDER.NOTE,
              {$prfx}_HTL_ORDER.FIRM COMPANY,
              {$prfx}_HTL_ORDER.COUNTRY,
              {$prfx}_HTL_ORDER.CITY,
              {$prfx}_HTL_ORDER.PAYMENT_TYPE,
              {$prfx}_HTL_ORDER.ADRESS ADDRESS,
              {$prfx}_HTL_ORDER.ZIP,
              {$prfx}_HTL_ORDER.SALUTATION TITLE,
              {$prfx}_HTL_ROOMS_PROPS.DESCRIPTION,
              {$prfx}_HTL_ORDER.SYS_ORDER_ID,
              SPEC_OFFER, SPEC_OFFER_ID,
              RATE_PLAN_ID,
              DISCOUNT_COMMENT,
              ORDER_LANG,
              {$prfx}_LANGUAGE.ID LANG_ID,
              ARRIVE_DATE, DEPARTURE_DATE, TOTAL_ORDER_PRICE, CONFIRMED, CURRENCY_SIGN, CURRENCY_RATE, ORDER_TM, {$prfx}_HTL_ORDER_PROP.ROOM_ID, ROOM_COUNTER, SPEC_OFFER, PERSONS_COUNT, ADULTS_COUNT, CHILDREN_COUNT, GUEST_NAMES, I_NAME, TYPE, CATEGORY, TOTAL_PRICE, CARD_TYPE, CARD_NUMBER, CARD_HOLDER, CARD_DATE, CARD_CVV, {$prfx}_HTL_PAYMENT_DATA.DATE,
              DD_ACCOUNT_NUMBER,
              DD_ACCOUNT_OWNER,
              DD_BANK_ID,
              DD_BANK_NAME
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_HTL_ORDER.ORDER_LANG = {$prfx}_LANGUAGE.LANG_KEY)
              LEFT JOIN {$prfx}_USER ON ({$prfx}_USER.EMAIL = {$prfx}_HTL_ORDER.EMAIL)
              LEFT JOIN {$prfx}_HTL_ORDER_PROP ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_ORDER_PROP.ORDER_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = ORDER_LANG))
              LEFT JOIN {$prfx}_HTL_PAYMENT_DATA ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_PAYMENT_DATA.ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $order_lang_id = 0;
    
    while($dbw->fetch_row())
    {
      $order_lang_id = $dbw->field_by_name("LANG_ID");

      $is_encrypted = $dbw->field_by_name("ENCODED");
      $is_pd_encrypted = $dbw->field_by_name("PD_ENCODED");

      $type = $dbw->field_by_name("PAYMENT_TYPE");

      $rate = $dbw->field_by_name("CURRENCY_RATE");
      if(empty($rate))
        $rate = 1;

      $order_info["title"] = User::decrypt_data($dbw->field_by_name("TITLE"), $is_encrypted);
      $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
      $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
      $order_info["email"] = $dbw->field_by_name("EMAIL");
      $order_info["telephone"] = User::decrypt_data($dbw->field_by_name("TELEPHONE"), $is_encrypted);
      $order_info["note"] = $dbw->field_by_name("NOTE");
      $order_info["company"] = User::decrypt_data($dbw->field_by_name("COMPANY"), $is_encrypted);
      $order_info["country"] = User::decrypt_data($dbw->field_by_name("COUNTRY"), $is_encrypted);
      $order_info["city"] = User::decrypt_data($dbw->field_by_name("CITY"), $is_encrypted);
      $order_info["order_lang"] = $dbw->field_by_name("ORDER_LANG");
      $order_info["address"] = User::decrypt_data($dbw->field_by_name("ADDRESS"), $is_encrypted);
      $order_info["zip"] = User::decrypt_data($dbw->field_by_name("ZIP"), $is_encrypted);
      $order_info["arrive_date"] = $dbw->field_by_name("ARRIVE_DATE");
      $order_info["departure_date"] = $dbw->field_by_name("DEPARTURE_DATE");
      $order_info["total_order_price"] = number_format($dbw->field_by_name("TOTAL_ORDER_PRICE"), 2, ',', '');
      $order_info["confirmed"] = $dbw->field_by_name("CONFIRMED");
      $order_info["spec_offer"] = $dbw->field_by_name("SPEC_OFFER");
      $order_info["payment_type"] = $dbw->field_by_name("PAYMENT_TYPE");
      $order_info["sign"] = $dbw->field_by_name("CURRENCY_SIGN");
      $order_info["rate"] = $rate;
      $order_info["order_datetime"] = $dbw->field_by_name("ORDER_TM");
      $order_info["nights"] = round((strtotime($order_info["departure_date"]) - strtotime($order_info["arrive_date"]))/(60*60*24));
      
      $order_info["sys_order_id"] = $dbw->field_by_name("SYS_ORDER_ID");

      $order_info["card_data"] = array();
      $order_info["card_data"]["card_type"] = User::decrypt_data($dbw->field_by_name("CARD_TYPE"), $is_pd_encrypted);
      switch($order_info["card_data"]["card_type"])
      {
        case 1:
          $order_info["card_data"]["card_type"] = 'American Express';
        break;

        case 2:
          $order_info["card_data"]["card_type"] = 'Master Card';
        break;

        case 3:
          $order_info["card_data"]["card_type"] = 'VISA';
        break;

        case 4:
          $order_info["card_data"]["card_type"] = 'JSB';
        break;

        case 5:
          $order_info["card_data"]["card_type"] = 'Diners Club';
        break;
      }
      $order_info["card_data"]["card_number"] = User::decrypt_data($dbw->field_by_name("CARD_NUMBER"), $is_pd_encrypted);
      $order_info["card_data"]["card_holder"] = User::decrypt_data($dbw->field_by_name("CARD_HOLDER"), $is_pd_encrypted);
      $order_info["card_data"]["card_date"] = User::decrypt_data($dbw->field_by_name("CARD_DATE"), $is_pd_encrypted);
      $order_info["card_data"]["card_cvv"] = User::decrypt_data($dbw->field_by_name("CARD_CVV"), $is_pd_encrypted);
      $order_info["card_data"]["date"] = $dbw->field_by_name("DATE");

      if(empty($order_info["card_data"]["card_number"]) || empty($order_info["card_data"]["card_holder"]) || empty($order_info["card_data"]["card_date"])| empty($order_info["card_data"]["card_cvv"]))
        $order_info["card_data"] = array();

      $order_info["dd_data"] = array();
      if($type == "DIRECT_DEBIT")
      {
        $order_info["dd_data"]["account_number"] = User::decrypt_data($dbw->field_by_name("DD_ACCOUNT_NUMBER"), $is_pd_encrypted);
        $order_info["dd_data"]["account_owner"] = User::decrypt_data($dbw->field_by_name("DD_ACCOUNT_OWNER"), $is_pd_encrypted);
        $order_info["dd_data"]["bank_id"] = User::decrypt_data($dbw->field_by_name("DD_BANK_ID"), $is_pd_encrypted);
        $order_info["dd_data"]["bank_name"] = User::decrypt_data($dbw->field_by_name("DD_BANK_NAME"), $is_pd_encrypted);

        if(empty($order_info["dd_data"]["account_number"]) ||
           empty($order_info["dd_data"]["account_owner"]) ||
           empty($order_info["dd_data"]["bank_id"]))
          $order_info["dd_data"] = array();
      }

      $order_info["bill_data"] = "";
      if($type == "BILL")
      {
        $order_info["bill_data"] = "Bill";
      }
      if($type == "RECONLINE_CREDIT_CARD")
      {
        $order_info["RECONLINE_CREDIT_CARD"] = "RECONLINE_CREDIT_CARD";
      }
      if($type == "BILL_CC")
      {
        $order_info["bill_cc_data"] = "Bill CC";
      }
      if($type == "STRIPE")
      {
        $order_info["stripe"] = "Stripe";
      }

      $order_info["postfin_ccard_data"] = "";
      if($type == "POSTFIN_CCARD")
      {
        $order_info["postfin_ccard_data"] = "1";
      }

      $order_info["postfin_others_data"] = "";
      if($type == "POSTFIN_OTHERS")
      {
        $order_info["postfin_others_data"] = "1";
      }
      
      $order_info["postbank_ccard_data"] = "";
      if($type == "POSTBANK_CCARD")
      {
        $order_info["postbank_ccard_data"] = "1";
      }

      $order_info["postbank_others_data"] = "";
      if($type == "POSTBANK_OTHERS")
      {
        $order_info["postbank_others_data"] = "1";
      }

      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")] = array();

      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["internal_name"] = $dbw->field_by_name("I_NAME");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["type"] = $dbw->field_by_name("TYPE");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["spec_offer"] = $dbw->field_by_name("SPEC_OFFER");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["spec_offer_id"] = $dbw->field_by_name("SPEC_OFFER_ID");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["rate_plan_id"] = $dbw->field_by_name("RATE_PLAN_ID");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["category"] = $dbw->field_by_name("CATEGORY");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["description"] = $dbw->field_by_name("DESCRIPTION");
      
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["persons_count"] = $dbw->field_by_name("PERSONS_COUNT");

      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["adults_count"] = $dbw->field_by_name("ADULTS_COUNT");

      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["children_count"] = $dbw->field_by_name("CHILDREN_COUNT");

      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["guest_names"] = $dbw->field_by_name("GUEST_NAMES");
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["spec_discount_comment"] = $dbw->field_by_name("DISCOUNT_COMMENT");
      
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["total_price"] = number_format($dbw->field_by_name("TOTAL_PRICE"), 2, ',', '');
      $order_info["rooms"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ROOM_COUNTER")]["average_price"] = number_format(($dbw->field_by_name("TOTAL_PRICE"))/$order_info["nights"], 2, ',', '');
    }

    $dbw->free_result();

    //fetch country

    $order_info["country"] = country_name(ifnull($order_info["country"]));

    //$country_list = array();
    //get_country_list($country_list);
    //$order_info["country"] = $country_list[$order_info["country"]];

    //fetch services
    $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, AMOUNT, TOTAL_PRICE, PRICE_INTERPRETATION
              FROM {$prfx}_HTL_ORDER
              INNER JOIN {$prfx}_HTL_ORDER_SERVICES ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_ORDER_SERVICES.ORDER_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = ORDER_LANG))
              WHERE {$prfx}_HTL_ORDER.ID = $order_id
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $title = $dbw->field_by_name("TITLE");
      $price_interpretation = $dbw->field_by_name("PRICE_INTERPRETATION");
      $amount = $dbw->field_by_name("AMOUNT");
      if(!empty($price_interpretation))
      {
        $title = $title.' - '.$price_interpretation;
      }

      $order_info["additional_services"][$dbw->field_by_name("ID")] = array("title" => $title,
                                                                            "amount" => $amount,
                                                                            "total_price" => number_format($dbw->field_by_name("TOTAL_PRICE"), 2, ',', ''));
    }

    
    $query = "SELECT ID, ROOM_ID, TITLE, CAPTION, PRICE, PRICING_TYPE, CALCULATE_TYPE, SERVICE_TA_CODE, {$prfx}_HTL_EXTRA_SERVICES_ROOMS.RESTRICTION
              FROM {$prfx}_HTL_EXTRA_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON (ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID = $order_lang_id)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_ROOMS ON (ID = {$prfx}_HTL_EXTRA_SERVICES_ROOMS.SERVICE_ID)
              WHERE LANG_ID = $order_lang_id AND IS_ACTIVE = 1 AND MANDATORY = 1 AND FOR_SOFFER = '0'
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $order_info["included_services"][$dbw->field_by_name("ROOM_ID")][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                                                       "caption" =>$dbw->field_by_name("CAPTION")
                                                                                                       );
    }
    
    $dbw->free_result();
    
    // included over rate plan
    $query = "SELECT ID, RATE_PLAN_ID, TITLE, CAPTION
              FROM {$prfx}_HTL_EXTRA_SERVICES
              INNER JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON (ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID = $order_lang_id)
              INNER JOIN {$prfx}_HTL_RATE_PLAN_SERVICE ON (ID = {$prfx}_HTL_RATE_PLAN_SERVICE.SERVICE_ID)
              WHERE IS_ACTIVE = 1 AND MANDATORY = 1 AND FOR_SOFFER = '1'
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $order_info["rate_plan_services"][$dbw->field_by_name("RATE_PLAN_ID")][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                                                       "caption" =>$dbw->field_by_name("CAPTION")
                                                                                                       );
    }
    
    $dbw->free_result();
    
    $query = "SELECT {$prfx}_HTL_SPECIAL_OFFER.ID, 
              {$prfx}_HTL_PRICELIST_PROPS.NAME, {$prfx}_HTL_PRICELIST_PROPS.DESCRIPTION, {$prfx}_HTL_PRICELIST_PROPS.INFO
              FROM {$prfx}_HTL_SPECIAL_OFFER
              LEFT JOIN {$prfx}_HTL_PRICELIST_PROPS ON ({$prfx}_HTL_PRICELIST_PROPS.PRICELIST_ID = {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID AND {$prfx}_HTL_PRICELIST_PROPS.LANGUAGE_ID = $order_lang_id)
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $order_info["specoffers"][$dbw->field_by_name("ID")] = array(
                                                     "name" =>$dbw->field_by_name("NAME"),
                                                     "description" =>$dbw->field_by_name("DESCRIPTION"),
                                                     "info" =>$dbw->field_by_name("INFO")
                                                     );
    }

    $dbw->free_result();
    
    return true;
  } // fetch_order_info
  //-----------------------------------------------------------------
  /**
  * Fill the order_info array with data from $_SESSION["booking"];
  * @param array $order_info
  */
  public function fetch_order_info_frontend(&$order_info)
  {
    if(empty($_SESSION["booking"]))
      return false;

    $settings = array();
    $this->fetch_settings($settings, "SETTINGS");

    $sign = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["sign"];
    $rate = $_SESSION["booking"]["data"]["currencies"][$_SESSION["booking"]["data"]["current_currency"]]["rate"];

    $order_info["currency"] = $sign;
    $order_info["title"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["title"]);
    $order_info["first_name"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["first_name"]);
    $order_info["last_name"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["last_name"]);
    $order_info["email"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["email"]);
    $order_info["telephone"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["telephone"]);
    $order_info["note"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["other"]);
    if(empty($order_info["note"]))
    {
      $order_info["note"] = '&nbsp;';
    }
    $order_info["company"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["firm"]);
    if(empty($order_info["company"]))
    {
      $order_info["company"] = '&nbsp;';
    }

    $order_info["country_code"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["land"]);
    $order_info["country"] = country_name(ifnull($_SESSION["booking"]["step5"]["personal_data"]["land"]));
    $order_info["spec_offer"] = !empty($_SESSION["booking"]["specoffer_modus"]);
    $order_info["city"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["ort"]);
    $order_info["address"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["address"]);
    $order_info["zip"] = ifnull($_SESSION["booking"]["step5"]["personal_data"]["zip"]);
    $order_info["arrive_date"] = ifnull($_SESSION["booking"]["step5"]["order"]["arrive_date"]);
    $order_info["departure_date"] = ifnull($_SESSION["booking"]["step5"]["order"]["departure_date"]);
    $order_info["total_order_price"] = number_format(ifnull($_SESSION["booking"]["step5"]["order"]["total_order_price"]), 2, ',', '');
    $order_info["nights"] = round((strtotime($order_info["departure_date"]) - strtotime($order_info["arrive_date"]))/(60*60*24));

    if(!empty($_SESSION["booking"]["specoffer_modus"]))
    {
      foreach($_SESSION["booking"]["step5"]["order"]["rooms"] as $spoid => $room_count)
      {
        $room_id = $_SESSION["booking"]["step1"]["available_spec_offers"][$spoid]["room_id"];

        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        
        foreach($room_count as $i => $data)
        {
          $order_info["rooms"][$spoid][$i] = array();
          $order_info["rooms"][$spoid][$i]["internal_name"] = $room["internal_name"];
          $order_info["rooms"][$spoid][$i]["type"] = $room["type"];
          $order_info["rooms"][$spoid][$i]["category"] = $room["category"];
          $order_info["rooms"][$spoid][$i]["room_code"] = $room["room_code"];
          
          $order_info["rooms"][$spoid][$i]["spec_offer_id"] = $spoid;

          $order_info["rooms"][$spoid][$i]["persons_count"] = $data["persons_count"];

          $order_info["rooms"][$spoid][$i]["adults_count"] = $data["adults_count"];

          $order_info["rooms"][$spoid][$i]["children_count"] = $data["children_count"];

          $order_info["rooms"][$spoid][$i]["guest_names"] = $data["guest_names"];

          $order_info["rooms"][$spoid][$i]["total_price"] = number_format($data["total_price"], 2, ',', '');
          $order_info["rooms"][$spoid][$i]["average_price"] = number_format(($data["total_price"])/$order_info["nights"], 2, ',', '');

          if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i])) 
          {
            $order_info["rooms"][$spoid][$i]["guests"] = $_SESSION["booking"]["step5"]["order"]["guest_names"][$spoid][$i];
          }
        }
      }
    }
    else
    {
      foreach($_SESSION["booking"]["step5"]["order"]["rooms"] as $room_id => $room_count)
      {
        $room = $_SESSION["booking"]["step1"]["available_rooms"][$room_id];
        foreach($room_count as $i => $data)
        {
          $order_info["rooms"][$room_id][$i] = array();
          $order_info["rooms"][$room_id][$i]["internal_name"] = $room["internal_name"];
          $order_info["rooms"][$room_id][$i]["type"] = $room["type"];
          $order_info["rooms"][$room_id][$i]["category"] = $room["category"];
          $order_info["rooms"][$room_id][$i]["room_code"] = $room["room_code"];
          $order_info["rooms"][$room_id][$i]["persons_count"] = $data["persons_count"];

          $order_info["rooms"][$room_id][$i]["adults_count"] = $data["adults_count"];

          $order_info["rooms"][$room_id][$i]["children_count"] = $data["children_count"];

          $order_info["rooms"][$room_id][$i]["guest_names"] = $data["guest_names"];

          $order_info["rooms"][$room_id][$i]["spec_discount_comment"] = ifnull($room["spec_discount_comment"]);
          
          $order_info["rooms"][$room_id][$i]["total_price"] = number_format($data["total_price"], 2, ',', '');
          $order_info["rooms"][$room_id][$i]["average_price"] = number_format(($data["total_price"])/$order_info["nights"], 2, ',', '');
          
          if(!empty($_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i])) 
          {
            $order_info["rooms"][$room_id][$i]["guests"] = $_SESSION["booking"]["step5"]["order"]["guest_names"][$room_id][$i];
          }
        }
      }
    }

    if(!empty($_SESSION["booking"]["step5"]["order"]["additional_services"]))
    foreach($_SESSION["booking"]["step5"]["order"]["additional_services"] as $service_id => $amount)
    {
      $service = $_SESSION["booking"]["step3"]["additional_services"][$service_id];
      $title = $service["title"];
      $price_interpretation = $_SESSION["booking"]["price_interpretations"][$service_id];
      if(!empty($price_interpretation))
      {
        $title = $title.' - '.$price_interpretation;
      }


      $total_price = 0;

      switch($service["calculate_type"])
      {
        case 3:
          $total_price = $service["price"];
        break;

        case 4:
          $total_price = $service["price"]*$service["room_factor"];
        break;

        case 5:
          if($service["child_discount_flag"] == 0)
          {
            $total_price = $service["child_discount"];
          }
          else
          {
            $total_price = $service["child_discount"]*$_SESSION["booking"]["step4"]["booking_info"]["total_rooms_price"]/100;
          }
        break;

        case 0:
          $persons = $_SESSION["booking"]["data"]["persons"];
          $adults = $_SESSION["booking"]["data"]["adults"];
          $children = $_SESSION["booking"]["data"]["children"];
          $nights = $order_info["nights"];

          if($children == 0)
          {
            $total_price = $service["price"]*$persons*$nights;
          }
          else
          {
            $total_price = $service["price"]*$adults*$nights + $service["children_price"]*$children*$nights;
          }
        break;

        case 1:
          $total_price = $service["price"]*$amount;
        break;

        case 2:
          $nights = $order_info["nights"];
          $total_price = $service["price"]*$amount*$nights;
        break;
      }

      $order_info["additional_services"][$service_id] = array("title" => $title,
                                                                            "amount" => $amount,
                                                                            "total_price" => number_format($total_price, 2, ',', ''));
    }
    
    if(!empty($_SESSION["booking"]["step1"]["available_spec_offers"]))
      $order_info["specoffers"] = $_SESSION["booking"]["step1"]["available_spec_offers"];
    else
      $order_info["specoffers"] = array();
  } // fetch_order_info
  //-----------------------------------------------------------------

  public function check_day_availability(&$price, $day, $month, $year, $modus, $where = "", $where2 = "")
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $time = mktime(00,00,00,$month, $day, $year);

    $date = null_if_empty($dbw->format_date($time));

    if(!empty($where))
    {
      $where = " AND ROOM_ID IN ($where)";
    }
    elseif(!empty($where2))
    {
      $rname = $dbw->escape($where2);
      $where = " AND ROOM_ID IN (SELECT ID FROM {$prfx}_HTL_ROOMS WHERE I_NAME = '$rname')";
    }

    $where2 = " AND (PRICE_ADULT > 0 OR PRICE_ADULT2 > 0 OR PRICE_ADULT3 > 0 OR PRICE_ADULT4 > 0 OR
                     PRICE_ADULT_CHILD > 0 OR PRICE_ADULT_CHILD2 > 0 OR PRICE_ADULT_CHILD3 > 0 OR PRICE_ADULT_CHILD4 > 0)";
    
    $prices = array(
      "PRICE_ADULT",
      "PRICE_ADULT2",
      "PRICE_ADULT3",
      "PRICE_ADULT4",
      "PRICE_ADULT_CHILD",
      "PRICE_ADULT_CHILD2",
      "PRICE_ADULT_CHILD3",
      "PRICE_ADULT_CHILD4"
    );
    
    $price = 1000000;
    
    foreach($prices as $pindex)
    {
      $query = "SELECT 
               MIN($pindex) AS $pindex
                FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date $where AND $pindex > 0";
                
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        if($dbw->field_by_name($pindex) > 0 && $dbw->field_by_name($pindex) < $price) $price = $dbw->field_by_name($pindex);
      }

      $dbw->free_result();
    }
    
    if($price == 1000000) $price = "";
    
    if($modus == 'arrive')
    {
      //------------------------------------------------------------------
      // no room available
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND ROOM_COUNT > 0 $where $where2";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("CNT") == 0)
        {
          $dbw->free_result();
          return 0;
        }
      }

      $dbw->free_result();
      //------------------------------------------------------------------
      // rooms available, arrival not possible
      $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND ARRIVAL = '1' $where $where2";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        if($dbw->field_by_name("CNT") == 0)
        {
          $dbw->free_result();
          return 3;
        }
      }

      $dbw->free_result();
      //------------------------------------------------------------------
      return 1;
    }

    // departure

    //------------------------------------------------------------------
    // rooms available, departure possible
    $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND ROOM_COUNT > 0 AND DEPARTURE = 1 $where $where2";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      if($dbw->field_by_name("CNT") > 0)
      {
        $dbw->free_result();
        return 1;
      }
    }

    $dbw->free_result();
    //------------------------------------------------------------------
    $departure_available = 0;
    $room_available = 0;
    //------------------------------------------------------------------
    $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND DEPARTURE = 1 $where $where2";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $departure_available = $dbw->field_by_name("CNT");
    }

    $dbw->free_result();
    //------------------------------------------------------------------
    $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = $date AND ROOM_COUNT > 0 $where $where2";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $room_available = $dbw->field_by_name("CNT");
    }

    $dbw->free_result();
    //------------------------------------------------------------------

    if(!$departure_available && !$room_available) return 0;

    if(!$departure_available && $room_available) return 3;

    return 2;
  }

  public function send_email_notification($modus, $order_id = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $URL_PATH;
    
    if(!$order_id)
	  return false;
	
    /*
      $modus = 1 - Notification to admin about new booking
      $modus = 2 - Notification to admin about cancelation of booking
      $modus = 3 - Notification to client that booking request was sent
      $modus = 32 - Notification to client that booking request was sent (special offer)
      $modus = 4 - Notification to client about cancelation of booking
      $modus = 5 - Notification to client that booking request was confirmed
      $modus = 52 - Notification to client that booking request was confirmed (special offer)
      $modus = 6 - Notification to client that booking request was rejected
      $modus = 7 - Notification to admin about payment 

      $modus = 8 - Notification to user before arrival
      $modus = 9 - Notification to user after departure
      $modus = 10 - Notification about follow payment
    */

    $order_info = array();
    $this->fetch_order_info($order_info, $order_id);
	
    $etpl = GetEmailTemplate();
    $add_args = array();
    $job = array();
    $settings = array();

    $this->fetch_settings($settings, "SETTINGS");

    $this->fetch_spec_email_settings($settings);

    // if no special emails for the special offers are set, use the standard
    
    if(empty($settings["email_tpl32"])) $settings["email_tpl32"] = $settings["email_tpl3"];
    if(empty($settings["email_tpl52"])) $settings["email_tpl52"] = $settings["email_tpl5"];

    if(empty($settings["receiver32"])) $settings["receiver32"] = $settings["receiver3"];
    if(empty($settings["receiver52"])) $settings["receiver52"] = $settings["receiver5"];
    
    // if the order is a special offer, add suffix 2 to use special emails if they are specified
    
    if(($modus == 3 || $modus == 5) && !empty($order_info["spec_offer"]))
    {
      $modus .= "2";  
    }
	
    if(empty($settings["email_tpl".$modus]) || empty($settings["receiver1"]) || empty($settings["receiver2"]))
      return false;
    
    if($modus == 7 && !empty($settings["email_tpl7"]) && empty($settings["receiver7"])) return false;
	
    if(empty($settings["receiver3"]))
      $settings["receiver3"] = "{user}";
    if(empty($settings["receiver32"]))
      $settings["receiver32"] = "{user}";
    if(empty($settings["receiver4"]))
      $settings["receiver4"] = "{user}";
    if(empty($settings["receiver5"]))
      $settings["receiver5"] = "{user}";
    if(empty($settings["receiver52"]))
      $settings["receiver52"] = "{user}";
    if(empty($settings["receiver6"]))
      $settings["receiver6"] = "{user}";
    if(empty($settings["receiver8"]))
      $settings["receiver8"] = "{user}";
    if(empty($settings["receiver9"]))
      $settings["receiver9"] = "{user}";
    if(empty($settings["receiver10"]))
      $settings["receiver10"] = "{user}";

    if($modus == 1)
    {
      $job["email_receiver"] = $settings["receiver1"];
    }

    if($modus == 2)
    {
      $job["email_receiver"] = $settings["receiver2"];
    }

    if($modus == 7)
    {
      $job["email_receiver"] = $settings["receiver7"];
    }
    
    $dateFormat = array();
    $dateFormat["MSG_FULLTIME_FORMAT"] = "d.m.Y H:i";
    $dateFormat["MSG_DATE_FORMAT"] = "d.m.Y";

    /*
    if($modus != 1 && $modus != 2)
    {
    */
      //get email and language from order

      $dbw = GetDBWorker();
      if(!$dbw) return false;

      $prfx = $dbw->escape(GetConnection()->get_current_prefix());

      $id = $dbw->escape($order_id);

      $query = "SELECT EMAIL, ORDER_LANG
                FROM {$prfx}_HTL_ORDER
                WHERE ID = $id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        if($modus != 1 && $modus != 2 && $modus != 7)
          $job["email_receiver"] = $dbw->field_by_name("EMAIL");

        $job["email_language"] = $dbw->field_by_name("ORDER_LANG");
      }

      $dbw->free_result();

      //get datetime format
      $lang_key = $dbw->escape($job["email_language"]);
      $query = "SELECT {$prfx}_LANG_MESSAGE.MSG_TEXT, KEYWORD
                FROM {$prfx}_LANG_MESSAGE
                LEFT JOIN {$prfx}_MESSAGE ON ({$prfx}_MESSAGE.ID = {$prfx}_LANG_MESSAGE.MESSAGE_ID)
                LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANGUAGE_ID)
                WHERE LANG_KEY = '$lang_key' AND (KEYWORD = 'MSG_FULLTIME_FORMAT' OR KEYWORD = 'MSG_DATE_FORMAT')";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      while($dbw->fetch_row())
      {
        $dateFormat[$dbw->field_by_name("KEYWORD")] = $dbw->field_by_name("MSG_TEXT");
      }

      $dbw->free_result();
  /*
    }

    if($modus == 1 || $modus == 2)
    {
      $lang = GetLanguage();
      $language_list = array();
      $lang->fetch_language_list($language_list);

      foreach($language_list as $language)
      {
        if($language["default"] == 1)
        {
         $job["email_language"] = $language["key"];
         break;
        }
      }
    }
    */
    $job["email_template"] = $settings["email_tpl".$modus];
	
	// special offer handling

    $etemplate_data = array();
    $etpl->load_email_template(ifnull($job["email_template"]), $etemplate_data);

    if(!isset($etemplate_data["content"][$job["email_language"]]) || $etemplate_data["content"][$job["email_language"]]["is_active"] == 0)
      return false;

    $job["email_sender"] = $etemplate_data["content"][$job["email_language"]]["sender"];

    //replace some placeholders in template_body
    $currency = $this->fetch_default_currency();
    if(!empty($order_info["sign"]))
      $currency["sign"] = $order_info["sign"];

    $content = $etemplate_data["content"][$job["email_language"]]["body"];

    $content = str_ireplace("{ORDER_NUMBER}", $order_id, $content);
    $etemplate_data["content"][$job["email_language"]]["subject"] = str_ireplace("{ORDER_NUMBER}", $order_id, $etemplate_data["content"][$job["email_language"]]["subject"]);
    $content = str_ireplace("{TITLE}",$order_info["title"], $content);
    $content = str_ireplace("{FIRST_NAME}",$order_info["first_name"], $content);
    $content = str_ireplace("{LAST_NAME}", $order_info["last_name"], $content);
    $content = str_ireplace("{CITY}", $order_info["city"], $content);
    $content = str_ireplace("{COUNTRY}", $order_info["country"], $content);
    $content = str_ireplace("{ADDRESS}", $order_info["address"], $content);
    $content = str_ireplace("{COMPANY}", $order_info["company"], $content);
    $content = str_ireplace("{ZIP}", $order_info["zip"], $content);
    $content = str_ireplace("{EMAIL}", $order_info["email"], $content);
    $content = str_ireplace("{PHONE}", $order_info["telephone"], $content);
    $content = str_ireplace("{NOTE}", $order_info["note"], $content);
    $content = str_ireplace("{TOTAL_PRICE}", $order_info["total_order_price"].' '.$currency["sign"], $content);
    $content = str_ireplace("{ARRIVE_DATE}", format_date($order_info["arrive_date"], $dateFormat["MSG_DATE_FORMAT"]), $content);
    $content = str_ireplace("{DEPARTURE_DATE}", format_date($order_info["departure_date"], $dateFormat["MSG_DATE_FORMAT"]), $content);
    $content = str_ireplace("{ORDER_DATETIME}", format_date($order_info["order_datetime"], $dateFormat["MSG_FULLTIME_FORMAT"]), $content);

    if($modus == 5 || $modus == 3 || $modus == 52 || $modus == 32 || $modus == 8 || $modus == 10)
    {
      if(preg_match("/{CANCEL_ORDER_LINK:(.+)}/i", $content, $matches))
      {
        $cancel_link = '';
        $base = get_host_address() . $URL_PATH;
        $order_id_base = base64_encode($order_id);
        $cancel_link = $base . "index.php?page=" . $matches[1] . "&ulang=$job[email_language]&htl_cancel_order=$order_id_base";
        $content = preg_replace("/{CANCEL_ORDER_LINK:(.+)}/i", $cancel_link, $content);
      }

      if(preg_match("/{IBOOKING_CANCEL_ORDER_LINK}/i", $content, $matches))
      {
        $cancel_link = '';
        $base = get_host_address() . $URL_PATH;
        $order_id_base = urlencode(base64_encode($order_id));
        $cancel_link = $base . "modules/hotel_extended/ibooking.php?ulang=$job[email_language]&htl_cancel_order=$order_id_base";
        $content = preg_replace("/{IBOOKING_CANCEL_ORDER_LINK}/i", $cancel_link, $content);
      }
    }
    
    if(preg_match("/{FOLLOW_PAY_LINK:(.+)}/i", $content, $matches))
    {
      $cancel_link = '';
      $base = get_host_address() . $URL_PATH;
      $order_id_base = base64_encode($order_id);
      $cancel_link = $base . "index.php?page=" . $matches[1] . "&ulang=$job[email_language]&htl_follow_pay=$order_id_base";
      $content = preg_replace("/{FOLLOW_PAY_LINK:(.+)}/i", $cancel_link, $content);
    }

    if(preg_match("/{IBOOKING_FOLLOW_PAY_LINK}/i", $content, $matches))
    {
      $cancel_link = '';
      $base = get_host_address() . $URL_PATH;
      $order_id_base = urlencode(base64_encode($order_id));
      $cancel_link = $base . "modules/hotel_extended/ibooking.php?ulang=$job[email_language]&htl_follow_pay=$order_id_base";
      $content = preg_replace("/{IBOOKING_FOLLOW_PAY_LINK}/i", $cancel_link, $content);
    }
    
    
    $rooms = '';
    $rooms_ext = '';
    $services = '';
    $total_table = '';

    if($etemplate_data["mail_type"] != 'text/plain')
    {
      $rooms = '<table class="rooms_table">
        <thead>
        <tr>
        <td rowspan="2" class="std_table_caption" style="width:200px"><strong>'.try_translate("EmailRoomTitle", $job["email_language"]).'</strong></td>
        <td rowspan="2" class="std_table_caption" style="width:1%;text-align:center"><strong>'.try_translate("EmailAdults", $job["email_language"]).'</strong></td>
        <td rowspan="2" class="std_table_caption" style="1%;text-align:center"><strong>'.try_translate("EmailChildren", $job["email_language"]).'</strong></td>
        <td rowspan="2" class="std_table_caption" style="300;text-align:center"><strong>'.try_translate("EmailGuestNames", $job["email_language"]).'</strong></td>
        <td class="std_table_caption" style="text-align:center"><strong>'.try_translate("EmailNumberOfNights", $job["email_language"]).'</strong></td>
        <td class="std_table_caption" style="text-align:center"><strong>'.try_translate("EmailRoomPricePerNight", $job["email_language"]).'</strong></td>
        <td rowspan="2" class="std_table_caption" style="text-align:center"><strong>'.try_translate("EmailTotalRoomPrice", $job["email_language"]).'</td>
        </tr>
        <tr>
        <td class="std_table_caption" colspan="2" style="text-align:center"><strong>'.try_translate("EmailNights", $job["email_language"]).'</strong></td>
        </td>
        </tr>
        </thead>
        <tbody>';
        
        $rooms_ext = $rooms;
        
        foreach($order_info["rooms"] as $room_id => $room_num)
        {
          foreach($room_num as $i => $room)
          {
           $rate_plan_id = $room["rate_plan_id"];
           
           $room_row = "";
           $room_row .= '<tr>
            <td class="std_table_cell">';
            $name = $room["type"];
            if(empty($name))
              $name = $room["internal_name"];
              $room_row .= $name.' ('.$room["category"].')';
            $room_row .= '</td>
            <td class="std_table_cell">'.$room["adults_count"].'</td>
            <td class="std_table_cell">'.$room["children_count"].'</td>
            <td class="std_table_cell" style="width:300px">'.$room["guest_names"].'&nbsp;</td>
            <td class="std_table_cell">'.$order_info["nights"].'&nbsp;</td>
            <td class="std_table_cell" style="text-align:right;white-space:nowrap">';

            if(empty($room["spec_offer"]))
            {
              $room_row .= $room["average_price"].' '.$currency["sign"];
            }
            else
            {
              $room_row .= try_translate("Specialoffer", $job["email_language"]);
            }

            $room_row .= '</td>
            <td class="std_table_cell" style="text-align:right;white-space:nowrap">';
            $room_row .= $room["total_price"].' '.$currency["sign"];
            $room_row .= '</td>
            </tr>';
            
            $room_row_ext = $room_row;
            
            // BEGIN: ext row
            if(!empty($room["spec_offer_id"]))
            {
              $room_row_ext .= "<tr><td colspan='7'>";
              
              if(!empty($order_info["specoffers"][$room["spec_offer_id"]]["name"]))
              {
                $room_row_ext .= "<b>" . try_translate("Specialoffer", $job["email_language"]) . ": " . escape_html($order_info["specoffers"][$room["spec_offer_id"]]["name"]) . "</b>";
              }      

              if(!empty($order_info["specoffers"][$room["spec_offer_id"]]["info"]))
              {
                $room_row_ext .= "<br><br>";
                $room_row_ext .= $order_info["specoffers"][$room["spec_offer_id"]]["info"];
              }      
              
              $room_row_ext .= "</td></tr>";
            }
            else
            {
              $room_row_ext .= "<tr><td colspan='7'>";
              if(empty($room["spec_discount_comment"]))
              {
                $room_row_ext .= try_translate("Tarif", $job["email_language"]) . ": " . try_translate("StandardTarif", $job["email_language"]);
                $room_row_ext .= "\n";
              }
              else
              {
                $room_row_ext .= try_translate("Tarif", $job["email_language"]) . ": " . $room["spec_discount_comment"];
                $room_row_ext .= "\n";
              }
              $room_row_ext .= "</td></tr>";
              if(!empty($room["description"]) || !empty($order_info["included_services"][$room_id]) || !empty($order_info["rate_plan_services"][$rate_plan_id]))
              {
                $room_row_ext .= "<tr><td colspan='7'>";
                
                if(!empty($room["description"]))
                {
                  $room_row_ext .= nl2br(escape_html($room["description"]));
                }
                
                if(!empty($order_info["included_services"][$room_id]) || !empty($order_info["rate_plan_services"][$rate_plan_id]))
                {
                  $room_row_ext .= "<ul>";
                  
                  if(!empty($order_info["included_services"][$room_id]))
                  foreach($order_info["included_services"][$room_id] as $iservice)
                  {
                    $room_row_ext .= "<li>" . escape_html($iservice["title"]) . "</li>";
                  }
                  if(!empty($order_info["rate_plan_services"][$rate_plan_id]))
                  foreach($order_info["rate_plan_services"][$rate_plan_id] as $iservice)
                  {
                    $room_row_ext .= "<li>" . escape_html($iservice["title"]) . "</li>";
                  }
                  
                  $room_row_ext .= "</ul>";
                }
                
                $room_row_ext .= "</td></tr>";
              } // add info
            }
            // END: ext row
            
            $rooms .= $room_row;
            $rooms_ext .= $room_row_ext;
          }
        }

      $total_table .= $rooms;
      $rooms .= '</tbody></table>';
      $rooms_ext .= '</tbody></table>';

      if(!empty($order_info["additional_services"]))
      {

        $total_table .= '
          <tr>
          <td class="std_table_caption" colspan="7"><strong>'.try_translate("EmailServicesTitle", $job["email_language"]).'</strong></td>
          </tr>
        ';

        $services = '<table class="services_table">
          <thead>
          <tr>
          <td class="std_table_caption" style="width:200px"><strong>'.try_translate("EmailServicesTitle", $job["email_language"]).'</strong></td>
          <td class="std_table_caption" style="width:1%"><strong>'.try_translate("Price", $job["email_language"]).'</strong></td>
          </tr>
          </thead>
          <tbody>';
          foreach($order_info["additional_services"] as $service_id => $service)
          {
            $services .= '<tr>';
            $services .= '<td class="std_table_cell">'.$service["title"].'</td>';
            $services .= '<td class="std_table_cell" style="text-align:right;white-space:nowrap">'.$service["total_price"].' '.$currency["sign"].'</td>';
            $services .= '</tr>';

            $total_table .= '<tr>';
            $total_table .= '<td class="std_table_cell" colspan="6">'.$service["title"].'</td>';
            $total_table .= '<td class="std_table_cell" style="text-align:right;white-space:nowrap">'.$service["total_price"].' '.$currency["sign"].'</td>';
            $total_table .= '</tr>';
          }

          $services .= '</tbody></table>';
      }


      $total_table .= '<tr>';
      $total_table .= '<td class="std_table_cell"><strong>'.try_translate("TotalPrice", $job["email_language"]).'</strong></td>';
      $total_table .= '<td class="std_table_cell"  colspan="6" style="text-align:right;white-space:nowrap"><strong>'.$order_info["total_order_price"].' '.$currency["sign"].'</strong></td>';
      $total_table .= '</tr>';

      $total_table .= '</tbody></table>';
    }
    else
    {
      $rooms = "-------------------------------\n";
      $rooms_ext = $rooms;
      
      foreach($order_info["rooms"] as $room_id => $room_num)
      {
        foreach($room_num as $i => $room)
        {
           $rate_plan_id = $room["rate_plan_id"];
          $name = $room["type"];
          if(empty($name))
            $name = $room["internal_name"];
          
          
          $room_row = $name.' ('.$room["category"].')'."\n";
          $room_row .= try_translate("Adults", $job["email_language"]).': '.$room["adults_count"].', '.try_translate("Children", $job["email_language"]).': '.$room["children_count"]."\n";
          $room_row .= try_translate("EmailGuestNames", $job["email_language"]).': '.$room["guest_names"]."\n";
          $room_row .= try_translate("EmailTotalRoomPrice", $job["email_language"]).': '.$room["total_price"].' '.$currency["sign"]."\n";
          $room_row .= "******\n";

          $room_row_ext = $name.' ('.$room["category"].')'."\n";
          $room_row_ext .= try_translate("Adults", $job["email_language"]).': '.$room["adults_count"].', '.try_translate("Children", $job["email_language"]).': '.$room["children_count"]."\n";
          $room_row_ext .= try_translate("EmailGuestNames", $job["email_language"]).': '.$room["guest_names"]."\n";
          $room_row_ext .= try_translate("EmailTotalRoomPrice", $job["email_language"]).': '.$room["total_price"].' '.$currency["sign"]."\n";
          
          // BEGIN: ext row
          if(!empty($room["spec_offer_id"]))
          {
            if(!empty($order_info["specoffers"][$room["spec_offer_id"]]["name"]))
            {
              $room_row_ext .= "\n";
              $room_row_ext .= try_translate("Specialoffer", $job["email_language"]) . ": " . $order_info["specoffers"][$room["spec_offer_id"]]["name"];
              $room_row_ext .= "\n";
            }      

            if(!empty($order_info["specoffers"][$room["spec_offer_id"]]["description"]))
            {
              $room_row_ext .= "\n";
              $room_row_ext .= $order_info["specoffers"][$room["spec_offer_id"]]["description"];
              $room_row_ext .= "\n";
            }      
          }
          else
          {
            if(empty($room["spec_discount_comment"]))
            {
              $room_row_ext .= try_translate("Tarif", $job["email_language"]) . ": " . try_translate("StandardTarif", $job["email_language"]);
              $room_row_ext .= "\n";
            }
            else
            {
              $room_row_ext .= try_translate("Tarif", $job["email_language"]) . ": " . $room["spec_discount_comment"];
              $room_row_ext .= "\n";
            }

            if(!empty($room["description"]))
            {
              $room_row_ext .= "\n";
              $room_row_ext .= $room["description"];
            }
            
            if(!empty($order_info["included_services"][$room_id]))
            {
              $room_row_ext .= "\n";
              
              foreach($order_info["included_services"][$room_id] as $iservice)
              {
                $room_row_ext .= "- " . $iservice["title"] . "\n";
              }
            }
            
            if(!empty($order_info["rate_plan_services"][$rate_plan_id]))
            {
              $room_row_ext .= "\n";
              
              foreach($order_info["rate_plan_services"][$rate_plan_id] as $iservice)
              {
                $room_row_ext .= "- " . $iservice["title"] . "\n";
              }
            }
          }

          $room_row_ext .= "******\n";
          // END: ext row
          
          $rooms .= $room_row;
          $rooms_ext .= $room_row_ext;
        }
      }      
      $rooms = trim($rooms, "*\n") . "\n";
      $rooms_ext = trim($rooms_ext, "*\n") . "\n";

      $rooms .= "-------------------------------\n\n";
      $rooms_ext .= "-------------------------------\n\n";      
      
      if(!empty($order_info["additional_services"]))
      {
        $services .= "-------------------------------\n";
        foreach($order_info["additional_services"] as $service_id => $service)
        {
          $services .= str_replace("&times;", "x", $service["title"])."\n";
          $services .= try_translate("Price", $job["email_language"]).': '.$service["total_price"].' '.$currency["sign"]."\n";
          $services .= "******\n";
        }
      }
      $services = trim($services, "*\n") . "\n";
      $services .= "-------------------------------\n\n";
    }

    $content = str_ireplace("{ROOMS_TABLE}", $rooms, $content);
    $content = str_ireplace("{ROOMS_TABLE_EXT}", $rooms_ext, $content);
    $content = str_ireplace("{SERVICES_TABLE}", $services, $content);
    $content = str_ireplace("{TOTAL_TABLE}", $total_table, $content);

    //link to backend
    $backend_link = '';
    $base = get_host_address() . $URL_PATH;
    $backend_link = $base.'admin/modules.php?mod_path=../modules/hotel_extended/booking_manager.php';
    $content = str_ireplace("{HTL_BACKEND_LINK}", $backend_link, $content);

    $etemplate_data["content"][$job["email_language"]]["body"] = $content;
    
    $job["email_receiver"] = str_ireplace("{user}", $job["email_receiver"], $settings["receiver".$modus]);

    $err = $etpl->send_email($job["email_sender"], $job["email_receiver"], $job["email_language"], $etemplate_data, $add_args);
    
    if(empty($err)) return true;
    
    $ERROR = $err;
    
    return false;
  } // send_email_notification
  //-----------------------------------------------------------------

  /**
  * Format date to time
  *
  * @param sting $date Format: Y-m-d
  * @return string $time
  */
  private function date_to_time($date)
  {
    $date = explode("-", $date);
    $time = mktime(00, 00, 00, $date[1], $date[2], $date[0]);
    return $time;
  }

  //-----------------------------------------------------------------
  function check_base_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;

    unset($_SESSION[S_CONTEXT]["hotel_currency_exists"]);
    unset($_SESSION[S_CONTEXT]["hotel_room_exists"]);
    unset($_SESSION[S_CONTEXT]["hotel_season_exists"]);

    $dbw = GetDBWorker();
    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT 1 FROM ${prfx}_HTL_CURRENCY";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $_SESSION[S_CONTEXT]["hotel_currency_exists"] = true;
    }

    $query = "SELECT 1 FROM ${prfx}_HTL_ROOMS";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $_SESSION[S_CONTEXT]["hotel_room_exists"] = true;
    }

    $query = "SELECT 1 FROM ${prfx}_HTL_SEASON";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $_SESSION[S_CONTEXT]["hotel_season_exists"] = true;
    }
  } // check_base_data

  private function compare_prices($pricing_type, &$room, $price_type = '')
  {
    switch($pricing_type)
    {
      case 0:
        $distinction = false;
        foreach($room["dates"] as $day => $date)
        {
          if(strtotime($day) == strtotime($_SESSION['booking']["data"]["departure_date"]))
            continue;

          if(round($date["price"]) == round($room["average_price"]))
            continue;

          $distinction = true;
        }
      break;

      case 1:
        $distinction = false;
        foreach($room["dates"] as $day => $date)
        {
          if(strtotime($day) == strtotime($_SESSION['booking']["data"]["departure_date"]))
            continue;

          if(round($date[$price_type]) == round($room["average_".$price_type]))
            continue;

          $distinction = true;
        }
      break;
    }

    if($distinction)
      return false;

    return true;
  } // compare_prices

  private function render_average_price_block(&$average_price, &$room, $sign, $rate, $price_type, &$page_info, &$template, &$settings)
  {
    if(preg_match("/<!--[\s]*average price:begin[\s]*-->.+<!--[\s]*average price:end[\s]*-->/Us", $template, $matches))
    {
      $average_price = $matches[0];

      ksort($room["dates"]);

      $average_price_details = '<table class="average_price_details_wrapper">';
      foreach($room["dates"] as $date => $prices)
      {
        if(strtotime($date) == strtotime($_SESSION["booking"]["data"]["departure_date"]))
          continue;
        $average_price_details .= "<tr>";
        $average_price_details .= "<td class='date'>".format_date($date, $page_info["date_format"])."</td>";
        $average_price_details .= "<td class='price'>".number_format($prices[$price_type], 2, ',', '')." ".$sign."</td>";
        $average_price_details .= "</tr>";
      }
      $average_price_details .= '</table>';
    }

    $average_price = str_ireplace("{average_price_details}", $average_price_details, $average_price);
  }// render_average_price_block

  private function render_mandatory_services(&$services, &$room, &$template)
  {
    if(isset($room["additional_services"]))
    {
      $services .= '<ul class="additional_services_list">';
      foreach($room["additional_services"] as $service_id => $service)
      {
        if(ifnull($service["restriction"]) == "special_offer" && empty($_SESSION["booking"]["specoffer_modus"])) continue;
        if(ifnull($service["restriction"]) == "normal_booking" && !empty($_SESSION["booking"]["specoffer_modus"])) continue;

        if(preg_match("/<!--[\s]*mandatory sevices:begin[\s]*-->.+<!--[\s]*mandatory sevices:end[\s]*-->/Us", $template, $matches))
        {
          $services .= str_ireplace("{service_title}", $service["title"], $matches[0]);
          $services = str_ireplace("{service_caption}", $service["caption"], $services);
        }//preg_match(mandatory_services)
      }//foreach
      $services .= '</ul>';
    }
  } //render_mandatory_services

  private function render_room_data(&$template, &$room, &$room_id)
  {
    $template = str_ireplace("{room_id}", $room["room_id"], $template);
    $template = str_ireplace("{room_i_name}", $room["internal_name"], $template);
    $template = str_ireplace("{room_type}", $room["type"], $template);
    $template = str_ireplace("{room_category}", $room["category"], $template);

    $descrpition = nl2br($room["description"]);
    if(!empty($room["youtube_code"]))
    {
      $descrpition .= "<br><br><a class='you_tube_video_lightbox' href='{you_tube_video:" . $room["youtube_code"] . "}'>" . hotel::$words["Video"][$_SESSION["ulang"]] . "</a>";
    }

    $template = str_ireplace("{room_description}", $descrpition, $template);

    $room_name = $room["type"];
    if(trim($room["category"]) != "") $room_name .= " (" . $room["category"] . ")";
    $template = str_ireplace("{room_full_name}", $room_name, $template);

    $pict = "";
    $thumb = "";
    $room_image = "";
    $add_pictures = array();

    if($this->get_first_room_image($room_id, $pict, $thumb, $add_pictures) &&
       !empty($pict) && !empty($thumb))
    {
      $ipath = "resources/hotel/rooms/".$room_id."/";
      $room_image = '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room_name) . '" href="'.$ipath.$pict.'">';
      $room_image .= '<img class="room-thumb" src="'.$ipath.$thumb.'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" /><br>';
      $room_image .= hotel::$words["MorePictures"][$_SESSION["ulang"]];
      $room_image .= '</a>';
      
      $room_image .= '<div style="display:none">';
      foreach($add_pictures as $pinfo)
      {
        $room_image .= '<a class="fancybox-thumb" rel="room'.$room_id.'" title="' . escape_html($room_name) . '" href="'.$ipath.$pinfo["picture"].'">';
        $room_image .= '<img class="room-thumb" src="'.$ipath.$pinfo["thumb"].'?room_id='.$room_id.'&picture='. escape_html($pict) .'" alt="'. escape_html($room["type"] . " (" . $room["category"] . ")") .'" title="'. escape_html($room["type"]) .'" /><br>';
        $room_image .= '</a>';
      }
      $room_image .= '</div>';        
      
      $room_image .= '<script type="text/javascript">';
      $room_image .= "$(document).ready(function() {
                      $(\"[rel='room$room_id']\").fancybox({
                        helpers : {
                          thumbs : true
                        }
                      });
                    });
                ";
      $room_image .= '</script>';
    }

    $template = str_ireplace ("{room_image}", $room_image, $template);

    //$template = str_ireplace("{room_thumb}", $this->get_room_image($room_id, true), $template);
    //$template = str_ireplace("{room_image_src}", $this->get_room_image($room_id, false), $template);
    $template = str_ireplace("{standard_allocation}", $room["standard_allocation"], $template);
  } // render_room_data

  public function calculate_price($type, $room_id, $price1, $dbw)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $price = 0;

    $dbw2 = $dbw->create_clone();
    $prfx = $dbw2->escape(GetConnection()->get_current_prefix());
    $room_id = $dbw2->escape($room_id);

    //fetch room data
    $query="SELECT ID, STANDARD_ALLOCATION, WITH_CHILDREN, DISCOUNT_FLAG, DISCOUNT,
            CHILD_DISCOUNT_FLAG, CHILD_DISCOUNT,
            CHILD_DISCOUNT_FLAG2, CHILD_DISCOUNT2,
            CHILD_DISCOUNT_FLAG3, CHILD_DISCOUNT3,
            CHILD_DISCOUNT_FLAG4, CHILD_DISCOUNT4,
            ADD_CHILD_DISCOUNT_FLAG, ADD_CHILD_DISCOUNT,
            ADD_CHILD_DISCOUNT_FLAG2, ADD_CHILD_DISCOUNT2,
            ADD_CHILD_DISCOUNT_FLAG3, ADD_CHILD_DISCOUNT3,
            ADD_CHILD_DISCOUNT_FLAG4, ADD_CHILD_DISCOUNT4
            FROM ${prfx}_HTL_ROOMS
            WHERE ID = $room_id";

    if(!$dbw2->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw2->get_last_error() . "\n\n" .
                     $dbw2->get_last_query();
      return false;
    }

    while($dbw2->fetch_row())
    {
      $room = array("standard_allocation" => $dbw2->field_by_name("STANDARD_ALLOCATION"),
                    "with_children" => $dbw2->field_by_name("WITH_CHILDREN"),
                    "discount_flag" => $dbw2->field_by_name("DISCOUNT_FLAG"),
                    "discount" => $dbw2->field_by_name("DISCOUNT"),

                    "child_discount_flag" => $dbw2->field_by_name("CHILD_DISCOUNT_FLAG"),
                    "child_discount" => $dbw2->field_by_name("CHILD_DISCOUNT"),
                    "child_discount_flag2" => $dbw2->field_by_name("CHILD_DISCOUNT_FLAG2"),
                    "child_discount2" => $dbw2->field_by_name("CHILD_DISCOUNT2"),
                    "child_discount_flag3" => $dbw2->field_by_name("CHILD_DISCOUNT_FLAG3"),
                    "child_discount3" => $dbw2->field_by_name("CHILD_DISCOUNT3"),
                    "child_discount_flag4" => $dbw2->field_by_name("CHILD_DISCOUNT_FLAG4"),
                    "child_discount4" => $dbw2->field_by_name("CHILD_DISCOUNT4"),

                    "add_child_discount_flag" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT_FLAG"),
                    "add_child_discount" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT"),
                    "add_child_discount_flag2" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT_FLAG2"),
                    "add_child_discount2" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT2"),
                    "add_child_discount_flag3" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT_FLAG3"),
                    "add_child_discount3" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT3"),
                    "add_child_discount_flag4" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT_FLAG4"),
                    "add_child_discount4" => $dbw2->field_by_name("ADD_CHILD_DISCOUNT4")
                   );
    }

    $dbw2->free_result();

    switch($type)
    {
      case 'price_adult':
      {
        if($room["standard_allocation"] == 1)
        {
          $price = $price1;
        }
        elseif($room["standard_allocation"] == 2)
        {
          if($room["discount_flag"] == 0)
            $price = $price1 - $room["discount"];
          elseif($room["discount_flag"] == 1)
            $price = $price1 - (($price1*$room["discount"])/100);
        }
        elseif($room["standard_allocation"] == 3)
        {
          $price = $price1/3;
        }
        elseif($room["standard_allocation"] == 4)
        {
          $price = $price1/4;
        }

        break;
      }

      case 'price_adult2':
      {
        if($room["standard_allocation"] == 1)
        {
          $price = 2*$price1;
        }
        elseif($room["standard_allocation"] == 2)
        {
          $price = $price1;
        }
        elseif($room["standard_allocation"] == 3)
        {
          $price = 2*$price1/3;
        }
        elseif($room["standard_allocation"] == 4)
        {
          $price = 2*$price1/4;
        }
        break;
      }

      case 'price_adult3':
      {
        if($room["standard_allocation"] == 1)
        {
          $price = 3*$price1;
        }
        elseif($room["standard_allocation"] == 2)
        {
          $price = 3*$price1/2;
        }
        elseif($room["standard_allocation"] == 3)
        {
          $price = $price1;
        }
        elseif($room["standard_allocation"] == 4)
        {
          $price = 3*$price1/4;
        }
        break;
      }

      case 'price_adult4':
      {
        if($room["standard_allocation"] == 1)
        {
          $price = 4*$price1;
        }
        elseif($room["standard_allocation"] == 2)
        {
          $price = 4*$price1/2;
        }
        elseif($room["standard_allocation"] == 3)
        {
          $price = 4*$price1/3;
        }
        elseif($room["standard_allocation"] == 4)
        {
          $price = $price1;
        }
        break;
      }

      case 'price_adult_child':
      {
        if($room["standard_allocation"] == 1)
        {
         $price = $price1;
        }
        elseif($room["standard_allocation"] >= 2)
        {
          $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["child_discount_flag"] == 0)
            $child_price = $average_price_for_adult - $room["child_discount"];
          else
            $child_price = $average_price_for_adult - (($average_price_for_adult*$room["child_discount"])/100);

          $price = $average_price_for_adult + $child_price;
        }
        break;
      }

      case 'price_adult_child2':
      {
        if($room["standard_allocation"] == 1)
        {
         $price = $price1;
        }
        elseif($room["standard_allocation"] >= 2)
        {
          $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["child_discount_flag2"] == 0)
            $child_price = $average_price_for_adult - $room["child_discount2"];
          else
            $child_price = $average_price_for_adult - (($average_price_for_adult*$room["child_discount2"])/100);

          $price = $average_price_for_adult + $child_price;
        }
        break;
      }

      case 'price_adult_child3':
      {
        if($room["standard_allocation"] == 1)
        {
         $price = $price1;
        }
        elseif($room["standard_allocation"] >= 2)
        {
          $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["child_discount_flag3"] == 0)
            $child_price = $average_price_for_adult - $room["child_discount3"];
          else
            $child_price = $average_price_for_adult - (($average_price_for_adult*$room["child_discount3"])/100);

          $price = $average_price_for_adult + $child_price;
        }
        break;
      }

      case 'price_adult_child4':
      {
        if($room["standard_allocation"] == 1)
        {
         $price = $price1;
        }
        elseif($room["standard_allocation"] >= 2)
        {
          $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["child_discount_flag4"] == 0)
            $child_price = $average_price_for_adult - $room["child_discount4"];
          else
            $child_price = $average_price_for_adult - (($average_price_for_adult*$room["child_discount4"])/100);

          $price = $average_price_for_adult + $child_price;
        }
        break;
      }

      case 'price_add_adult':
      {
        $price = $price1/$room["standard_allocation"];
        break;
      }

      case 'price_add_child':
      {
        $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["add_child_discount_flag"] == 0)
            $price = $average_price_for_adult - $room["add_child_discount"];
          else
            $price = $average_price_for_adult - (($average_price_for_adult*$room["add_child_discount"])/100);

        break;
      }
      case 'price_add_child2':
      {
        $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["add_child_discount_flag2"] == 0)
            $price = $average_price_for_adult - $room["add_child_discount2"];
          else
            $price = $average_price_for_adult - (($average_price_for_adult*$room["add_child_discount2"])/100);

        break;
      }
      case 'price_add_child3':
      {
        $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["add_child_discount_flag3"] == 0)
            $price = $average_price_for_adult - $room["add_child_discount3"];
          else
            $price = $average_price_for_adult - (($average_price_for_adult*$room["add_child_discount3"])/100);

        break;
      }
      case 'price_add_child4':
      {
        $average_price_for_adult = $price1/$room["standard_allocation"];

          if($room["add_child_discount_flag4"] == 0)
            $price = $average_price_for_adult - $room["add_child_discount4"];
          else
            $price = $average_price_for_adult - (($average_price_for_adult*$room["add_child_discount4"])/100);

        break;
      }
    }

    return round($price, 2);
  }
  //-----------------------------------------------------------------
  function get_rating_list(&$rating_list, &$page, &$page_count, &$row_count, $rows_per_page)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    // if a concrete banner should be made visible
    $where_appendix = "";
    if(!reqvar_empty("bid"))
    {
      $bid = $dbw->escape(reqvar("bid"));
      $where_appendix = " OR RTN.ID = $bid";
    }

    // define the page count
    if(!$dbw->execute_query("select count(*) CNT
                             from ${prfx}_HTL_RATING RTN
                            "))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->fetch_row())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = "no result by select count(*)";
      $dbw->free_result();
      return false;
    }

    $row_count = $dbw->field_by_name("CNT");
    $dbw->free_result();

    $page_count = ceil($row_count/$rows_per_page);
    if($page_count < 1) $page_count = 1;
    if($page > $page_count) $page = $page_count;
    if($page < 1) $page = 1;

    $begin = ($page-1)*$rows_per_page + 1;
    $end = ($page-1)*$rows_per_page + $rows_per_page;
    if(!$dbw->execute_query($this->get_query_rating_list($prfx, $begin, $end, $where_appendix)))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rating_list = array();

    while($dbw->fetch_row())
    {
      $rating_list[$dbw->field_by_name("ID")] = array("id" => $dbw->field_by_name("ID"),
                           "name" => $dbw->field_by_name("NAME"),
                           "actual" => $dbw->field_by_name("RATING"),
                           "total" => $dbw->field_by_name("RATING_TOTAL")
                          );
    }

    $dbw->free_result();

    return true;
  } // fetch_rating_list
  //-----------------------------------------------------------------
  function delete_ratings()
  {
    global $ERROR;
    global $INFO_MESSAGE;
    global $ERR_DETAILS;

    if(!isset($_SESSION[S_CONTEXT]["del_ratings"]) || count($_SESSION[S_CONTEXT]["del_ratings"]) < 1)
    {
      $ERROR = text("ErrNoExternalRatingSelected");
      return false;
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $in_list = implode(",", $_SESSION[S_CONTEXT]["del_ratings"]);

    // fetch names for event log
    if(!$dbw->execute_query("SELECT NAME FROM ${prfx}_HTL_RATING WHERE ID IN ($in_list)"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $del_list = "";
    while($dbw->fetch_row())
    {
      $del_list .= $dbw->field_by_name("NAME") . ", ";
    }

    $dbw->free_result();

    if(!$dbw->execute_query("delete from ${prfx}_HTL_RATING WHERE ID IN ($in_list)"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    return true;
  } // delete_ratings
  //-----------------------------------------------------------------
  function fetch_rating_data()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    if(reqvar_empty("bid"))
    {
      $ERROR = text("ErrNoExternalRatingSelected");
      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $bid = $dbw->escape(reqvar("bid"));

    // fetch base properites

    $query = "
          SELECT NAME, RATING, RATING_TOTAL
          FROM ${prfx}_HTL_RATING WHERE ID = $bid
    ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["rating_name"] = magic_quotes_to_req($dbw->field_by_name("NAME"));

      $_REQUEST["actual_rating"] = magic_quotes_to_req($dbw->field_by_name("RATING"));
      $_REQUEST["max_rating"] = magic_quotes_to_req($dbw->field_by_name("RATING_TOTAL"));
    }

    $dbw->free_result();

    // fetch languages dependant properites

    $query = "
      SELECT ${prfx}_LANGUAGE.ID AS LANGUAGE_ID,
      IS_ACTIVE, PICTURE_URL, URL, CAPTION
      FROM
      ${prfx}_LANGUAGE
      LEFT JOIN ${prfx}_HTL_RATING_PROP ON (${prfx}_LANGUAGE.ID = ${prfx}_HTL_RATING_PROP.LANGUAGE_ID AND
                                     ${prfx}_HTL_RATING_PROP.RATING_ID = $bid)
      ORDER BY ${prfx}_LANGUAGE.SORT_ORDER
      ";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $_REQUEST["rating_data"] = array();
    while($dbw->fetch_row())
    {
      $_REQUEST["rating_data"][$dbw->field_by_name("LANGUAGE_ID")]["is_active"] = magic_quotes_to_req($dbw->field_by_name("IS_ACTIVE"));
      $_REQUEST["rating_data"][$dbw->field_by_name("LANGUAGE_ID")]["url"] = magic_quotes_to_req($dbw->field_by_name("URL"));
      $_REQUEST["rating_data"][$dbw->field_by_name("LANGUAGE_ID")]["picture"] = magic_quotes_to_req($dbw->field_by_name("PICTURE_URL"));
      $_REQUEST["rating_data"][$dbw->field_by_name("LANGUAGE_ID")]["title"] = magic_quotes_to_req($dbw->field_by_name("CAPTION"));
    }

    $dbw->free_result();

    return true;
  } // fetch_rating_data
  //-----------------------------------------------------------------
  function check_uploaded_picture($lid, &$pict_url)
  {
    global $ERROR;

    if(empty($_FILES["upload_pic"]["name"][$lid])) return true;

    $matches = array();
    if(!preg_match("/.+\.(jpg|jpeg|gif|png)$/i",
            $_FILES["upload_pic"]["name"][$lid], $matches))
    {
      $ERROR = str_replace("%file%", $_FILES["upload_pic"]["name"][$lid], text("ErrFileIsNotPicture"));
      return false;
    }

    if(!file_exists("../resources/ratings") &&
       !@mkdir("../resources/ratings"))
    {
      $ERROR = text("ErrCreatingBannerDir");
      return false;
    }

    if(!move_uploaded_file($_FILES["upload_pic"]["tmp_name"][$lid],
                           "../resources/ratings/" . $_FILES["upload_pic"]["name"][$lid]))
    {
      $ERROR = text("ErrUploadingBannerPict");
      return false;
    }

    $pict_url = "resources/ratings/" . $_FILES["upload_pic"]["name"][$lid];

    return true;
  } // check_uploaded_picture
  //-----------------------------------------------------------------
  function save_rating_data()
  {
    global $MAY_CLOSE, $ERROR, $ACTIVE_TAB;
    global $ERR_DETAILS;
    global $FOCUS_ELEMENT;
    global $INFO_MESSAGE;

    // we upload picture always
    if(isset($_REQUEST["rating_data"]) && count($_REQUEST["rating_data"]) > 0)
    {
      foreach($_REQUEST["rating_data"] as $lid => &$data)
      {
        $picture = magic_quotes_from_req($data["picture"]);
        // error is set in the function
        if(!$this->check_uploaded_picture($lid, $picture)) return false;

        $_REQUEST["rating_data"][$lid]["picture"] = magic_quotes_to_req($picture);
      }
    }
    // we upload picture always

    // validation
    if(reqvar_empty("rating_name"))
    {
      $ERROR = text("ErrNameEmpty");
      $FOCUS_ELEMENT = "rating_name";
      return false;
    }

    if(reqvar_empty("actual_rating") ||
       (!is_numeric(reqvar("actual_rating")) || reqvar("actual_rating") < 1)
      )
    {
      $ACTIVE_TAB = "1";
      $FOCUS_ELEMENT = "actual_rating";
      $ERROR = text("ErrPositiveNumberExpected");
      return false;
    }

    if(reqvar_empty("max_rating") ||
       (!is_numeric(reqvar("max_rating")) || reqvar("max_rating") < 1)
      )
    {
      $ACTIVE_TAB = "1";
      $FOCUS_ELEMENT = "max_rating";
      $ERROR = text("ErrPositiveNumberExpected");
      return false;
    }

    if(reqvar("actual_rating") > reqvar("max_rating"))
    {
      $tmp = reqvar("max_rating");
      $_REQUEST["max_rating"] = reqvar("actual_rating");
      $_REQUEST["actual_rating"] = $tmp;
    }

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    // test unique
    $name = $dbw->escape(reqvar("rating_name"));
    $IS_INSERTING = reqvar_empty("bid");
    if(!$IS_INSERTING)
    {
      $bid = $dbw->escape(reqvar("bid"));
      $query = "SELECT NAME FROM ${prfx}_HTL_RATING WHERE NAME = '$name' AND ID <> $bid";
    }
    else
    {
      $query = "SELECT NAME FROM ${prfx}_HTL_RATING WHERE NAME = '$name'";
    } // if

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $ERROR = text("ErrBannerNameExists");
      $FOCUS_ELEMENT = "rating_name";
      return false;
    }

    $dbw->free_result();

    // let's go

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    // saving common properites

    $actual_rating = reqvar_empty("actual_rating") ? "NULL" : $dbw->escape(reqvar("actual_rating"));
    $max_rating = reqvar_empty("max_rating") ? "NULL" : $dbw->escape(reqvar("max_rating"));

    if(!$IS_INSERTING)
    {
      $bid = $dbw->escape(reqvar("bid"));
      $query = "UPDATE ${prfx}_HTL_RATING SET
      NAME = '$name',
      RATING = $actual_rating,
      RATING_TOTAL = $max_rating
      WHERE ID = $bid";
    }
    else
    {
      $query = "INSERT INTO ${prfx}_HTL_RATING
      (NAME, RATING, RATING_TOTAL)
      VALUES
      ('$name', $actual_rating, $max_rating)
      ";
    } // if

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($IS_INSERTING)
    {
      $bid = $dbw->insert_id();
    }

    // saving language dependant properites

    if(isset($_REQUEST["rating_data"]) && count($_REQUEST["rating_data"]) > 0)
    {
      foreach($_REQUEST["rating_data"] as $lid => &$data)
      {
        $is_active = empty($data["is_active"]) ? "0" : "1";

        $data["url"] = trim($data["url"]);
        $data["picture"] = trim($data["picture"]);

        // validation
        if($is_active == "1" && empty($data["title"]))
        {
          $ERROR = text("ErrRatingCaptionEmpty");
          $FOCUS_ELEMENT = "rating_data[$lid][title]";
          $dbw->rollback_transaction();
          return false;
        }

        /*
        if($is_active == "1" && empty($data["url"]))
        {
          $ERROR = text("ErrRatingUrlEmpty");
          $FOCUS_ELEMENT = "rating_data[$lid][url]";
          $dbw->rollback_transaction();
          return false;
        }
        */

        if(!empty($data["url"]))
        {
          if(preg_match("/{[^{}]+}/i", $data["url"]) == 0 &&
             preg_match("/^(\\/|protected.+|resources.+|templates.+|(http|https|ftp):\\/\\/.+)/i", $data["url"]) == 0)
          {
            $data["url"] = "http://" . $data["url"];
          }
        }
        if(!empty($data["picture"]))
        {
          if(preg_match("/^(\\/|resources.+|templates.+|(http|https|ftp):\\/\\/.+)/i", $data["picture"]) == 0)
          {
            $data["picture"] = "http://" . $data["picture"];
          }
        }

        $picture = magic_quotes_from_req($data["picture"]);
        // error is set in the function
        //if(!$this->check_uploaded_picture($lid, $picture)) return false;

        if(empty($data["url"])) $url =  "NULL";
        else $url = "'" . $dbw->escape(magic_quotes_from_req($data["url"])) . "'";
        if(empty($data["title"])) $title =  "NULL";
        else $title = "'" . $dbw->escape(magic_quotes_from_req($data["title"])) . "'";
        if(empty($picture)) $picture =  "NULL";
        else $picture = "'" . $dbw->escape($picture) . "'";

        if(!$dbw->execute_query($this->get_query_save_rating_data($prfx, $bid, $lid, $is_active, $url, $picture, $title)))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();

          return false;
        }
      } // foreach lang
    } // if

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $_REQUEST["bid"] = magic_quotes_to_req($bid);
    $INFO_MESSAGE = text("MsgDataSaved");

    if(reqvar("act") == "SaveClose")
      $MAY_CLOSE = true;

    return true;
  } // save_rating_data
  //-----------------------------------------------------------------
function place_rating_picture($url)
  {
    $location = $url;
    if(preg_match("/^resources\\/.+/i", $url) > 0)
    {
      $location = app_path() . $url;
      $url = "../$url";
    }

    if(!file_exists($location))
    {
      echo "<img src='$url' alt='rating'>";
      return;
    }

    // GD is not installed, we are unable to define the size
    // just try to show picture as is
    if(!function_exists("imagecreatefromjpeg") ||
       !function_exists("imagecreatefromgif") ||
       !function_exists("imagecreatefrompng") ||
       !function_exists("imagejpeg") ||
       !function_exists("imagegif") ||
       !function_exists("imagepng")
      )
    {
      echo "<img src='$url' alt='rating'>";
      return;
    }

    $file = basename($location);

    $matches = array();
    if(!preg_match("/.+\.(jpg|jpeg|gif|png)$/i", $file, $matches))
    {
      // extension is unknown
      // just try to show picture as is
      echo "<img src='$url' alt='rating'>";
      return;
    }

    if(!$img_info = getimagesize($location))
    {
      // load failed
      // just try to show picture as is
      echo "<img src='$url' alt='rating'>";
      return;
    }

    $x = $img_info[0];
    $y = $img_info[1];

    $limit = 250;

    if($x > $y && $x > $limit)
    {
      $y = round($y * $limit / $x);
      $x = $limit;
    }
    elseif($y >= $x && $y > $limit)
    {
      $x = round($x * $limit / $y);
      $y = $limit;
    }

    echo "<img src='$url' width='$x' height='$y' alt='rating'>";
  } // place_rating_picture
  //-----------------------------------------------------------------
  function render_external_rating(&$page_info)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "select NAME, RATING, RATING_TOTAL,
              PICTURE_URL, URL, CAPTION
              from ${prfx}_HTL_RATING
              LEFT JOIN ${prfx}_HTL_RATING_PROP
                ON (${prfx}_HTL_RATING_PROP.RATING_ID = ${prfx}_HTL_RATING.ID AND LANGUAGE_ID = $page_info[langid])
              WHERE IS_ACTIVE = '1'
              ORDER BY NAME
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $data = array();

    while($dbw->fetch_row())
    {
      $data[] = array("title" => $dbw->field_by_name("CAPTION"),
                      "actual" => $dbw->field_by_name("RATING"),
                      "total" => $dbw->field_by_name("RATING_TOTAL"),
                      "picture" => $dbw->field_by_name("PICTURE_URL"),
                      "url" => $dbw->field_by_name("URL")
                     );
    }

    if(count($data) == 0) return try_translate("NoExternalRating", $page_info["lang"]);

    $contents = "<table class='ext_rating_table'>";

    $contents .= "
    <tr>
      <th>" . try_translate("Portal", $page_info["lang"]) . "</th>
      <th>" . try_translate("Logo", $page_info["lang"]) . "</th>
      <th colspan='2'>" . try_translate("Rating", $page_info["lang"]) . "</th>
    </tr>
    ";

    foreach($data as $row)
    {
      $title = escape_html($row["title"]);
      if(!empty($row["url"])) $title = "<a href='" . escape_html($row["url"]) . "' target='_blank'>" . $title . "</a>";

      $picture = "";
      if(!empty($row["picture"]))
      {
        $picture = "<img src='" . escape_html($row["picture"]) . "' alt='rating'>";
        if(!empty($row["url"])) $picture = "<a href='" . escape_html($row["url"]) . "' target='_blank'>" . $picture . "</a>";
      }

      $rating_txt =  escape_html($row["actual"]) . " / " . escape_html($row["total"]);

      $width = 0;
      if($row["actual"] > 0 && $row["total"] > 0)
      {
        $width = round(65*$row["actual"]/$row["total"]);
      }

      $stars = "<div class='stars1'><div class='stars2' style='width:${width}px'></div></div>";

      $contents .= "
      <tr>
        <td class='ext_rat_title'>" . $title . "</td>
        <td class='ext_rat_picture'>" . $picture . "</td>
        <td class='ext_rat_value'>" . $rating_txt . "</td>
        <td class='ext_rat_stars'>" . $stars . "</td>
      </tr>
      ";
    }

    $contents .= "</table>";

    return $contents;
  } // render_external_rating
  //-----------------------------------------------------------------
  function delete_credit_card_data($echo = true)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if($echo) echo("\nDeleting credit card data: " . date("d.m.Y H:i:s") . "\n\n");

    $where = $this->get_where_card_date($prfx);

    $query = "select ORDER_ID, DATE
              from ${prfx}_HTL_PAYMENT_DATA
              $where
              ORDER BY DATE
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $exists = false;
    while($dbw->fetch_row())
    {
      $exists = true;
      if($echo) echo "Credit card info deleted: Order-ID: " . $dbw->field_by_name("ORDER_ID") . ", Date: " . format_date($dbw->field_by_name("DATE"), "d.m.Y H:i") . "\n";
    }

    if(!$exists)
    {
      if($echo) echo("No credit card data to be deleted\n");
      return true;
    }

    $query = "DELETE
              from ${prfx}_HTL_PAYMENT_DATA
              $where
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    return true;
  } // delete_credit_card_data
  //-----------------------------------------------------------------

  /**
  * Fetch available room count/max room count at each day in period for all room
  *
  * @param array $rooms
  * @param string $begin_date
  * @param string $end_date
  */
  public function fetch_rooms_availability(&$rooms, $begin_date, $end_date)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $begin_day_number = date("N", strtotime($begin_date));
    $begin_day_number--;
    $begin_date = strtotime($begin_date) - ($begin_day_number*86400);

    $end_day_number = date("N", strtotime($end_date));
    $end_day_number = 7 - $end_day_number;
    //echo date("Y-m-d H:i:s", strtotime($end_date));
    $end_date = strtotime($end_date) + ($end_day_number*86400);
    //echo "<br />";
    //echo date("Y-m-d H:i:s", $end_date);

    $begin_date = $dbw->format_date($begin_date);
    $end_date = $dbw->format_date($end_date);

    //set array with dates for table head in view
    $dates = array();
    $this->fill_date_array_for_room_availability($dates, $begin_date, $end_date);
    $_REQUEST["dates"] = $dates;

    //fill array with dates from begin date to end date
    $dates = array();
    $this->fill_date_array($dates, $begin_date, $end_date);

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $query = "SELECT {$prfx}_HTL_ROOMS.ID, I_NAME, TYPE, CATEGORY, ROOM_COUNT, ROOMS_COUNT, DATE
              FROM {$prfx}_HTL_ROOM_AVAILABILITY
              LEFT JOIN {$prfx}_HTL_ROOMS ON (ID = {$prfx}_HTL_ROOM_AVAILABILITY.ROOM_ID)
              LEFT JOIN {$prfx}_HTL_ROOMS_PROPS ON ({$prfx}_HTL_ROOMS_PROPS.ROOM_ID = {$prfx}_HTL_ROOM_AVAILABILITY.ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$lang_key'))
              WHERE DATE >= '$begin_date' AND DATE <= '$end_date'
              ORDER BY {$prfx}_HTL_ROOMS.SORT_ORDER";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    $rooms_availability = array();
    while($dbw->fetch_row())
    {
      $name = $dbw->field_by_name("TYPE");
      if(empty($name))
        $name = $dbw->field_by_name("I_NAME");

      $rooms[$dbw->field_by_name("ID")]["type"] = $name;
      $rooms[$dbw->field_by_name("ID")]["category"] = $dbw->field_by_name("CATEGORY");
      $rooms[$dbw->field_by_name("ID")]["max_count"] = $dbw->field_by_name("ROOMS_COUNT");
      $rooms[$dbw->field_by_name("ID")]["dates"] = array();
      $rooms_availability[$dbw->field_by_name("ID")]["dates"][$dbw->field_by_name("DATE")] = $dbw->field_by_name("ROOM_COUNT");
    }
    $dbw->free_result();


    foreach($dates as $date)
    {
      foreach($rooms as $room_id => &$room)
      {
        $room["dates"][$date] = ifnull($rooms_availability[$room_id]["dates"][$date]);
      }
    }
  }//fetch_rooms_availability

  /**
  * Fill the array $dates with all dates between begin date and end date in "Y-m-d" format
  *
  * @param array $dates
  * @param string $begin_date
  * @param string $end_date
  */
  private function fill_date_array(&$dates, $begin_date, $end_date)
  {
    $dates = array();
    $begin_time = strtotime($begin_date);
    $end_time =  strtotime($end_date);
    $end_time += 2*3600;

    for($time=$begin_time; $time<=$end_time; $time=$time+86400)
    {
      $dates[] = date("Y-m-d", $time);
    }
  }

  private function fill_date_array_for_room_availability(&$dates, $begin_date, $end_date)
  {
    $dates = array();
    $begin_time = strtotime($begin_date);
    $end_time = strtotime($end_date);
    $end_time += 2*3600;

    for($time=$begin_time; $time<=$end_time; $time=$time+86400)
    {
      $dates[date("Y", $time)][date("m", $time)][date("d", $time)] = date("d", $time);
    }
  }

  public function change_rooms_available_count($room_id, $begin_period, $end_period, $sign, $count)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    //validation
    if(empty($room_id))
      return false;

    if(empty($begin_period))
    {
      $ERROR = text("ErrDateIsEmpty");
      return false;
    }

    if(empty($count) || !is_numeric($count))
    {
      $ERROR = text("ErrRoomsCount");
      return false;
    }

    //prepare data
    if(strtotime($begin_period) > strtotime($end_period))
    {
      $begin_period2 = $begin_period;
      $begin_period = $end_period;
      $end_period = $begin_period2;
    }

    $begin_period = $dbw->format_date(strtotime($begin_period));
    $end_period = $dbw->format_date(strtotime($end_period));
    $room_id = $dbw->escape($room_id);

    $query = "SELECT ROOMS_COUNT, ROOM_COUNT, DATE FROM {$prfx}_HTL_ROOM_AVAILABILITY
              LEFT JOIN {$prfx}_HTL_ROOMS ON (ID = ROOM_ID)
              WHERE ROOM_ID = $room_id AND DATE >= '$begin_period' AND DATE <= '$end_period'
              ORDER BY DATE";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $room_counts = array();
    while($dbw->fetch_row())
    {
      $max_count = $dbw->field_by_name("ROOMS_COUNT");
      $room_counts[$dbw->field_by_name("DATE")] = $dbw->field_by_name("ROOM_COUNT");
    }
    $dbw->free_result();

    foreach($room_counts as $date => &$room_count)
    {
      $date = $dbw->format_date(strtotime($date));

      // get number of reserved rooms

      $query = "SELECT COUNT(*) CNT FROM
                {$prfx}_HTL_ORDER_PROP
                WHERE ROOM_ID = $room_id
                AND
                ORDER_ID IN
                (
                  SELECT ID FROM {$prfx}_HTL_ORDER
                  WHERE
                  '$date' >= ARRIVE_DATE AND '$date' < DEPARTURE_DATE
                  AND (CONFIRMED IS NULL OR CONFIRMED NOT IN (2, 3))
                )
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $reserved = 0;

      while($dbw->fetch_row())
      {
        $reserved = $dbw->field_by_name("CNT");
      }

      if(empty($reserved)) $reserved = 0;

      $dbw->free_result();

      switch($sign)
      {
        case '-':
          $room_count -= $count;
          if($room_count < 0)
          {
            if(empty($ERROR))
              $ERROR = text("RoomCountLessZero")."<br /><br />";

            $ERROR .= format_date($date, text("DateFormat"))."<br />";
          }
        break;

        case '+':
          $room_count += $count;
          if($room_count > ($max_count - $reserved))
          {
            if(empty($ERROR))
              $ERROR = text("RoomCountMoreMax")."<br /><br />";

            $appendix = "";
            if($reserved > 0)
            {
              $appendix = " - " . $reserved . " " . text("RoomsAlreadyReserved");
            }

            $ERROR .= format_date($date, text("DateFormat")). $appendix . "<br />";
          }
        break;
      }
    }

    if(!empty($ERROR))
      return false;

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    foreach($room_counts as $date => &$room_count)
    {
      $date = $dbw->format_date(strtotime($date));


      $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                ROOM_COUNT = $room_count
                WHERE DATE = '$date' AND ROOM_ID = $room_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
  }

  function fetch_ind_specoffer_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(reqvar_empty("season_id")) return true;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $season_id = reqvar("season_id");

    $query = "SELECT LANG_ID, SPECOFFER_TEXT
              FROM {$prfx}_HTL_BOOKING_SETTINGS_PROP
              LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANG_ID)
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $default_banner_text = array();

    while($dbw->fetch_row())
    {
      $default_banner_text[$dbw->field_by_name("LANG_ID")] = $dbw->field_by_name("SPECOFFER_TEXT");
    }

    $dbw->free_result();

    $query = "SELECT LANGUAGE_ID, SPECOFFER_TEXT
              FROM {$prfx}_HTL_SEASON_PROPS
              LEFT JOIN {$prfx}_LANGUAGE ON ({$prfx}_LANGUAGE.ID = LANGUAGE_ID)
              WHERE SEASON_ID = $season_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $txt = $dbw->field_by_name("SPECOFFER_TEXT");
      if(!empty($txt))
        $_REQUEST["specoffer_text"][$dbw->field_by_name("LANGUAGE_ID")] = magic_quotes_to_req($txt);
      else
        $_REQUEST["specoffer_text"][$dbw->field_by_name("LANGUAGE_ID")] = magic_quotes_to_req(ifnull($default_banner_text[$dbw->field_by_name("LANGUAGE_ID")]));
    }

    $dbw->free_result();

    return true;
  }

  function save_ind_specoffer_text()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(reqvar_empty("season_id")) return true;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $season_id = reqvar("season_id");

    if(!empty($_REQUEST["specoffer_text"]))
    {
      foreach($_REQUEST["specoffer_text"] as $lid => $val)
      {
        $val = null_if_empty($dbw->escape(magic_quotes_from_req($val)));

        $query = "UPDATE {$prfx}_HTL_SEASON_PROPS SET
                  SPECOFFER_TEXT = $val
                  WHERE {$prfx}_HTL_SEASON_PROPS.LANGUAGE_ID = $lid
                  ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }
      }
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");
    return true;
  }
  //-----------------------------------------------------------------
  function on_login()
  {
    $this->delete_credit_card_data(false);
  } // on_login
  //-----------------------------------------------------------------
  function create_lang($lang)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $lang = $dbw->escape($lang);
    
    $query = "SELECT 1 FROM ${prfx}_LANGUAGE WHERE LANG_KEY = '$lang'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $dbw->free_result();
      return true;
    }

    $dbw->free_result();
    
    $sort_id = "";

    $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_LANGUAGE";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $sort_id = $dbw->field_by_name("SORT_ORDER");
    }

    $dbw->free_result();

    if(empty($sort_id)) $sort_id = 0;

    
    $apath = app_path();
  
    $sql_cmds = array();
    
    $db_type = ifnull($_SESSION[S_CONTEXT]["conn_data"]["db_type"]);

    if(file_exists($apath . "include/$db_type/sql/init_data.$lang.sql.php"))
      @include $apath . "include/$db_type/sql/init_data.$lang.sql.php";

    foreach($sql_cmds as $cmd)
    {
      if(empty($cmd)) continue;
      
      $cmd = str_ireplace("V1", $prfx, $cmd);
      
      if(!$dbw->execute_query($cmd))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    
    $query = "UPDATE ${prfx}_LANGUAGE SET SORT_ORDER = $sort_id WHERE LANG_KEY = '$lang'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    return true;
  } // create_lang 
  //-----------------------------------------------------------------
  function create_etemplate($nr, $etemplate_name, $receiver = "")
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    if(empty($receiver))
    {
      $receiver = ifnull($_SESSION["user_email"]);
      if(empty($receiver)) $receiver = ifnull($NOTIFY_EMAIL);
    }

    $receiver = $dbw->escape($receiver);
    $etemplate_name = $dbw->escape($etemplate_name);
    
    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = '$etemplate_name'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('$etemplate_name', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $eid = $dbw->insert_id();

      $lng = GetLanguage();

      $lang_list = array();
      $lng->fetch_language_list($lang_list);
      foreach($lang_list as $lid => $lang_info)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($lang_info["key"]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizzard"]["email${nr}_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizzard"]["email${nr}_subject"][$lid]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizzard"]["email${nr}_body"][$lid]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }
      }
    } 

    if($nr < 8)
    {
      $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL${nr}_ID = '$eid', EMAIL_RECEIVER${nr} = '$receiver'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    elseif($nr < 10)
    {
      $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL${nr}_ID = '$eid'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    
    return true;
  } // create_etemplate
  //-----------------------------------------------------------------
  function create_page($page, $caption_id, $text_id, $site_id, &$mapping, $template, $mobile_template, $ibooking = false)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $page = $dbw->escape($page);

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = '$page'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $oid = "";
    if($dbw->fetch_row())
    {
      $oid = $dbw->field_by_name("ID");
    }    
    
    $dbw->free_result();
    
    if(empty($oid))
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('$page', '0', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      $oid = $dbw->insert_id();
      
      if(!empty($ibooking))
      {
        $query = "UPDATE ${prfx}_SITE_OBJECT SET IBOOKING = '1' WHERE ID = $oid";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }
      }      
      
      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }

    $template = null_if_empty($dbw->escape($template));
    $mobile_template = null_if_empty($dbw->escape($mobile_template));
    
    foreach($_SESSION["hotel_wizzard"]["step2"]["selected_langs"] as $lkey)
    {
      $lid = ifnull($mapping[$lkey]);
      $lid = $dbw->escape($lid);

      $query = "SELECT 1 FROM ${prfx}_SOBJECT_PROP WHERE SOBJECT_ID = $oid AND LANGUAGE_ID = $lid";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $dbw->free_result();
        continue;
      }    
      
      $dbw->free_result();
      
      $text = ifnull($HOTEL_INITIAL_TEXTS[$lkey][$text_id]);
      $caption = ifnull($HOTEL_INITIAL_TEXTS[$lkey][$caption_id]);

      if(!empty($ibooking))
      {
        $text = "<div id='booking_content'>" . $text . "</div>";
      }
      
      $text = null_if_empty($dbw->escape($text));
      $caption = null_if_empty($dbw->escape($caption));

      $query = "INSERT INTO ${prfx}_SOBJECT_PROP
      (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE, PROP5, TEMPLATE_MOBILE)
      VALUES
      ($oid, $lid, $caption, $text, $text, '1', $template, $mobile_template)
      ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    
    return true;
  } // create_page
  //-----------------------------------------------------------------
  function create_initial_data1()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    $site_id = "0";
    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE OTYPE = 'SITE'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($dbw->fetch_row())
    {
      $site_id = $dbw->field_by_name("ID");
    }
    
    $dbw->free_result();
    
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }    
    
    // create languages
    
    if(!empty($_SESSION["hotel_wizzard"]["step2"]["selected_langs"]))
    {
      foreach($_SESSION["hotel_wizzard"]["step2"]["selected_langs"] as $lang)
      {
        if(!$this->create_lang($lang))
        {
          $dbw->rollback_transaction();
          return false;
        }
      }
    }
    
    $query = "SELECT ID, LANG_KEY FROM ${prfx}_LANGUAGE";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $mapping = array();

    while($dbw->fetch_row())
    {
      $mapping[$dbw->field_by_name("LANG_KEY")] = $dbw->field_by_name("ID");
    }

    $dbw->free_result();
    
    // set templates 
    
    $template = $dbw->escape($_SESSION["hotel_wizzard"]["step1"]["selected_template"]);
    $mobile_template = "";
    
    if(!empty($_SESSION[S_CONTEXT]["serial_info"]["email-archives"])) 
    {
      $mobile_template = "mobile-earchive";
    }
    
    if(!empty($_SESSION[S_CONTEXT]["serial_info"]["dms-archives"])) 
    {
      $mobile_template = "";
    }
    
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"])) 
    {
      $mobile_template = "mobile-booking";
    }
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"])) 
    {
      $mobile_template = "mobile-booking";
    }
    if(!empty($_SESSION[S_CONTEXT]["serial_info"]["hotel"])) 
    {
      $mobile_template = "mobile-booking";
    }
    
    $query = "UPDATE ${prfx}_SOBJECT_PROP SET PROP5 = '$template', TEMPLATE_MOBILE = '$mobile_template' WHERE SOBJECT_ID = $site_id";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!$this->create_page("booking", "booking_caption", "booking_content", $site_id, $mapping, "", ""))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_page("calender-entry", "booking_caption", "calender_entry_content", $site_id, $mapping, "", ""))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_page("mobile-entry", "booking_caption", "mobile_entry_content", $site_id, $mapping, "mobile-booking", "mobile-booking"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_page("mobile-booking", "booking_caption", "mobile_entry_content", $site_id, $mapping, "mobile-booking", "mobile-booking"))
    {
      $dbw->rollback_transaction();
      return false;
    }

    if(!$this->create_page("cancellation", "cancellation_caption", "cancellation_content", $site_id, $mapping, "", ""))
    {
      $dbw->rollback_transaction();
      return false;
    }
    
    // create ibooking if necessary
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["ibooking"]))
    {
      if(!$this->create_page("ibooking", "booking_caption", "ibooking_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking", true))
      {
        $dbw->rollback_transaction();
        return false;
      }
      if(!$this->create_page("ibooking-calender", "booking_caption", "ibooking_calender_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking", true))
      {
        $dbw->rollback_transaction();
        return false;
      }
      if(!$this->create_page("ibooking-cancellation", "cancellation_caption", "cancellation_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking", true))
      {
        $dbw->rollback_transaction();
        return false;
      }
      if(!$this->create_page("ibooking-entry", "booking_caption", "ibooking_entry_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking"))
      {
        $dbw->rollback_transaction();
        return false;
      }
      if(!$this->create_page("ibooking-room-entry", "booking_caption", "ibooking_room_entry_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking"))
      {
        $dbw->rollback_transaction();
        return false;
      }
      if(!$this->create_page("ibooking-so-entry", "booking_caption", "ibooking_so_entry_content", $site_id, $mapping, "cmstudio-ibooking", "cmstudio-ibooking"))
      {
        $dbw->rollback_transaction();
        return false;
      }
    } // ibooking
    
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["ibooking"]))
    {
      if(!$this->create_page("email-archive", "earchive_caption", "earchive_content", $site_id, $mapping, "cmstudio-earchive", "mobile-earchive"))
      {
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    // site url

    for($i = 1; $i <= 8; $i++)
    {
      $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'website_url$i'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $insert_necessary = true;

      if($dbw->fetch_row())
      {
        $insert_necessary = false;
      }

      $dbw->free_result();

      if($insert_necessary)
      {
        $new_window = empty($_SESSION["hotel_wizzard"]["step6"]["site_url_new_window$i"]) ? "0" : "1";

        $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, IN_NEW_WINDOW, OTYPE) VALUES ('website_url$i', '1', '$new_window', 'URL')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $oid = $dbw->insert_id();

        // get sort order
        $sort_id = 0;

        $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
        {
          $sort_id = $dbw->field_by_name("SORT_ORDER");
        }

        $dbw->free_result();

        // insert into tree
        $query = "INSERT INTO ${prfx}_SITE_TREE
                  (ITEM_ID, PARENT_ID, SORT_ORDER)
                  VALUES
                  ($oid, $site_id, $sort_id)";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $any_active = false;

        foreach($_SESSION["hotel_wizzard"]["step2"]["selected_langs"] as $lkey)
        {
          $lid = ifnull($mapping[$lkey]);
          $lid = $dbw->escape($lid);

          $caption = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizzard"]["step6"]["site_url_caption$i"][$lkey])));
          $url = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizzard"]["step6"]["site_url$i"][$lkey])));
          $is_active = ($url == "NULL" || $caption == "NULL") ? "0" : "1";

          if($is_active) $any_active = true;

          $query = "INSERT INTO ${prfx}_SOBJECT_PROP
          (SOBJECT_ID, LANGUAGE_ID, PROP1, PROP2, IS_ACTIVE)
          VALUES
          ($oid, $lid, $caption, $url, '$is_active')
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }

        if(!$any_active)
        {
          $query = "DELETE FROM ${prfx}_SITE_TREE WHERE ITEM_ID = $oid";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $query = "DELETE FROM ${prfx}_SITE_OBJECT WHERE ID = $oid";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      } // site url

    } // for site url
    
    // currecny

    $query = "SELECT ID FROM ${prfx}_HTL_CURRENCY WHERE IS_DEFAULT = '1'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $cid = "NULL";

    if($dbw->fetch_row())
    {
      $cid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    $currency = $dbw->escape(ifnull($_SESSION["hotel_wizzard"]["step3"]["selected_currency"]));
    
    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_HTL_CURRENCY (I_NAME, RATE, IS_DEFAULT) VALUES ('$currency', 1, '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $cid = $dbw->insert_id();
    }
    else
    {
      $query = "UPDATE ${prfx}_HTL_CURRENCY SET I_NAME = '$currency' WHERE ID = $cid";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    foreach($_SESSION["hotel_wizzard"]["step2"]["selected_langs"] as $lkey)
    {
      $lid = ifnull($mapping[$lkey]);
      $lid = $dbw->escape($lid);

      $currency_name = $dbw->escape(try_translate($currency, $lkey));

      $query = "DELETE FROM ${prfx}_HTL_CURRENCY_PROPS
      WHERE CURRENCY_ID = $cid AND LANGUAGE_ID = $lid
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $query = "INSERT INTO ${prfx}_HTL_CURRENCY_PROPS
      (CURRENCY_ID, LANGUAGE_ID, NAME, ACTIVE, SIGN)
      VALUES
      ($cid, $lid, '$currency_name', '1', '$currency')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    // season

    $query = "SELECT ID FROM {$prfx}_HTL_SEASON WHERE I_NAME = 'standard_season'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }//if

    $season_required = false;
    
    if(!$dbw->fetch_row())
    {
      $season_required = true;
    }

    $dbw->free_result();
    
    if($season_required)
    {
      $query = "INSERT INTO ${prfx}_HTL_SEASON
                (I_NAME)
                VALUES
                ('standard_season')
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $dbw->rollback_transaction();
        return false;
      }

      $sid = $dbw->insert_id();

      $end_date = strtotime("+18 month");
      
      $FROM_DATE = $dbw->format_datetime(strtotime(date("Ymd 00:00:00")));
      $TO_DATE = $dbw->format_datetime(strtotime(date("Ymd 00:00:00", $end_date)));

      $query = "INSERT INTO ${prfx}_HTL_SEASON_PERIODS (SEASON_ID, FROM_DATE, TO_DATE) VALUES ($sid, '$FROM_DATE', '$TO_DATE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizzard"]["step2"]["selected_langs"] as $lkey)
      {
        $lid = ifnull($mapping[$lkey]);
        $lid = $dbw->escape($lid);
        
        $name = $dbw->escape(try_translate("StandardSeason", $lkey));

        $query = "INSERT INTO ${prfx}_HTL_SEASON_PROPS (SEASON_ID, LANGUAGE_ID, ACTIVE, NAME) VALUES ($sid, $lid, '1', '$name')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }
    
    // ccadmin
    
    $login = "ccadmin";

    $query = "SELECT ID FROM ${prfx}_USER
              WHERE LOGIN = '$login'
             ";
    
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    $usrid = "";
    if($dbw->fetch_row())
    {
      $usrid = $dbw->field_by_name("ID");
    }

    $dbw->free_result();
    
    $password = $_SESSION["hotel_wizzard"]["step1"]["ccadmin_pwd"];
    
    $password = $dbw->escape(crypt($password, $login));
    $hash = $dbw->escape(md5($login . $password));

    $lhash = $dbw->escape(md5("wtyfsd" . $login . "jhkfdf"));

    if(empty($usrid))
    {
      $email = ifnull($NOTIFY_EMAIL);
      $email = null_if_empty($dbw->escape($email));
      $now = $dbw->format_datetime(time());
      
      $is_active = "1";
      
      $query = "INSERT INTO ${prfx}_USER
                (LOGIN, PASSWORD, ENCODED, COOKIE_HASH, LOGIN_HASH, EMAIL, IS_ACTIVE, AGREED, DT_CREATED, DT_CHANGED)
                VALUES
                ('$login','$password', '0', '$hash', '$lhash', $email, '1', '0', '$now', '$now')
               ";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $usrid = $dbw->insert_id();

      // insert the predefined group [Users]
      $query = "INSERT INTO ${prfx}_USER_GROUP (USER_ID, GROUP_ID)
                SELECT $usrid, ID FROM ${prfx}_GROUP WHERE FLAG = 4
               ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      // insert the predefined group [Admins]
      $query = "INSERT INTO ${prfx}_USER_GROUP (USER_ID, GROUP_ID)
                SELECT $usrid, ID FROM ${prfx}_GROUP WHERE FLAG = 2
               ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    else
    {
      $query = "UPDATE ${prfx}_USER SET
                PASSWORD = '$password', COOKIE_HASH = '$hash', LOGIN_HASH = '$lhash'
                WHERE ID = $usrid
               ";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    // settings
    
    $_REQUEST["settings"] = array();
    if(!empty($_SESSION["hotel_wizzard"]["step5"]))
    {
      $_REQUEST["settings"] = $_SESSION["hotel_wizzard"]["step5"];
      magic_quotes_to_req_array($_REQUEST["settings"]);
    }
    
    $settings = array();
    
    $setings["confirmation"] = (!empty($_REQUEST["settings"]["confirmation"])) ? 1 : 0;
    $settings["hide_condition_warning"] = (!empty($_REQUEST["settings"]["hide_condition_warning"])) ? 1 : 0;
    $settings["preselect_agreement"] = (!empty($_REQUEST["settings"]["preselect_agreement"])) ? 1 : 0;
    $settings["no_guests_details"] = (!empty($_REQUEST["settings"]["no_guests_details"])) ? 1 : 0;

    $setings["hide_freerooms"] = (!empty($_REQUEST["settings"]["hide_freerooms"])) ? 1 : 0;
    $setings["hide_notavailable_per_default"] = (!empty($_REQUEST["settings"]["hide_notavailable_per_default"])) ? 1 : 0;
    $setings["hide_freerooms_mobile"] = (!empty($_REQUEST["settings"]["hide_freerooms_mobile"])) ? 1 : 0;
    $setings["round_foreign_currencies"] = (!empty($_REQUEST["settings"]["round_foreign_currencies"])) ? 1 : 0;
    $setings["round_recalculations"] = (!empty($_REQUEST["settings"]["round_recalculations"])) ? 1 : 0;
    
    /*
    $settings["ext_form"] = (!empty($_REQUEST["settings"]["ext_form"])) ? 1 : 0;
    
    $settings["title_field"] = ifnull($_REQUEST["settings"]["title_field"]);
    if(empty($settings["title_field"]) || ($settings["title_field"] != 1 && $settings["title_field"] != 2)) $settings["title_field"] = 0;
    $settings["firstname_field"] = ifnull($_REQUEST["settings"]["firstname_field"]);
    if(empty($settings["firstname_field"]) || ($settings["firstname_field"] != 1 && $settings["firstname_field"] != 2)) $settings["firstname_field"] = 0;
    $settings["company_field"] = ifnull($_REQUEST["settings"]["company_field"]);
    if(empty($settings["company_field"]) || ($settings["company_field"] != 1 && $settings["company_field"] != 2)) $settings["company_field"] = 0;
    $settings["address_field"] = ifnull($_REQUEST["settings"]["address_field"]);
    if(empty($settings["address_field"]) || ($settings["address_field"] != 1 && $settings["address_field"] != 2)) $settings["address_field"] = 0;
    $settings["zip_field"] = ifnull($_REQUEST["settings"]["zip_field"]);
    if(empty($settings["zip_field"]) || ($settings["zip_field"] != 1 && $settings["zip_field"] != 2)) $settings["zip_field"] = 0;
    $settings["city_field"] = ifnull($_REQUEST["settings"]["city_field"]);
    if(empty($settings["city_field"]) || ($settings["city_field"] != 1 && $settings["city_field"] != 2)) $settings["city_field"] = 0;
    $settings["country_field"] = ifnull($_REQUEST["settings"]["country_field"]);
    if(empty($settings["country_field"]) || ($settings["country_field"] != 1 && $settings["country_field"] != 2)) $settings["country_field"] = 0;
    $settings["phone_field"] = ifnull($_REQUEST["settings"]["phone_field"]);
    if(empty($settings["phone_field"]) || ($settings["phone_field"] != 1 && $settings["phone_field"] != 2)) $settings["phone_field"] = 0;
    $settings["comment_field"] = ifnull($_REQUEST["settings"]["comment_field"]);
    if(empty($settings["comment_field"]) || ($settings["comment_field"] != 1 && $settings["comment_field"] != 2)) $settings["comment_field"] = 0;

              EXT_FORM = $settings[ext_form],
              TITLE_FIELD = $settings[title_field],
              FIRSTNAME_FIELD = $settings[firstname_field],
              COMPANY_FIELD = $settings[company_field],
              ADDRESS_FIELD = $settings[address_field],
              ZIP_FIELD = $settings[zip_field],
              CITY_FIELD = $settings[city_field],
              COUNTRY_FIELD = $settings[country_field],
              PHONE_FIELD = $settings[phone_field],
              COMMENT_FIELD = $settings[comment_field],
    */
    
    $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
              SET
              CONFIRMATION_REQUIRED = $setings[confirmation],

              HIDE_FREEROOM_INFO = $setings[hide_freerooms],
              HIDE_NOTAVAILABLE_PER_DEFAULT = $setings[hide_notavailable_per_default],
              HIDE_FREEROOM_MOBILE = $setings[hide_freerooms_mobile],
              ROUND_FOREIGN_CURRENCIES = $setings[round_foreign_currencies],
              ROUND_RECALCULATIONS = $setings[round_recalculations],
              
              HIDE_CONDITION_WARNING = $settings[hide_condition_warning],
              PRESELECT_AGREEMENT = $settings[preselect_agreement],
              NO_GUESTS_DETAILS = $settings[no_guests_details]
              
              ";
              
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $_REQUEST["settings"] = array();
    if(!empty($_SESSION["hotel_wizzard"]["step7"]))
    {
      $_REQUEST["settings"] = $_SESSION["hotel_wizzard"]["step7"];
      magic_quotes_to_req_array($_REQUEST["settings"]);
    }

    if(!empty($_SESSION["hotel_wizzard"]["step1"]["tripadvisor"]))
    {
      $this->save_trip_advisor_settings();
    }

    if(!empty($_SESSION["hotel_wizzard"]["step1"]["trivago"]))
    {
      $this->save_trivago_settings();
    }
    
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["earchive_serial"])) 
      add_serial($_SESSION["hotel_wizzard"]["step1"]["earchive_serial"], false);
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["dc_serial"])) 
      add_serial($_SESSION["hotel_wizzard"]["step1"]["dc_serial"], false);
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["tripadvisor_serial"])) 
      add_serial($_SESSION["hotel_wizzard"]["step1"]["tripadvisor_serial"], false);
    if(!empty($_SESSION["hotel_wizzard"]["step1"]["trivago_serial"])) 
      add_serial($_SESSION["hotel_wizzard"]["step1"]["trivago_serial"], false);

    if(!empty($_SESSION["hotel_wizzard"]["step1"]["activate_sns"])) 
      activate_sn_internet();
    
    return true;
  } // create_initial_data1
  //-----------------------------------------------------------------
  function create_initial_data2()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    
    //debug_message(print_r($_SESSION["hotel_wizzard"], true));

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    // settings
    
    $_REQUEST["settings"] = array();
    if(!empty($_SESSION["hotel_wizzard"]["step1"]))
    {
      $_REQUEST["settings"] = $_SESSION["hotel_wizzard"]["step1"];
      magic_quotes_to_req_array($_REQUEST["settings"]);
    }
    
    $settings = array();
    
    $setings["confirmation"] = (!empty($_REQUEST["settings"]["confirmation"])) ? 1 : 0;
    $settings["min_nights_method"] = null_if_empty($dbw->escape($_REQUEST["settings"]["min_nights_method"]));

    $setings["payment_ccard"] = (!empty($_REQUEST["settings"]["payment_ccard"])) ? 1 : 0;
    $setings["payment_bill"] = (!empty($_REQUEST["settings"]["payment_bill"])) ? 1 : 0;
    $setings["payment_bill_cc"] = (!empty($_REQUEST["settings"]["payment_bill_cc"])) ? 1 : 0;

    $setings["american_express"] = (!empty($_REQUEST["settings"]["american_express"])) ? 1 : 0;
    $setings["master_card"] = (!empty($_REQUEST["settings"]["master_card"])) ? 1 : 0;
    $setings["dinner_club"] = (!empty($_REQUEST["settings"]["dinner_club"])) ? 1 : 0;
    $setings["visa"] = (!empty($_REQUEST["settings"]["visa"])) ? 1 : 0;
    $setings["jsb"] = (!empty($_REQUEST["settings"]["jsb"])) ? 1 : 0;
    
    $settings["ext_form"] = (!empty($_REQUEST["settings"]["ext_form"])) ? 1 : 0;
    
    $settings["title_field"] = ifnull($_REQUEST["settings"]["title_field"]);
    if(empty($settings["title_field"]) || ($settings["title_field"] != 1 && $settings["title_field"] != 2)) $settings["title_field"] = 0;
    $settings["firstname_field"] = ifnull($_REQUEST["settings"]["firstname_field"]);
    if(empty($settings["firstname_field"]) || ($settings["firstname_field"] != 1 && $settings["firstname_field"] != 2)) $settings["firstname_field"] = 0;
    $settings["company_field"] = ifnull($_REQUEST["settings"]["company_field"]);
    if(empty($settings["company_field"]) || ($settings["company_field"] != 1 && $settings["company_field"] != 2)) $settings["company_field"] = 0;
    $settings["address_field"] = ifnull($_REQUEST["settings"]["address_field"]);
    if(empty($settings["address_field"]) || ($settings["address_field"] != 1 && $settings["address_field"] != 2)) $settings["address_field"] = 0;
    $settings["zip_field"] = ifnull($_REQUEST["settings"]["zip_field"]);
    if(empty($settings["zip_field"]) || ($settings["zip_field"] != 1 && $settings["zip_field"] != 2)) $settings["zip_field"] = 0;
    $settings["city_field"] = ifnull($_REQUEST["settings"]["city_field"]);
    if(empty($settings["city_field"]) || ($settings["city_field"] != 1 && $settings["city_field"] != 2)) $settings["city_field"] = 0;
    $settings["country_field"] = ifnull($_REQUEST["settings"]["country_field"]);
    if(empty($settings["country_field"]) || ($settings["country_field"] != 1 && $settings["country_field"] != 2)) $settings["country_field"] = 0;
    $settings["phone_field"] = ifnull($_REQUEST["settings"]["phone_field"]);
    if(empty($settings["phone_field"]) || ($settings["phone_field"] != 1 && $settings["phone_field"] != 2)) $settings["phone_field"] = 0;
    $settings["comment_field"] = ifnull($_REQUEST["settings"]["comment_field"]);
    if(empty($settings["comment_field"]) || ($settings["comment_field"] != 1 && $settings["comment_field"] != 2)) $settings["comment_field"] = 0;
    
    $query = "UPDATE {$prfx}_HTL_BOOKING_SETTINGS
              SET
              CONFIRMATION_REQUIRED = $setings[confirmation],
              MIN_NIGHTS_METHOD = $settings[min_nights_method],
              
              PAYMENT_CCARD = $setings[payment_ccard],
              PAYMENT_BILL = $setings[payment_bill],
              PAYMENT_BILL_CC = $setings[payment_bill_cc],
              
              AMERICAN_EXPRESS = '$setings[american_express]',
              MASTER_CARD = '$setings[master_card]',
              DINNER_CLUB = '$setings[dinner_club]',
              VISA = '$setings[visa]',
              JSB = '$setings[jsb]',
              
              EXT_FORM = $settings[ext_form],
              TITLE_FIELD = $settings[title_field],
              FIRSTNAME_FIELD = $settings[firstname_field],
              COMPANY_FIELD = $settings[company_field],
              ADDRESS_FIELD = $settings[address_field],
              ZIP_FIELD = $settings[zip_field],
              CITY_FIELD = $settings[city_field],
              COUNTRY_FIELD = $settings[country_field],
              PHONE_FIELD = $settings[phone_field],
              COMMENT_FIELD = $settings[comment_field]
              
              ";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    // currecny

    $query = "SELECT ID FROM ${prfx}_HTL_CURRENCY WHERE IS_DEFAULT = '1'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $cid = "NULL";

    if($dbw->fetch_row())
    {
      $cid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    $currency = $dbw->escape(ifnull($_SESSION["hotel_wizzard"]["step1"]["selected_currency"]));
    
    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_HTL_CURRENCY (I_NAME, RATE, IS_DEFAULT) VALUES ('$currency', 1, '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $cid = $dbw->insert_id();
    }
    else
    {
      $query = "UPDATE ${prfx}_HTL_CURRENCY SET I_NAME = '$currency' WHERE ID = $cid";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    $lng = GetLanguage();

    $lang_list = array();
    $lng->fetch_language_list($lang_list);
    foreach($lang_list as $lid => $lang_info)
    {
      $lid = $dbw->escape($lid);

      $lkey = ifnull($lang_info["key"]);

      $currency_name = $dbw->escape(try_translate($currency, $lkey));

      $query = "DELETE FROM ${prfx}_HTL_CURRENCY_PROPS
      WHERE CURRENCY_ID = $cid AND LANGUAGE_ID = $lid
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $query = "INSERT INTO ${prfx}_HTL_CURRENCY_PROPS
      (CURRENCY_ID, LANGUAGE_ID, NAME, ACTIVE, SIGN)
      VALUES
      ($cid, $lid, '$currency_name', '1', '$currency')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    // ccadmin
    
    $login = "ccadmin";

    $query = "SELECT ID FROM ${prfx}_USER
              WHERE LOGIN = '$login'
             ";
    
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    
    $usrid = "";
    if($dbw->fetch_row())
    {
      $usrid = $dbw->field_by_name("ID");
    }

    $dbw->free_result();
    
    $password = $_SESSION["hotel_wizzard"]["step1"]["ccadmin_pwd"];
    
    $password = $dbw->escape(crypt($password, $login));
    $hash = $dbw->escape(md5($login . $password));

    $lhash = $dbw->escape(md5("wtyfsd" . $login . "jhkfdf"));

    if(empty($usrid))
    {
      $email = ifnull($NOTIFY_EMAIL);
      $email = null_if_empty($dbw->escape($email));
      $now = $dbw->format_datetime(time());
      
      $is_active = "1";
      
      $query = "INSERT INTO ${prfx}_USER
                (LOGIN, PASSWORD, ENCODED, COOKIE_HASH, LOGIN_HASH, EMAIL, IS_ACTIVE, AGREED, DT_CREATED, DT_CHANGED)
                VALUES
                ('$login','$password', '0', '$hash', '$lhash', $email, '1', '0', '$now', '$now')
               ";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $usrid = $dbw->insert_id();

      // insert the predefined group [Users]
      $query = "INSERT INTO ${prfx}_USER_GROUP (USER_ID, GROUP_ID)
                SELECT $usrid, ID FROM ${prfx}_GROUP WHERE FLAG = 4
               ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      // insert the predefined group [Admins]
      $query = "INSERT INTO ${prfx}_USER_GROUP (USER_ID, GROUP_ID)
                SELECT $usrid, ID FROM ${prfx}_GROUP WHERE FLAG = 2
               ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    else
    {
      $query = "UPDATE ${prfx}_USER SET
                PASSWORD = '$password', COOKIE_HASH = '$hash', LOGIN_HASH = '$lhash'
                WHERE ID = $usrid
               ";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }
    
    // default texts
    
    $setting_id = "";

    $query = "SELECT ID FROM ${prfx}_HTL_BOOKING_SETTINGS";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $setting_id = "NULL";
    if($dbw->fetch_row())
    {
      $setting_id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($lang_list as $lid => $lang_info)
    {
      $lid = $dbw->escape($lid);

      $lkey = ifnull($lang_info["key"]);

      $query = "DELETE FROM ${prfx}_HTL_BOOKING_SETTINGS_PROP
      WHERE SETTING_ID = $setting_id AND LANG_ID = $lid
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $explain_text = ifnull($_SESSION["hotel_wizzard"]["explain_text"][$lid]);
      $explain_text = $dbw->escape($explain_text);

      $payment_text = ifnull($_SESSION["hotel_wizzard"]["payment_text"][$lid]);
      $payment_text = $dbw->escape($payment_text);

      $payment_text2 = ifnull($_SESSION["hotel_wizzard"]["payment_text2"][$lid]);
      $payment_text2 = $dbw->escape($payment_text2);

      $specoffer_text = ifnull($_SESSION["hotel_wizzard"]["specoffer_text"][$lid]);
      $specoffer_text = $dbw->escape($specoffer_text);
      
      $bill_text = ifnull($_SESSION["hotel_wizzard"]["bill_text"][$lid]);
      $bill_text = $dbw->escape($bill_text);
      
      $bill_text_cc = ifnull($_SESSION["hotel_wizzard"]["bill_text_cc"][$lid]);
      $bill_text_cc = $dbw->escape($bill_text_cc);
      
      $online_text = ifnull($_SESSION["hotel_wizzard"]["online_text"][$lid]);
      $online_text = $dbw->escape($online_text);
      
      $privacy_text = ifnull($_SESSION["hotel_wizzard"]["privacy_text"][$lid]);
      $privacy_text = $dbw->escape($privacy_text);

      $query = "INSERT INTO ${prfx}_HTL_BOOKING_SETTINGS_PROP
      (SETTING_ID, LANG_ID, EXPLAIN_TEXT, PAYMENT_TEXT, PAYMENT_TEXT2, SPECOFFER_TEXT, BILL_TEXT, BILL_CC_TEXT, ONLINE_PAYMENT_TEXT, DATAPRIVACY_TEXT)
      VALUES
      ($setting_id, $lid, '$explain_text', '$payment_text', '$payment_text2', '$specoffer_text', '$bill_text', '$bill_text_cc', '$online_text', '$privacy_text')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }  

    // emails
    if(!$this->create_etemplate(1, "Statusmeldung: Rezeption - Buchungseingang"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(2, "Statusmeldung: Rezeption - Stornierungseingang"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(3, "Statusmeldung: GAST - Bestätigung des Buchungseingangs - KEINE Buchungsbestätigung", "{user}"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(4, "Statusmeldung: GAST - Automatische Bestätigung der Buchungsstornierung", "{user}"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(5, "Statusmeldung: GAST - Buchungsbestätigung automatisch", "{user}"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(6, "Statusmeldung: GAST - Buchungsanfrage abgelehnt", "{user}"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(7, "Benachrichtigung der Rezeption/Buchungsabteilung über die erfolgreiche Online-Zahlung"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(8, "Benachrichtigung vor der Anreise"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    if(!$this->create_etemplate(9, "Benachrichtigung nach der Abreise"))
    {
      $dbw->rollback_transaction();
      return false;
    }
    
    // cancellation
    
    foreach($lang_list as $lid => $lang_info)
    {
      $lid = $dbw->escape($lid);

      $lkey = ifnull($lang_info["key"]);

      $cancellation_content = ifnull($_SESSION["hotel_wizzard"]["cancellation_content"][$lid]);
      $ibooking_cancellation_content = "<div id='booking_content'>" . $cancellation_content . "</div>";

      $cancellation_content = $dbw->escape($cancellation_content);

      $query = "UPDATE ${prfx}_SOBJECT_PROP SET
      CNT_TEXT = '$cancellation_content', PUBLISHED_CNT = '$cancellation_content'
      WHERE LANGUAGE_ID = $lid AND SOBJECT_ID IN
      (SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'cancellation')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $ibooking_cancellation_content = $dbw->escape($ibooking_cancellation_content);

      $query = "UPDATE ${prfx}_SOBJECT_PROP SET
      CNT_TEXT = '$ibooking_cancellation_content', PUBLISHED_CNT = '$ibooking_cancellation_content'
      WHERE LANGUAGE_ID = $lid AND SOBJECT_ID IN
      (SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'ibooking-cancellation')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }  
    
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    return true;
  } // create_initial_data2  
  //-----------------------------------------------------------------
  function create_initial_data()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $NOTIFY_EMAIL;

    global $HOTEL_INITIAL_TEXTS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID, LANG_KEY FROM ${prfx}_LANGUAGE";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $mapping = array();
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $mapping[$dbw->field_by_name("ID")] = $dbw->field_by_name("LANG_KEY");
    }

    $dbw->free_result();

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }


    //------------------------------------------------------------------------
    // set default template
    $site_id = "0";
    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE OTYPE = 'SITE'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($dbw->fetch_row())
    {
      $site_id = $dbw->field_by_name("ID");
    }

    $template = "hotel";
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"])) $template = "ibooking";
    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"]))
    {
      $template = ifnull($_SESSION["hotel_wizard"]["selected_template"]);

      if(empty($template)) $template = "quickbooking_v1";
    }

    $query = "UPDATE ${prfx}_SOBJECT_PROP SET PROP5 = '$template' WHERE SOBJECT_ID = $site_id";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }
    //------------------------------------------------------------------------

    // set home to entry

    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"]))
    {
      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["calender_entry_content"]));
        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));

        $query = "UPDATE ${prfx}_SOBJECT_PROP SET
        PROP1 = '$caption',
        CNT_TEXT = '$text',
        PUBLISHED_CNT = '$text'
        WHERE SOBJECT_ID IN (SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'home') AND LANGUAGE_ID = $lid";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    }

    //------------------------------------------------------------------------
    // mobile entry site

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'mobile-entry'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    if($dbw->fetch_row())
    {
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('mobile-entry', '0', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $oid = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["mobile_entry_content"]));
        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));

        $template = "'mobile_booking'";

        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE, PROP5)
        VALUES
        ($oid, $lid, '$caption', '$text', '$text', '1', $template)
        ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // mobile_entry
    //------------------------------------------------------------------------
    // calender_entry

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'calender-entry'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    if($dbw->fetch_row())
    {
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"])) $show_menu = "0";
      else                                                                 $show_menu = "1";

      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('calender-entry', '$show_menu', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $oid = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["calender_entry_content"]));
        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));

        $template = "'hotel_booking'";
        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"])) $template = "NULL";
        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"])) $template = "NULL";

        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE, PROP5)
        VALUES
        ($oid, $lid, '$caption', '$text', '$text', '1', $template)
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // calender_entry_content
    //------------------------------------------------------------------------
    // booking site

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'booking'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    if($dbw->fetch_row())
    {
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('booking', '0', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $oid = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_content"]));
        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));

        $template = "'hotel_booking'";
        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"])) $template = "NULL";
        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"])) $template = "NULL";

        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE, PROP5)
        VALUES
        ($oid, $lid, '$caption', '$text', '$text', '1', $template)
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // booking
    //------------------------------------------------------------------------
    // mobile booking site

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'mobile-booking'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    if($dbw->fetch_row())
    {
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('mobile-booking', '0', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $oid = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["mobile_booking_content"]));
        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));

        $template = "'mobile_booking'";

        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE, PROP5)
        VALUES
        ($oid, $lid, '$caption', '$text', '$text', '1', $template)
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // mobile booking
    //------------------------------------------------------------------------
    // cancellation site

    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'cancellation'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    if($dbw->fetch_row())
    {
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('cancellation', '0', 'PAGE')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $oid = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($oid, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $text = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["cancellation_text"][$lid]));
        if(empty($text)) $text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["cancellation_content"]));

        $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["cancellation_caption"]));

        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE)
        VALUES
        ($oid, $lid, '$caption', '$text', '$text', '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // cancellation
    //------------------------------------------------------------------------

    // site url

    for($i = 1; $i <= 5; $i++)
    {
      $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'website_url$i'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $insert_necessary = true;

      if($dbw->fetch_row())
      {
        $insert_necessary = false;
      }

      $dbw->free_result();

      if($insert_necessary)
      {
        $new_window = empty($_SESSION["hotel_wizard"]["site_url_new_window$i"]) ? "0" : "1";

        $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, IN_NEW_WINDOW, OTYPE) VALUES ('website_url$i', '1', '$new_window', 'URL')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $oid = $dbw->insert_id();

        // get sort order
        $sort_id = 0;

        $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
        {
          $sort_id = $dbw->field_by_name("SORT_ORDER");
        }

        $dbw->free_result();

        // insert into tree
        $query = "INSERT INTO ${prfx}_SITE_TREE
                  (ITEM_ID, PARENT_ID, SORT_ORDER)
                  VALUES
                  ($oid, $site_id, $sort_id)";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $any_active = false;

        foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
        {
          $lid = $dbw->escape($lid);

          $lkey = ifnull($mapping[$lid]);

          $caption = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizard"]["site_url_caption$i"][$lid])));
          $url = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizard"]["site_url$i"][$lid])));
          $is_active = ($url == "NULL" || $caption == "NULL") ? "0" : "1";

          if($is_active) $any_active = true;

          $query = "INSERT INTO ${prfx}_SOBJECT_PROP
          (SOBJECT_ID, LANGUAGE_ID, PROP1, PROP2, IS_ACTIVE)
          VALUES
          ($oid, $lid, $caption, $url, '$is_active')
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }

        if(!$any_active)
        {
          $query = "DELETE FROM ${prfx}_SITE_TREE WHERE ITEM_ID = $oid";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $query = "DELETE FROM ${prfx}_SITE_OBJECT WHERE ID = $oid";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      } // site url

    } // for site url

    //------------------------------------------------------------------------

    // ibooking

    if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
    {
      // booking_entry site

      $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'booking-entry'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $insert_necessary = true;

      if($dbw->fetch_row())
      {
        $insert_necessary = false;
      }

      $dbw->free_result();

      if($insert_necessary)
      {
        $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('booking-entry', '0', 'PAGE')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $oid = $dbw->insert_id();

        // get sort order
        $sort_id = 0;

        $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
        {
          $sort_id = $dbw->field_by_name("SORT_ORDER");
        }

        $dbw->free_result();

        // insert into tree
        $query = "INSERT INTO ${prfx}_SITE_TREE
                  (ITEM_ID, PARENT_ID, SORT_ORDER)
                  VALUES
                  ($oid, $site_id, $sort_id)";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
        {
          $lid = $dbw->escape($lid);

          $lkey = ifnull($mapping[$lid]);

          $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));
          $text = $dbw->escape("{HOTEL_IBOOKING_FORM}");

          $query = "INSERT INTO ${prfx}_SOBJECT_PROP
          (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE)
          VALUES
          ($oid, $lid, '$caption', '$text', '$text', '1')
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      } // booking_entry
      //------------------------------------------------------------------------
      // so booking_entry site

      $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'so-booking-entry'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $insert_necessary = true;

      if($dbw->fetch_row())
      {
        $insert_necessary = false;
      }

      $dbw->free_result();

      if($insert_necessary)
      {
        $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('so-booking-entry', '0', 'PAGE')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $oid = $dbw->insert_id();

        // get sort order
        $sort_id = 0;

        $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        if($dbw->fetch_row())
        {
          $sort_id = $dbw->field_by_name("SORT_ORDER");
        }

        $dbw->free_result();

        // insert into tree
        $query = "INSERT INTO ${prfx}_SITE_TREE
                  (ITEM_ID, PARENT_ID, SORT_ORDER)
                  VALUES
                  ($oid, $site_id, $sort_id)";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
        {
          $lid = $dbw->escape($lid);

          $lkey = ifnull($mapping[$lid]);

          $caption = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["booking_caption"]));
          $text = $dbw->escape("{HOTEL_SO_IBOOKING_FORM}");

          $query = "INSERT INTO ${prfx}_SOBJECT_PROP
          (SOBJECT_ID, LANGUAGE_ID, PROP1, CNT_TEXT, PUBLISHED_CNT, IS_ACTIVE)
          VALUES
          ($oid, $lid, '$caption', '$text', '$text', '1')
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      } // so booking_entry
    } // iboooking
    //------------------------------------------------------------------------

    $receiver = ifnull($_SESSION["user_email"]);
    if(empty($receiver)) $receiver = ifnull($NOTIFY_EMAIL);

    $receiver = $dbw->escape($receiver);

    // email1

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: Rezeption - Buchungseingang'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: Rezeption - Buchungseingang', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email1_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email1_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject1"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email1_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body1"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 1

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL1_ID = '$eid', EMAIL_RECEIVER1 = '$receiver'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // email2

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: Rezeption - Stornierungseingang'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: Rezeption - Stornierungseingang', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email2_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email2_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject2"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email2_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body2"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 2

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL2_ID = '$eid', EMAIL_RECEIVER2 = '$receiver'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // email3

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: GAST - Bestätigung des Buchungseingangs - KEINE Buchungsbestätigung'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: GAST - Bestätigung des Buchungseingangs - KEINE Buchungsbestätigung', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email3_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email3_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject3"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email3_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body3"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 3

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL3_ID = '$eid', EMAIL_RECEIVER3 = '{user}'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // email4

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: GAST - Automatische Bestätigung der Buchungsstornierung'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: GAST - Automatische Bestätigung der Buchungsstornierung', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email4_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email4_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject4"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email4_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body4"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 4

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL4_ID = '$eid', EMAIL_RECEIVER4 = '{user}'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // email5

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: GAST - Buchungsbestätigung automatisch'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: GAST - Buchungsbestätigung automatisch', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email5_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email5_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject5"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email5_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body5"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 5

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL5_ID = '$eid', EMAIL_RECEIVER5 = '{user}'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // email6

    $query = "SELECT ID FROM ${prfx}_EMAIL_TEMPLATE WHERE NAME = 'Statusmeldung: GAST - Buchungsanfrage abgelehnt'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $eid = "NULL";

    if($dbw->fetch_row())
    {
      $eid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_EMAIL_TEMPLATE (NAME, MAIL_TYPE, USER_COMM_EMAIL) VALUES ('Statusmeldung: GAST - Buchungsanfrage abgelehnt', 'text/plain', '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $eid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $sender = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email6_sender"][$lid]));
        if(empty($sender)) $sender = $receiver;
        $sender = null_if_empty($sender);

        $subject = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email6_subject"][$lid]));
        if(empty($subject)) $subject = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_subject6"]));
        $subject = null_if_empty($subject);

        $body = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["email6_body"][$lid]));
        if(empty($body)) $body = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["email_body6"]));
        $body = null_if_empty($body);

        if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["ibooking"]))
        {
          $body = str_replace("{CANCEL_ORDER_LINK:cancellation}", "{IBOOKING_CANCEL_ORDER_LINK}", $body);
        }

        $query = "INSERT INTO ${prfx}_EMLTEMPL_CONTENT
        (EMAIL_TEMPLATE_ID, LANGUAGE_ID, SENDER, SUBJECT, BODY, IS_ACTIVE)
        VALUES
        ($eid, $lid, $sender, $subject, $body, '1')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // email 6

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET EMAIL_TPL6_ID = '$eid', EMAIL_RECEIVER6 = '{user}'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // user password
    if(!empty($_SESSION["hotel_wizard"]["admin_pwd"]))
    {
      $password = $dbw->escape(crypt($_SESSION["hotel_wizard"]["admin_pwd"], "administrator"));
      $hash = $dbw->escape(md5("administrator" . $_SESSION["hotel_wizard"]["admin_pwd"]));

      $query = "UPDATE ${prfx}_USER SET PASSWORD = '$password', COOKIE_HASH = '$hash' WHERE LOGIN = 'administrator'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //------------------------------------------------------------------------

    $in_list = implode(",", $_SESSION["hotel_wizard"]["selected_langs"]);

    $query = "UPDATE ${prfx}_LANGUAGE SET IS_ENABLED = '0' WHERE ID NOT IN ($in_list)";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    //------------------------------------------------------------------------

    // currecny

    $query = "SELECT ID FROM ${prfx}_HTL_CURRENCY WHERE IS_DEFAULT = '1'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $cid = "NULL";

    if($dbw->fetch_row())
    {
      $cid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $currency = $dbw->escape(ifnull($_SESSION["hotel_wizard"]["selected_currency"]));

      $query = "INSERT INTO ${prfx}_HTL_CURRENCY (I_NAME, RATE, IS_DEFAULT) VALUES ('$currency', 1, '1')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $cid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $currency_name = $dbw->escape(try_translate($currency, $lkey));

        $query = "INSERT INTO ${prfx}_HTL_CURRENCY_PROPS
        (CURRENCY_ID, LANGUAGE_ID, NAME, ACTIVE, SIGN)
        VALUES
        ($cid, $lid, '$currency_name', '1', '$currency')
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }
    } // currency

    //------------------------------------------------------------------------

    // rooms
    $cnt = 0;
    $room_mappings = array();

    foreach($_SESSION["hotel_wizard"]["selected_rooms"] as $room)
    {
      if($room == -1) continue;

      $cnt++;

      $room = $dbw->escape($room);

      $query = "SELECT ID FROM ${prfx}_HTL_ROOMS WHERE I_NAME = '$room'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $insert_necessary = true;

      $rid = "NULL";

      if($dbw->fetch_row())
      {
        $rid = $dbw->field_by_name("ID");
        $room_mappings[$room] = $rid;
        $insert_necessary = false;
      }

      $dbw->free_result();

      if($insert_necessary)
      {
        $room_count = $_SESSION["hotel_wizard"]["room_count"][$room];
        if(empty($room_count) || !is_numeric($room_count)) $room_count = 1;

        $min_persons = $_SESSION["hotel_wizard"]["room_min_persons"][$room];
        if(empty($min_persons) || !is_numeric($min_persons)) $min_persons = 1;

        $max_persons = $_SESSION["hotel_wizard"]["room_max_persons"][$room];
        if(empty($max_persons) || !is_numeric($max_persons)) $max_persons = 1;

        $std_allocation = $_SESSION["hotel_wizard"]["room_std_allocation"][$room];
        if(empty($std_allocation) || !is_numeric($std_allocation)) $std_allocation = 1;

        $query = "INSERT INTO ${prfx}_HTL_ROOMS
                  (I_NAME, ROOMS_COUNT, SORT_ORDER, MIN_PERSONS, MAX_PERSONS, MAX_ADULTS, STANDARD_ALLOCATION, PRICING_TYPE, ROOM_TYPE)
                  VALUES
                  ('$room', $room_count, $cnt, $min_persons, $max_persons, $max_persons, $std_allocation, '1', 'hotel_room')";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }

        $rid = $dbw->insert_id();
        $room_mappings[$room] = $rid;

        foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
        {
          $lid = $dbw->escape($lid);

          $lkey = ifnull($mapping[$lid]);

          $caption = ifnull($_SESSION["hotel_wizard"]["room_caption"][$room][$lid]);
          if(empty($caption)) $caption = $room;

          $is_active = "1";
          $caption = $dbw->escape($caption);
          if(empty($caption)) $is_active = "0";

          $query = "INSERT INTO ${prfx}_HTL_ROOMS_PROPS
          (ROOM_ID, LANGUAGE_ID, TYPE, CATEGORY, ACTIVE)
          VALUES
          ($rid, $lid, '$caption', '$caption', '$is_active')
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      }
    } // rooms

    //------------------------------------------------------------------------

    // price lists

    $query = "SELECT ID FROM ${prfx}_HTL_PRICELIST WHERE I_NAME = 'standard_pricelist'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $insert_necessary = true;

    $sid = "";
    $pid = "";

    if($dbw->fetch_row())
    {
      $pid = $dbw->field_by_name("ID");
      $insert_necessary = false;
    }

    $dbw->free_result();

    if($insert_necessary)
    {
      $query = "INSERT INTO ${prfx}_HTL_PRICELIST
                (I_NAME, ACTIVE, TYPE, PAGE, BOOKING_PAGE)
                VALUES
                ('standard_pricelist', 1, 1, 'home', 'booking')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $pid = $dbw->insert_id();

      foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
      {
        $lid = $dbw->escape($lid);

        $lkey = ifnull($mapping[$lid]);

        $caption = $dbw->escape(try_translate("StandardPricelist", $lkey));

        $query = "INSERT INTO ${prfx}_HTL_PRICELIST_PROPS
        (PRICELIST_ID, LANGUAGE_ID, NAME, ACTIVE)
        VALUES
        ($pid, $lid, '$caption', 1)
        ";
        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }
      }

      $query = "SELECT ID FROM {$prfx}_HTL_SEASON WHERE I_NAME = 'standard_season'";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }//if

      if($dbw->fetch_row())
      {
        $sid = $dbw->field_by_name("ID");
      }

      $dbw->free_result();

      if(!empty($pid) && !empty($sid))
      {
        foreach($room_mappings as $room => $rid)
        {
          $rid = $dbw->escape($rid);
          $sid = $dbw->escape($sid);

          $price = ifnull($_SESSION["hotel_wizard"]["room_price"][$room]);
          $price = str_replace(",", ".", $price);
          if(empty($price) || !is_numeric($price)) continue;

          $query = "INSERT INTO ${prfx}_HTL_PRICE
          (PRICELIST_ID, ROOM_ID, SEASON_ID, PRICE1, SPECIAL_PRICE, MIN_NIGHTS)
          VALUES
          ($pid, $rid, $sid, $price, 'SEASON_PRICE', 1)
          ";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }
        }
      }
    }

    //------------------------------------------------------------------------

    // default texts

    $american_express = empty($_SESSION["hotel_wizard"]["american_express"]) ? "0" : "1";
    $visa = empty($_SESSION["hotel_wizard"]["visa"]) ? "0" : "1";
    $master_card = empty($_SESSION["hotel_wizard"]["master_card"]) ? "0" : "1";
    $dinner_club = empty($_SESSION["hotel_wizard"]["dinner_club"]) ? "0" : "1";
    $jsb = empty($_SESSION["hotel_wizard"]["jsb"]) ? "0" : "1";

    $admin_confirmation = empty($_SESSION["hotel_wizard"]["admin_confirmation"]) ? "0" : "1";
    $hide_freerooms = empty($_SESSION["hotel_wizard"]["hide_freerooms"]) ? "0" : "1";
    $hide_freerooms_mobile = empty($_SESSION["hotel_wizard"]["hide_freerooms_mobile"]) ? "0" : "1";

    $logo_picture = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizard"]["logo_picture"])));
    $background_picture = null_if_empty($dbw->escape(ifnull($_SESSION["hotel_wizard"]["background_picture"])));

    $query = "UPDATE ${prfx}_HTL_BOOKING_SETTINGS SET
              BOOKING_PAGE = 'booking',
              CONFIRMATION_REQUIRED = '$admin_confirmation',
              HIDE_FREEROOM_INFO = '$hide_freerooms',
              HIDE_FREEROOM_MOBILE = '$hide_freerooms_mobile',
              CURRENCIES = '1',
              ROUND_FOREIGN_CURRENCIES = '0',
              PAYMENT_DIRECT_DEBIT = '0',
              PAYMENT_BILL = '0',
              PAYMENT_CCARD = '1',
              AMERICAN_EXPRESS = '$american_express',
              MASTER_CARD = '$master_card',
              DINNER_CLUB = '$dinner_club',
              VISA = '$visa',
              JSB = '$jsb',
              BACKGROUND = $background_picture,
              LOGO = $logo_picture,
              EXPLAIN_TEXT_ACTIVE = '1',
              PAYMENT_TEXT_ACTIVE = '1',
              PAYMENT_TEXT2_ACTIVE = '1'
              ";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $setting_id = "";

    $query = "SELECT ID FROM ${prfx}_HTL_BOOKING_SETTINGS";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $setting_id = "NULL";
    if($dbw->fetch_row())
    {
      $setting_id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    foreach($_SESSION["hotel_wizard"]["selected_langs"] as $lid)
    {
      $lid = $dbw->escape($lid);

      $lkey = ifnull($mapping[$lid]);

      $query = "DELETE FROM ${prfx}_HTL_BOOKING_SETTINGS_PROP
      WHERE SETTING_ID = $setting_id AND LANG_ID = $lid
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
      
      $explain_text = ifnull($_SESSION["hotel_wizard"]["explain_text"][$lid]);
      if(empty($explain_text)) $explain_text = ifnull($HOTEL_INITIAL_TEXTS[$lkey]["explain_text"]);
      $explain_text = $dbw->escape($explain_text);

      $payment_text = ifnull($_SESSION["hotel_wizard"]["payment_text"][$lid]);
      if(empty($payment_text)) $payment_text = ifnull($HOTEL_INITIAL_TEXTS[$lkey]["payment_text"]);
      $payment_text = $dbw->escape($payment_text);

      $payment_text2 = ifnull($_SESSION["hotel_wizard"]["payment_text2"][$lid]);
      if(empty($payment_text2)) $payment_text2 = ifnull($HOTEL_INITIAL_TEXTS[$lkey]["payment_text2"]);
      $payment_text2 = $dbw->escape($payment_text2);

      $dd_text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["dd_text"]));
      $bill_text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["bill_text"]));
      $specoffer_text = $dbw->escape(ifnull($HOTEL_INITIAL_TEXTS[$lkey]["specoffer_text"]));

      $query = "INSERT INTO ${prfx}_HTL_BOOKING_SETTINGS_PROP
      (SETTING_ID, LANG_ID, EXPLAIN_TEXT, PAYMENT_TEXT, PAYMENT_TEXT2, DD_TEXT, BILL_TEXT, SPECOFFER_TEXT)
      VALUES
      ($setting_id, $lid, '$explain_text', '$payment_text', '$payment_text2', '$dd_text', '$bill_text', '$specoffer_text')
      ";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }
    }

    //------------------------------------------------------------------------
    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!empty($pid) && !empty($sid) && $insert_necessary)
    {
      if(!$this->seasons_resave()) return false;
    }

    return true;
  } // create_initial_data
  //-----------------------------------------------------------------
  function save_rooms_count()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;
    global $FOCUS_ELEMENT;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!empty($_REQUEST["avail"]))
    {
      foreach($_REQUEST["avail"] as $room_id => $dates)
      {
        foreach($dates as $date => $room_count)
        {
          $data = array();

          $tmpdate = explode("-", $date);
          $time = mktime(00, 00, 00, $tmpdate[1], $tmpdate[2], $tmpdate[0]);
          $data["date"] = null_if_empty($dbw->format_date($time));
          $data["room_id"] = $room_id;

          if($room_count == '')
          {
            continue;
            /*$ERROR = text("ErrRoomCountEmpty");
            $FOCUS_ELEMENT = "avail_${room_id}_${date}";
            $dbw->rollback_transaction();
            return false;
            */
          }

          if($room_count < 0)
          {
            $ERROR = text("RoomCountLessZero");
            $FOCUS_ELEMENT = "avail_${room_id}_${date}";
            $dbw->rollback_transaction();
            return false;
          }

          $max_rooms = 0;

          $query = "SELECT ROOMS_COUNT FROM {$prfx}_HTL_ROOMS
                    WHERE ID = $room_id";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          while($dbw->fetch_row())
          {
            $max_rooms = $dbw->field_by_name("ROOMS_COUNT");
          }

          $dbw->free_result();

          if($room_count > $max_rooms)
          {
            $ERROR = text("RoomCountMoreMax");
            $FOCUS_ELEMENT = "avail_${room_id}_${date}";
            $dbw->rollback_transaction();
            return false;
          }

          // get number of reserved rooms

          $query = "SELECT COUNT(*) CNT FROM
                    {$prfx}_HTL_ORDER_PROP
                    WHERE ROOM_ID = $data[room_id]
                    AND
                    ORDER_ID IN
                    (
                      SELECT ID FROM {$prfx}_HTL_ORDER
                      WHERE
                      $data[date] >= ARRIVE_DATE AND $data[date] < DEPARTURE_DATE
                      AND (CONFIRMED IS NULL OR CONFIRMED NOT IN (2, 3))
                    )
                   ";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            $dbw->rollback_transaction();
            return false;
          }

          $reserved = 0;

          while($dbw->fetch_row())
          {
            $reserved = $dbw->field_by_name("CNT");
          }

          if(empty($reserved)) $reserved = 0;

          $dbw->free_result();

          if($room_count > ($max_rooms-$reserved))
          {
            $ERROR = sprintf(text("ErrMaxRoomsCount"), $max_rooms-$reserved, $max_rooms, $reserved, date(text("DateFormat"), $time));
            $FOCUS_ELEMENT = "avail_${room_id}_${date}";
            $dbw->rollback_transaction();
            return false;
          }

          if($room_count != '' && !is_numeric($room_count))
          {
            $ERROR = text("ErrRoomsCount");
            $FOCUS_ELEMENT = "avail_${room_id}_${date}";
            $dbw->rollback_transaction();
            return false;
          }

          //insert or update
          $query = "SELECT COUNT(*) AS CNT FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            return false;
          }

          if($dbw->fetch_row())
            $update = $dbw->field_by_name("CNT");

          $dbw->free_result();

          if(!$update)
          {
            $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                      (ROOM_ID, DATE, ROOM_COUNT, PRICE_TYPE, ARRIVAL, DEPARTURE, MIN_NIGHTS)
                      VALUES
                      ($data[room_id], $data[date], $room_count, 'INDIVIDUAL', '1', '1', 1)";
          }
          else
          {
            $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                      ROOM_COUNT = $room_count
                      WHERE ROOM_ID = $data[room_id] AND DATE = $data[date]";
          }

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();
            return false;
          }
        }
      }
    } // if request

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $INFO_MESSAGE = text("MSG_DATA_SAVED");

    return true;
  } // save_rooms_count
  //-----------------------------------------------------------------
  function processChannelManagerCount(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["chanmanager_take_counts"]))
    {
      $result["resultmessage"] = "Applying of the room counts is skipped because it is turned off!";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["chanmanager_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["chanmanager_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories/ns:Inventory");

    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $invertory = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $invertory);
      if($children->length == 0) continue;

      $row["Start"] = $children->item(0)->getAttribute("Start");
      $row["End"] = $children->item(0)->getAttribute("End");
      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvTypeCode");

      if(empty($row["Start"]) || empty($row["End"]) || empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:InvCounts/ns:InvCount", $invertory);
      if($children->length == 0) continue;

      $row["Count"] = $children->item(0)->getAttribute("Count");
      if(empty($row["Count"])) 
        $row["Count"] = 0;

      $data_rows[] = $row;
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The number of available rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") has been set to " . $row["Count"] . " for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $room_id = $rooms[$row["InvTypeCode"]]["id"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      $count = $row["Count"];
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $count, 'INDIVIDUAL')";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ROOM_COUNT = $count
                    WHERE DATE = '$dt' AND ROOM_ID = $room_id
                   ";
        }

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }
    }

    return true;
  } // processChannelManagerCount
  //-----------------------------------------------------------------
  function processChannelManagerRate(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["chanmanager_take_prices"]))
    {
      $result["resultmessage"] = "Applying of the room prices is skipped because it is turned off!";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    //debug_message($xmldoc->saveXML());

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ/ns:RateAmountMessages");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RateAmountMessages block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RateAmountMessages block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["chanmanager_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["chanmanager_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ/ns:RateAmountMessages/ns:RateAmountMessage");
    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $message = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $message);

      if($children->length == 0) continue;

      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvTypeCode");

      if(empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:Rates/ns:Rate", $message);
      if($children->length == 0) continue;

      for($k = 0; $k < $children->length; $k++)
      {
        $row["MinLOS"] = $children->item($k)->getAttribute("MinLOS");
        $row["MaxLOS"] = $children->item($k)->getAttribute("MaxLOS");
        $row["Start"] = $children->item($k)->getAttribute("Start");
        $row["End"] = $children->item($k)->getAttribute("End");

        if(empty($row["Start"]) || empty($row["End"])) continue;

        $subchildren = $xsdpath->evaluate("ns:TPA_Extensions", $children->item($k));
        if($subchildren->length > 0)
        {
          $row["CTA"] = $subchildren->item(0)->getAttribute("CTA");
          $row["CTD"] = $subchildren->item(0)->getAttribute("CTD");
        }
        else
        {
          $row["CTA"] = 0;
          $row["CTD"] = 0;
        }

        $subchildren = $xsdpath->evaluate("ns:BaseByGuestAmts/ns:BaseByGuestAmt", $children->item($k));
        if($subchildren->length == 0) continue;

        for($j = 0; $j < $subchildren->length; $j++)
        {
          $price = $subchildren->item($j)->getAttribute("AmountAfterTax");
          $guests = $subchildren->item($j)->getAttribute("NumberOfGuests");

          if(empty($price) || empty($guests) || !is_numeric($price)) continue;

          $row["PRICE" . $guests] = $price;
        }

        $data_rows[] = $row;
      }
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The prices rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") have been updated for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $set_clause = "";

      if(!empty($row["CTA"]))
      {
        $result["resultmessage"] .= "No arrival: yes\n";
        $set_clause .= "ARRIVAL = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No arrival: no (arrival possible)\n";
        $set_clause .= "ARRIVAL = 1, ";
      }
      if(!empty($row["CTD"]))
      {
        $result["resultmessage"] .= "No departure: yes\n";
        $set_clause .= "DEPARTURE = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No departure: no (departure possible)\n";
        $set_clause .= "DEPARTURE = 1, ";
      }

      if(!empty($row["MinLOS"]))
      {
        $result["resultmessage"] .= "Minimal stays: " . $row["MinLOS"] . "\n";
        $set_clause .= "MIN_NIGHTS = " . $dbw->escape($row["MinLOS"]) . ", ";
      }
      if(!empty($row["MaxLOS"]))
      {
        $result["resultmessage"] .= "Maximal stays: " . $row["MaxLOS"] . "\n";
        $set_clause .= "MAX_NIGHTS = " . $dbw->escape($row["MaxLOS"]) . ", ";
      }
      if(!empty($row["PRICE1"]) && !empty($settings["chanmanager_price1"]))
      {
        $field = $settings["chanmanager_price1"];
        $result["resultmessage"] .= "PRICE1 > $field: " . $row["PRICE1"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE1"]) . ", ";
      }
      if(!empty($row["PRICE2"]) && !empty($settings["chanmanager_price2"]))
      {
        $field = $settings["chanmanager_price2"];
        $result["resultmessage"] .= "PRICE2 > $field: " . $row["PRICE2"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE2"]) . ", ";
      }
      if(!empty($row["PRICE3"]) && !empty($settings["chanmanager_price3"]))
      {
        $field = $settings["chanmanager_price3"];
        $result["resultmessage"] .= "PRICE3 > $field: " . $row["PRICE3"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE3"]) . ", ";
      }
      if(!empty($row["PRICE4"]) && !empty($settings["chanmanager_price4"]))
      {
        $field = $settings["chanmanager_price4"];
        $result["resultmessage"] .= "PRICE4 > $field: " . $row["PRICE4"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE4"]) . ", ";
      }
      if(!empty($row["PRICE5"]) && !empty($settings["chanmanager_price5"]))
      {
        $field = $settings["chanmanager_price5"];
        $result["resultmessage"] .= "PRICE5 > $field: " . $row["PRICE5"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE5"]) . ", ";
      }
      if(!empty($row["PRICE6"]) && !empty($settings["chanmanager_price5"]))
      {
        $field = $settings["chanmanager_price6"];
        $result["resultmessage"] .= "PRICE6 > $field: " . $row["PRICE6"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE6"]) . ", ";
      }

      $set_clause = trim($set_clause, ", ");

      if(empty($set_clause)) continue;

      $room_id = $rooms[$row["InvTypeCode"]]["id"];
      $room_count = $rooms[$row["InvTypeCode"]]["count"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                  $set_clause
                  WHERE DATE = '$dt' AND ROOM_ID = $room_id
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }
    }

    return true;
  } // processChannelManagerRate
  //-----------------------------------------------------------------
  function processChannelManager(&$result, &$rooms)
  {
    $settings = array();
    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xml = file_get_contents("php://input");

    //$xml = '<OTA_HotelInvCountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><Inventories HotelCode="41"><Inventory><StatusApplicationControl Start="2013-11-22" End="2013-11-22" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-23" End="2013-11-23" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-24" End="2013-11-24" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-25" End="2013-11-29" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-30" End="2013-11-30" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-01" End="2013-12-01" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-02" End="2013-12-06" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-07" End="2013-12-07" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-08" End="2013-12-08" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-09" End="2013-12-13" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-14" End="2013-12-14" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-15" End="2013-12-15" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-16" End="2013-12-20" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-21" End="2013-12-21" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-22" End="2013-12-22" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-23" End="2013-12-27" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-28" End="2013-12-28" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-29" End="2013-12-29" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-30" End="2013-12-30" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-31" End="2013-12-31" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2014-01-01" End="2014-09-16" InvTypeCode="92" /><InvCounts><InvCount Count="0" /></InvCounts></Inventory></Inventories></OTA_HotelInvCountNotifRQ>';
    //$xml = '<OTA_HotelRateAmountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><RateAmountMessages HotelCode="41"><RateAmountMessage><StatusApplicationControl InvTypeCode="92" RatePlanCode="BAR" /><Rates><Rate Start="2013-11-22" End="2013-11-23" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-24" End="2013-11-24" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-25" End="2013-11-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-29" End="2013-11-30" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-01" End="2013-12-01" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-02" End="2013-12-05" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-06" End="2013-12-07" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-08" End="2013-12-08" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-09" End="2013-12-12" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-13" End="2013-12-14" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-15" End="2013-12-15" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-16" End="2013-12-19" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-20" End="2013-12-21" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-22" End="2013-12-22" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-23" End="2013-12-26" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-27" End="2013-12-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-29" End="2013-12-29" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-30" End="2013-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2014-01-01" End="2014-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="999.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="false" NonRefundableIndicator="false"/></PaymentPolicies><CancelPenalty><Deadline OffsetTimeUnit="Day" OffsetDropTime="BeforeArrival" OffsetUnitMultiplier="0" /></CancelPenalty></Rate></Rates></RateAmountMessage></RateAmountMessages></OTA_HotelRateAmountNotifRQ>';

    if(trim($xml) == "")
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "No data has been submitted!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xmldoc = new DOMDocument();
    $xmldoc->formatOutput = true;
    if(!@$xmldoc->loadXML($xml))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "The submitted data is not a valid XML structure!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xsdpath = new DOMXPath($xmldoc);
    $xsdpath->registerNamespace('ns', "http://www.opentravel.org/OTA/2003/05");

    // check validity

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelInvCountNotifRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelRateAmountNotifRQ";
    }

    if(empty($result["output_tag"]))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Neither OTA_HotelInvCountNotifRQ nore OTA_HotelRateAmountNotifRQ block is found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check login

    $login = "";
    $password = "";

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "/ns:Authentication/ns:Login");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The Authentication block with Login and Password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $login = $nodes->item(0)->nodeValue;

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "/ns:Authentication/ns:Password");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The Authentication block with Login and Password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $password = $nodes->item(0)->nodeValue;

    if(ifnull($settings["chanmanager_user"]) != $login ||
       ifnull($settings["chanmanager_password"]) != $password
      )
    {
      $result["errtype"] = "4";
      $result["errcode"] = "4"; // Authentication
      $result["resultmessage"] = "The login or password is invalid!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if($result["output_tag"] == "OTA_HotelInvCountNotifRQ")
      return $this->processChannelManagerCount($result, $xmldoc, $xsdpath, $settings, $rooms);
    elseif($result["output_tag"] == "OTA_HotelRateAmountNotifRQ")
      return $this->processChannelManagerRate($result, $xmldoc, $xsdpath, $settings, $rooms);

    $result["errtype"] = "4";
    $result["errcode"] = "1"; // Unknown
    $result["resultmessage"] = "Unknown Error!";
    $result["output_tag"] = "OTA_ErrorRS";

    return false;
  } // processChannelManager
  //-----------------------------------------------------------------
  function handleChannelManager()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();
    $settings = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    elseif(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    else
    {
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    }

    if(empty($result["errcode"]))
    {
      $query = "SELECT ID, ROOM_CODE, ROOMS_COUNT, I_NAME FROM {$prfx}_HTL_ROOMS";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
      }
    }

    $rooms = array();

    if(empty($result["errcode"]))
    {
      while($dbw->fetch_row())
      {
        $code = $dbw->field_by_name("ROOM_CODE");
        if(empty($code)) continue;

        $rooms[$code] = array("id" => $dbw->field_by_name("ID"), "count" => $dbw->field_by_name("ROOMS_COUNT"), "name" => $dbw->field_by_name("I_NAME"));
      }
    }

    $now = $dbw->format_datetime(time());
    $service = null_if_empty("channelmanager");

    $xml = file_get_contents("php://input");
    $data = null_if_empty($dbw->escape($xml));

    $query = "INSERT INTO {$prfx}_HTL_EXT_SERVICES_PUSH_LOG
                (DT, DATA, SERVICE_TYPE) VALUES
                ('$now', $data, $service)";

    if(!$dbw->execute_query($query))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    if(empty($result["errcode"]))
    {
      $id = $dbw->insert_id();

      $this->processChannelManager($result, $rooms);
    }

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $root = $xmldoc->createElement($result["output_tag"]);
    $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    $root->setAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
    $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
    $root->setAttribute("PrimaryLangID", "en");
    $root->setAttribute("Target", "Production");
    $root->setAttribute("Version", "3");

    $root = $xmldoc->appendChild($root);

    $result_status = "";

    if(empty($result["errcode"]))
    {
      $node = $xmldoc->createElement("Success");
      $root->appendChild($node);
      $result_status = "SUCCESS";
    }
    else
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $node->setAttribute("Type", $result["errtype"]);
      $node->setAttribute("Code", $result["errcode"]);
      $text = $xmldoc->createCDATASection($result["resultmessage"]);
      $node->appendChild($text);
      $errors->appendChild($node);
      $result_status = "ERROR";
    }

    if(empty($id)) $id = 0;

    $txt = null_if_empty($dbw->escape(ifnull($result["resultmessage"])));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICES_PUSH_LOG SET
                RESULT = '$result_status',
                DETAILS = $txt
                WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  } // handleChannelManager
  //-----------------------------------------------------------------
  function processSihotCount(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["sihot_take_counts"]))
    {
      $result["resultmessage"] = "Applying of the room counts is skipped because it is turned off!";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["sihot_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["sihot_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories/ns:Inventory");

    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $invertory = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $invertory);
      if($children->length == 0) continue;

      $row["Start"] = $children->item(0)->getAttribute("Start");
      $row["End"] = $children->item(0)->getAttribute("End");
      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvTypeCode");

      if(empty($row["Start"]) || empty($row["End"]) || empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:InvCounts/ns:InvCount", $invertory);
      if($children->length == 0) continue;

      $row["Count"] = $children->item(0)->getAttribute("Count");
      if(empty($row["Count"])) 
        $row["Count"] = 0;

      $data_rows[] = $row;
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The number of available rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") has been set to " . $row["Count"] . " for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $room_id = $rooms[$row["InvTypeCode"]]["id"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      $count = $row["Count"];
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $count, 'INDIVIDUAL')";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ROOM_COUNT = $count
                    WHERE DATE = '$dt' AND ROOM_ID = $room_id
                   ";
        }

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }
    }

    return true;
  } // processSihotCount
  //-----------------------------------------------------------------
  function processSihotRate(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["sihot_take_prices"]))
    {
      $result["resultmessage"] = "Applying of the room prices is skipped because it is turned off!";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ/ns:RateAmountMessages");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RateAmountMessages block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RateAmountMessages block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["sihot_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["sihot_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ/ns:RateAmountMessages/ns:RateAmountMessage");
    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $message = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $message);

      if($children->length == 0) continue;

      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvTypeCode");

      if(empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:Rates/ns:Rate", $message);
      if($children->length == 0) continue;

      for($k = 0; $k < $children->length; $k++)
      {
        $row["MinLOS"] = $children->item($k)->getAttribute("MinLOS");
        $row["MaxLOS"] = $children->item($k)->getAttribute("MaxLOS");
        $row["Start"] = $children->item($k)->getAttribute("Start");
        $row["End"] = $children->item($k)->getAttribute("End");

        if(empty($row["Start"]) || empty($row["End"])) continue;

        $subchildren = $xsdpath->evaluate("ns:TPA_Extensions", $children->item($k));
        if($subchildren->length > 0)
        {
          $row["CTA"] = $subchildren->item(0)->getAttribute("CTA");
          $row["CTD"] = $subchildren->item(0)->getAttribute("CTD");
        }
        else
        {
          $row["CTA"] = 0;
          $row["CTD"] = 0;
        }

        $subchildren = $xsdpath->evaluate("ns:BaseByGuestAmts/ns:BaseByGuestAmt", $children->item($k));
        if($subchildren->length == 0) continue;

        for($j = 0; $j < $subchildren->length; $j++)
        {
          $price = $subchildren->item($j)->getAttribute("AmountAfterTax");
          $guests = $subchildren->item($j)->getAttribute("NumberOfGuests");

          if(empty($price) || empty($guests) || !is_numeric($price)) continue;

          $row["PRICE" . $guests] = $price;
        }

        $data_rows[] = $row;
      }
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The prices rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") have been updated for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $set_clause = "";

      if(!empty($row["CTA"]))
      {
        $result["resultmessage"] .= "No arrival: yes\n";
        $set_clause .= "ARRIVAL = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No arrival: no (arrival possible)\n";
        $set_clause .= "ARRIVAL = 1, ";
      }
      if(!empty($row["CTD"]))
      {
        $result["resultmessage"] .= "No departure: yes\n";
        $set_clause .= "DEPARTURE = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No departure: no (departure possible)\n";
        $set_clause .= "DEPARTURE = 1, ";
      }

      if(!empty($row["MinLOS"]))
      {
        $result["resultmessage"] .= "Minimal stays: " . $row["MinLOS"] . "\n";
        $set_clause .= "MIN_NIGHTS = " . $dbw->escape($row["MinLOS"]) . ", ";
      }
      if(!empty($row["MaxLOS"]))
      {
        $result["resultmessage"] .= "Maximal stays: " . $row["MaxLOS"] . "\n";
        $set_clause .= "MAX_NIGHTS = " . $dbw->escape($row["MaxLOS"]) . ", ";
      }
      if(!empty($row["PRICE1"]) && !empty($settings["sihot_price1"]))
      {
        $field = $settings["sihot_price1"];
        $result["resultmessage"] .= "PRICE1 > $field: " . $row["PRICE1"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE1"]) . ", ";
      }
      if(!empty($row["PRICE2"]) && !empty($settings["sihot_price2"]))
      {
        $field = $settings["sihot_price2"];
        $result["resultmessage"] .= "PRICE2 > $field: " . $row["PRICE2"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE2"]) . ", ";
      }
      if(!empty($row["PRICE3"]) && !empty($settings["sihot_price3"]))
      {
        $field = $settings["sihot_price3"];
        $result["resultmessage"] .= "PRICE3 > $field: " . $row["PRICE3"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE3"]) . ", ";
      }
      if(!empty($row["PRICE4"]) && !empty($settings["sihot_price4"]))
      {
        $field = $settings["sihot_price4"];
        $result["resultmessage"] .= "PRICE4 > $field: " . $row["PRICE4"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE4"]) . ", ";
      }
      if(!empty($row["PRICE5"]) && !empty($settings["sihot_price5"]))
      {
        $field = $settings["sihot_price5"];
        $result["resultmessage"] .= "PRICE5 > $field: " . $row["PRICE5"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE5"]) . ", ";
      }
      if(!empty($row["PRICE6"]) && !empty($settings["sihot_price5"]))
      {
        $field = $settings["sihot_price6"];
        $result["resultmessage"] .= "PRICE6 > $field: " . $row["PRICE6"] . "\n";
        $set_clause .= "$field = " . $dbw->escape($row["PRICE6"]) . ", ";
      }

      $set_clause = trim($set_clause, ", ");

      if(empty($set_clause)) continue;

      $room_id = $rooms[$row["InvTypeCode"]]["id"];
      $room_count = $rooms[$row["InvTypeCode"]]["count"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                  $set_clause
                  WHERE DATE = '$dt' AND ROOM_ID = $room_id
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      } // for
    }

    return true;
  } // processSihotRate
  //-----------------------------------------------------------------
  function processSihot(&$result, &$rooms)
  {
    $settings = array();
    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xml = file_get_contents("php://input");

    //$xml = '<OTA_HotelInvCountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><Inventories HotelCode="41"><Inventory><StatusApplicationControl Start="2013-11-22" End="2013-11-22" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-23" End="2013-11-23" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-24" End="2013-11-24" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-25" End="2013-11-29" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-30" End="2013-11-30" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-01" End="2013-12-01" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-02" End="2013-12-06" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-07" End="2013-12-07" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-08" End="2013-12-08" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-09" End="2013-12-13" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-14" End="2013-12-14" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-15" End="2013-12-15" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-16" End="2013-12-20" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-21" End="2013-12-21" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-22" End="2013-12-22" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-23" End="2013-12-27" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-28" End="2013-12-28" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-29" End="2013-12-29" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-30" End="2013-12-30" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-31" End="2013-12-31" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2014-01-01" End="2014-09-16" InvTypeCode="92" /><InvCounts><InvCount Count="0" /></InvCounts></Inventory></Inventories></OTA_HotelInvCountNotifRQ>';
    //$xml = '<OTA_HotelRateAmountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch123</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><RateAmountMessages HotelCode="6000"><RateAmountMessage><StatusApplicationControl InvTypeCode="92" RatePlanCode="BAR" /><Rates><Rate Start="2013-11-22" End="2013-11-23" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-24" End="2013-11-24" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-25" End="2013-11-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-29" End="2013-11-30" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-01" End="2013-12-01" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-02" End="2013-12-05" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-06" End="2013-12-07" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-08" End="2013-12-08" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-09" End="2013-12-12" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-13" End="2013-12-14" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-15" End="2013-12-15" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-16" End="2013-12-19" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-20" End="2013-12-21" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-22" End="2013-12-22" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-23" End="2013-12-26" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-27" End="2013-12-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-29" End="2013-12-29" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-30" End="2013-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2014-01-01" End="2014-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="999.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="false" NonRefundableIndicator="false"/></PaymentPolicies><CancelPenalty><Deadline OffsetTimeUnit="Day" OffsetDropTime="BeforeArrival" OffsetUnitMultiplier="0" /></CancelPenalty></Rate></Rates></RateAmountMessage></RateAmountMessages></OTA_HotelRateAmountNotifRQ>';

    if(trim($xml) == "")
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "No data has been submitted!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xmldoc = new DOMDocument();
    $xmldoc->formatOutput = true;
    if(!@$xmldoc->loadXML($xml))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "The submitted data is not a valid XML structure!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xsdpath = new DOMXPath($xmldoc);
    $xsdpath->registerNamespace('ns', "http://www.opentravel.org/OTA/2003/05");

    // check validity

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelInvCountNotifRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRateAmountNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelRateAmountNotifRQ";
    }

    if(empty($result["output_tag"]))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Neither OTA_HotelInvCountNotifRQ nore OTA_HotelRateAmountNotifRQ block is found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check login

    $login = "";
    $password = "";

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "/ns:Authentication/ns:Login");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The Authentication block with Login and Password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $login = $nodes->item(0)->nodeValue;

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "/ns:Authentication/ns:Password");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The Authentication block with Login and Password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $password = $nodes->item(0)->nodeValue;

    if(ifnull($settings["sihot_user"]) != $login ||
       ifnull($settings["sihot_password"]) != $password
      )
    {
      $result["errtype"] = "4";
      $result["errcode"] = "4"; // Authentication
      $result["resultmessage"] = "The login or password is invalid!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if($result["output_tag"] == "OTA_HotelInvCountNotifRQ")
      return $this->processSihotCount($result, $xmldoc, $xsdpath, $settings, $rooms);
    elseif($result["output_tag"] == "OTA_HotelRateAmountNotifRQ")
      return $this->processSihotRate($result, $xmldoc, $xsdpath, $settings, $rooms);

    $result["errtype"] = "4";
    $result["errcode"] = "1"; // Unknown
    $result["resultmessage"] = "Unknown Error!";
    $result["output_tag"] = "OTA_ErrorRS";

    return false;
  } // processSihot
  //-----------------------------------------------------------------
  function handleSihot()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();
    $settings = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    elseif(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    else
    {
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    }

    if(empty($result["errcode"]))
    {
      $query = "SELECT ID, ROOM_CODE, ROOMS_COUNT, I_NAME FROM {$prfx}_HTL_ROOMS";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
      }
    }

    $rooms = array();

    if(empty($result["errcode"]))
    {
      while($dbw->fetch_row())
      {
        $code = $dbw->field_by_name("ROOM_CODE");
        if(empty($code)) continue;

        $rooms[$code] = array("id" => $dbw->field_by_name("ID"), "count" => $dbw->field_by_name("ROOMS_COUNT"), "name" => $dbw->field_by_name("I_NAME"));
      }
    }

    $now = $dbw->format_datetime(time());
    $service = null_if_empty("SIHOT");

    $xml = file_get_contents("php://input");
    $data = null_if_empty($dbw->escape($xml));

    $query = "INSERT INTO {$prfx}_HTL_EXT_SERVICES_PUSH_LOG
                (DT, DATA, SERVICE_TYPE) VALUES
                ('$now', $data, $service)";

    if(!$dbw->execute_query($query))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    if(empty($result["errcode"]))
    {
      $id = $dbw->insert_id();

      $this->processSihot($result, $rooms);
    }

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $root = $xmldoc->createElement($result["output_tag"]);
    $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    $root->setAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
    $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
    $root->setAttribute("PrimaryLangID", "en");
    $root->setAttribute("Target", "Production");
    $root->setAttribute("Version", "3");

    $root = $xmldoc->appendChild($root);

    $result_status = "";

    if(empty($result["errcode"]))
    {
      $node = $xmldoc->createElement("Success");
      $root->appendChild($node);
      $result_status = "SUCCESS";
    }
    else
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $node->setAttribute("Type", $result["errtype"]);
      $node->setAttribute("Code", $result["errcode"]);
      $text = $xmldoc->createCDATASection($result["resultmessage"]);
      $node->appendChild($text);
      $errors->appendChild($node);
      $result_status = "ERROR";
    }

    if(empty($id)) $id = 0;

    $txt = null_if_empty($dbw->escape(ifnull($result["resultmessage"])));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICES_PUSH_LOG SET
                RESULT = '$result_status',
                DETAILS = $txt
                WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  } // handleSihot
  //-----------------------------------------------------------------
  function processHotelSpiderRoomInfo(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, &$outxmldoc, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelDescriptiveInfoRQ/ns:HotelDescriptiveInfos/ns:HotelDescriptiveInfo");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "HotelDescriptiveInfo block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "HotelDescriptiveInfo block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["htspider_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["htspider_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $lang = "";

    $query = "SELECT ID, LANG_KEY, IS_DEFAULT FROM ${prfx}_LANGUAGE ORDER BY SORT_ORDER";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $first_language = "";
    $default_language = "";
    $languages = array();

    while($dbw->fetch_row())
    {
      if($dbw->field_by_name("IS_DEFAULT"))
      {
        $default_language = $dbw->field_by_name("LANG_KEY");
      }

      if(empty($first_language)) $first_language = $dbw->field_by_name("LANG_KEY");

      $languages[$dbw->field_by_name("LANG_KEY")] = $dbw->field_by_name("ID");
    }

    $dbw->free_result();

    if(empty($default_language)) $default_language = $first_language;
    
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelDescriptiveInfoRQ");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "OTA_HotelDescriptiveInfoRQ block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    $lang = $nodes->item(0)->getAttribute("PrimaryLangID");

    $langs = preg_split("/_/", $lang);

    $lang = ifnull($langs[0]);

    if(!in_array($lang, array_keys($languages))) $lang = $default_language;

    if(empty($lang)) $lang = ifnull($languages[0]);

    $langid = $languages[$lang];

    // rooms

    if(!$dbw->execute_query("SELECT ${prfx}_HTL_ROOMS.ID, I_NAME, ROOM_CODE, HTSPIDER_INSTANCE,
       TYPE, MAX_PERSONS, STANDARD_ALLOCATION, WITH_CHILDREN, MAX_ADULTS, ROOMS_COUNT, MIN_PERSONS
       FROM ${prfx}_HTL_ROOMS
       LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON
       (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID = $langid)
       ORDER BY ${prfx}_HTL_ROOMS.SORT_ORDER
    "))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $rooms = array();
    while($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");

      $rooms[$id]["InternalName"] = trim($dbw->field_by_name("I_NAME"));
      $rooms[$id]["RoomCode"] = trim($dbw->field_by_name("ROOM_CODE"));
      $rooms[$id]["htspider_instance"] = trim($dbw->field_by_name("HTSPIDER_INSTANCE"));

      $type = $dbw->field_by_name("TYPE");
      if(empty($type)) $type = $dbw->field_by_name("I_NAME");

      $rooms[$id]["Type"] = $type;

      $rooms[$id]["max_persons"] = $dbw->field_by_name("MAX_PERSONS");
      $rooms[$id]["standard_allocation"] = $dbw->field_by_name("STANDARD_ALLOCATION");
      $rooms[$id]["with_children"] = $dbw->field_by_name("WITH_CHILDREN");
      $rooms[$id]["max_adults"] = $dbw->field_by_name("MAX_ADULTS");
      $rooms[$id]["min_persons"] = $dbw->field_by_name("MIN_PERSONS");
      $rooms[$id]["count"] = $dbw->field_by_name("ROOMS_COUNT");
    }

    $dbw->free_result();

    $now = date("c");

    //--------------------------------------------------------------------
    $root = $outxmldoc->createElement("OTA_HotelDescriptiveInfoRS");
    $root = $outxmldoc->appendChild($root);
    $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
    $root->setAttribute("TimeStamp", $now);
    $root->setAttribute("PrimaryLangID", $lang);
    $root->setAttribute("Version", "1");
    //--------------------------------------------------------------------

    $node = $outxmldoc->createElement("Success");
    $root->appendChild($node);

    $node = $outxmldoc->createElement("HotelDescriptiveContents");
    $root->appendChild($node);

    $node2 = $outxmldoc->createElement("HotelDescriptiveContent");
    $node2->setAttribute("HotelCode", $settings["htspider_hotel_id"]);
    $node->appendChild($node2);

    $node3 = $outxmldoc->createElement("FacilityInfo");
    $node2->appendChild($node3);

    $roomsNode = $outxmldoc->createElement("GuestRooms");
    $node3->appendChild($roomsNode);

    foreach($rooms as $room)
    {
      if($room["htspider_instance"] != $instance) continue;
      
      $roomNode = $outxmldoc->createElement("GuestRoom");
      $roomNode->setAttribute("ID", $room["RoomCode"]);

      $roomNode->setAttribute("MaxOccupancy", $room["max_persons"]);
      $roomNode->setAttribute("MinOccupancy", $room["min_persons"]);

      $max_adults = $room["max_adults"];
      if($room["standard_allocation"] < 3) $max_adults = $room["max_persons"];
      $roomNode->setAttribute("MaxAdultOccupancy", $max_adults);

      $max_children = $room["max_persons"] - 1;
      if(!$room["with_children"]) $max_children = 0;
      $roomNode->setAttribute("MaxChildOccupancy", $max_children);

      $roomNode->setAttribute("Quantity", $room["count"]);

      $roomNode->setAttribute("RoomTypeName", $room["Type"]);

      $typeNode = $outxmldoc->createElement("TypeRoom");
      $typeNode->setAttribute("Name", $room["InternalName"]);
      $typeNode->setAttribute("StandardOccupancy", $room["standard_allocation"]);

      $roomNode->appendChild($typeNode);

      $roomsNode->appendChild($roomNode);
    }

    $result["resultmessage"] =  "Room information retrieved";
    $result["room_info"] = true;

    return true;
  } // processHotelSpiderRoomInfo
  //-----------------------------------------------------------------
  function processHotelSpiderReservations(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, &$outxmldoc, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_ReadRQ/ns:ReadRequests/ns:HotelReadRequest");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "ReadRequests block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "ReadRequests block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["htspider_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["htspider_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $reserv_list = "";

    $now = date("c");

    //--------------------------------------------------------------------
    $root = $outxmldoc->createElement("OTA_HotelResNotifRQ");
    $root = $outxmldoc->appendChild($root);
    $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
    $root->setAttribute("TimeStamp", $now);
    $root->setAttribute("Version", "1");
    //--------------------------------------------------------------------

    //--------------------------------------------------------------------
    $reservation_list = $outxmldoc->createElement("ReservationsList");
    $root->appendChild($reservation_list);
    //-----------------------------

    //fetch order info
    $instance = $dbw->escape($instance);
    if(empty($instance) || !is_numeric($instance)) $instance = 1;
    
    $query = "SELECT ID, ORDER_LANG
              FROM {$prfx}_HTL_ORDER
              WHERE CONFIRMED <> '0' AND HTSPIDER_DELIVERED = '0' AND
              ID IN (SELECT ORDER_ID FROM {$prfx}_HTL_ORDER_PROP WHERE ROOM_ID IN (SELECT ID FROM {$prfx}_HTL_ROOMS WHERE HTSPIDER_INSTANCE = $instance))";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
      return false;
    }

    $orders = array();
    
    while($dbw->fetch_row())
    {
      $reserv_list .= $dbw->field_by_name("ID") . ", ";
      $orders[$dbw->field_by_name("ID")] = $dbw->field_by_name("ORDER_LANG");
    }

    $dbw->free_result();

    foreach($orders as $order_id => $lang_key)
    {
      $order_info = array();

      //fetch order info
      $query = "SELECT {$prfx}_HTL_ORDER.ID,
                {$prfx}_HTL_ORDER.FIRST_NAME,
                {$prfx}_HTL_ORDER.LAST_NAME,
                {$prfx}_HTL_ORDER.EMAIL,
                {$prfx}_HTL_ORDER.TELEPHONE,
                {$prfx}_HTL_ORDER.NOTE,
                {$prfx}_HTL_ORDER.COUNTRY,
                {$prfx}_HTL_ORDER.CURRENCY_CODE,
                {$prfx}_HTL_ORDER.CITY,
                {$prfx}_HTL_ORDER.ADRESS ADDRESS,
                {$prfx}_HTL_ORDER.ZIP,
                {$prfx}_HTL_ORDER.SALUTATION TITLE,
                ORDER_LANG,
                CONFIRMED,
                ARRIVE_DATE, DEPARTURE_DATE,
                TOTAL_ORDER_PRICE,
                ORDER_TM
                FROM {$prfx}_HTL_ORDER
                WHERE {$prfx}_HTL_ORDER.ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
        return true;
      }

      while($dbw->fetch_row())
      {
        $order_info["id"] = $dbw->field_by_name("ID");
        $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
        $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
        $order_info["email"] = $dbw->field_by_name("EMAIL");
        $order_info["telephone"] = $dbw->field_by_name("TELEPHONE");
        $order_info["address"] = $dbw->field_by_name("ADDRESS");
        $order_info["city"] = $dbw->field_by_name("CITY");
        $order_info["zip"] = $dbw->field_by_name("ZIP");
        $order_info["note"] = $dbw->field_by_name("NOTE");
        $order_info["total_order_price"] = $dbw->field_by_name("TOTAL_ORDER_PRICE");

        $order_info["lang"] = $dbw->field_by_name("ORDER_LANG");
        $order_info["confirmed"] = $dbw->field_by_name("CONFIRMED");

        $order_info["country_code"] = $dbw->field_by_name("COUNTRY");
        $order_info["country"] = country_name($order_info["country_code"], $order_info["lang"]);
        $order_info["currency_code"] = $dbw->field_by_name("CURRENCY_CODE");

        $order_info["order_date"] = strtotime($dbw->field_by_name("ORDER_TM"));
        $order_info["arrive_date"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));
        $order_info["departure_date"] = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

        $order_info["nights"] = round(($order_info["departure_date"] - $order_info["arrive_date"])/(60*60*24));
      }

      $dbw->free_result();

      // fetch rooms
      $query = "SELECT {$prfx}_HTL_ROOMS.ID,
                {$prfx}_HTL_ROOMS.ROOM_CODE,
                ROOM_COUNTER,
                PERSONS_COUNT,
                TOTAL_PRICE,
                ADULTS_COUNT,
                CHILDREN_COUNT
                FROM
                {$prfx}_HTL_ORDER_PROP
                LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
                WHERE {$prfx}_HTL_ORDER_PROP.ORDER_ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $order_info["rooms"][$room_id][$room_cnt] = array(
                              "room_code" => $dbw->field_by_name("ROOM_CODE"),
                              "persons_count" => $dbw->field_by_name("PERSONS_COUNT"),
                              "total_price" => $dbw->field_by_name("TOTAL_PRICE"),
                              "adults_count" => $dbw->field_by_name("ADULTS_COUNT"),
                              "children_count" => $dbw->field_by_name("CHILDREN_COUNT")
                          );
      }

      $dbw->free_result();

      // fetch room guests

      $query = "SELECT ROOM_ID,
                ROOM_COUNTER,
                GUEST_NAME,
                GUEST_AGE,
                IS_ADULT
                FROM
                {$prfx}_HTL_ORDER_GUESTS
                WHERE ORDER_ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ROOM_ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $order_info["rooms"][$room_id][$room_cnt]["guests"][] = array(
                              "guest_name" => $dbw->field_by_name("GUEST_NAME"),
                              "guest_age" => $dbw->field_by_name("GUEST_AGE"),
                              "is_adult" => $dbw->field_by_name("IS_ADULT")
                          );
      }

      $dbw->free_result();

      // fetch dates

      $query = "SELECT ROOM_ID, ROOM_COUNTER,
                PRICE,
                DT
                FROM
                {$prfx}_HTL_ORDER_PRICES
                WHERE ORDER_ID = $order_id
                ORDER BY DT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ROOM_ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $dt = date("Y-m-d", strtotime($dbw->field_by_name("DT")));

        $order_info["rooms"][$room_id][$room_cnt]["dates"][$dt] = $dbw->field_by_name("PRICE");
      }

      $dbw->free_result();

      // fetch services
      $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, PRICE, AMOUNT, TOTAL_PRICE
                FROM
                {$prfx}_HTL_ORDER_SERVICES
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
                WHERE ORDER_ID = $order_id
                ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
        return true;
      }

      $order_info["services"] = array();

      while($dbw->fetch_row())
      {
        $order_info["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                         "amount" => $dbw->field_by_name("AMOUNT"),
                                                                         "price" => $dbw->field_by_name("PRICE"),
                                                                         "total_price" => $dbw->field_by_name("TOTAL_PRICE"));
      }
      
      $resid = $settings["htspider_hotel_id"]*1000000000 + $order_info["id"];

      $reservation = $outxmldoc->createElement("HotelReservation");
      $reservation_list->appendChild($reservation);
      $reservation->setAttribute("ResStatus", $order_info["confirmed"] != "1" ? "Cancel" : "Book");
      $reservation->setAttribute("CreateDateTime", date("c", $order_info["order_date"]));
      $reservation->setAttribute("LastModifyDateTime", date("c", $order_info["order_date"]));
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("UniqueID");
      $reservation->appendChild($node);
      $node->setAttribute("Type", "18");
      $node->setAttribute("ID", $resid);
      //--------------------------------------------------------------------
      /*
      $node = $outxmldoc->createElement("POS");
      $reservation->appendChild($node);

      $node2 = $outxmldoc->createElement("Source");
      $node->appendChild($node2);

      $node3 = $outxmldoc->createElement("BookingChannel");
      $node2->appendChild($node3);

      $node3->setAttribute("Primary", "0");
      $node3->setAttribute("Type", "5");

      $node4 = $outxmldoc->createElement("CompanyName");
      $node3->appendChild($node4);

      $text_node = $outxmldoc->createTextNode("MASCH Booking Manager");
      $node4->appendChild($text_node);
      */
      //--------------------------------------------------------------------
      $roomstays = $outxmldoc->createElement("RoomStays");
      $reservation->appendChild($roomstays);
      $room_counter = 1;
      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          $roomstay = $outxmldoc->createElement("RoomStay");
          $roomstays->appendChild($roomstay);
          $roomstay->setAttribute("IndexNumber", $room_counter++);

          $node2 = $outxmldoc->createElement("BasicPropertyInfo");
          $roomstay->appendChild($node2);
          $node2->setAttribute("HotelCode", $settings["chanmanager_hotel_id"]);
          $node2->setAttribute("HotelName", "MASCH");
          $node2->setAttribute("CurrencyCode", $order_info["currency_code"]);

          $node3 = $outxmldoc->createElement("RoomType");
          $roomstay->appendChild($node3);
          $node3->setAttribute("NumberOfUnits", "1");
          $node3->setAttribute("IsRoom", "1");
          $node3->setAttribute("RoomTypeCode", $room["room_code"]);
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("GuestCounts");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $outxmldoc->createElement("GuestCount");
            $node->appendChild($node2);
            $node2->setAttribute("Count", "1");

            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";
            $node2->setAttribute("AgeQualifyingCode", $code);
          }
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("ResGuestRPHs");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $outxmldoc->createElement("ResGuestRPH");
            $node->appendChild($node2);
            $node2->setAttribute("RPH", $guest_counter++);
          }
          //--------------------------------------------------------------------
          /*
          $node = $outxmldoc->createElement("ServiceRPHs");
          $roomstay->appendChild($node);

          $node2 = $outxmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "1");
          $node2 = $outxmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "2");
          $node2 = $outxmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "3");
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("Guarantee");
          $roomstay->appendChild($node);
          $node->setAttribute("GuaranteeType", "GuaranteeRequired");
          $node->setAttribute("GuaranteeCode", "3");
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("RatePlans");
          $roomstay->appendChild($node);
          */
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("RoomRates");
          $roomstay->appendChild($node);

          if(!empty($room["dates"]))
          foreach($room["dates"] as $dt => $price)
          {
            $node2 = $outxmldoc->createElement("RoomRate");
            $node->appendChild($node2);
            $node2->setAttribute("NumberOfUnits", "1");
            $node2->setAttribute("RoomID", $room["room_code"]);
            $node2->setAttribute("EffectiveDate", $dt);

            $node3 = $outxmldoc->createElement("Rates");
            $node2->appendChild($node3);

            $node4 = $outxmldoc->createElement("Rate");
            $node3->appendChild($node4);

            $node5 = $outxmldoc->createElement("Base");
            $node4->appendChild($node5);
            $node5->setAttribute("DecimalPlaces", "2");
            $node5->setAttribute("CurrencyCode", $order_info["currency_code"]);
            $node5->setAttribute("AmountAfterTax", $price);
          }
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("TimeSpan");
          $roomstay->appendChild($node);
          $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
          $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
          $node->setAttribute("Duration", $order_info["nights"]);
          //--------------------------------------------------------------------
          $node = $outxmldoc->createElement("Total");
          $roomstay->appendChild($node);
          $node->setAttribute("DecimalPlaces", "2");
          $node->setAttribute("CurrencyCode", $order_info["currency_code"]);
          $node->setAttribute("AmountAfterTax", number_format($room["total_price"], 2, ".", ""));
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("ResGuests");
      $reservation->appendChild($node);

      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";

            $names = preg_split('/\\s+/', $guest["guest_name"], -1, PREG_SPLIT_NO_EMPTY);
            if(count($names) > 1)
            {
              $lastname = $names[0];
              $firstname = $names[1];
            }
            else
            {
              $lastname = $names[0];
              $firstname = "";
            }

            $node2 = $outxmldoc->createElement("ResGuest");
            $node->appendChild($node2);
            $node2->setAttribute("ResGuestRPH", $guest_counter++);
            $node2->setAttribute("AgeQualifyingCode", $code);

            $node3 = $outxmldoc->createElement("Profiles");
            $node2->appendChild($node3);

            $node4 = $outxmldoc->createElement("ProfileInfo");
            $node3->appendChild($node4);

            $profile = $outxmldoc->createElement("Profile");
            $node4->appendChild($profile);

            $node5 = $outxmldoc->createElement("Customer");
            $profile->appendChild($node5);
            $node5->setAttribute("Gender", "");

            $node6 = $outxmldoc->createElement("PersonName");
            $node5->appendChild($node6);

            $node7 = $outxmldoc->createElement("GivenName");
            $node6->appendChild($node7);
            $text_node = $outxmldoc->createCDATASection($lastname);
            $node7->appendChild($text_node);

            $node7 = $outxmldoc->createElement("Surname");
            $node6->appendChild($node7);
            $text_node = $outxmldoc->createCDATASection($firstname);
            $node7->appendChild($text_node);
          }
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("Services");
      $reservation->appendChild($node);

      foreach($order_info["services"] as $service)
      {
        $node2 = $outxmldoc->createElement("Service");
        $node->appendChild($node2);
        $node2->setAttribute("ServicePricingType", "Per stay");
        $node2->setAttribute("PriceGuaranteed", "true");
        $node2->setAttribute("Quantity", $service["amount"]);

        $node3 = $outxmldoc->createElement("ServiceDetails");
        $node2->appendChild($node3);

        $node4 = $outxmldoc->createElement("Comments");
        $node3->appendChild($node4);

        $node5 = $outxmldoc->createElement("Comment");
        $node4->appendChild($node5);

        $node6 = $outxmldoc->createElement("Text");
        $node5->appendChild($node6);
        $text_node = $outxmldoc->createTextNode($service["title"]);
        $node6->appendChild($text_node);

        /*
        $node4 = $outxmldoc->createElement("GuestCounts");
        $node3->appendChild($node4);

        $node5 = $outxmldoc->createElement("GuestCount");
        $node4->appendChild($node5);
        $node5->setAttribute("Count", "2");
        */

        $node3 = $outxmldoc->createElement("Price");
        $node2->appendChild($node3);
        $node3->setAttribute("NumberOfUnits", $service["amount"]);

        $node4 = $outxmldoc->createElement("Base");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_info["currency_code"]);

        $node4 = $outxmldoc->createElement("Total");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["total_price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_info["currency_code"]);
      } // foreach service
      //--------------------------------------------------------------------
      $resglobalinfo = $outxmldoc->createElement("ResGlobalInfo");
      $reservation->appendChild($resglobalinfo);
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("Comments");
      $resglobalinfo->appendChild($node);

      $node2 = $outxmldoc->createElement("Comment");
      $node->appendChild($node2);
      $node2->setAttribute("Name", "Guestmessage");
      $node2->setAttribute("GuestViewable", "1");

      $node3 = $outxmldoc->createElement("Text");
      $node2->appendChild($node3);
      $node3->setAttribute("Formatted", "1");

      $text_node = $outxmldoc->createCDATASection($order_info["note"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("HotelReservationIDs");
      $resglobalinfo->appendChild($node);

      $node2 = $outxmldoc->createElement("HotelReservationID");
      $node->appendChild($node2);
      $node2->setAttribute("ResID_Type", "14");
      $node2->setAttribute("ResID_Value", $resid);
      $node2->setAttribute("ForGuest", "1");
      //--------------------------------------------------------------------
      $node = $outxmldoc->createElement("Total");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("AmountAfterTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("DecimalPlaces", "2");
      $node->setAttribute("CurrencyCode", $order_info["currency_code"]);
      //--------------------------------------------------------------------
      $node3 = $outxmldoc->createElement("Profiles");
      $resglobalinfo->appendChild($node3);

      $node4 = $outxmldoc->createElement("ProfileInfo");
      $node3->appendChild($node4);

      $profile = $outxmldoc->createElement("Profile");
      $node4->appendChild($profile);

      $node = $outxmldoc->createElement("Customer");
      $profile->appendChild($node);
      $node->setAttribute("Gender", "");

      $node2 = $outxmldoc->createElement("PersonName");
      $node->appendChild($node2);

      $node3 = $outxmldoc->createElement("GivenName");
      $node2->appendChild($node3);
      $text_node = $outxmldoc->createCDATASection($order_info["last_name"]);
      $node3->appendChild($text_node);

      $node4 = $outxmldoc->createElement("Surname");
      $node2->appendChild($node4);
      $text_node = $outxmldoc->createCDATASection($order_info["first_name"]);
      $node4->appendChild($text_node);

      $node2 = $outxmldoc->createElement("Telephone");
      $node->appendChild($node2);
      $node2->setAttribute("PhoneNumber", $order_info["telephone"]);
      $node2->setAttribute("PhoneTechType", "1");

      $node2 = $outxmldoc->createElement("Email");
      $node->appendChild($node2);
      $text_node = $outxmldoc->createCDATASection($order_info["email"]);
      $node2->appendChild($text_node);

      $node2 = $outxmldoc->createElement("Address");
      $node->appendChild($node2);
      $node2->setAttribute("FormattedInd", "true");
      $node2->setAttribute("Type", "1");

      $node3 = $outxmldoc->createElement("AddressLine");
      $node2->appendChild($node3);
      $text_node = $outxmldoc->createCDATASection($order_info["address"]);
      $node3->appendChild($text_node);

      $node3 = $outxmldoc->createElement("CityName");
      $node2->appendChild($node3);
      $text_node = $outxmldoc->createCDATASection($order_info["city"]);
      $node3->appendChild($text_node);

      $node3 = $outxmldoc->createElement("PostalCode");
      $node2->appendChild($node3);
      $text_node = $outxmldoc->createCDATASection($order_info["zip"]);
      $node3->appendChild($text_node);

      $node3 = $outxmldoc->createElement("CountryName");
      $node2->appendChild($node3);
      $node3->setAttribute("Code", $order_info["country_code"]);
      $text_node = $outxmldoc->createCDATASection($order_info["country"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
    } // foreach

    if(trim($reserv_list, ", ") == "")
    {
      $result["resultmessage"] =  "Reservations requested: no new available";
    }
    else
    {
      $result["resultmessage"] =  "Reservations retrived: " . trim($reserv_list, ", ");
    }

    $result["reservations"] = true;

    return true;
  } // processHotelSpiderReservations
  //-----------------------------------------------------------------
  function processHotelSpiderCount(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["htspider_take_counts"]))
    {
      $result["resultmessage"] = "Applying of the room counts is skipped because it is turned off!";
      $result["output_tag"] = "OTA_HotelInvCountNotifRS";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Inventories block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["htspider_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["htspider_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ/ns:Inventories/ns:Inventory");

    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $invertory = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $invertory);
      if($children->length == 0) continue;

      $row["Start"] = $children->item(0)->getAttribute("Start");
      $row["End"] = $children->item(0)->getAttribute("End");
      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvCode");

      if(empty($row["Start"]) || empty($row["End"]) || empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:InvCounts/ns:InvCount", $invertory);
      if($children->length == 0) continue;

      $row["Count"] = $children->item(0)->getAttribute("Count");
      if(empty($row["Count"])) 
        $row["Count"] = 0;

      $data_rows[] = $row;
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      $result["output_tag"] = "OTA_HotelInvCountNotifRS";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The number of available rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") has been set to " . $row["Count"] . " for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $room_id = $rooms[$row["InvTypeCode"]]["id"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      $count = $row["Count"];
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $count, 'INDIVIDUAL')";
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ROOM_COUNT = $count
                    WHERE DATE = '$dt' AND ROOM_ID = $room_id
                   ";
        }

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }
    }

    $result["output_tag"] = "OTA_HotelInvCountNotifRS";

    return true;
  } // processHotelSpiderCount
  //-----------------------------------------------------------------
  function processHotelSpiderReservConfirm(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $instance = $dbw->escape($instance);
    if(empty($instance) || !is_numeric($instance)) $instance = 1;
    
    $query = "UPDATE {$prfx}_HTL_ORDER SET
              HTSPIDER_DELIVERED = '1'
              WHERE ID IN (SELECT ORDER_ID FROM {$prfx}_HTL_ORDER_PROP WHERE ROOM_ID IN (SELECT ID FROM {$prfx}_HTL_ROOMS WHERE HTSPIDER_INSTANCE = $instance))
             ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $result["resultmessage"] =  "Reservations retrival confirmed";

    return true;
  } // processHotelSpiderReservConfirm
  //-----------------------------------------------------------------
  function processHotelSpiderRules(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelBookingRuleNotifRQ/ns:RuleMessages");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RuleMessages block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RuleMessages block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["htspider_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["htspider_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelBookingRuleNotifRQ/ns:RuleMessages/ns:RuleMessage");

    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room count data has been supplied!";
      $result["output_tag"] = "OTA_HotelBookingRuleNotifRS";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $invertory = $nodes->item($i);

      $children = $xsdpath->evaluate("ns:StatusApplicationControl", $invertory);
      if($children->length == 0) continue;

      $row["Start"] = $children->item(0)->getAttribute("Start");
      $row["End"] = $children->item(0)->getAttribute("End");
      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvCode");

      if(empty($row["Start"]) || empty($row["End"]) || empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:BookingRules/ns:BookingRule/ns:LengthsOfStay/ns:LengthOfStay", $invertory);
      if($children->length > 0)
      {
        for($j = 0; $j < $children->length; $j++)
        {
          if($children->item($j)->getAttribute("MinMaxMessageType") != "")
          {
            $row[$children->item($j)->getAttribute("MinMaxMessageType")] = $children->item($j)->getAttribute("Time");
          }
        }
      }

      $children = $xsdpath->evaluate("ns:BookingRules/ns:BookingRule/ns:RestrictionStatus", $invertory);
      if($children->length > 0)
      {
        for($j = 0; $j < $children->length; $j++)
        {
          if($children->item($j)->getAttribute("Restriction") == "Arrival")
          {
            $row["CTA"] = $children->item($j)->getAttribute("Status") == "Open" ? "0" : "1";
          }
          if($children->item($j)->getAttribute("Restriction") == "Departure")
          {
            $row["CTD"] = $children->item($j)->getAttribute("Status") == "Open" ? "0" : "1";
          }
        }
      }

      $data_rows[] = $row;
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room rule data has been supplied!";
      $result["output_tag"] = "OTA_HotelBookingRuleNotifRS";
      return true;
    }

    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The following rules for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") has been set for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $set_clause = "";

      if(!empty($row["CTA"]))
      {
        $result["resultmessage"] .= "No arrival: yes\n";
        $set_clause .= "ARRIVAL = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No arrival: no (arrival possible)\n";
        $set_clause .= "ARRIVAL = 1, ";
      }
      if(!empty($row["CTD"]))
      {
        $result["resultmessage"] .= "No departure: yes\n";
        $set_clause .= "DEPARTURE = 0, ";
      }
      else
      {
        $result["resultmessage"] .= "No departure: no (departure possible)\n";
        $set_clause .= "DEPARTURE = 1, ";
      }

      if(!empty($row["MinLOS"]))
      {
        $result["resultmessage"] .= "Minimal stays: " . $row["MinLOS"] . "\n";
        $set_clause .= "MIN_NIGHTS = " . $dbw->escape($row["MinLOS"]) . ", ";
      }
      if(!empty($row["MaxLOS"]))
      {
        $result["resultmessage"] .= "Maximal stays: " . $row["MaxLOS"] . "\n";
        $set_clause .= "MAX_NIGHTS = " . $dbw->escape($row["MaxLOS"]) . ", ";
      }

      $set_clause = trim($set_clause, ", ");

      if(empty($set_clause)) continue;

      $room_id = $rooms[$row["InvTypeCode"]]["id"];
      $room_count = $rooms[$row["InvTypeCode"]]["count"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                  $set_clause
                  WHERE DATE = '$dt' AND ROOM_ID = $room_id
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      } // for
    }

    $result["output_tag"] = "OTA_HotelBookingRuleNotifRS";

    return true;
  } // processHotelSpiderRules
  //-----------------------------------------------------------------
  function processHotelSpiderRate(&$result, &$xmldoc, &$xsdpath, &$settings, &$rooms, $instance)
  {
    global $ERROR;
    global $ERR_DETAILS;

    if(empty($settings["htspider_take_prices"]))
    {
      $result["resultmessage"] = "Applying of the room prices is skipped because it is turned off!";
      $result["output_tag"] = "OTA_HotelRatePlanNotifRS";
      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRatePlanNotifRQ/ns:RatePlans");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RatePlans block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotelcode = $nodes->item(0)->getAttribute("HotelCode");
    if(empty($hotelcode))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "RatePlans block has no attribute HotelCode!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(ifnull($settings["htspider_hotel_id"]) != $hotelcode)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["htspider_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $data_rows = array();
    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRatePlanNotifRQ/ns:RatePlans/ns:RatePlan");
    if($nodes->length == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      $result["output_tag"] = "OTA_HotelRatePlanNotifRS";
      return true;
    }

    for($i = 0; $i < $nodes->length; $i++)
    {
      $row = array();

      $children = $xsdpath->evaluate("ns:SellableProducts/ns:SellableProduct", $nodes->item($i));
      if($children->length == 0) continue;

      $row["InvTypeCode"] = $children->item(0)->getAttribute("InvCode");

      if(empty($row["InvTypeCode"])) continue;

      $children = $xsdpath->evaluate("ns:Rates/ns:Rate", $nodes->item($i));
      if($children->length == 0) continue;

      for($k = 0; $k < $children->length; $k++)
      {
        $rate = $children->item($k);

        $row["Start"] = $rate->getAttribute("Start");
        $row["End"] = $rate->getAttribute("End");

        $subchildren = $xsdpath->evaluate("ns:BaseByGuestAmts/ns:BaseByGuestAmt", $rate);

        if($subchildren->length == 0) continue;

        for($j = 0; $j < $subchildren->length; $j++)
        {
          $price = $subchildren->item($j)->getAttribute("AmountAfterTax");
          $guests = $subchildren->item($j)->getAttribute("NumberOfGuests");

          if(empty($price) || empty($guests) || !is_numeric($price)) continue;

          $row["PRICE" . $guests] = $price;
        }

        $data_rows[] = $row;
      }
    }

    if(count($data_rows) == 0)
    {
      $result["resultmessage"] = "No new room price data has been supplied!";
      $result["output_tag"] = "OTA_HotelRatePlanNotifRS";
      return true;
    }

    // get rate
    $currency_name = "";
    $rate = 1;
    
    $currency = $dbw->escape(ifnull($settings["htspider_currency"]));
    
    $query = "SELECT I_NAME, RATE, IS_DEFAULT FROM ${prfx}_HTL_CURRENCY WHERE I_NAME = '$currency'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if($dbw->fetch_row())
    {
      $rate = $dbw->field_by_name("RATE");
      $currency_name = $dbw->field_by_name("I_NAME");
    }

    $dbw->free_result();
    
    $result["resultmessage"] = "";

    foreach($data_rows as $row)
    {
      if(empty($rooms[$row["InvTypeCode"]]))
      {
        $result["resultmessage"] .= "The room with the code '" . $row["InvTypeCode"] . "' was not found!\n";
        continue;
      }

      $result["resultmessage"] .= "The prices rooms for the room '" . $rooms[$row["InvTypeCode"]]["name"] . "' (" . $row["InvTypeCode"] . ") have been updated for the period " . $row["Start"] . " - " . $row["End"] . "\n";

      $set_clause = "";

      if(!empty($row["PRICE1"]) && !empty($settings["htspider_price1"]))
      {
        $field = $settings["htspider_price1"];
        $result["resultmessage"] .= "PRICE1 > $field: " . $row["PRICE1"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE1"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE2"]) && !empty($settings["htspider_price2"]))
      {
        $field = $settings["htspider_price2"];
        $result["resultmessage"] .= "PRICE2 > $field: " . $row["PRICE2"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE2"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE3"]) && !empty($settings["htspider_price3"]))
      {
        $field = $settings["htspider_price3"];
        $result["resultmessage"] .= "PRICE3 > $field: " . $row["PRICE3"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE3"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE4"]) && !empty($settings["htspider_price4"]))
      {
        $field = $settings["htspider_price4"];
        $result["resultmessage"] .= "PRICE4 > $field: " . $row["PRICE4"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE4"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE5"]) && !empty($settings["htspider_price5"]))
      {
        $field = $settings["htspider_price5"];
        $result["resultmessage"] .= "PRICE5 > $field: " . $row["PRICE5"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE5"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE6"]) && !empty($settings["htspider_price6"]))
      {
        $field = $settings["htspider_price6"];
        $result["resultmessage"] .= "PRICE6 > $field: " . $row["PRICE6"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE6"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE7"]) && !empty($settings["htspider_price7"]))
      {
        $field = $settings["htspider_price7"];
        $result["resultmessage"] .= "PRICE7 > $field: " . $row["PRICE7"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE7"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE8"]) && !empty($settings["htspider_price8"]))
      {
        $field = $settings["htspider_price8"];
        $result["resultmessage"] .= "PRICE8 > $field: " . $row["PRICE8"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE8"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE9"]) && !empty($settings["htspider_price9"]))
      {
        $field = $settings["htspider_price9"];
        $result["resultmessage"] .= "PRICE9 > $field: " . $row["PRICE9"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE9"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE10"]) && !empty($settings["htspider_price10"]))
      {
        $field = $settings["htspider_price10"];
        $result["resultmessage"] .= "PRICE10 > $field: " . $row["PRICE10"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE10"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE11"]) && !empty($settings["htspider_price11"]))
      {
        $field = $settings["htspider_price11"];
        $result["resultmessage"] .= "PRICE11 > $field: " . $row["PRICE11"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE11"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE12"]) && !empty($settings["htspider_price12"]))
      {
        $field = $settings["htspider_price12"];
        $result["resultmessage"] .= "PRICE12 > $field: " . $row["PRICE12"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE12"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE13"]) && !empty($settings["htspider_price13"]))
      {
        $field = $settings["htspider_price13"];
        $result["resultmessage"] .= "PRICE13 > $field: " . $row["PRICE13"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE13"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE14"]) && !empty($settings["htspider_price14"]))
      {
        $field = $settings["htspider_price14"];
        $result["resultmessage"] .= "PRICE14 > $field: " . $row["PRICE14"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE14"]/$rate, 2, ".", "")) . ", ";
      }
      if(!empty($row["PRICE15"]) && !empty($settings["htspider_price15"]))
      {
        $field = $settings["htspider_price15"];
        $result["resultmessage"] .= "PRICE15 > $field: " . $row["PRICE15"] . " $currency_name\n";
        $set_clause .= "$field = " . $dbw->escape(number_format($row["PRICE15"]/$rate, 2, ".", "")) . ", ";
      }

      $set_clause = trim($set_clause, ", ");

      if(empty($set_clause)) continue;

      $room_id = $rooms[$row["InvTypeCode"]]["id"];
      $room_count = $rooms[$row["InvTypeCode"]]["count"];

      $start_time = strtotime($row["Start"]);
      $end_time = strtotime($row["End"]);
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }

        $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                  $set_clause
                  WHERE DATE = '$dt' AND ROOM_ID = $room_id
                 ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }
    }

    $result["output_tag"] = "OTA_HotelRatePlanNotifRS";
    return true;
  } // processHotelSpiderRate
  //-----------------------------------------------------------------
  function processHotelSpider(&$result, &$rooms, &$outxmldoc, $instance)
  {
    $settings = array();
    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    
    if($instance == 2)
    {
      $settings["htspider_user"] = $settings["htspider_user2"];
      $settings["htspider_password"] = $settings["htspider_password2"];
      $settings["htspider_hotel_id"] = $settings["htspider_hotel_id2"];
      $settings["htspider_currency"] = $settings["htspider_currency2"];
      $settings["htspider_date"] = $settings["htspider_date2"];
      $settings["htspider_room_count"] = $settings["htspider_room_count2"];
      
      $settings["htspider_min_stays"] = $settings["htspider_min_stays2"];
      $settings["htspider_max_stays"] = $settings["htspider_max_stays2"];

      $settings["htspider_price1"] = $settings["htspider_price21"];
      $settings["htspider_price2"] = $settings["htspider_price22"];
      $settings["htspider_price3"] = $settings["htspider_price23"];
      $settings["htspider_price4"] = $settings["htspider_price24"];
      $settings["htspider_price5"] = $settings["htspider_price25"];
      $settings["htspider_price6"] = $settings["htspider_price26"];
      $settings["htspider_price7"] = $settings["htspider_price27"];
      $settings["htspider_price8"] = $settings["htspider_price28"];
      $settings["htspider_price9"] = $settings["htspider_price29"];
      $settings["htspider_price10"] = $settings["htspider_price210"];
      $settings["htspider_price11"] = $settings["htspider_price211"];
      $settings["htspider_price12"] = $settings["htspider_price212"];
      $settings["htspider_price13"] = $settings["htspider_price213"];
      $settings["htspider_price14"] = $settings["htspider_price214"];
      $settings["htspider_price15"] = $settings["htspider_price215"];

      $settings["htspider_cta"] = $settings["htspider_cta2"];
      $settings["htspider_ctd"] = $settings["htspider_ctd2"];

      $settings["htspider_take_prices"] = $settings["htspider_take_prices2"];
      $settings["htspider_take_counts"] = $settings["htspider_take_counts2"];
    }

    $xml = file_get_contents("php://input");

    //$xml = '<OTA_HotelInvCountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><Inventories HotelCode="41"><Inventory><StatusApplicationControl Start="2013-11-22" End="2013-11-22" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-23" End="2013-11-23" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-24" End="2013-11-24" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-25" End="2013-11-29" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-11-30" End="2013-11-30" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-01" End="2013-12-01" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-02" End="2013-12-06" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-07" End="2013-12-07" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-08" End="2013-12-08" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-09" End="2013-12-13" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-14" End="2013-12-14" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-15" End="2013-12-15" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-16" End="2013-12-20" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-21" End="2013-12-21" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-22" End="2013-12-22" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-23" End="2013-12-27" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-28" End="2013-12-28" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-29" End="2013-12-29" InvTypeCode="92" /><InvCounts><InvCount Count="20" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-30" End="2013-12-30" InvTypeCode="92" /><InvCounts><InvCount Count="4" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2013-12-31" End="2013-12-31" InvTypeCode="92" /><InvCounts><InvCount Count="5" /></InvCounts></Inventory><Inventory><StatusApplicationControl Start="2014-01-01" End="2014-09-16" InvTypeCode="92" /><InvCounts><InvCount Count="0" /></InvCounts></Inventory></Inventories></OTA_HotelInvCountNotifRQ>';
    //$xml = '<OTA_HotelRateAmountNotifRQ xmlns="http://www.opentravel.org/OTA/2003/05" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Authentication><Login>masch</Login><Password>masch123</Password></Authentication><POS><Source AgentDutyCode="IX0000000000001"><RequestorID ID="1"/></Source></POS><RateAmountMessages HotelCode="6000"><RateAmountMessage><StatusApplicationControl InvTypeCode="92" RatePlanCode="BAR" /><Rates><Rate Start="2013-11-22" End="2013-11-23" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-24" End="2013-11-24" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-25" End="2013-11-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-11-29" End="2013-11-30" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-01" End="2013-12-01" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-02" End="2013-12-05" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-06" End="2013-12-07" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-08" End="2013-12-08" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-09" End="2013-12-12" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-13" End="2013-12-14" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-15" End="2013-12-15" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-16" End="2013-12-19" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-20" End="2013-12-21" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-22" End="2013-12-22" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-23" End="2013-12-26" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-27" End="2013-12-28" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="89.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-29" End="2013-12-29" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="120.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2013-12-30" End="2013-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="69.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="true" NonRefundableIndicator="true"/></PaymentPolicies></Rate><Rate Start="2014-01-01" End="2014-12-31" MinLOS="1" MaxLOS="0" ><TPA_Extensions CTA="0" CTD="0" /> <BaseByGuestAmts><BaseByGuestAmt AgeQualifyingCode="10" NumberOfGuests="2" AmountAfterTax="999.00" /></BaseByGuestAmts><PaymentPolicies><GuaranteePayment NoCardHolderInfoReqInd="false" NonRefundableIndicator="false"/></PaymentPolicies><CancelPenalty><Deadline OffsetTimeUnit="Day" OffsetDropTime="BeforeArrival" OffsetUnitMultiplier="0" /></CancelPenalty></Rate></Rates></RateAmountMessage></RateAmountMessages></OTA_HotelRateAmountNotifRQ>';

    if(trim($xml) == "")
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "No data has been submitted!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xmldoc = new DOMDocument();
    $xmldoc->formatOutput = true;
    if(!@$xmldoc->loadXML($xml))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "The submitted data is not a valid XML structure!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    //debug_message($xmldoc->saveXML());

    $xsdpath = new DOMXPath($xmldoc);
    $xsdpath->registerNamespace('ns', "http://www.opentravel.org/OTA/2003/05");

    // check validity

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelInvCountNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelInvCountNotifRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelRatePlanNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelRatePlanNotifRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelBookingRuleNotifRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelBookingRuleNotifRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelResNotifRS");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelResNotifRS";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_HotelDescriptiveInfoRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_HotelDescriptiveInfoRQ";
    }

    $nodes = $xsdpath->evaluate("/ns:OTA_ReadRQ");
    if($nodes->length > 0)
    {
      $result["output_tag"] = "OTA_ReadRQ";
    }

    if(empty($result["output_tag"]))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "Neither OTA_HotelInvCountNotifRQ nore OTA_HotelRatePlanNotifRQ nore OTA_HotelBookingRuleNotifRQ nore OTA_HotelResNotifRS nore OTA_ReadRQ nore OTA_HotelDescriptiveInfoRQ block is found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check login

    $login = "";
    $password = "";

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "");

    $nodes = $xsdpath->evaluate("/ns:" . $result["output_tag"] . "/ns:POS/ns:Source/ns:RequestorID");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The Authentication block POS with Login and Password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $login = $nodes->item(0)->getAttribute("ID");
    $password = $nodes->item(0)->getAttribute("MessagePassword");

    if(ifnull($settings["htspider_user"]) != $login ||
       ifnull($settings["htspider_password"]) != $password
      )
    {
      $result["errtype"] = "4";
      $result["errcode"] = "4"; // Authentication
      $result["resultmessage"] = "The login or password is invalid!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if($result["output_tag"] == "OTA_HotelInvCountNotifRQ")
      return $this->processHotelSpiderCount($result, $xmldoc, $xsdpath, $settings, $rooms, $instance);
    elseif($result["output_tag"] == "OTA_HotelRatePlanNotifRQ")
      return $this->processHotelSpiderRate($result, $xmldoc, $xsdpath, $settings, $rooms, $instance);
    elseif($result["output_tag"] == "OTA_HotelBookingRuleNotifRQ")
      return $this->processHotelSpiderRules($result, $xmldoc, $xsdpath, $settings, $rooms, $instance);
    elseif($result["output_tag"] == "OTA_HotelDescriptiveInfoRQ")
      return $this->processHotelSpiderRoomInfo($result, $xmldoc, $xsdpath, $settings, $rooms, $outxmldoc, $instance);
    elseif($result["output_tag"] == "OTA_ReadRQ")
      return $this->processHotelSpiderReservations($result, $xmldoc, $xsdpath, $settings, $rooms, $outxmldoc, $instance);
    elseif($result["output_tag"] == "OTA_HotelResNotifRS")
      return $this->processHotelSpiderReservConfirm($result, $xmldoc, $xsdpath, $settings, $rooms, $instance);

    $result["errtype"] = "4";
    $result["errcode"] = "1"; // Unknown
    $result["resultmessage"] = "Unknown Error!";
    $result["output_tag"] = "OTA_ErrorRS";

    return false;
  } // processHotelSpider
  //-----------------------------------------------------------------
  function handleHotelSpider($instance = 1)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    else
    {
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    }

    if(empty($result["errcode"]))
    {
      $query = "SELECT ID, ROOM_CODE, ROOMS_COUNT, I_NAME FROM {$prfx}_HTL_ROOMS";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
      }
    }

    $rooms = array();

    if(empty($result["errcode"]))
    {
      while($dbw->fetch_row())
      {
        $code = $dbw->field_by_name("ROOM_CODE");
        if(empty($code)) continue;

        $rooms[$code] = array("id" => $dbw->field_by_name("ID"), "count" => $dbw->field_by_name("ROOMS_COUNT"), "name" => $dbw->field_by_name("I_NAME"));
      }
    }

    $now = $dbw->format_datetime(time());
    $service = null_if_empty("HOTELSPIDER");

    $xml = file_get_contents("php://input");
    $data = null_if_empty($dbw->escape($xml));

    $query = "INSERT INTO {$prfx}_HTL_EXT_SERVICES_PUSH_LOG
                (DT, DATA, SERVICE_TYPE) VALUES
                ('$now', $data, $service)";

    if(!$dbw->execute_query($query))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    if(empty($result["errcode"]))
    {
      $id = $dbw->insert_id();

      $this->processHotelSpider($result, $rooms, $xmldoc, $instance);
    }

    $result_status = "";

    if(!empty($result["errcode"]) || (empty($result["reservations"]) && empty($result["room_info"])))
    {
      $root = $xmldoc->createElement($result["output_tag"]);
      $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      $root->setAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
      $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
      $root->setAttribute("PrimaryLangID", "en");
      $root->setAttribute("Target", "Production");
      $root->setAttribute("Version", "3");

      $root = $xmldoc->appendChild($root);

      if(empty($result["errcode"]))
      {
        $node = $xmldoc->createElement("Success");
        $root->appendChild($node);
        $result_status = "SUCCESS";
      }
      else
      {
        $errors = $xmldoc->createElement("Errors");
        $root->appendChild($errors);
        $node = $xmldoc->createElement("Error");
        $node->setAttribute("Type", $result["errtype"]);
        $node->setAttribute("Code", $result["errcode"]);
        $text = $xmldoc->createCDATASection($result["resultmessage"]);
        $node->appendChild($text);
        $errors->appendChild($node);
        $result_status = "ERROR";
      }
    }
    else
    {
      $result_status = "SUCCESS";
    }

    if(empty($id)) $id = 0;

    $txt = null_if_empty($dbw->escape("[" . $instance . "] " . ifnull($result["resultmessage"])));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICES_PUSH_LOG SET
                RESULT = '$result_status',
                DETAILS = $txt
                WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }
    
    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  } // handleHotelSpider
  //-----------------------------------------------------------------
  function handleHotelPartner()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();
    $settings = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    elseif(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";
    }
    else
    {
      $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    }

    if(empty($result["errcode"]))
    {
      $query = "SELECT ID, ROOM_CODE, ROOMS_COUNT, I_NAME FROM {$prfx}_HTL_ROOMS";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";
      }
    }

    if(empty($result["errcode"]))
    {
      $rooms = array();
      while($dbw->fetch_row())
      {
        $code = $dbw->field_by_name("ROOM_CODE");
        if(empty($code)) continue;

        $rooms[$code] = array("id" => $dbw->field_by_name("ID"), "count" => $dbw->field_by_name("ROOMS_COUNT"), "name" => $dbw->field_by_name("I_NAME"));
      }
    }

    $now = $dbw->format_datetime(time());
    $service = null_if_empty("hotelpartner");

    $xml = file_get_contents("php://input");
    $data = null_if_empty($dbw->escape($xml));

    $query = "INSERT INTO {$prfx}_HTL_EXT_SERVICES_PUSH_LOG
                (DT, DATA, SERVICE_TYPE) VALUES
                ('$now', $data, $service)";

    if(!$dbw->execute_query($query))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    if(empty($result["errcode"]))
    {
      $id = $dbw->insert_id();

      $this->processHotelPartner($result, $rooms);
    }

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $root = $xmldoc->createElement("Result");

    $root = $xmldoc->appendChild($root);

    $result_status = "";

    if(empty($result["errcode"]))
    {
      $node = $xmldoc->createElement("Success");
      $root->appendChild($node);
      $result_status = "SUCCESS";
    }
    else
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $node->setAttribute("Type", $result["errtype"]);
      $node->setAttribute("Code", $result["errcode"]);
      $text = $xmldoc->createCDATASection($result["resultmessage"]);
      $node->appendChild($text);
      $errors->appendChild($node);
      $result_status = "ERROR";
    }

    if(empty($id)) $id = 0;

    $txt = null_if_empty($dbw->escape(ifnull($result["resultmessage"])));

    $query = "UPDATE {$prfx}_HTL_EXT_SERVICES_PUSH_LOG SET
                RESULT = '$result_status',
                DETAILS = $txt
                WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
    }

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  } // handleHotelPartner
  //-----------------------------------------------------------------
  function processHotelPartner(&$result, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $settings = array();
    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    
    $rate_plans = array();
    
    $query = "SELECT  ID, NAME, TP, CODE
                FROM {$prfx}_HTL_RATE_PLAN
                ORDER BY SORT_ORDER, NAME
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    while($dbw->fetch_row())
    {
      $code = $dbw->field_by_name("CODE");
      if(empty($code)) continue;

      $name = $dbw->field_by_name("NAME");
      if(empty($name)) $name = "-";

      $rate_plans[$code] = array("name" => $name,
                                 "type" => $dbw->field_by_name("TP"),
                                 "id" => $dbw->field_by_name("ID")
                                );
    }

    $dbw->free_result();

    $xml = file_get_contents("php://input");

    if(trim($xml) == "")
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "No data has been submitted!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xmldoc = new DOMDocument();
    $xmldoc->formatOutput = true;
    if(!@$xmldoc->loadXML($xml))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "The submitted data is not a valid XML structure!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xsdpath = new DOMXPath($xmldoc);

    // check validity

    $nodes = $xsdpath->evaluate("/request/hoteldata");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "hoteldata block is not found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $nodes = $xsdpath->evaluate("/request/updaterates");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "updaterates block is not found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check hotel id

    $hotel_id = "";

    $nodes = $xsdpath->evaluate("/request/hoteldata/hotelid");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The hotelid is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotel_id = $nodes->item(0)->nodeValue;

    if(empty($hotel_id) || ifnull($settings["hotelpartner_hotel_id"]) != $hotel_id)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["hotelpartner_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check login

    $login = "";
    $password = "";

    $nodes = $xsdpath->evaluate("/request/hoteldata/username");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The username is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $login = $nodes->item(0)->nodeValue;

    $nodes = $xsdpath->evaluate("/request/hoteldata/password");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $password = $nodes->item(0)->nodeValue;

    if(ifnull($settings["hotelpartner_user"]) != $login ||
       ifnull($settings["hotelpartner_password"]) != $password
      )
    {
      $result["errtype"] = "4";
      $result["errcode"] = "4"; // Authentication
      $result["resultmessage"] = "The login or password is invalid!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    
    $data_rows = array();
    
    $rates = $xsdpath->evaluate("/request/updaterates/rate");
    if($rates->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The rate block is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    for($i = 0; $i < $rates->length; $i++)
    {
      $rcode = $rates->item($i)->getAttribute("code");
      $data_rows[$rcode] = array();
      
      $nodes = $xsdpath->evaluate("roomid", $rates->item($i));
      if($nodes->length == 0)
      {
        $result["errtype"] = "4";
        $result["errcode"] = "9"; // Authentical model
        $result["resultmessage"] = "The roomid is missing!";
        $result["output_tag"] = "OTA_ErrorRS";

        return false;
      }

      $data_rows[$rcode]["roomid"] = $nodes->item(0)->nodeValue;
      
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("datefrom", $rates->item($i));
      if($nodes->length == 0)
      {
        $result["errtype"] = "4";
        $result["errcode"] = "9"; // Authentical model
        $result["resultmessage"] = "The datefrom is missing!";
        $result["output_tag"] = "OTA_ErrorRS";

        return false;
      }

      $data_rows[$rcode]["datefrom"] = $nodes->item(0)->nodeValue;
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("dateto", $rates->item($i));
      if($nodes->length == 0)
      {
        $result["errtype"] = "4";
        $result["errcode"] = "9"; // Authentical model
        $result["resultmessage"] = "The dateto is missing!";
        $result["output_tag"] = "OTA_ErrorRS";

        return false;
      }

      $data_rows[$rcode]["dateto"] = $nodes->item(0)->nodeValue;
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("availability", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["availability"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceO1", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceO1"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceO2", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceO2"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceO3", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceO3"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceO4", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceO4"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceEA", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceEA"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("priceEC", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["priceEC"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("minnights", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["minnights"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("CTA", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["CTA"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("CTD", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["CTD"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
      $nodes = $xsdpath->evaluate("closed", $rates->item($i));
      if($nodes->length > 0)
      {
        $data_rows[$rcode]["closed"] = $nodes->item(0)->nodeValue;
      }
      //------------------------------------------------------------
    } // for rates
    
    $result["resultmessage"] = "";
    
    foreach($data_rows as $rcode => $rdata)
    {
      if(empty($rdata["roomid"])) continue;
      
      $roomid = $rdata["roomid"];

      $dateto = $rdata["dateto"];
      $datefrom = $rdata["datefrom"];
      
      if(empty($rate_plans[$rcode]) && $settings["hotelpartner_drate_code"] != $rcode)
      {
        $result["resultmessage"] .= "Rate '$rcode' was not found in the target system\n";
        continue;
      }
      
      if($settings["hotelpartner_drate_code"] != $rcode && 
         !in_array($rate_plans[$rcode]["type"], array("additionalownprice", "additionalandservices"))
        ) 
      {
        $result["resultmessage"] .= "Rate '$rcode' is calculable based on the default rate in the target system and cannot be set\n";
        continue;
      }
      
      $set_clause = "";

      $result["resultmessage"] .= "The following data for the room '" . $rooms[$roomid]["name"] . "' (" . $roomid . ") has been updated for the period " . $datefrom . " - " . $dateto . "\n";
      $result["resultmessage"] .= "Rate plan: $rcode\n";

      if(!empty($rdata["CTA"]))
      {
        $result["resultmessage"] .= "No arrival: yes\n";
        $set_clause .= ", ARRIVAL = '0'";
      }
      else
      {
        $result["resultmessage"] .= "No arrival: no (arrival possible)\n";
        $set_clause .= ", ARRIVAL = '1'";
      }

      if(!empty($rdata["CTD"]))
      {
        $result["resultmessage"] .= "No departure: yes\n";
        $set_clause .= ", DEPARTURE = '0'";
      }
      else
      {
        $result["resultmessage"] .= "No departure: no (departure possible)\n";
        $set_clause .= ", DEPARTURE = '1'";
      }

      if(!empty($rdata["closed"]))
      {
        $result["resultmessage"] .= "Closed: yes\n";
        $set_clause .= ", CLOSED = '1'";
      }
      else
      {
        $result["resultmessage"] .= "Closed: no\n";
        $set_clause .= ", CLOSED = '0'";
      }

      if(empty($settings["hotelpartner_take_counts"]))
      {
        $result["resultmessage"] .= "Applying of the room counts is skipped because it is turned off!\n";
      }
      elseif($rdata["availability"] !== "")
      {
        $result["resultmessage"] .= "Number of available rooms: " . $rdata["availability"] . "\n";
      }

      if(!empty($rdata["minnights"]))
      {
        $set_clause .= ", MIN_NIGHTS = " . $dbw->escape($rdata["minnights"]);
        $result["resultmessage"] .= "Minimal nights: " . $rdata["minnights"] . "\n";
      }

      if(empty($settings["hotelpartner_take_prices"]))
      {
        $result["resultmessage"] .= "Applying of the room prices is skipped because it is turned off!\n";
      }
      else
      {
        if(!empty($rdata["priceO1"]) && !empty($settings["hotelpartner_price1"]))
        {
          $field = $settings["hotelpartner_price1"];
          $result["resultmessage"] .= "priceO1 > $field: " . $rdata["priceO1"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceO1"]);
        }
        if(!empty($rdata["priceO2"]) && !empty($settings["hotelpartner_price2"]))
        {
          $field = $settings["hotelpartner_price2"];
          $result["resultmessage"] .= "priceO2 > $field: " . $rdata["priceO2"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceO2"]);
        }
        if(!empty($rdata["priceO3"]) && !empty($settings["hotelpartner_price3"]))
        {
          $field = $settings["hotelpartner_price3"];
          $result["resultmessage"] .= "priceO3 > $field: " . $rdata["priceO3"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceO3"]);
        }
        if(!empty($rdata["priceO4"]) && !empty($settings["hotelpartner_price4"]))
        {
          $field = $settings["hotelpartner_price4"];
          $result["resultmessage"] .= "priceO4 > $field: " . $rdata["priceO4"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceO4"]);
        }
        if(!empty($rdata["priceEA"]) && !empty($settings["hotelpartner_price_add_adult"]))
        {
          $field = $settings["hotelpartner_price_add_adult"];
          $result["resultmessage"] .= "priceEA > $field: " . $rdata["priceEA"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceEA"]);
        }
        if(!empty($rdata["priceEC"]) && !empty($settings["hotelpartner_price_add_child"]))
        {
          $field = $settings["hotelpartner_price_add_child"];
          $result["resultmessage"] .= "priceEC > $field: " . $rdata["priceEC"] . "\n";
          $set_clause .= ", $field = " . $dbw->escape($rdata["priceEC"]);
        }
      }

      $set_clause = trim($set_clause, ",");
      $result["resultmessage"] .= "\n";
      
      $room_id = $rooms[$roomid]["id"];
      $room_count = $rooms[$roomid]["count"];

      $start_time = strtotime($datefrom);
      $end_time = strtotime($dateto);
      for($i = $start_time; $i <= $end_time; $i = $i+86400)
      {
        $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
        $dt = $dbw->format_datetime($tm);

        $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }

        $do_insert = true;

        if($dbw->fetch_row())
        {
          $do_insert = false;
        }

        if($do_insert)
        {
          $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                   (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                   VALUES
                   ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }
        
        if(!empty($settings["hotelpartner_take_counts"]) && $rdata["availability"] !== "")
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    ROOM_COUNT = " . $dbw->escape($rdata["availability"]) .
                    " WHERE DATE = '$dt' AND ROOM_ID = $room_id";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }
        
        if($settings["hotelpartner_drate_code"] != $rcode)
        {
          $rate_plan_id = $rate_plans[$rcode]["id"];
          
          $query = "SELECT 1 FROM {$prfx}_HTL_RATE_PRICE WHERE DATE = '$dt' AND ROOM_ID = $room_id AND RATE_PLAN_ID = $rate_plan_id";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }

          $do_insert = true;
          if($dbw->fetch_row())
          {
            $do_insert = false;
          }

          if($do_insert)
          {
            $query = "INSERT INTO {$prfx}_HTL_RATE_PRICE
                     (DATE, RATE_PLAN_ID, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE)
                     VALUES
                     ('$dt', $rate_plan_id, $room_id, 1, 1, 1)";

            if(!$dbw->execute_query($query))
            {
              $ERROR = text("ErrQueryFailed");
              $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                             $dbw->get_last_query();

              $result["errtype"] = "4";
              $result["errcode"] = "13"; // Application error
              $result["resultmessage"] = "SQL Query Error!";
              $result["output_tag"] = "OTA_ErrorRS";

              return false;
            }
          }
          
          $query = "UPDATE {$prfx}_HTL_RATE_PRICE SET
                    $set_clause
                    WHERE DATE = '$dt' AND ROOM_ID = $room_id AND RATE_PLAN_ID = $rate_plan_id";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }
        else
        {
          $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                    $set_clause
                    WHERE DATE = '$dt' AND ROOM_ID = $room_id";
          if(!$dbw->execute_query($query))
          {
            $ERROR = text("ErrQueryFailed");
            $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                           $dbw->get_last_query();

            $result["errtype"] = "4";
            $result["errcode"] = "13"; // Application error
            $result["resultmessage"] = "SQL Query Error!";
            $result["output_tag"] = "OTA_ErrorRS";

            return false;
          }
        }
      }
    } // foreach data_rows
    
    return true;
  } // processHotelPartner
  //-----------------------------------------------------------------
  function processHotelPartner2(&$result, &$rooms)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $settings = array();
    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "13"; // Application error
      $result["resultmessage"] = "SQL Query Error!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xml = file_get_contents("php://input");

    if(trim($xml) == "")
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "No data has been submitted!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xmldoc = new DOMDocument();
    $xmldoc->formatOutput = true;
    if(!@$xmldoc->loadXML($xml))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "12"; // Processing exception
      $result["resultmessage"] = "The submitted data is not a valid XML structure!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $xsdpath = new DOMXPath($xmldoc);

    // check validity

    $nodes = $xsdpath->evaluate("/request/hoteldata");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "hoteldata block is not found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $nodes = $xsdpath->evaluate("/request/updaterates");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "10"; // Required field missing
      $result["resultmessage"] = "updaterates block is not found!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check hotel id

    $hotel_id = "";

    $nodes = $xsdpath->evaluate("/request/hoteldata/hotelid");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The hotelid is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $hotel_id = $nodes->item(0)->nodeValue;

    if(empty($hotel_id) || ifnull($settings["hotelpartner_hotel_id"]) != $hotel_id)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "15";
      $result["resultmessage"] = "The hotel code is wrong! The code " . $settings["chanmanager_hotel_id"] . " is expected!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    // check login

    $login = "";
    $password = "";

    $nodes = $xsdpath->evaluate("/request/hoteldata/username");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The username is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $login = $nodes->item(0)->nodeValue;

    $nodes = $xsdpath->evaluate("/request/hoteldata/password");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The password is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $password = $nodes->item(0)->nodeValue;

    if(ifnull($settings["hotelpartner_user"]) != $login ||
       ifnull($settings["hotelpartner_password"]) != $password
      )
    {
      $result["errtype"] = "4";
      $result["errcode"] = "4"; // Authentication
      $result["resultmessage"] = "The login or password is invalid!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    //------------------------------------------------------------
    $roomid = "";

    $nodes = $xsdpath->evaluate("/request/updaterates/roomid");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The roomid is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $roomid = $nodes->item(0)->nodeValue;

    if(empty($roomid))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The roomid is empty!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    if(empty($rooms[$roomid]))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] .= "The room with the code '" . $roomid . "' was not found!\n";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    //------------------------------------------------------------
    $datefrom = "";

    $nodes = $xsdpath->evaluate("/request/updaterates/datefrom");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The datefrom is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $datefrom = $nodes->item(0)->nodeValue;

    if(empty($datefrom))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The datefrom is empty!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    //------------------------------------------------------------
    $dateto = "";

    $nodes = $xsdpath->evaluate("/request/updaterates/dateto");
    if($nodes->length == 0)
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The dateto is missing!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }

    $dateto = $nodes->item(0)->nodeValue;

    if(empty($dateto))
    {
      $result["errtype"] = "4";
      $result["errcode"] = "9"; // Authentical model
      $result["resultmessage"] = "The dateto is empty!";
      $result["output_tag"] = "OTA_ErrorRS";

      return false;
    }
    //------------------------------------------------------------
    $availability = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/availability");
    if($nodes->length > 0)
    {
      $availability = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceO1 = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceO1");
    if($nodes->length > 0)
    {
      $priceO1 = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceO2 = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceO2");
    if($nodes->length > 0)
    {
      $priceO2 = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceO3 = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceO3");
    if($nodes->length > 0)
    {
      $priceO3 = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceO4 = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceO4");
    if($nodes->length > 0)
    {
      $priceO4 = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceEA = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceEA");
    if($nodes->length > 0)
    {
      $priceEA = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $priceEC = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/priceEC");
    if($nodes->length > 0)
    {
      $priceEC = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $minnights = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/minnights");
    if($nodes->length > 0)
    {
      $minnights = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $CTA = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/CTA");
    if($nodes->length > 0)
    {
      $CTA = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------
    $CTD = "";
    $nodes = $xsdpath->evaluate("/request/updaterates/CTD");
    if($nodes->length > 0)
    {
      $CTD = $nodes->item(0)->nodeValue;
    }
    //------------------------------------------------------------

    $result["resultmessage"] = "";

    $set_clause = "";

    $result["resultmessage"] .= "The following data for the room '" . $rooms[$roomid]["name"] . "' (" . $roomid . ") has been updated for the period " . $datefrom . " - " . $dateto . "\n";

    if(!empty($CTA))
    {
      $result["resultmessage"] .= "No arrival: yes\n";
      $set_clause .= ", ARRIVAL = '0'";
    }
    else
    {
      $result["resultmessage"] .= "No arrival: no (arrival possible)\n";
      $set_clause .= ", ARRIVAL = '1'";
    }

    if(!empty($CTD))
    {
      $result["resultmessage"] .= "No departure: yes\n";
      $set_clause .= ", DEPARTURE = '0'";
    }
    else
    {
      $result["resultmessage"] .= "No departure: no (departure possible)\n";
      $set_clause .= ", DEPARTURE = '1'";
    }

    if(empty($settings["hotelpartner_take_counts"]))
    {
      $result["resultmessage"] .= "Applying of the room counts is skipped because it is turned off!\n";
    }
    elseif($availability !== "")
    {
      $set_clause .= ", ROOM_COUNT = " . $dbw->escape($availability);
      $result["resultmessage"] .= "Number of available rooms: " . $availability . "\n";
    }

    if(!empty($minnights))
    {
      $set_clause .= ", MIN_NIGHTS = " . $dbw->escape($minnights);
      $result["resultmessage"] .= "Minimal nights: " . $minnights . "\n";
    }

    if(empty($settings["hotelpartner_take_prices"]))
    {
      $result["resultmessage"] .= "Applying of the room prices is skipped because it is turned off!\n";
    }
    else
    {
      if(!empty($priceO1) && !empty($settings["hotelpartner_price1"]))
      {
        $field = $settings["hotelpartner_price1"];
        $result["resultmessage"] .= "priceO1 > $field: " . $priceO1 . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceO1);
      }
      if(!empty($priceO2) && !empty($settings["hotelpartner_price2"]))
      {
        $field = $settings["hotelpartner_price2"];
        $result["resultmessage"] .= "priceO2 > $field: " . $priceO2 . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceO2);
      }
      if(!empty($priceO3) && !empty($settings["hotelpartner_price3"]))
      {
        $field = $settings["hotelpartner_price3"];
        $result["resultmessage"] .= "priceO3 > $field: " . $priceO3 . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceO3);
      }
      if(!empty($priceO4) && !empty($settings["hotelpartner_price4"]))
      {
        $field = $settings["hotelpartner_price4"];
        $result["resultmessage"] .= "priceO4 > $field: " . $priceO4 . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceO4);
      }
      if(!empty($priceEA) && !empty($settings["hotelpartner_price_add_adult"]))
      {
        $field = $settings["hotelpartner_price_add_adult"];
        $result["resultmessage"] .= "priceEA > $field: " . $priceEA . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceEA);
      }
      if(!empty($priceEC) && !empty($settings["hotelpartner_price_add_child"]))
      {
        $field = $settings["hotelpartner_price_add_child"];
        $result["resultmessage"] .= "priceEC > $field: " . $priceEC . "\n";
        $set_clause .= ", $field = " . $dbw->escape($priceEC);
      }
    }

    $room_id = $rooms[$roomid]["id"];
    $room_count = $rooms[$roomid]["count"];

    $start_time = strtotime($datefrom);
    $end_time = strtotime($dateto);
    for($i = $start_time; $i <= $end_time; $i = $i+86400)
    {
      $tm = mktime(00,00,00,date("m", $i), date("d", $i), date("Y", $i));
      $dt = $dbw->format_datetime($tm);

      $query = "SELECT 1 FROM {$prfx}_HTL_ROOM_AVAILABILITY WHERE DATE = '$dt' AND ROOM_ID = $room_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";

        return false;
      }

      $do_insert = true;

      if($dbw->fetch_row())
      {
        $do_insert = false;
      }

      if($do_insert)
      {
        $query = "INSERT INTO {$prfx}_HTL_ROOM_AVAILABILITY
                 (DATE, ROOM_ID, MIN_NIGHTS, ARRIVAL, DEPARTURE, ROOM_COUNT, PRICE_TYPE)
                 VALUES
                 ('$dt', $room_id, 1, 1, 1, $room_count, 'INDIVIDUAL')";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $result["errtype"] = "4";
          $result["errcode"] = "13"; // Application error
          $result["resultmessage"] = "SQL Query Error!";
          $result["output_tag"] = "OTA_ErrorRS";

          return false;
        }
      }

      $query = "UPDATE {$prfx}_HTL_ROOM_AVAILABILITY SET
                PRICE_TYPE = 'INDIVIDUAL'
                $set_clause
                WHERE DATE = '$dt' AND ROOM_ID = $room_id
               ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $result["errtype"] = "4";
        $result["errcode"] = "13"; // Application error
        $result["resultmessage"] = "SQL Query Error!";
        $result["output_tag"] = "OTA_ErrorRS";

        return false;
      }
    }

    return true;
  } // processHotelPartner
  //-----------------------------------------------------------------
  function checkHotelPartner()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      $errors = $xmldoc->createElement("Errors");
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("SQL Query Error!");
      $node->appendChild($text);
      $errors->appendChild($node);

      $xmldoc->appendChild($errors);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();

      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $errors = array();

    if(reqvar_empty("datefrom"))
    {
      $errors[] = "The 'datefrom' is not specified!";
    }

    $datefrom = reqvar("datefrom");

    if(reqvar_empty("dateto"))
    {
      $errors[] = "The 'dateto' is not specified!";
    }

    $dateto = reqvar("dateto");

    if(reqvar_empty("roomid"))
    {
      $errors[] = "The 'roomid' is not specified!";
    }

    $roomid = reqvar("roomid");

    if(iso_date($datefrom, "Y-m-d")=="error")
    {
      $errors[] = "The 'datefrom' has wrong format, expected Y-m-d!";
    }

    if(iso_date($dateto, "Y-m-d")=="error")
    {
      $errors[] = "The 'dateto' has wrong format, expected Y-m-d!";
    }

    if(count($errors) > 0)
    {
      $errs = $xmldoc->createElement("Errors");

      foreach($errors as $error)
      {
        $node = $xmldoc->createElement("Error");
        $text = $xmldoc->createCDATASection($error);
        $node->appendChild($text);
        $errs->appendChild($node);
      }

      $xmldoc->appendChild($errs);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();

      return true;
    }

    $room_code = $dbw->escape($roomid);

    if(!$dbw->execute_query("SELECT ${prfx}_HTL_ROOMS.ID, I_NAME, ROOM_CODE,
       TYPE, LANG_KEY
       FROM ${prfx}_HTL_ROOMS
       INNER JOIN ${prfx}_HTL_ROOMS_PROPS ON
       (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID)
       INNER JOIN ${prfx}_LANGUAGE ON (LANGUAGE_ID = ${prfx}_LANGUAGE.ID)
       WHERE ROOM_CODE = '$room_code'
    "))
    {
      $errors = $xmldoc->createElement("Errors");
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("SQL Query Error!");
      $node->appendChild($text);
      $errors->appendChild($node);

      $xmldoc->appendChild($errors);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();

      return false;
    }

    $room = array();

    while($dbw->fetch_row())
    {
      $room["ID"] = trim($dbw->field_by_name("ID"));
      $room["InternalName"] = trim($dbw->field_by_name("I_NAME"));
      $room["RoomCode"] = trim($dbw->field_by_name("ROOM_CODE"));
      $room["Names"][$dbw->field_by_name("LANG_KEY")] = trim($dbw->field_by_name("TYPE"));
    }

    if(empty($room))
    {
      $errors = $xmldoc->createElement("Errors");
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("The room with code '$roomid' does not exist!");
      $node->appendChild($text);
      $errors->appendChild($node);

      $xmldoc->appendChild($errors);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();

      return false;
    }

    $root = $xmldoc->createElement("Room");

    $root->setAttribute("iname", ifnull($room["InternalName"]));
    $root->setAttribute("code", ifnull($room["RoomCode"]));
    if(!empty($room["Names"]))
    {
      foreach($room["Names"] as $lkey => $name)
      {
        $root->setAttribute($lkey, $name);
      }
    }

    $from = $dbw->format_datetime(strtotime($datefrom));
    $to = $dbw->format_datetime(strtotime($dateto));

    if(!$dbw->execute_query("SELECT
                             ARRIVAL,
                             DEPARTURE,
                             ROOM_COUNT,
                             PRICE_ADULT,
                             PRICE_ADULT2,
                             PRICE_ADULT3,
                             PRICE_ADULT4,
                             PRICE_ADULT_CHILD,
                             PRICE_ADULT_CHILD2,
                             PRICE_ADULT_CHILD3,
                             PRICE_ADULT_CHILD4,
                             PRICE_ADD_ADULT,
                             PRICE_ADD_CHILD,
                             PRICE_ADD_CHILD2,
                             PRICE_ADD_CHILD3,
                             PRICE_ADD_CHILD4,
                             MIN_NIGHTS,
                             DATE
                             FROM ${prfx}_HTL_ROOM_AVAILABILITY
                             WHERE ROOM_ID = $room[ID]
                             AND DATE BETWEEN '$from' AND '$to'
                             ORDER BY DATE
                          "))
    {
      $errors = $xmldoc->createElement("Errors");
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("SQL Query Error!");
      $node->appendChild($text);
      $errors->appendChild($node);

      $xmldoc->appendChild($errors);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();

      return false;
    }

    while($dbw->fetch_row())
    {
      $priceinfo = $xmldoc->createElement("priceinfo");
      $priceinfo->setAttribute("date", format_date($dbw->field_by_name("DATE"), "Y-m-d"));

      $node = $xmldoc->createElement("arrival_allowed");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("ARRIVAL") ? 1 : 0);
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("departure_allowed");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("DEPARTURE") ? 1 : 0);
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("free_count");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("ROOM_COUNT"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("min_nights");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("MIN_NIGHTS"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult2");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT2"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult3");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT3"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult4");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT4"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult_child");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT_CHILD"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult_child2");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT_CHILD2"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult_child3");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT_CHILD3"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_adult_child4");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADULT_CHILD4"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_add_adult");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADD_ADULT"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_add_child");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADD_CHILD"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_add_child2");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADD_CHILD2"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_add_child3");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADD_CHILD3"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $node = $xmldoc->createElement("price_add_child4");
      $node_text = $xmldoc->createTextNode($dbw->field_by_name("PRICE_ADD_CHILD4"));
      $node->appendChild($node_text);
      $priceinfo->appendChild($node);

      $root->appendChild($priceinfo);
    }

    $root = $xmldoc->appendChild($root);

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  } // checkHotelPartner
  //-----------------------------------------------------------------
  function fetch_log(&$log)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->execute_query($this->get_query_protocol($prfx)))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();
    while($dbw->fetch_row())
    {
      $dt = format_date($dbw->field_by_name("DT"), text("DateTimeFormat"));

      $log .= $dt . ": " . $dbw->field_by_name("RESULT") . "\n\n";
      $log .= trim($dbw->field_by_name("DETAILS")) . "\n";
      $log .= "----------------------------------\n";
    }

    return true;
  } // fetch_log
  //-----------------------------------------------------------------
  function showRoomIDs($service)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $result = array();

    $dbw = GetDBWorker();
    if(!$dbw)
    {
      return false;
    }

    $settings = array();
    $this->fetch_settings($settings, 'SETTINGS');

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if(!$dbw->execute_query("SELECT ${prfx}_HTL_ROOMS.ID, I_NAME, ROOM_CODE,
       TYPE, LANG_KEY
       FROM ${prfx}_HTL_ROOMS
       INNER JOIN ${prfx}_HTL_ROOMS_PROPS ON
       (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID)
       INNER JOIN ${prfx}_LANGUAGE ON (LANGUAGE_ID = ${prfx}_LANGUAGE.ID)
       ORDER BY ${prfx}_HTL_ROOMS.SORT_ORDER
    "))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $rooms = array();
    while($dbw->fetch_row())
    {
      $id = $dbw->field_by_name("ID");

      $rooms[$id]["InternalName"] = trim($dbw->field_by_name("I_NAME"));
      $rooms[$id]["RoomCode"] = trim($dbw->field_by_name("ROOM_CODE"));
      $rooms[$id][$dbw->field_by_name("LANG_KEY")] = trim($dbw->field_by_name("TYPE"));
    }

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $root = $xmldoc->createElement("Rooms");
    $root->setAttribute("HotelCode", ifnull($settings[$service]));
    $root = $xmldoc->appendChild($root);

    foreach($rooms as $room)
    {
      $node = $xmldoc->createElement("Room");

      foreach($room as $key => $val)
      {
        $node->setAttribute($key, $val);
      }
      $root->appendChild($node);
    }

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();

    return true;
  }
  //-----------------------------------------------------------------
  function reserveChannelManager($order_id, $type, &$settings, &$data, &$error, &$url)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(empty($settings["chanmanager_reserv_url"])) return false;

    $url = $settings["chanmanager_reserv_url"];

    $order_info = array();

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $order_id = $dbw->escape($order_id);

    //fetch order info
    $query = "SELECT {$prfx}_HTL_ORDER.ID,
              {$prfx}_HTL_ORDER.FIRST_NAME,
              {$prfx}_HTL_ORDER.LAST_NAME,
              {$prfx}_HTL_ORDER.EMAIL,
              {$prfx}_HTL_ORDER.TELEPHONE,
              {$prfx}_HTL_ORDER.NOTE,
              {$prfx}_HTL_ORDER.COUNTRY,
              {$prfx}_HTL_ORDER.CITY,
              {$prfx}_HTL_ORDER.ADRESS ADDRESS,
              {$prfx}_HTL_ORDER.ZIP,
              {$prfx}_HTL_ORDER.SALUTATION TITLE,
              ORDER_LANG,
              ARRIVE_DATE, DEPARTURE_DATE,
              TOTAL_ORDER_PRICE,
              ORDER_TM
              FROM {$prfx}_HTL_ORDER
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $order_info["id"] = $dbw->field_by_name("ID");
      $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
      $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
      $order_info["email"] = $dbw->field_by_name("EMAIL");
      $order_info["telephone"] = $dbw->field_by_name("TELEPHONE");
      $order_info["address"] = $dbw->field_by_name("ADDRESS");
      $order_info["city"] = $dbw->field_by_name("CITY");
      $order_info["zip"] = $dbw->field_by_name("ZIP");
      $order_info["note"] = $dbw->field_by_name("NOTE");
      $order_info["total_order_price"] = $dbw->field_by_name("TOTAL_ORDER_PRICE");

      $order_info["lang"] = $dbw->field_by_name("ORDER_LANG");

      $order_info["country_code"] = $dbw->field_by_name("COUNTRY");
      $order_info["country"] = country_name($order_info["country_code"], $order_info["lang"]);

      $order_info["order_date"] = strtotime($dbw->field_by_name("ORDER_TM"));
      $order_info["arrive_date"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));
      $order_info["departure_date"] = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

      $order_info["nights"] = round(($order_info["departure_date"] - $order_info["arrive_date"])/(60*60*24));
    }

    $dbw->free_result();

    // fetch rooms
    $query = "SELECT {$prfx}_HTL_ROOMS.ID,
              {$prfx}_HTL_ROOMS.ROOM_CODE,
              ROOM_COUNTER,
              PERSONS_COUNT,
              TOTAL_PRICE,
              ADULTS_COUNT,
              CHILDREN_COUNT
              FROM
              {$prfx}_HTL_ORDER_PROP
              LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
              WHERE {$prfx}_HTL_ORDER_PROP.ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $order_info["rooms"][$room_id][$room_cnt] = array(
                            "room_code" => $dbw->field_by_name("ROOM_CODE"),
                            "persons_count" => $dbw->field_by_name("PERSONS_COUNT"),
                            "total_price" => $dbw->field_by_name("TOTAL_PRICE"),
                            "adults_count" => $dbw->field_by_name("ADULTS_COUNT"),
                            "children_count" => $dbw->field_by_name("CHILDREN_COUNT")
                        );
    }

    $dbw->free_result();

    // fetch room guests

    $query = "SELECT ROOM_ID,
              ROOM_COUNTER,
              GUEST_NAME,
              GUEST_AGE,
              IS_ADULT
              FROM
              {$prfx}_HTL_ORDER_GUESTS
              WHERE ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $order_info["rooms"][$room_id][$room_cnt]["guests"][] = array(
                            "guest_name" => $dbw->field_by_name("GUEST_NAME"),
                            "guest_age" => $dbw->field_by_name("GUEST_AGE"),
                            "is_adult" => $dbw->field_by_name("IS_ADULT")
                        );
    }

    $dbw->free_result();

    // fetch dates

    $query = "SELECT ROOM_ID, ROOM_COUNTER,
              PRICE,
              DT
              FROM
              {$prfx}_HTL_ORDER_PRICES
              WHERE ORDER_ID = $order_id
              ORDER BY DT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $dt = date("Y-m-d", strtotime($dbw->field_by_name("DT")));

      $order_info["rooms"][$room_id][$room_cnt]["dates"][$dt] = $dbw->field_by_name("PRICE");
    }

    $dbw->free_result();

    // fetch services
    $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, PRICE, AMOUNT, TOTAL_PRICE
              FROM
              {$prfx}_HTL_ORDER_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
              WHERE ORDER_ID = $order_id
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    $order_info["services"] = array();

    while($dbw->fetch_row())
    {
      $order_info["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                       "amount" => $dbw->field_by_name("AMOUNT"),
                                                                       "price" => $dbw->field_by_name("PRICE"),
                                                                       "total_price" => $dbw->field_by_name("TOTAL_PRICE"));
    }

    try
    {
      $xmldoc = new DOMDocument("1.0", "UTF-8");
      $xmldoc->formatOutput = true;

      $now = date("c");

      //--------------------------------------------------------------------
      $root = $xmldoc->createElement("OTA_HotelResNotifRQ");
      $root = $xmldoc->appendChild($root);
      $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
      $root->setAttribute("TimeStamp", $now);
      $root->setAttribute("Version", "1");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Authentication");
      $root->appendChild($node);

      $node2 = $xmldoc->createElement("Login");
      $node->appendChild($node2);
      $text_node = $xmldoc->createTextNode($settings["chanmanager_user"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Password");
      $node->appendChild($node2);
      $text_node = $xmldoc->createTextNode($settings["chanmanager_password"]);
      $node2->appendChild($text_node);
      //--------------------------------------------------------------------
      $reservation_list = $xmldoc->createElement("ReservationsList");
      $root->appendChild($reservation_list);
      //--------------------------------------------------------------------
      $reservation = $xmldoc->createElement("HotelReservation");
      $reservation_list->appendChild($reservation);
      $reservation->setAttribute("ResStatus", $type == "cancellation" ? "Cancel" : "Book");
      $reservation->setAttribute("CreateDateTime", date("c", $order_info["order_date"]));
      $reservation->setAttribute("LastModifyDateTime", date("c", $order_info["order_date"]));
      //$reservation->setAttribute("WalkInIndicator", "false");
      //$reservation->setAttribute("OriginalDeliveryMethodCode", "13");
      //$reservation->setAttribute("RoomNumberLockedIndicator", "true");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("UniqueID");
      $reservation->appendChild($node);
      $node->setAttribute("Type", "18");
      $node->setAttribute("ID", $order_info["id"]);
      //--------------------------------------------------------------------
      /*
      $node = $xmldoc->createElement("POS");
      $reservation->appendChild($node);

      $node2 = $xmldoc->createElement("Source");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("BookingChannel");
      $node2->appendChild($node3);

      $node3->setAttribute("Primary", "0");
      $node3->setAttribute("Type", "5");

      $node4 = $xmldoc->createElement("CompanyName");
      $node3->appendChild($node4);

      $text_node = $xmldoc->createTextNode("MASCH Booking Manager");
      $node4->appendChild($text_node);
      */
      //--------------------------------------------------------------------
      $roomstays = $xmldoc->createElement("RoomStays");
      $reservation->appendChild($roomstays);
      $room_counter = 1;
      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          $roomstay = $xmldoc->createElement("RoomStay");
          $roomstays->appendChild($roomstay);
          $roomstay->setAttribute("IndexNumber", $room_counter++);

          $node2 = $xmldoc->createElement("BasicPropertyInfo");
          $roomstay->appendChild($node2);
          $node2->setAttribute("HotelCode", $settings["chanmanager_hotel_id"]);
          $node2->setAttribute("HotelName", "MASCH");
          $node2->setAttribute("CurrencyCode", "EUR");

          $node3 = $xmldoc->createElement("RoomType");
          $roomstay->appendChild($node3);
          $node3->setAttribute("NumberOfUnits", "1");
          $node3->setAttribute("IsRoom", "1");
          $node3->setAttribute("RoomTypeCode", $room["room_code"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("GuestCounts");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $xmldoc->createElement("GuestCount");
            $node->appendChild($node2);
            $node2->setAttribute("Count", "1");

            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";
            $node2->setAttribute("AgeQualifyingCode", $code);
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("ResGuestRPHs");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $xmldoc->createElement("ResGuestRPH");
            $node->appendChild($node2);
            $node2->setAttribute("RPH", $guest_counter++);
          }
          //--------------------------------------------------------------------
          /*
          $node = $xmldoc->createElement("ServiceRPHs");
          $roomstay->appendChild($node);

          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "1");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "2");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Guarantee");
          $roomstay->appendChild($node);
          $node->setAttribute("GuaranteeType", "GuaranteeRequired");
          $node->setAttribute("GuaranteeCode", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RatePlans");
          $roomstay->appendChild($node);
          */
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RoomRates");
          $roomstay->appendChild($node);

          // chop departure date

          array_pop($room["dates"]);

          foreach($room["dates"] as $dt => $price)
          {
            $node2 = $xmldoc->createElement("RoomRate");
            $node->appendChild($node2);
            $node2->setAttribute("NumberOfUnits", "1");
            $node2->setAttribute("RoomID", $room["room_code"]);
            $node2->setAttribute("EffectiveDate", $dt);

            $node3 = $xmldoc->createElement("Rates");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("Rate");
            $node3->appendChild($node4);

            $node5 = $xmldoc->createElement("Base");
            $node4->appendChild($node5);
            $node5->setAttribute("DecimalPlaces", "2");
            $node5->setAttribute("CurrencyCode", "EUR");
            $node5->setAttribute("AmountAfterTax", $price);
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("TimeSpan");
          $roomstay->appendChild($node);
          $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
          $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
          $node->setAttribute("Duration", $order_info["nights"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Total");
          $roomstay->appendChild($node);
          $node->setAttribute("DecimalPlaces", "2");
          $node->setAttribute("CurrencyCode", "EUR");
          $node->setAttribute("AmountAfterTax", number_format($room["total_price"], 2, ".", ""));
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("ResGuests");
      $reservation->appendChild($node);

      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";

            $names = preg_split('/\\s+/', $guest["guest_name"], -1, PREG_SPLIT_NO_EMPTY);
            if(count($names) > 1)
            {
              $lastname = $names[0];
              $firstname = $names[1];
            }
            else
            {
              $lastname = $names[0];
              $firstname = "";
            }

            $node2 = $xmldoc->createElement("ResGuest");
            $node->appendChild($node2);
            $node2->setAttribute("ResGuestRPH", $guest_counter++);
            $node2->setAttribute("AgeQualifyingCode", $code);

            $node3 = $xmldoc->createElement("Profiles");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("ProfileInfo");
            $node3->appendChild($node4);

            $profile = $xmldoc->createElement("Profile");
            $node4->appendChild($profile);

            $node5 = $xmldoc->createElement("Customer");
            $profile->appendChild($node5);
            $node5->setAttribute("Gender", "");

            $node6 = $xmldoc->createElement("PersonName");
            $node5->appendChild($node6);

            $node7 = $xmldoc->createElement("GivenName");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($lastname);
            $node7->appendChild($text_node);

            $node7 = $xmldoc->createElement("Surname");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($firstname);
            $node7->appendChild($text_node);
          }
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Services");
      $reservation->appendChild($node);

      foreach($order_info["services"] as $service)
      {
        $node2 = $xmldoc->createElement("Service");
        $node->appendChild($node2);
        $node2->setAttribute("ServicePricingType", "Per stay");
        $node2->setAttribute("PriceGuaranteed", "true");
        $node2->setAttribute("Quantity", $service["amount"]);

        $node3 = $xmldoc->createElement("ServiceDetails");
        $node2->appendChild($node3);

        $node4 = $xmldoc->createElement("Comments");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("Comment");
        $node4->appendChild($node5);

        $node6 = $xmldoc->createElement("Text");
        $node5->appendChild($node6);
        $text_node = $xmldoc->createTextNode($service["title"]);
        $node6->appendChild($text_node);

        /*
        $node4 = $xmldoc->createElement("GuestCounts");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("GuestCount");
        $node4->appendChild($node5);
        $node5->setAttribute("Count", "2");
        */

        $node3 = $xmldoc->createElement("Price");
        $node2->appendChild($node3);
        $node3->setAttribute("NumberOfUnits", $service["amount"]);

        $node4 = $xmldoc->createElement("Base");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", "EUR");

        $node4 = $xmldoc->createElement("Total");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["total_price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", "EUR");
      } // foreach service
      //--------------------------------------------------------------------
      $resglobalinfo = $xmldoc->createElement("ResGlobalInfo");
      $reservation->appendChild($resglobalinfo);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Comments");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("Comment");
      $node->appendChild($node2);
      $node2->setAttribute("Name", "Guestmessage");
      $node2->setAttribute("GuestViewable", "1");

      $node3 = $xmldoc->createElement("Text");
      $node2->appendChild($node3);
      $node3->setAttribute("Formatted", "1");

      $text_node = $xmldoc->createCDATASection($order_info["note"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("HotelReservationIDs");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("HotelReservationID");
      $node->appendChild($node2);
      $node2->setAttribute("ResID_Type", "14");
      $node2->setAttribute("ResID_Value", $order_info["id"]);
      $node2->setAttribute("ForGuest", "1");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Total");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("AmountAfterTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("DecimalPlaces", "2");
      $node->setAttribute("CurrencyCode", "EUR");
      //--------------------------------------------------------------------
      $node3 = $xmldoc->createElement("Profiles");
      $resglobalinfo->appendChild($node3);

      $node4 = $xmldoc->createElement("ProfileInfo");
      $node3->appendChild($node4);

      $profile = $xmldoc->createElement("Profile");
      $node4->appendChild($profile);

      $node = $xmldoc->createElement("Customer");
      $profile->appendChild($node);
      $node->setAttribute("Gender", "");

      $node2 = $xmldoc->createElement("PersonName");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("GivenName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["last_name"]);
      $node3->appendChild($text_node);

      $node4 = $xmldoc->createElement("Surname");
      $node2->appendChild($node4);
      $text_node = $xmldoc->createCDATASection($order_info["first_name"]);
      $node4->appendChild($text_node);

      $node2 = $xmldoc->createElement("Telephone");
      $node->appendChild($node2);
      $node2->setAttribute("PhoneNumber", $order_info["telephone"]);
      $node2->setAttribute("PhoneTechType", "1");

      $node2 = $xmldoc->createElement("Email");
      $node->appendChild($node2);
      $text_node = $xmldoc->createCDATASection($order_info["email"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Address");
      $node->appendChild($node2);
      $node2->setAttribute("FormattedInd", "true");
      $node2->setAttribute("Type", "1");

      $node3 = $xmldoc->createElement("AddressLine");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["address"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CityName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["city"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("PostalCode");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["zip"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CountryName");
      $node2->appendChild($node3);
      $node3->setAttribute("Code", $order_info["country_code"]);
      $text_node = $xmldoc->createCDATASection($order_info["country"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------

      $data = $xmldoc->saveXML();

      $client = new Zend_Http_Client($url, array(
            'maxredirects' => 5,
            'timeout'      => 10));

      $client->setRawData($data, 'text/xml');

      $request = $client->request('POST');

      $response_text = $request->getBody();

      if(empty($response_text))
      {
        $error = "No response data has been received.";
        return true;
      }

      $xmldoc = new DOMDocument();
      $xmldoc->formatOutput = true;
      if(!@$xmldoc->loadXML($response_text))
      {
        $error = "Invalid XML response data:\n\n" . $response_text;
        return true;
      }

      $xsdpath = new DOMXPath($xmldoc);

      $nodes = $xsdpath->evaluate("/Result/Success");
      if($nodes->length > 0)
      {
        return true;
      }

      $nodes = $xsdpath->evaluate("/Errors/Error");
      if($nodes->length > 0)
      {
        for($i = 0; $i < $nodes->length; $i++)
        {
          $error .= $nodes->item($i)->nodeValue . "\n\n";
        }

        return true;
      }

      $error = "Unrecognizable XML response data:\n\n" . $xmldoc->saveXML();
      return true;
    }
    catch(Exception $ex)
    {
      $error = $ex->getMessage();

      return true;
    }

    return true;
  } // reserveChannelManager
  //-----------------------------------------------------------------
  function reserveHotelPartner($order_id, $type, &$settings, &$data, &$error, &$url)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(empty($settings["hotelpartner_reserv_url"]) || empty($settings["hotelpartner_push_reservations"])) return false;

    $url = $settings["hotelpartner_reserv_url"];
    
    $order_info = array();

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $order_id = $dbw->escape($order_id);

    $order_currency_rate = 1;
    $order_currency_name = "";
    $query = "SELECT I_NAME, RATE, IS_DEFAULT FROM ${prfx}_HTL_CURRENCY WHERE IS_DEFAULT = '1'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    if($dbw->fetch_row())
    {
      $order_currency_name = $dbw->field_by_name("I_NAME");
      $order_currency_rate = $dbw->field_by_name("RATE");
    }

    $dbw->free_result();
    
    $rate_plans = array();
    
    $query = "SELECT  ID, NAME, TP, CODE
                FROM {$prfx}_HTL_RATE_PLAN
                ORDER BY SORT_ORDER, NAME
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $code = $dbw->field_by_name("CODE");
      if(empty($code)) continue;

      $name = $dbw->field_by_name("NAME");
      if(empty($name)) $name = "-";

      $rate_plans[$dbw->field_by_name("ID")] = $code;
    }

    $dbw->free_result();
    
    //fetch order info
    $query = "SELECT {$prfx}_HTL_ORDER.ID,
              {$prfx}_HTL_ORDER.FIRST_NAME,
              {$prfx}_HTL_ORDER.LAST_NAME,
              {$prfx}_HTL_ORDER.EMAIL,
              {$prfx}_HTL_ORDER.TELEPHONE,
              {$prfx}_HTL_ORDER.NOTE,
              {$prfx}_HTL_ORDER.COUNTRY,
              {$prfx}_HTL_ORDER.CITY,
              {$prfx}_HTL_ORDER.ADRESS ADDRESS,
              {$prfx}_HTL_ORDER.ZIP,
              {$prfx}_HTL_ORDER.SALUTATION TITLE,
              ORDER_LANG,
              ARRIVE_DATE, DEPARTURE_DATE,
              TOTAL_ORDER_PRICE,
              CURRENCY_RATE,
              CURRENCY_CODE,
              ORDER_TM
              FROM {$prfx}_HTL_ORDER
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $order_info["id"] = $dbw->field_by_name("ID");
      $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
      $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
      $order_info["email"] = $dbw->field_by_name("EMAIL");
      $order_info["telephone"] = $dbw->field_by_name("TELEPHONE");
      $order_info["address"] = $dbw->field_by_name("ADDRESS");
      $order_info["city"] = $dbw->field_by_name("CITY");
      $order_info["zip"] = $dbw->field_by_name("ZIP");
      $order_info["note"] = $dbw->field_by_name("NOTE");
      $order_info["total_order_price"] = $dbw->field_by_name("TOTAL_ORDER_PRICE");

      $order_info["lang"] = $dbw->field_by_name("ORDER_LANG");

      $order_info["country_code"] = $dbw->field_by_name("COUNTRY");
      $order_info["country"] = country_name($order_info["country_code"], $order_info["lang"]);

      $order_info["order_date"] = strtotime($dbw->field_by_name("ORDER_TM"));
      $order_info["arrive_date"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));
      $order_info["departure_date"] = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

      $order_info["nights"] = round(($order_info["departure_date"] - $order_info["arrive_date"])/(60*60*24));

      $order_currency_name = $dbw->field_by_name("CURRENCY_CODE");
      $order_currency_rate = $dbw->field_by_name("CURRENCY_RATE");
    }

    $dbw->free_result();

    // fetch rooms
    $query = "SELECT {$prfx}_HTL_ROOMS.ID,
              {$prfx}_HTL_ROOMS.ROOM_CODE,
              ROOM_COUNTER,
              PERSONS_COUNT,
              TOTAL_PRICE,
              ADULTS_COUNT,
              CHILDREN_COUNT,
              RATE_PLAN_ID
              FROM
              {$prfx}_HTL_ORDER_PROP
              LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
              WHERE {$prfx}_HTL_ORDER_PROP.ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $order_info["rooms"][$room_id][$room_cnt] = array(
                            "room_code" => $dbw->field_by_name("ROOM_CODE"),
                            "persons_count" => $dbw->field_by_name("PERSONS_COUNT"),
                            "total_price" => $dbw->field_by_name("TOTAL_PRICE"),
                            "adults_count" => $dbw->field_by_name("ADULTS_COUNT"),
                            "children_count" => $dbw->field_by_name("CHILDREN_COUNT"),
                            "rate_plan_id" => $dbw->field_by_name("RATE_PLAN_ID")
                        );
    }

    $dbw->free_result();

    // fetch room guests

    $query = "SELECT ROOM_ID,
              ROOM_COUNTER,
              GUEST_NAME,
              GUEST_AGE,
              IS_ADULT
              FROM
              {$prfx}_HTL_ORDER_GUESTS
              WHERE ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $order_info["rooms"][$room_id][$room_cnt]["guests"][] = array(
                            "guest_name" => $dbw->field_by_name("GUEST_NAME"),
                            "guest_age" => $dbw->field_by_name("GUEST_AGE"),
                            "is_adult" => $dbw->field_by_name("IS_ADULT")
                        );
    }

    $dbw->free_result();

    // fetch dates

    $query = "SELECT ROOM_ID, ROOM_COUNTER,
              PRICE,
              DT
              FROM
              {$prfx}_HTL_ORDER_PRICES
              WHERE ORDER_ID = $order_id
              ORDER BY DT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $dt = date("Y-m-d", strtotime($dbw->field_by_name("DT")));

      $order_info["rooms"][$room_id][$room_cnt]["dates"][$dt] = $dbw->field_by_name("PRICE");
    }

    $dbw->free_result();

    // fetch services
    $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, PRICE, AMOUNT, TOTAL_PRICE
              FROM
              {$prfx}_HTL_ORDER_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
              WHERE ORDER_ID = $order_id
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    $order_info["services"] = array();

    while($dbw->fetch_row())
    {
      $order_info["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                       "amount" => $dbw->field_by_name("AMOUNT"),
                                                                       "price" => $dbw->field_by_name("PRICE"),
                                                                       "total_price" => $dbw->field_by_name("TOTAL_PRICE"));
    }
    
    try
    {
      $xmldoc = new DOMDocument("1.0", "UTF-8");
      $xmldoc->formatOutput = true;

      $now = date("c");

      //--------------------------------------------------------------------
      $root = $xmldoc->createElement("OTA_HotelResNotifRQ");
      $root = $xmldoc->appendChild($root);
      $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
      $root->setAttribute("TimeStamp", $now);
      $root->setAttribute("Version", "1");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Authentication");
      $root->appendChild($node);

      $node2 = $xmldoc->createElement("Login");
      $node->appendChild($node2);
      $text_node = $xmldoc->createTextNode($settings["hotelpartner_user"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Password");
      $node->appendChild($node2);
      $text_node = $xmldoc->createTextNode($settings["hotelpartner_password"]);
      $node2->appendChild($text_node);
      //--------------------------------------------------------------------
      $reservation_list = $xmldoc->createElement("ReservationsList");
      $root->appendChild($reservation_list);
      //--------------------------------------------------------------------
      $reservation = $xmldoc->createElement("HotelReservation");
      $reservation_list->appendChild($reservation);
      $reservation->setAttribute("ResStatus", $type == "cancellation" ? "Cancel" : "Book");
      $reservation->setAttribute("CreateDateTime", date("c", $order_info["order_date"]));
      $reservation->setAttribute("LastModifyDateTime", date("c", $order_info["order_date"]));
      //$reservation->setAttribute("WalkInIndicator", "false");
      //$reservation->setAttribute("OriginalDeliveryMethodCode", "13");
      //$reservation->setAttribute("RoomNumberLockedIndicator", "true");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("UniqueID");
      $reservation->appendChild($node);
      $node->setAttribute("Type", "18");
      $node->setAttribute("ID", $settings["hotelpartner_hotel_id"] . "-" . $order_info["id"]);
      //--------------------------------------------------------------------
      /*
      $node = $xmldoc->createElement("POS");
      $reservation->appendChild($node);

      $node2 = $xmldoc->createElement("Source");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("BookingChannel");
      $node2->appendChild($node3);

      $node3->setAttribute("Primary", "0");
      $node3->setAttribute("Type", "5");

      $node4 = $xmldoc->createElement("CompanyName");
      $node3->appendChild($node4);

      $text_node = $xmldoc->createTextNode("MASCH Booking Manager");
      $node4->appendChild($text_node);
      */
      //--------------------------------------------------------------------
      $roomstays = $xmldoc->createElement("RoomStays");
      $reservation->appendChild($roomstays);
      $room_counter = 1;
      $guest_counter = 1;
      
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          $roomstay = $xmldoc->createElement("RoomStay");
          $roomstays->appendChild($roomstay);
          $roomstay->setAttribute("IndexNumber", $room_counter++);

          if(empty($room["rate_plan_id"]))
            $rtcode = ifnull($settings["hotelpartner_drate_code"]);
          else
            $rtcode = ifnull($rate_plans[$room["rate_plan_id"]]);

          $node2 = $xmldoc->createElement("BasicPropertyInfo");
          $roomstay->appendChild($node2);
          $node2->setAttribute("HotelCode", $settings["hotelpartner_hotel_id"]);
          $node2->setAttribute("HotelName", ifnull($settings["hotelpartner_hotel_name"]));
          $node2->setAttribute("CurrencyCode", $order_currency_name);
          $node2->setAttribute("Rate", $rtcode);

          $node3 = $xmldoc->createElement("RoomType");
          $roomstay->appendChild($node3);
          $node3->setAttribute("NumberOfUnits", "1");
          $node3->setAttribute("IsRoom", "1");
          $node3->setAttribute("RoomTypeCode", $room["room_code"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("GuestCounts");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          {
            foreach($room["guests"] as $guest)
            {
              $node2 = $xmldoc->createElement("GuestCount");
              $node->appendChild($node2);
              $node2->setAttribute("Count", "1");

              if(empty($guest["guest_age"]))
                $code = "10";
              else
                $code = "8";
              $node2->setAttribute("AgeQualifyingCode", $code);
            }
          }
          else
          {
            $node2 = $xmldoc->createElement("GuestCount");
            $node->appendChild($node2);
            $node2->setAttribute("Count", $room["adults_count"]);
            $node2->setAttribute("AgeQualifyingCode", "10");
            
            if(!empty($room["children_count"]))
            {
              $node2 = $xmldoc->createElement("GuestCount");
              $node->appendChild($node2);
              $node2->setAttribute("Count", $room["children_count"]);
              $node2->setAttribute("AgeQualifyingCode", "8");
            }
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("ResGuestRPHs");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $xmldoc->createElement("ResGuestRPH");
            $node->appendChild($node2);
            $node2->setAttribute("RPH", $guest_counter++);
          }
          //--------------------------------------------------------------------
          /*
          $node = $xmldoc->createElement("ServiceRPHs");
          $roomstay->appendChild($node);

          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "1");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "2");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Guarantee");
          $roomstay->appendChild($node);
          $node->setAttribute("GuaranteeType", "GuaranteeRequired");
          $node->setAttribute("GuaranteeCode", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RatePlans");
          $roomstay->appendChild($node);
          */
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RoomRates");
          $roomstay->appendChild($node);

          foreach($room["dates"] as $dt => $price)
          {
            $node2 = $xmldoc->createElement("RoomRate");
            $node->appendChild($node2);
            $node2->setAttribute("NumberOfUnits", "1");
            $node2->setAttribute("RoomID", $room["room_code"]);
            $node2->setAttribute("EffectiveDate", $dt);

            $node3 = $xmldoc->createElement("Rates");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("Rate");
            $node3->appendChild($node4);

            $node5 = $xmldoc->createElement("Base");
            $node4->appendChild($node5);
            $node5->setAttribute("DecimalPlaces", "2");
            $node5->setAttribute("CurrencyCode", $order_currency_name);
            $node5->setAttribute("AmountAfterTax", number_format(aux_calc_round_price($price, $order_currency_rate, $settings), 2, ".", ""));
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("TimeSpan");
          $roomstay->appendChild($node);
          $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
          $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
          $node->setAttribute("Duration", $order_info["nights"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Total");
          $roomstay->appendChild($node);
          $node->setAttribute("DecimalPlaces", "2");
          $node->setAttribute("CurrencyCode", $order_currency_name);
          $node->setAttribute("AmountAfterTax", number_format($room["total_price"], 2, ".", ""));
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("ResGuests");
      $reservation->appendChild($node);

      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";

            $names = preg_split('/\\s+/', $guest["guest_name"], -1, PREG_SPLIT_NO_EMPTY);
            if(count($names) > 1)
            {
              $lastname = $names[0];
              $firstname = $names[1];
            }
            else
            {
              $lastname = $names[0];
              $firstname = "";
            }

            $node2 = $xmldoc->createElement("ResGuest");
            $node->appendChild($node2);
            $node2->setAttribute("ResGuestRPH", $guest_counter++);
            $node2->setAttribute("AgeQualifyingCode", $code);

            $node3 = $xmldoc->createElement("Profiles");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("ProfileInfo");
            $node3->appendChild($node4);

            $profile = $xmldoc->createElement("Profile");
            $node4->appendChild($profile);

            $node5 = $xmldoc->createElement("Customer");
            $profile->appendChild($node5);
            $node5->setAttribute("Gender", "");

            $node6 = $xmldoc->createElement("PersonName");
            $node5->appendChild($node6);

            $node7 = $xmldoc->createElement("GivenName");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($lastname);
            $node7->appendChild($text_node);

            $node7 = $xmldoc->createElement("Surname");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($firstname);
            $node7->appendChild($text_node);
          }
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Services");
      $reservation->appendChild($node);

      foreach($order_info["services"] as $service)
      {
        $node2 = $xmldoc->createElement("Service");
        $node->appendChild($node2);
        $node2->setAttribute("ServicePricingType", "Per stay");
        $node2->setAttribute("PriceGuaranteed", "true");
        $node2->setAttribute("Quantity", $service["amount"]);

        $node3 = $xmldoc->createElement("ServiceDetails");
        $node2->appendChild($node3);

        $node4 = $xmldoc->createElement("Comments");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("Comment");
        $node4->appendChild($node5);

        $node6 = $xmldoc->createElement("Text");
        $node5->appendChild($node6);
        $text_node = $xmldoc->createTextNode($service["title"]);
        $node6->appendChild($text_node);

        /*
        $node4 = $xmldoc->createElement("GuestCounts");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("GuestCount");
        $node4->appendChild($node5);
        $node5->setAttribute("Count", "2");
        */

        $node3 = $xmldoc->createElement("Price");
        $node2->appendChild($node3);
        $node3->setAttribute("NumberOfUnits", $service["amount"]);

        $node4 = $xmldoc->createElement("Base");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_currency_name);

        $node4 = $xmldoc->createElement("Total");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["total_price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_currency_name);
      } // foreach service
      //--------------------------------------------------------------------
      $resglobalinfo = $xmldoc->createElement("ResGlobalInfo");
      $reservation->appendChild($resglobalinfo);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Comments");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("Comment");
      $node->appendChild($node2);
      $node2->setAttribute("Name", "Guestmessage");
      $node2->setAttribute("GuestViewable", "1");

      $node3 = $xmldoc->createElement("Text");
      $node2->appendChild($node3);
      $node3->setAttribute("Formatted", "1");

      $text_node = $xmldoc->createCDATASection($order_info["note"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("HotelReservationIDs");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("HotelReservationID");
      $node->appendChild($node2);
      $node2->setAttribute("ResID_Type", "14");
      $node2->setAttribute("ResID_Value", $order_info["id"]);
      $node2->setAttribute("ForGuest", "1");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Total");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("AmountAfterTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("DecimalPlaces", "2");
      $node->setAttribute("CurrencyCode", $order_currency_name);
      //--------------------------------------------------------------------
      $node3 = $xmldoc->createElement("Profiles");
      $resglobalinfo->appendChild($node3);

      $node4 = $xmldoc->createElement("ProfileInfo");
      $node3->appendChild($node4);

      $profile = $xmldoc->createElement("Profile");
      $node4->appendChild($profile);

      $node = $xmldoc->createElement("Customer");
      $profile->appendChild($node);
      $node->setAttribute("Gender", "");

      $node2 = $xmldoc->createElement("PersonName");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("GivenName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["last_name"]);
      $node3->appendChild($text_node);

      $node4 = $xmldoc->createElement("Surname");
      $node2->appendChild($node4);
      $text_node = $xmldoc->createCDATASection($order_info["first_name"]);
      $node4->appendChild($text_node);

      $node2 = $xmldoc->createElement("Telephone");
      $node->appendChild($node2);
      $node2->setAttribute("PhoneNumber", $order_info["telephone"]);
      $node2->setAttribute("PhoneTechType", "1");

      $node2 = $xmldoc->createElement("Email");
      $node->appendChild($node2);
      $text_node = $xmldoc->createCDATASection($order_info["email"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Address");
      $node->appendChild($node2);
      $node2->setAttribute("FormattedInd", "true");
      $node2->setAttribute("Type", "1");

      $node3 = $xmldoc->createElement("AddressLine");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["address"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CityName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["city"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("PostalCode");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["zip"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CountryName");
      $node2->appendChild($node3);
      $node3->setAttribute("Code", $order_info["country_code"]);
      $text_node = $xmldoc->createCDATASection($order_info["country"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------

      $data = $xmldoc->saveXML();
      
      error_log($data, 3, app_path() . "modules/hotel_extended/out/hp-reservation-" . $order_info["id"] . ".xml");

      $client = new Zend_Http_Client($url, array(
            'maxredirects' => 5,
            'timeout'      => 10));

      $client->setRawData($data, 'text/xml');

      $request = $client->request('POST');

      $response_text = $request->getBody();

      if(empty($response_text))
      {
        $error = "No response data has been received.";
        return true;
      }

      $xmldoc = new DOMDocument();
      $xmldoc->formatOutput = true;
      if(!@$xmldoc->loadXML($response_text))
      {
        $error = "Invalid XML response data:\n\n" . $response_text;
        return true;
      }

      $xsdpath = new DOMXPath($xmldoc);

      $nodes = $xsdpath->evaluate("/Result/Success");
      if($nodes->length > 0)
      {
        return true;
      }

      $nodes = $xsdpath->evaluate("/Errors/Error");
      if($nodes->length > 0)
      {
        for($i = 0; $i < $nodes->length; $i++)
        {
          $error .= $nodes->item($i)->nodeValue . "\n\n";
        }

        return true;
      }

      $error = "Unrecognizable XML response data:\n\n" . $xmldoc->saveXML();
      return true;
    }
    catch(Exception $ex)
    {
      $error = $ex->getMessage();

      return true;
    }

    return true;
  } // reserveHotelPartner
  //-----------------------------------------------------------------
  function reserveHotelSpider4($order_id, $res_type, &$settings, &$data, &$error, &$url)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    if(empty($settings["htspider4_reservation_url"]) || empty($settings["htspider4_push_reservations"])) return false;

    $url = trim($settings["htspider4_reservation_url"]);
    
    $order_info = array();

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $lang_key = $dbw->escape($_SESSION["lang"]);

    $order_id = $dbw->escape($order_id);

    $order_currency_rate = 1;
    $order_currency_name = "";
    $query = "SELECT I_NAME, RATE, IS_DEFAULT FROM ${prfx}_HTL_CURRENCY WHERE IS_DEFAULT = '1'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    if($dbw->fetch_row())
    {
      $order_currency_name = $dbw->field_by_name("I_NAME");
      $order_currency_rate = $dbw->field_by_name("RATE");
    }

    $dbw->free_result();
    
    //fetch order info
    $query = "SELECT {$prfx}_HTL_ORDER.ID,
              {$prfx}_HTL_ORDER.USER_ID,
              {$prfx}_HTL_ORDER.FIRST_NAME,
              {$prfx}_HTL_ORDER.LAST_NAME,
              {$prfx}_HTL_ORDER.EMAIL,
              {$prfx}_HTL_ORDER.TELEPHONE,
              {$prfx}_HTL_ORDER.NOTE,
              {$prfx}_HTL_ORDER.COUNTRY,
              {$prfx}_HTL_ORDER.CITY,
              {$prfx}_HTL_ORDER.ADRESS ADDRESS,
              {$prfx}_HTL_ORDER.ZIP,
              {$prfx}_HTL_ORDER.SALUTATION TITLE,
              {$prfx}_HTL_ORDER.PAYMENT_TYPE,
              {$prfx}_HTL_ORDER.ENCODED,
              ORDER_LANG,
              ARRIVE_DATE, DEPARTURE_DATE,
              TOTAL_ORDER_PRICE,
              CURRENCY_RATE,
              CURRENCY_CODE,
              ORDER_TM,
              {$prfx}_HTL_PAYMENT_DATA.ENCODED PD_ENCODED,
              CARD_TYPE, CARD_NUMBER, CARD_HOLDER, CARD_DATE, CARD_CVV
              FROM {$prfx}_HTL_ORDER
              LEFT JOIN {$prfx}_HTL_PAYMENT_DATA ON ({$prfx}_HTL_ORDER.ID = {$prfx}_HTL_PAYMENT_DATA.ORDER_ID)
              WHERE {$prfx}_HTL_ORDER.ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $is_encrypted = $dbw->field_by_name("ENCODED");
      $is_pd_encrypted = $dbw->field_by_name("PD_ENCODED");
      
      $order_info["id"] = $dbw->field_by_name("ID");
      $order_info["user_id"] = $dbw->field_by_name("USER_ID");
      $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
      $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
      $order_info["email"] = $dbw->field_by_name("EMAIL");

      $order_info["title"] = User::decrypt_data($dbw->field_by_name("TITLE"), $is_encrypted);
      $order_info["telephone"] = User::decrypt_data($dbw->field_by_name("TELEPHONE"), $is_encrypted);
      $order_info["address"] = User::decrypt_data($dbw->field_by_name("ADDRESS"), $is_encrypted);
      $order_info["city"] = User::decrypt_data($dbw->field_by_name("CITY"), $is_encrypted);
      $order_info["zip"] = User::decrypt_data($dbw->field_by_name("ZIP"), $is_encrypted);

      $order_info["note"] = $dbw->field_by_name("NOTE");
      $order_info["total_order_price"] = $dbw->field_by_name("TOTAL_ORDER_PRICE");

      $order_info["lang"] = $dbw->field_by_name("ORDER_LANG");

      $order_info["country_code"] = User::decrypt_data($dbw->field_by_name("COUNTRY"), $is_encrypted);
      $order_info["country"] = country_name($order_info["country_code"], $order_info["lang"]);

      $order_info["order_date"] = strtotime($dbw->field_by_name("ORDER_TM"));
      $order_info["arrive_date"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));
      $order_info["departure_date"] = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

      $order_info["nights"] = round(($order_info["departure_date"] - $order_info["arrive_date"])/(60*60*24));
      
      $order_info["payment_type"] = $dbw->field_by_name("PAYMENT_TYPE");

      $order_currency_name = $dbw->field_by_name("CURRENCY_CODE");
      $order_currency_rate = $dbw->field_by_name("CURRENCY_RATE");
    }

    $dbw->free_result();
    
    $order_info["card_data"] = array();
    $order_info["card_data"]["card_type"] = ifnull($_SESSION["booking"]["step5"]["payment_data"]["creditcart_type"]);
    switch($order_info["card_data"]["card_type"])
    {
      case 1:
        $order_info["card_data"]["card_type"] = 'AX';
      break;

      case 2:
        $order_info["card_data"]["card_type"] = 'MC';
      break;

      case 3:
        $order_info["card_data"]["card_type"] = 'VI';
      break;

      case 4:
        $order_info["card_data"]["card_type"] = 'JC';
      break;

      case 5:
        $order_info["card_data"]["card_type"] = 'DN';
      break;
    }
    
    $order_info["card_data"]["card_number"] = ifnull($_SESSION["booking"]["step5"]["payment_data"]["creditcart_number"]);
    $order_info["card_data"]["card_holder"] = ifnull($_SESSION["booking"]["step5"]["payment_data"]["creditcart_owner"]);
    $order_info["card_data"]["card_date"] = str_replace("/", "", ifnull($_SESSION["booking"]["step5"]["payment_data"]["creditcart_date"]));
    $order_info["card_data"]["card_cvv"] = ifnull($_SESSION["booking"]["step5"]["payment_data"]["creditcart_cvv"]);

    $rate_plans = array();
    
    $query = "SELECT  ID, NAME, TP, CODE, INFO
                FROM {$prfx}_HTL_RATE_PLAN
                LEFT JOIN ${prfx}_HTL_RATE_PLAN_INFO ON (${prfx}_HTL_RATE_PLAN.ID = ${prfx}_HTL_RATE_PLAN_INFO.RATE_PLAN_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
                ORDER BY SORT_ORDER, NAME
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $code = $dbw->field_by_name("CODE");
      if(empty($code)) continue;

      $rp_name = $dbw->field_by_name("INFO");
      if(empty($rp_name)) $rp_name = $dbw->field_by_name("NAME");
      
      $rate_plans[$dbw->field_by_name("ID")] = array("code" => $code,
                                                     "name" => $rp_name);
    }

    $dbw->free_result();
    
    // fetch rooms
    $query = "SELECT {$prfx}_HTL_ROOMS.ID, I_NAME, TYPE, STD_TARIF_CAPTION,
              {$prfx}_HTL_ROOMS.ROOM_CODE,
              ROOM_COUNTER,
              PERSONS_COUNT,
              TOTAL_PRICE,
              ADULTS_COUNT,
              CHILDREN_COUNT,
              RATE_PLAN_ID
              FROM
              {$prfx}_HTL_ORDER_PROP
              LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
              LEFT JOIN ${prfx}_HTL_ROOMS_PROPS ON
              (${prfx}_HTL_ROOMS.ID = ${prfx}_HTL_ROOMS_PROPS.ROOM_ID AND LANGUAGE_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
              WHERE {$prfx}_HTL_ORDER_PROP.ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $type = $dbw->field_by_name("TYPE");
      if(empty($type)) $type = $dbw->field_by_name("I_NAME");
      
      $std_plan_name = $dbw->field_by_name("STD_TARIF_CAPTION");
      if(empty($std_plan_name))$std_plan_name = "Standard";
      
      $order_info["rooms"][$room_id][$room_cnt] = array(
                            "room_name" => $type,
                            "std_plan_name" => $std_plan_name,
                            "room_code" => $dbw->field_by_name("ROOM_CODE"),
                            "persons_count" => $dbw->field_by_name("PERSONS_COUNT"),
                            "total_price" => $dbw->field_by_name("TOTAL_PRICE"),
                            "adults_count" => $dbw->field_by_name("ADULTS_COUNT"),
                            "children_count" => $dbw->field_by_name("CHILDREN_COUNT"),
                            "rate_plan_id" => $dbw->field_by_name("RATE_PLAN_ID")
                        );
    }

    $dbw->free_result();

    // fetch room guests

    $query = "SELECT ROOM_ID,
              ROOM_COUNTER,
              GUEST_NAME,
              GUEST_AGE,
              IS_ADULT
              FROM
              {$prfx}_HTL_ORDER_GUESTS
              WHERE ORDER_ID = $order_id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $order_info["rooms"][$room_id][$room_cnt]["guests"][] = array(
                            "guest_name" => $dbw->field_by_name("GUEST_NAME"),
                            "guest_age" => $dbw->field_by_name("GUEST_AGE"),
                            "is_adult" => $dbw->field_by_name("IS_ADULT")
                        );
    }

    $dbw->free_result();

    // fetch dates

    $query = "SELECT ROOM_ID, ROOM_COUNTER,
              PRICE,
              DT
              FROM
              {$prfx}_HTL_ORDER_PRICES
              WHERE ORDER_ID = $order_id
              ORDER BY DT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    while($dbw->fetch_row())
    {
      $room_id = $dbw->field_by_name("ROOM_ID");
      $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

      $dt = date("Y-m-d", strtotime($dbw->field_by_name("DT")));

      $order_info["rooms"][$room_id][$room_cnt]["dates"][$dt] = $dbw->field_by_name("PRICE");
    }

    $dbw->free_result();

    // fetch services
    $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, PRICE, AMOUNT, TOTAL_PRICE
              FROM
              {$prfx}_HTL_ORDER_SERVICES
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
              LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
              WHERE ORDER_ID = $order_id
              ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $error .= $ERROR . "\n\n" . $ERR_DETAILS;
      return true;
    }

    $order_info["services"] = array();

    while($dbw->fetch_row())
    {
      $order_info["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                       "amount" => $dbw->field_by_name("AMOUNT"),
                                                                       "price" => $dbw->field_by_name("PRICE"),
                                                                       "total_price" => $dbw->field_by_name("TOTAL_PRICE"));
    }
    
    $dbw->free_result();
    
    $save_credit_card_on_error = false;

    try
    {
      $xmldoc = new DOMDocument("1.0", "UTF-8");
      $xmldoc->formatOutput = true;

      $now = date("c");
      
      $target = "Production";
      if($url == "https://staging.hotel-spider.ch/ota/OTA_HotelResNotif/2014A")
      {
        $target = "Test";
      }
      
      //--------------------------------------------------------------------
      $root = $xmldoc->createElement($res_type == "cancellation" ? "OTA_HotelResModifyNotifRQ" : "OTA_HotelResNotifRQ");
      $root = $xmldoc->appendChild($root);
      $root->setAttribute("Target", $target);
      $root->setAttribute("TimeStamp", $now);
      $root->setAttribute("Version", "1.000");
      $root->setAttribute("EchoToken", time() . "-" . $order_info["id"]);
      //--------------------------------------------------------------------
      $POS = $xmldoc->createElement("POS");
      $root->appendChild($POS);

      $Source = $xmldoc->createElement("Source");
      $POS->appendChild($Source);
      
      $RequestorID = $xmldoc->createElement("RequestorID");
      $Source->appendChild($RequestorID);
      
      $RequestorID->setAttribute("Type", 5);
      $RequestorID->setAttribute("ID", $settings["htspider4_reservation_login"]);
      $RequestorID->setAttribute("MessagePassword", $settings["htspider4_reservation_password"]);
      //--------------------------------------------------------------------
      $HotelReservations = $xmldoc->createElement($res_type == "cancellation" ? "HotelResModifies" : "HotelReservations");
      $root->appendChild($HotelReservations);
      //--------------------------------------------------------------------
      $reservation = $xmldoc->createElement($res_type == "cancellation" ? "HotelResModify" : "HotelReservation");
      $HotelReservations->appendChild($reservation);
      $reservation->setAttribute("ResStatus", $res_type == "cancellation" ? "Cancel" : "Book");
      $reservation->setAttribute("CreateDateTime", date("c", $order_info["order_date"]));
      $reservation->setAttribute("LastModifyDateTime", $res_type == "cancellation" ? $now : date("c", $order_info["order_date"]));
      $reservation->setAttribute("WalkInIndicator", "0");
      $reservation->setAttribute("OriginalDeliveryMethodCode", "11");
      //--------------------------------------------------------------------
      $POS = $xmldoc->createElement("POS");
      $reservation->appendChild($POS);

      $Source = $xmldoc->createElement("Source");
      $POS->appendChild($Source);
      
      $RequestorID = $xmldoc->createElement("RequestorID");
      $Source->appendChild($RequestorID);
      
      $RequestorID->setAttribute("Type", 22);
      $RequestorID->setAttribute("ID", $settings["htspider4_reservation_channel"]);
      
      $BookingChannel = $xmldoc->createElement("BookingChannel");
      $Source->appendChild($BookingChannel);

      $BookingChannel->setAttribute("Type", 7);

      $CompanyName = $xmldoc->createElement("CompanyName");
      $BookingChannel->appendChild($CompanyName);
      
      $text_node = $xmldoc->createTextNode("MASCH");
      $BookingChannel->appendChild($text_node);
      //--------------------------------------------------------------------
      $roomstays = $xmldoc->createElement("RoomStays");
      $reservation->appendChild($roomstays);
      $room_counter = 1;
      $guest_counter = 1;
      
      $GlobalGuestCounts = $xmldoc->createElement("GuestCounts");
      
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          $roomstay = $xmldoc->createElement("RoomStay");
          $roomstays->appendChild($roomstay);
          $roomstay->setAttribute("IndexNumber", $room_counter++);
          $roomstay->setAttribute("RoomStayStatus", $res_type == "cancellation" ? "Cancel" : "Book");

          $RoomTypes = $xmldoc->createElement("RoomTypes");
          $roomstay->appendChild($RoomTypes);
          
          $RoomType = $xmldoc->createElement("RoomType");
          $RoomTypes->appendChild($RoomType);
  
          $RoomType->setAttribute("RoomID", $room["room_code"]);
          $RoomType->setAttribute("IsRoom", "1");
          
          $RoomDescription = $xmldoc->createElement("RoomDescription");
          $RoomType->appendChild($RoomDescription);
          $RoomDescription->setAttribute("Name", $room["room_name"]);
          
          //--------------------------------------------------------------------
          $RoomRates = $xmldoc->createElement("RoomRates");
          $roomstay->appendChild($RoomRates);

          if(empty($room["rate_plan_id"]))
          {
            $rtcode = ifnull($settings["htspider4_default_rate"]);
            $rtname = ifnull($room["std_plan_name"]);
          }
          else
          {
            $rtcode = ifnull($rate_plans[$room["rate_plan_id"]]["code"]);
            $rtname = ifnull($rate_plans[$room["rate_plan_id"]]["name"]);
          }  
          
          foreach($room["dates"] as $dt => $price)
          {
            $RoomRate = $xmldoc->createElement("RoomRate");
            $RoomRates->appendChild($RoomRate);
            $RoomRate->setAttribute("RatePlanID", $rtcode);
            $RoomRate->setAttribute("EffectiveDate", $dt);
            $RoomRate->setAttribute("ExpireDate", $dt);

            $Rates = $xmldoc->createElement("Rates");
            $RoomRate->appendChild($Rates);

            $Rate = $xmldoc->createElement("Rate");
            $Rates->appendChild($Rate);
            $Rate->setAttribute("EffectiveDate", $dt);
            $Rate->setAttribute("ExpireDate", $dt);

            $Base = $xmldoc->createElement("Base");
            $Rate->appendChild($Base);
            $Base->setAttribute("CurrencyCode", $order_currency_name);
            $Base->setAttribute("AmountBeforeTax", number_format(aux_calc_round_price($price, $order_currency_rate, $settings), 2, ".", ""));
            $Base->setAttribute("AmountAfterTax", number_format(aux_calc_round_price($price, $order_currency_rate, $settings), 2, ".", ""));

            $Total = $xmldoc->createElement("Total");
            $Rate->appendChild($Total);
            $Total->setAttribute("CurrencyCode", $order_currency_name);
            $Total->setAttribute("AmountBeforeTax", number_format(aux_calc_round_price($price, $order_currency_rate, $settings), 2, ".", ""));
            $Total->setAttribute("AmountAfterTax", number_format(aux_calc_round_price($price, $order_currency_rate, $settings), 2, ".", ""));
            
            $RoomRateDescription = $xmldoc->createElement("RoomRateDescription");
            $RoomRate->appendChild($RoomRateDescription);
             
            $Text = $xmldoc->createElement("Text");
            $RoomRateDescription->appendChild($Text);
            
            $text_node = $xmldoc->createTextNode($rtname);
            $Text->appendChild($text_node);
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("GuestCounts");
          $roomstay->appendChild($node);
          
          if(!empty($room["guests"]))
          {
            foreach($room["guests"] as $guest)
            {
              $node2 = $xmldoc->createElement("GuestCount");
              $node2->setAttribute("Count", "1");

              if(empty($guest["guest_age"]))
                $code = "10";
              else
                $code = "8";
              $node2->setAttribute("AgeQualifyingCode", $code);
              
              $node->appendChild($node2);
              $GlobalGuestCounts->appendChild($node2->cloneNode(true));
            }
          }
          else
          {
            $node2 = $xmldoc->createElement("GuestCount");
            $node2->setAttribute("Count", $room["adults_count"]);
            $node2->setAttribute("AgeQualifyingCode", "10");
            $node->appendChild($node2);
            $GlobalGuestCounts->appendChild($node2->cloneNode(true));
            
            if(!empty($room["children_count"]))
            {
              $node2 = $xmldoc->createElement("GuestCount");
              $node2->setAttribute("Count", $room["children_count"]);
              $node2->setAttribute("AgeQualifyingCode", "8");
              $node->appendChild($node2);
              $GlobalGuestCounts->appendChild($node2->cloneNode(true));
            }
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("TimeSpan");
          $roomstay->appendChild($node);
          $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
          $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Total");
          $roomstay->appendChild($node);
          $node->setAttribute("CurrencyCode", $order_currency_name);
          $node->setAttribute("AmountBeforeTax", number_format($room["total_price"], 2, ".", ""));
          $node->setAttribute("AmountAfterTax", number_format($room["total_price"], 2, ".", ""));
          //--------------------------------------------------------------------
          $node2 = $xmldoc->createElement("BasicPropertyInfo");
          $roomstay->appendChild($node2);
          $node2->setAttribute("HotelCode", $settings["htspider4_hotel_id"]);
          $node2->setAttribute("HotelName", "MASCH");
          $node2->setAttribute("CurrencyCode", $order_currency_name);
          //--------------------------------------------------------------------

          $node = $xmldoc->createElement("ResGuestRPHs");
          $roomstay->appendChild($node);

          $guests = "";
          
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $guests .= ($guest_counter++) . " ";
          }
          
          $guests = trim($guests, ",");
          $text_node = $xmldoc->createTextNode($guests);
          $node->appendChild($text_node);
          //--------------------------------------------------------------------
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("ResGuests");
      $reservation->appendChild($node);

      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";

            $names = preg_split('/\\s+/', $guest["guest_name"], -1, PREG_SPLIT_NO_EMPTY);
            if(count($names) > 1)
            {
              $lastname = $names[0];
              $firstname = $names[1];
            }
            else
            {
              $lastname = $names[0];
              $firstname = "";
            }

            $node2 = $xmldoc->createElement("ResGuest");
            $node->appendChild($node2);
            $node2->setAttribute("ResGuestRPH", $guest_counter++);

            $node3 = $xmldoc->createElement("Profiles");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("ProfileInfo");
            $node3->appendChild($node4);

            $profile = $xmldoc->createElement("Profile");
            $node4->appendChild($profile);
            $profile->setAttribute("ProfileType", 1);

            $node5 = $xmldoc->createElement("Customer");
            $profile->appendChild($node5);
            $node5->setAttribute("Gender", "Unknown");
            $node5->setAttribute("MaritalStatus", "Unknown");

            $node6 = $xmldoc->createElement("PersonName");
            $node5->appendChild($node6);

            $node7 = $xmldoc->createElement("GivenName");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createTextNode($firstname);
            $node7->appendChild($text_node);

            $node7 = $xmldoc->createElement("Surname");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createTextNode($lastname);
            $node7->appendChild($text_node);
          }
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Services");
      $reservation->appendChild($node);

      $service_counter = 1;
      foreach($order_info["services"] as $service)
      {
        $node2 = $xmldoc->createElement("Service");
        $node->appendChild($node2);
        $node2->setAttribute("ServicePricingType", "Per stay");
        $node2->setAttribute("Inclusive", "0");
        $node2->setAttribute("ServiceRPH", $service_counter++);
        $node2->setAttribute("Quantity", $service["amount"]);

        $node3 = $xmldoc->createElement("ServiceDetails");
        $node2->appendChild($node3);

        $node4 = $xmldoc->createElement("ServiceDescription");
        $node3->appendChild($node4);
        $node4->setAttribute("Name", $service["title"]);

        $node3 = $xmldoc->createElement("Price");
        $node2->appendChild($node3);
        $node3->setAttribute("NumberOfUnits", $service["amount"]);

        $node4 = $xmldoc->createElement("Base");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_currency_name);

        $node4 = $xmldoc->createElement("Total");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["total_price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", $order_currency_name);
      } // foreach service
      //--------------------------------------------------------------------
      $resglobalinfo = $xmldoc->createElement("ResGlobalInfo");
      $reservation->appendChild($resglobalinfo);
      //--------------------------------------------------------------------
      $resglobalinfo->appendChild($GlobalGuestCounts);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Comments");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("Comment");
      $node->appendChild($node2);
      $node2->setAttribute("Name", "Guestmessage");
      $node2->setAttribute("GuestViewable", "1");

      $node3 = $xmldoc->createElement("Text");
      $node2->appendChild($node3);
      $node3->setAttribute("Formatted", "1");

      $text_node = $xmldoc->createTextNode($order_info["note"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      if(!empty($settings["htspider4_push_credicards"]) &&
         in_array(ifnull($order_info["payment_type"]), array("CREDIT_CARD", "BILL_CC")) &&
         $res_type == "reservation")
      {
        $save_credit_card_on_error = true;
        
        $Guarantee = $xmldoc->createElement("Guarantee");
        $resglobalinfo->appendChild($Guarantee);
        $Guarantee->setAttribute("GuaranteeType", "CC/DC/Voucher");
        
        $GuaranteesAccepted = $xmldoc->createElement("GuaranteesAccepted");
        $Guarantee->appendChild($GuaranteesAccepted);
        
        $GuaranteeAccepted = $xmldoc->createElement("GuaranteeAccepted");
        $GuaranteesAccepted->appendChild($GuaranteeAccepted);
        
        $PaymentCard = $xmldoc->createElement("PaymentCard");
        $GuaranteeAccepted->appendChild($PaymentCard);

        $PaymentCard->setAttribute("CardCode", ifnull($order_info["card_data"]["card_type"]));
        $PaymentCard->setAttribute("ExpireDate", ifnull($order_info["card_data"]["card_date"]));

        $CardHolderName = $xmldoc->createElement("CardHolderName");
        $PaymentCard->appendChild($CardHolderName);
        
        $text_node = $xmldoc->createTextNode(ifnull($order_info["card_data"]["card_holder"]));
        $CardHolderName->appendChild($text_node);
        
        $CardNumber = $xmldoc->createElement("CardNumber");
        $PaymentCard->appendChild($CardNumber);
        
        $PlainText = $xmldoc->createElement("PlainText");
        $CardNumber->appendChild($PlainText);
        
        $text_node = $xmldoc->createTextNode(ifnull($order_info["card_data"]["card_number"]));
        $PlainText->appendChild($text_node);
        
        $SeriesCode = $xmldoc->createElement("SeriesCode");
        $PaymentCard->appendChild($SeriesCode);
        
        $text_node = $xmldoc->createTextNode(ifnull($order_info["card_data"]["card_cvv"]));
        $SeriesCode->appendChild($text_node);
      }
      else
      {
      }
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("HotelReservationIDs");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("HotelReservationID");
      $node->appendChild($node2);
      $node2->setAttribute("ResID_Type", "14");
      $node2->setAttribute("ResID_Value", $settings["htspider4_hotel_id"] . "-" . $order_info["id"]);
      $node2->setAttribute("ResID_Source", $settings["htspider4_reservation_channel"]);
      $node2->setAttribute("ResID_SourceContext", "MASCH");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("TimeSpan");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
      $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
      $node->setAttribute("Duration", "P" . $order_info["nights"] . "D");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Total");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("AmountBeforeTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("AmountAfterTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("CurrencyCode", $order_currency_name);
      //--------------------------------------------------------------------
      $node3 = $xmldoc->createElement("Profiles");
      $resglobalinfo->appendChild($node3);

      $node4 = $xmldoc->createElement("ProfileInfo");
      $node3->appendChild($node4);

      $profile = $xmldoc->createElement("Profile");
      $node4->appendChild($profile);

      $node = $xmldoc->createElement("Customer");
      $profile->appendChild($node);
      $node->setAttribute("Gender", "");

      $node2 = $xmldoc->createElement("PersonName");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("GivenName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createTextNode($order_info["first_name"]);
      $node3->appendChild($text_node);

      $node4 = $xmldoc->createElement("Surname");
      $node2->appendChild($node4);
      $text_node = $xmldoc->createTextNode($order_info["last_name"]);
      $node4->appendChild($text_node);

      $node2 = $xmldoc->createElement("Telephone");
      $node->appendChild($node2);
      $node2->setAttribute("PhoneNumber", $order_info["telephone"]);
      $node2->setAttribute("PhoneTechType", "1");

      $node2 = $xmldoc->createElement("Email");
      $node->appendChild($node2);
      $text_node = $xmldoc->createTextNode($order_info["email"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Address");
      $node->appendChild($node2);
      $node2->setAttribute("FormattedInd", "true");
      $node2->setAttribute("Type", "1");

      $node3 = $xmldoc->createElement("AddressLine");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createTextNode($order_info["address"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CityName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createTextNode($order_info["city"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("PostalCode");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createTextNode($order_info["zip"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CountryName");
      $node2->appendChild($node3);
      $node3->setAttribute("Code", $order_info["country_code"]);
      $text_node = $xmldoc->createTextNode($order_info["country"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      $node2 = $xmldoc->createElement("BasicPropertyInfo");
      $resglobalinfo->appendChild($node2);
      $node2->setAttribute("HotelCode", $settings["htspider4_hotel_id"]);
      $node2->setAttribute("HotelName", "MASCH");
      $node2->setAttribute("CurrencyCode", $order_currency_name);
      //--------------------------------------------------------------------

      $data = $xmldoc->saveXML();
      
      file_put_contents(app_path() . "modules/hotel_extended/out/hspider4-${res_type}-" . $order_info["id"] . ".xml", $data);

      $client = new Zend_Http_Client($url, array(
            'maxredirects' => 5,
            'timeout'      => 10));

      $client->setRawData($data, 'text/xml');

      $request = $client->request('POST');

      $response_text = $request->getBody();

      //file_put_contents(app_path() . "modules/hotel_extended/out/hspider4-${res_type}-" . $order_info["id"] . ".res.xml", $response_text);

      if(empty($response_text))
      {
        $error = "No response data has been received.";
        return true;
      }

      $xmldoc = new DOMDocument();
      $xmldoc->formatOutput = true;
      if(!@$xmldoc->loadXML($response_text))
      {
        $error = "Invalid XML response data:\n\n" . $response_text;
        return true;
      }

      $xsdpath = new DOMXPath($xmldoc);
      $xsdpath->registerNamespace('ns', "http://www.opentravel.org/OTA/2003/05");
      
      $res_node = $res_type == "cancellation" ? "OTA_HotelResModifyNotifRS" : "OTA_HotelResNotifRS";
      $nodes = $xsdpath->evaluate("/ns:$res_node/ns:Success");
      if($nodes->length > 0)
      {
        return true;
      }
      else if($save_credit_card_on_error)
      {
        // error
        $payment_type = null_if_empty($dbw->escape($_SESSION["booking"]["step5"]["personal_data"]["payment_type"]));

        $payment_data = array();
        $payment_data["creditcart_type"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_type"], 1)));
        $payment_data["creditcart_number"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_number"], 1)));
        $payment_data["creditcart_owner"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_owner"], 1)));
        $payment_data["creditcart_date"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_date"], 1)));
        $payment_data["creditcart_cvv"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["creditcart_cvv"], 1)));

        $payment_data["account_number"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["account_number"], 1)));
        $payment_data["account_owner"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["account_owner"], 1)));
        $payment_data["bank_id"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["bank_id"], 1)));
        $payment_data["bank_name"] = null_if_empty($dbw->escape(User::encrypt_data($_SESSION["booking"]["step5"]["payment_data"]["bank_name"], 1)));

        $usrid = $dbw->escape(ifnull($order_info["user_id"]));
        if(empty($usrid)) $usrid = "NULL";
        
        $now = null_if_empty($dbw->format_date(time()));
        $query = "INSERT INTO {$prfx}_HTL_PAYMENT_DATA (ENCODED, ORDER_ID, USER_ID, CARD_TYPE, CARD_NUMBER, CARD_HOLDER, CARD_DATE, CARD_CVV, DATE,
                  PAYMENT_TYPE, DD_ACCOUNT_NUMBER, DD_ACCOUNT_OWNER, DD_BANK_ID, DD_BANK_NAME)
                  VALUES (1, $order_id, $usrid, $payment_data[creditcart_type], $payment_data[creditcart_number], $payment_data[creditcart_owner], $payment_data[creditcart_date], $payment_data[creditcart_cvv], $now,
                  $payment_type, $payment_data[account_number], $payment_data[account_owner], $payment_data[bank_id], $payment_data[bank_name])";
        if(!$dbw->execute_query($query))
        {
           $ERROR = text("ErrQueryFailed");
           $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                          $dbw->get_last_query();

           return false;
        }
      }
      
      $nodes = $xsdpath->evaluate("/ns:OTA_ErrorRS/ns:Errors/ns:Error");
      if($nodes->length > 0)
      {
        for($i = 0; $i < $nodes->length; $i++)
        {
          $error .= $nodes->item($i)->nodeValue . "\n\n";
        }

        throw new Exception($error);
      }
      
      $nodes = $xsdpath->evaluate("/ns:OTA_HotelResNotifRS/ns:Errors/ns:Error");
      if($nodes->length > 0)
      {
        for($i = 0; $i < $nodes->length; $i++)
        {
          $error .= $nodes->item($i)->nodeValue . "\n\n";
        }

        throw new Exception($error);
      }

      $error = "Unrecognizable XML response data:\n\n" . $xmldoc->saveXML();
      throw new Exception($error);
    }
    catch(Exception $ex)
    {
      $error = $ex->getMessage();
    }
    
    $error_db = $dbw->escape("Reservation transmisstion error: " . $error);
    
    $query = "UPDATE {$prfx}_HTL_ORDER SET CONNECTOR_PUSH_ERROR = '$error_db' WHERE ID = $order_id";
    if(!$dbw->execute_query($query))
    {
       $ERROR = text("ErrQueryFailed");
       $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                      $dbw->get_last_query();

       return false;
    }
    
    return true;
  } // reserveHotelSpider4
  //-----------------------------------------------------------------
  function push_reservation_info($order_id, $type)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $order_id = $dbw->escape($order_id);

    if(empty($order_id)) return true;

    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      return false;
    }

    if(empty($settings["external_service"]))
    {
      return true;
    }

    $error = "";
    $data = "";
    $url = "";

    switch($settings["external_service"])
    {
      case "channelmanager":
      if(!$this->reserveChannelManager($order_id, $type, $settings, $data, $error, $url)) return true;
      break;

      case "hotelpartner":
      if(!$this->reserveHotelPartner($order_id, $type, $settings, $data, $error, $url)) return true;
      break;
      
      case "HTSPIDER4":
      if(!$this->reserveHotelSpider4($order_id, $type, $settings, $data, $error, $url)) return true;
      break;

      default:
      return true;
    }

    $now = $dbw->format_datetime(time());
    $service = null_if_empty($dbw->escape($settings["external_service"]));

    if($type == "cancellation")
    {
      $success_message = "Cancellation for the order %s has been successfully pushed to the URL %s";
      $error_message = "Cancellation for the order %s to the URL %s has been failed with the following reason";
    }
    else
    {
      $success_message = "Reservation for the order %s has been successfully pushed to the URL %s";
      $error_message = "Reservation for the order %s to the URL %s has been failed with the following reason";
    }

    $status = "SUCCESS";
    $message = $success_message;
    if(!empty($error))
    {
      $status = "ERROR";

      $message = $error_message . ":\n\n" . $error;
    }

    $message = sprintf($message, $order_id, $url);

    $message = $dbw->escape($message);
    $data = null_if_empty($dbw->escape($data));

    $query = "INSERT INTO {$prfx}_HTL_EXT_SERVICES_PUSH_LOG
                (DT, DATA, SERVICE_TYPE, RESULT, DETAILS) VALUES
                ('$now', $data, $service, '$status', '$message')";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    return true;
  } // push_reservation_info
  //-----------------------------------------------------------------
  function after_install(&$dbw, $prfx)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $quickbooking = false;

    $serials = preg_split("/[\\s,]+/", trim(ifnull($_SESSION[S_CONTEXT]["install_serials"])));

    foreach($serials as $sn)
    {
      $sn = trim($sn);

      $serial_info = array();
      $serial_info["date"] = date("Y-m-d");
      $serial_info["nr"] = $sn;
      analyze_serial($serial_info);

      if(!empty($_SESSION[S_CONTEXT]["modules"]["hotel"]["quickbooking"]))
      {
        $end_date = strtotime("+6 months", strtotime($serial_info["expire_date"]));
        $quickbooking = true;
        break;
      }
    }

    return true;
  } // after_install
  //-----------------------------------------------------------------
  function sihotPullReservations()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $xmldoc = new DOMDocument("1.0", "UTF-8");
    $xmldoc->formatOutput = true;

    $now = date("c");

    //--------------------------------------------------------------------
    $root = $xmldoc->createElement("OTA_HotelResNotifRQ");
    $root = $xmldoc->appendChild($root);
    $root->setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
    $root->setAttribute("xmlns", "http://www.opentravel.org/OTA/2003/05");
    $root->setAttribute("TimeStamp", $now);
    $root->setAttribute("Version", "1");
    //--------------------------------------------------------------------

    if(reqvar_empty("start"))
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("The start date [start] is not specified!");
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    $start = iso_date(reqvar("start"), "Y-m-d");
    if($start == "error")
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("The start date has wrong format! The correct format is 2013-12-24");
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    $login = reqvar("login");
    $password = reqvar("password");
    if(empty($login) || empty($password))
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("Login or Password are not specified!");
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    if(!$this->fetch_settings($settings, 'SETTINGS'))
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection($ERROR . "\n\n" . $ERR_DETAILS);
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    $login = reqvar("login");
    $password = reqvar("password");
    if($login != $settings["sihot_user"] || $password != $settings["sihot_password"])
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection("Login or Password are not correct!");
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    //--------------------------------------------------------------------
    $reservation_list = $xmldoc->createElement("ReservationsList");
    $root->appendChild($reservation_list);
    //--------------------------------------------------------------------

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $start = $dbw->format_datetime(strtotime($start));

    //fetch order info
    $query = "SELECT ID, ORDER_LANG
              FROM {$prfx}_HTL_ORDER
              WHERE CONFIRMED <> '0' AND ORDER_TM >= '$start'";

    if(!$dbw->execute_query($query))
    {
      $errors = $xmldoc->createElement("Errors");
      $root->appendChild($errors);
      $node = $xmldoc->createElement("Error");
      $text = $xmldoc->createCDATASection($ERROR . "\n\n" . $ERR_DETAILS);
      $node->appendChild($text);
      $errors->appendChild($node);

      header("Content-Type: text/xml; charset=UTF-8");
      echo $xmldoc->saveXML();
      return false;
    }

    while($dbw->fetch_row())
    {
      $orders[$dbw->field_by_name("ID")] = $dbw->field_by_name("ORDER_LANG");
    }

    $dbw->free_result();

    foreach($orders as $order_id => $lang_key)
    {
      $order_info = array();

      //fetch order info
      $query = "SELECT {$prfx}_HTL_ORDER.ID,
                {$prfx}_HTL_ORDER.FIRST_NAME,
                {$prfx}_HTL_ORDER.LAST_NAME,
                {$prfx}_HTL_ORDER.EMAIL,
                {$prfx}_HTL_ORDER.TELEPHONE,
                {$prfx}_HTL_ORDER.NOTE,
                {$prfx}_HTL_ORDER.COUNTRY,
                {$prfx}_HTL_ORDER.CITY,
                {$prfx}_HTL_ORDER.ADRESS ADDRESS,
                {$prfx}_HTL_ORDER.ZIP,
                {$prfx}_HTL_ORDER.SALUTATION TITLE,
                ORDER_LANG,
                CONFIRMED,
                ARRIVE_DATE, DEPARTURE_DATE,
                TOTAL_ORDER_PRICE,
                ORDER_TM
                FROM {$prfx}_HTL_ORDER
                WHERE {$prfx}_HTL_ORDER.ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $error .= $ERROR . "\n\n" . $ERR_DETAILS;
        return true;
      }

      while($dbw->fetch_row())
      {
        $order_info["id"] = $dbw->field_by_name("ID");
        $order_info["first_name"] = $dbw->field_by_name("FIRST_NAME");
        $order_info["last_name"] = $dbw->field_by_name("LAST_NAME");
        $order_info["email"] = $dbw->field_by_name("EMAIL");
        $order_info["telephone"] = $dbw->field_by_name("TELEPHONE");
        $order_info["address"] = $dbw->field_by_name("ADDRESS");
        $order_info["city"] = $dbw->field_by_name("CITY");
        $order_info["zip"] = $dbw->field_by_name("ZIP");
        $order_info["note"] = $dbw->field_by_name("NOTE");
        $order_info["total_order_price"] = $dbw->field_by_name("TOTAL_ORDER_PRICE");

        $order_info["lang"] = $dbw->field_by_name("ORDER_LANG");
        $order_info["confirmed"] = $dbw->field_by_name("CONFIRMED");

        $order_info["country_code"] = $dbw->field_by_name("COUNTRY");
        $order_info["country"] = country_name($order_info["country_code"], $order_info["lang"]);

        $order_info["order_date"] = strtotime($dbw->field_by_name("ORDER_TM"));
        $order_info["arrive_date"] = strtotime($dbw->field_by_name("ARRIVE_DATE"));
        $order_info["departure_date"] = strtotime($dbw->field_by_name("DEPARTURE_DATE"));

        $order_info["nights"] = round(($order_info["departure_date"] - $order_info["arrive_date"])/(60*60*24));
      }

      $dbw->free_result();

      // fetch rooms
      $query = "SELECT {$prfx}_HTL_ROOMS.ID,
                {$prfx}_HTL_ROOMS.ROOM_CODE,
                ROOM_COUNTER,
                PERSONS_COUNT,
                TOTAL_PRICE,
                ADULTS_COUNT,
                CHILDREN_COUNT
                FROM
                {$prfx}_HTL_ORDER_PROP
                LEFT JOIN {$prfx}_HTL_ROOMS ON ({$prfx}_HTL_ROOMS.ID = {$prfx}_HTL_ORDER_PROP.ROOM_ID)
                WHERE {$prfx}_HTL_ORDER_PROP.ORDER_ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $error .= $ERROR . "\n\n" . $ERR_DETAILS;
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $order_info["rooms"][$room_id][$room_cnt] = array(
                              "room_code" => $dbw->field_by_name("ROOM_CODE"),
                              "persons_count" => $dbw->field_by_name("PERSONS_COUNT"),
                              "total_price" => $dbw->field_by_name("TOTAL_PRICE"),
                              "adults_count" => $dbw->field_by_name("ADULTS_COUNT"),
                              "children_count" => $dbw->field_by_name("CHILDREN_COUNT")
                          );
      }

      $dbw->free_result();

      // fetch room guests

      $query = "SELECT ROOM_ID,
                ROOM_COUNTER,
                GUEST_NAME,
                GUEST_AGE,
                IS_ADULT
                FROM
                {$prfx}_HTL_ORDER_GUESTS
                WHERE ORDER_ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $error .= $ERROR . "\n\n" . $ERR_DETAILS;
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ROOM_ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $order_info["rooms"][$room_id][$room_cnt]["guests"][] = array(
                              "guest_name" => $dbw->field_by_name("GUEST_NAME"),
                              "guest_age" => $dbw->field_by_name("GUEST_AGE"),
                              "is_adult" => $dbw->field_by_name("IS_ADULT")
                          );
      }

      $dbw->free_result();

      // fetch dates

      $query = "SELECT ROOM_ID, ROOM_COUNTER,
                PRICE,
                DT
                FROM
                {$prfx}_HTL_ORDER_PRICES
                WHERE ORDER_ID = $order_id
                ORDER BY DT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $error .= $ERROR . "\n\n" . $ERR_DETAILS;
        return true;
      }

      while($dbw->fetch_row())
      {
        $room_id = $dbw->field_by_name("ROOM_ID");
        $room_cnt = $dbw->field_by_name("ROOM_COUNTER");

        $dt = date("Y-m-d", strtotime($dbw->field_by_name("DT")));

        $order_info["rooms"][$room_id][$room_cnt]["dates"][$dt] = $dbw->field_by_name("PRICE");
      }

      $dbw->free_result();

      // fetch services
      $query = "SELECT {$prfx}_HTL_EXTRA_SERVICES.ID, TITLE, PRICE, AMOUNT, TOTAL_PRICE
                FROM
                {$prfx}_HTL_ORDER_SERVICES
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_ORDER_SERVICES.SERVICE_ID)
                LEFT JOIN {$prfx}_HTL_EXTRA_SERVICES_PROP ON ({$prfx}_HTL_EXTRA_SERVICES.ID = {$prfx}_HTL_EXTRA_SERVICES_PROP.SERVICE_ID AND {$prfx}_HTL_EXTRA_SERVICES_PROP.LANG_ID IN (SELECT ID FROM {$prfx}_LANGUAGE WHERE LANG_KEY = '$order_info[lang]'))
                WHERE ORDER_ID = $order_id
                ORDER BY {$prfx}_HTL_EXTRA_SERVICES.SORT";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();

        $error .= $ERROR . "\n\n" . $ERR_DETAILS;
        return true;
      }

      $order_info["services"] = array();

      while($dbw->fetch_row())
      {
        $order_info["services"][$dbw->field_by_name("ID")] = array("title" => $dbw->field_by_name("TITLE"),
                                                                         "amount" => $dbw->field_by_name("AMOUNT"),
                                                                         "price" => $dbw->field_by_name("PRICE"),
                                                                         "total_price" => $dbw->field_by_name("TOTAL_PRICE"));
      }

      $reservation = $xmldoc->createElement("HotelReservation");
      $reservation_list->appendChild($reservation);
      $reservation->setAttribute("ResStatus", $order_info["confirmed"] != "1" ? "Cancel" : "Book");
      $reservation->setAttribute("CreateDateTime", date("c", $order_info["order_date"]));
      $reservation->setAttribute("LastModifyDateTime", date("c", $order_info["order_date"]));
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("UniqueID");
      $reservation->appendChild($node);
      $node->setAttribute("Type", "18");
      $node->setAttribute("ID", $order_info["id"]);
      //--------------------------------------------------------------------
      /*
      $node = $xmldoc->createElement("POS");
      $reservation->appendChild($node);

      $node2 = $xmldoc->createElement("Source");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("BookingChannel");
      $node2->appendChild($node3);

      $node3->setAttribute("Primary", "0");
      $node3->setAttribute("Type", "5");

      $node4 = $xmldoc->createElement("CompanyName");
      $node3->appendChild($node4);

      $text_node = $xmldoc->createTextNode("MASCH Booking Manager");
      $node4->appendChild($text_node);
      */
      //--------------------------------------------------------------------
      $roomstays = $xmldoc->createElement("RoomStays");
      $reservation->appendChild($roomstays);
      $room_counter = 1;
      $guest_counter = 1;
      
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          $roomstay = $xmldoc->createElement("RoomStay");
          $roomstays->appendChild($roomstay);
          $roomstay->setAttribute("IndexNumber", $room_counter++);

          $node2 = $xmldoc->createElement("BasicPropertyInfo");
          $roomstay->appendChild($node2);
          $node2->setAttribute("HotelCode", $settings["sihot_hotel_id"]);
          $node2->setAttribute("HotelName", "MASCH");
          $node2->setAttribute("CurrencyCode", "EUR");

          $node3 = $xmldoc->createElement("RoomType");
          $roomstay->appendChild($node3);
          $node3->setAttribute("NumberOfUnits", "1");
          $node3->setAttribute("IsRoom", "1");
          $node3->setAttribute("RoomTypeCode", $room["room_code"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("GuestCounts");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $xmldoc->createElement("GuestCount");
            $node->appendChild($node2);
            $node2->setAttribute("Count", "1");

            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";
            $node2->setAttribute("AgeQualifyingCode", $code);
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("ResGuestRPHs");
          $roomstay->appendChild($node);

          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            $node2 = $xmldoc->createElement("ResGuestRPH");
            $node->appendChild($node2);
            $node2->setAttribute("RPH", $guest_counter++);
          }
          //--------------------------------------------------------------------
          /*
          $node = $xmldoc->createElement("ServiceRPHs");
          $roomstay->appendChild($node);

          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "1");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "2");
          $node2 = $xmldoc->createElement("ServiceRPH");
          $node->appendChild($node2);
          $node2->setAttribute("RPH", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Guarantee");
          $roomstay->appendChild($node);
          $node->setAttribute("GuaranteeType", "GuaranteeRequired");
          $node->setAttribute("GuaranteeCode", "3");
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RatePlans");
          $roomstay->appendChild($node);
          */
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("RoomRates");
          $roomstay->appendChild($node);

          // chop departure date

          array_pop($room["dates"]);

          foreach($room["dates"] as $dt => $price)
          {
            $node2 = $xmldoc->createElement("RoomRate");
            $node->appendChild($node2);
            $node2->setAttribute("NumberOfUnits", "1");
            $node2->setAttribute("RoomID", $room["room_code"]);
            $node2->setAttribute("EffectiveDate", $dt);

            $node3 = $xmldoc->createElement("Rates");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("Rate");
            $node3->appendChild($node4);

            $node5 = $xmldoc->createElement("Base");
            $node4->appendChild($node5);
            $node5->setAttribute("DecimalPlaces", "2");
            $node5->setAttribute("CurrencyCode", "EUR");
            $node5->setAttribute("AmountAfterTax", $price);
          }
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("TimeSpan");
          $roomstay->appendChild($node);
          $node->setAttribute("Start", date("Y-m-d", $order_info["arrive_date"]));
          $node->setAttribute("End", date("Y-m-d", $order_info["departure_date"]));
          $node->setAttribute("Duration", $order_info["nights"]);
          //--------------------------------------------------------------------
          $node = $xmldoc->createElement("Total");
          $roomstay->appendChild($node);
          $node->setAttribute("DecimalPlaces", "2");
          $node->setAttribute("CurrencyCode", "EUR");
          $node->setAttribute("AmountAfterTax", number_format($room["total_price"], 2, ".", ""));
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("ResGuests");
      $reservation->appendChild($node);

      $guest_counter = 1;
      foreach($order_info["rooms"] as $room_id => $rooms)
      {
        foreach($rooms as $room)
        {
          if(!empty($room["guests"]))
          foreach($room["guests"] as $guest)
          {
            if(empty($guest["guest_age"]))
              $code = "10";
            else
              $code = "8";

            $names = preg_split('/\\s+/', $guest["guest_name"], -1, PREG_SPLIT_NO_EMPTY);
            if(count($names) > 1)
            {
              $lastname = $names[0];
              $firstname = $names[1];
            }
            else
            {
              $lastname = $names[0];
              $firstname = "";
            }

            $node2 = $xmldoc->createElement("ResGuest");
            $node->appendChild($node2);
            $node2->setAttribute("ResGuestRPH", $guest_counter++);
            $node2->setAttribute("AgeQualifyingCode", $code);

            $node3 = $xmldoc->createElement("Profiles");
            $node2->appendChild($node3);

            $node4 = $xmldoc->createElement("ProfileInfo");
            $node3->appendChild($node4);

            $profile = $xmldoc->createElement("Profile");
            $node4->appendChild($profile);

            $node5 = $xmldoc->createElement("Customer");
            $profile->appendChild($node5);
            $node5->setAttribute("Gender", "");

            $node6 = $xmldoc->createElement("PersonName");
            $node5->appendChild($node6);

            $node7 = $xmldoc->createElement("GivenName");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($lastname);
            $node7->appendChild($text_node);

            $node7 = $xmldoc->createElement("Surname");
            $node6->appendChild($node7);
            $text_node = $xmldoc->createCDATASection($firstname);
            $node7->appendChild($text_node);
          }
        } // foreach
      } // foreach rooms
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Services");
      $reservation->appendChild($node);

      foreach($order_info["services"] as $service)
      {
        $node2 = $xmldoc->createElement("Service");
        $node->appendChild($node2);
        $node2->setAttribute("ServicePricingType", "Per stay");
        $node2->setAttribute("PriceGuaranteed", "true");
        $node2->setAttribute("Quantity", $service["amount"]);

        $node3 = $xmldoc->createElement("ServiceDetails");
        $node2->appendChild($node3);

        $node4 = $xmldoc->createElement("Comments");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("Comment");
        $node4->appendChild($node5);

        $node6 = $xmldoc->createElement("Text");
        $node5->appendChild($node6);
        $text_node = $xmldoc->createTextNode($service["title"]);
        $node6->appendChild($text_node);

        /*
        $node4 = $xmldoc->createElement("GuestCounts");
        $node3->appendChild($node4);

        $node5 = $xmldoc->createElement("GuestCount");
        $node4->appendChild($node5);
        $node5->setAttribute("Count", "2");
        */

        $node3 = $xmldoc->createElement("Price");
        $node2->appendChild($node3);
        $node3->setAttribute("NumberOfUnits", $service["amount"]);

        $node4 = $xmldoc->createElement("Base");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", "EUR");

        $node4 = $xmldoc->createElement("Total");
        $node3->appendChild($node4);
        $node4->setAttribute("AmountAfterTax", number_format($service["total_price"], 2, ".", ""));
        $node4->setAttribute("DecimalPlaces", "2");
        $node4->setAttribute("CurrencyCode", "EUR");
      } // foreach service
      //--------------------------------------------------------------------
      $resglobalinfo = $xmldoc->createElement("ResGlobalInfo");
      $reservation->appendChild($resglobalinfo);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Comments");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("Comment");
      $node->appendChild($node2);
      $node2->setAttribute("Name", "Guestmessage");
      $node2->setAttribute("GuestViewable", "1");

      $node3 = $xmldoc->createElement("Text");
      $node2->appendChild($node3);
      $node3->setAttribute("Formatted", "1");

      $text_node = $xmldoc->createCDATASection($order_info["note"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("HotelReservationIDs");
      $resglobalinfo->appendChild($node);

      $node2 = $xmldoc->createElement("HotelReservationID");
      $node->appendChild($node2);
      $node2->setAttribute("ResID_Type", "14");
      $node2->setAttribute("ResID_Value", $order_info["id"]);
      $node2->setAttribute("ForGuest", "1");
      //--------------------------------------------------------------------
      $node = $xmldoc->createElement("Total");
      $resglobalinfo->appendChild($node);
      $node->setAttribute("AmountAfterTax", number_format($order_info["total_order_price"], 2, ".", ""));
      $node->setAttribute("DecimalPlaces", "2");
      $node->setAttribute("CurrencyCode", "EUR");
      //--------------------------------------------------------------------
      $node3 = $xmldoc->createElement("Profiles");
      $resglobalinfo->appendChild($node3);

      $node4 = $xmldoc->createElement("ProfileInfo");
      $node3->appendChild($node4);

      $profile = $xmldoc->createElement("Profile");
      $node4->appendChild($profile);

      $node = $xmldoc->createElement("Customer");
      $profile->appendChild($node);
      $node->setAttribute("Gender", "");

      $node2 = $xmldoc->createElement("PersonName");
      $node->appendChild($node2);

      $node3 = $xmldoc->createElement("GivenName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["last_name"]);
      $node3->appendChild($text_node);

      $node4 = $xmldoc->createElement("Surname");
      $node2->appendChild($node4);
      $text_node = $xmldoc->createCDATASection($order_info["first_name"]);
      $node4->appendChild($text_node);

      $node2 = $xmldoc->createElement("Telephone");
      $node->appendChild($node2);
      $node2->setAttribute("PhoneNumber", $order_info["telephone"]);
      $node2->setAttribute("PhoneTechType", "1");

      $node2 = $xmldoc->createElement("Email");
      $node->appendChild($node2);
      $text_node = $xmldoc->createCDATASection($order_info["email"]);
      $node2->appendChild($text_node);

      $node2 = $xmldoc->createElement("Address");
      $node->appendChild($node2);
      $node2->setAttribute("FormattedInd", "true");
      $node2->setAttribute("Type", "1");

      $node3 = $xmldoc->createElement("AddressLine");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["address"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CityName");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["city"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("PostalCode");
      $node2->appendChild($node3);
      $text_node = $xmldoc->createCDATASection($order_info["zip"]);
      $node3->appendChild($text_node);

      $node3 = $xmldoc->createElement("CountryName");
      $node2->appendChild($node3);
      $node3->setAttribute("Code", $order_info["country_code"]);
      $text_node = $xmldoc->createCDATASection($order_info["country"]);
      $node3->appendChild($text_node);
      //--------------------------------------------------------------------
    } // foreach

    header("Content-Type: text/xml; charset=UTF-8");
    echo $xmldoc->saveXML();
    return true;
  } // sihotPullReservations
  //-----------------------------------------------------------------
  function get_so_begin_date($so, &$so_begin_date)
  {
    if(empty($so)) return;

    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $so = $dbw->escape($so);

    $query = "SELECT FROM_DATE
              FROM {$prfx}_HTL_SPECIAL_OFFER
              INNER JOIN {$prfx}_HTL_SEASON_PERIODS ON ({$prfx}_HTL_SPECIAL_OFFER.SEASON_ID = {$prfx}_HTL_SEASON_PERIODS.SEASON_ID)
              WHERE {$prfx}_HTL_SPECIAL_OFFER.PRICELIST_ID IN (SELECT ID FROM {$prfx}_HTL_PRICELIST WHERE I_NAME = '$so')
              ORDER BY FROM_DATE
              ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $dt = strtotime($dbw->field_by_name("FROM_DATE")) - 24*3600;
      if($dt > $so_begin_date) $so_begin_date = $dt;
    }

    $dbw->free_result();
  } // get_so_begin_date
  //-----------------------------------------------------------------
  function check_cc_access($uid, $password, &$err)
  {
    global $ERROR;
    global $INFO_MESSAGE;
    global $ERR_DETAILS;

    if(empty($uid))
    {
      $err = text("CreditCardAccessProhibited");
      return false;
      
      $admin_data = array();
      if(!read_admin_data($admin_data))
      {
        $err = "Programm error!";
        return false;
      }

      if($password != $admin_data["admin_password"])
      {
        $err = text("ErrPasswordIsWrong");
        return false;
      }

      return true;
    }

    $dbw = GetDBWorker();
    if(!$dbw) 
    {
      $err = "Programm error!";
      return false;
    }

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $uid = $dbw->escape($uid);

    if(!$dbw->execute_query("SELECT 1 FROM ${prfx}_USER_GROUP WHERE USER_ID = $uid AND GROUP_ID IN (SELECT ID FROM ${prfx}_GROUP WHERE SPEC_FLAG = 'CC')"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $err = "Programm error!";
      return false;
    }

    if(!$dbw->fetch_row())
    {
      $err = text("CreditCardAccessProhibited");
      return false;
    }
    
    if(!$dbw->execute_query("SELECT LOGIN, PASSWORD FROM ${prfx}_USER WHERE ID = $uid"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $err = "Programm error!";
      return false;
    }

    if(!$dbw->fetch_row())
    {
      $err = text("ErrPasswordIsWrong");
      return false;
    }

    $login = $dbw->field_by_name("LOGIN");
    $db_password = $dbw->field_by_name("PASSWORD");

    if(crypt($password, strtolower($login)) != $db_password)
    {
      $err = text("ErrPasswordIsWrong");
      return false;
    }
    
    return true;
  } // check_password
  //-----------------------------------------------------------------
  function setStatusPaid($order_id)
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;
    
    if(empty($order_id)) return true;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    if($order_id[0] == "v")
    {
      $order_id = $dbw->escape(substr($order_id, 1));
      
      $query = "UPDATE {$prfx}_HTL_VOUCHER_ORDER
                SET STATUS = 'PAID'
                WHERE ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    elseif(is_numeric($order_id))
    {
      $order_id = $dbw->escape($order_id);

      $query = "UPDATE {$prfx}_HTL_ORDER
                SET CONFIRMED = 6
                WHERE ID = $order_id";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
      
      //Notification to client that booking request was confirmed
      $this->send_email_notification(7, $order_id);
    }

    return true;
  } // setStatusPaid
  //-----------------------------------------------------------------
  public function fetch_rate_plans(&$rate_plans)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT  ID, IS_ACTIVE, IS_SOFFER, NAME, TP
                FROM {$prfx}_HTL_RATE_PLAN
                ORDER BY SORT_ORDER, NAME
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $name = $dbw->field_by_name("NAME");
      if(empty($name)) $name = "-";

      $rate_plans[$dbw->field_by_name("ID")] = array("name" => $name,
                                                        "type" => $dbw->field_by_name("TP"),
                                                        "is_active" => $dbw->field_by_name("IS_ACTIVE"),
                                                        "is_soffer" => $dbw->field_by_name("IS_SOFFER")
                                                       );
    }

    $dbw->free_result();
  } // fetch_rate_plans
  //-----------------------------------------------------------------
  public function delete_rate_plan()
  {
    global $ERROR;
    global $ERR_DETAILS;
    global $INFO_MESSAGE;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $id = $dbw->escape(reqvar("id"));

    $query = "DELETE FROM {$prfx}_HTL_RATE_PLAN WHERE ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $dbw->free_result();

    $INFO_MESSAGE = text("MsgPlanDeleted");
  } // delete_rate_plan
  //-----------------------------------------------------------------
  public function fetch_rate_plan_data()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $id = $dbw->escape(reqvar("id"));
    
    if(!$dbw->execute_query("SELECT ID, NAME, TP, VAL, IS_ABSOLUTE, IS_ACTIVE, ADVANCED_PRICE_MODE, IS_SOFFER, FROM_DATE, TO_DATE,
                             DAY_INTERVAL, INFO_DAY_INTERVAL, APPLY_TO_ALTERNATIVE, FORCE_PLAN, SORT_ORDER,
                             DURATION_FROM, DURATION_TO,
                             PAYMENT_DIRECT_DEBIT,
                             PAYMENT_CCARD,
                             PAYMENT_BILL,
                             PAYMENT_BILL_CC,
                             PAYMENT_STRIPE,
                             PAYMENT_POSTFIN_CCARD,
                             PAYMENT_POSTFIN_OTHERS,
                             PAYMENT_POSTBANK_CCARD,
                             PAYMENT_POSTBANK_OTHERS,
                             APPLY_ONLY_MAIN_PRICES,
                             MAX_PERSONS,
                             CODE,
                             COUPONS,
                             MULTIPLE_COUPONS
                             FROM ${prfx}_HTL_RATE_PLAN WHERE ID = $id"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return;
    }

    if($dbw->fetch_row())
    {
      $_REQUEST["plan_name"] = magic_quotes_to_req($dbw->field_by_name("NAME"));
      $_REQUEST["plan_type"] = magic_quotes_to_req($dbw->field_by_name("TP"));

      $_REQUEST["val"] = magic_quotes_to_req($dbw->field_by_name("VAL"));
      $_REQUEST["day_interval"] = magic_quotes_to_req($dbw->field_by_name("DAY_INTERVAL"));
      $_REQUEST["info_day_interval"] = magic_quotes_to_req($dbw->field_by_name("INFO_DAY_INTERVAL"));
      $_REQUEST["sort_order"] = magic_quotes_to_req($dbw->field_by_name("SORT_ORDER"));

      $_REQUEST["apply_to_alternative"] = magic_quotes_to_req($dbw->field_by_name("APPLY_TO_ALTERNATIVE"));
      $_REQUEST["apply_only_main_prices"] = magic_quotes_to_req($dbw->field_by_name("APPLY_ONLY_MAIN_PRICES"));

      $_REQUEST["is_absolute"] = magic_quotes_to_req($dbw->field_by_name("IS_ABSOLUTE"));
      $_REQUEST["is_active"] = magic_quotes_to_req($dbw->field_by_name("IS_ACTIVE"));
      $_REQUEST["is_soffer"] = magic_quotes_to_req($dbw->field_by_name("IS_SOFFER"));
      $_REQUEST["force_plan"] = magic_quotes_to_req($dbw->field_by_name("FORCE_PLAN"));

      $_REQUEST["is_advanced"] = magic_quotes_to_req($dbw->field_by_name("ADVANCED_PRICE_MODE"));
      $_REQUEST["is_advanced2"] = magic_quotes_to_req($dbw->field_by_name("ADVANCED_PRICE_MODE"));
      
      $_REQUEST["plan_code"] = magic_quotes_to_req($dbw->field_by_name("CODE"));
      $_REQUEST["coupons"] = magic_quotes_to_req($dbw->field_by_name("COUPONS"));
      $_REQUEST["multiple_coupons"] = magic_quotes_to_req($dbw->field_by_name("MULTIPLE_COUPONS"));
      
      $_REQUEST["max_persons"] = magic_quotes_to_req($dbw->field_by_name("MAX_PERSONS"));

      $_REQUEST["payments"]["payment_direct_debit"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_DIRECT_DEBIT"));
      $_REQUEST["payments"]["payment_ccard"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_CCARD"));
      $_REQUEST["payments"]["payment_bill"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_BILL"));
      $_REQUEST["payments"]["payment_bill_cc"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_BILL_CC"));
      $_REQUEST["payments"]["payment_stripe"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_STRIPE"));
      $_REQUEST["payments"]["payment_postfin_ccard"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_POSTFIN_CCARD"));
      $_REQUEST["payments"]["payment_postfin_others"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_POSTFIN_OTHERS"));
      $_REQUEST["payments"]["payment_postbank_ccard"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_POSTBANK_CCARD"));
      $_REQUEST["payments"]["payment_postbank_others"] = magic_quotes_to_req($dbw->field_by_name("PAYMENT_POSTBANK_OTHERS"));
      
      $_REQUEST["begin_date"] = magic_quotes_to_req(format_date($dbw->field_by_name("FROM_DATE"), text("DateFormat")));
      $_REQUEST["end_date"] = magic_quotes_to_req(format_date($dbw->field_by_name("TO_DATE"), text("DateFormat")));
      
      $_REQUEST["duration_from"] = magic_quotes_to_req($dbw->field_by_name("DURATION_FROM"));
      $_REQUEST["duration_to"] = magic_quotes_to_req($dbw->field_by_name("DURATION_TO"));
    }

    $dbw->free_result();

    $query = "SELECT LANGUAGE_ID, IS_ACTIVE, INFO, ADDINFO FROM ${prfx}_HTL_RATE_PLAN_INFO WHERE RATE_PLAN_ID = $id";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $_REQUEST["rate_plan_data"] = array();
    while($dbw->fetch_row())
    {
      $_REQUEST["rate_plan_data"][$dbw->field_by_name("LANGUAGE_ID")]["is_active"] = magic_quotes_to_req($dbw->field_by_name("IS_ACTIVE"));
      $_REQUEST["rate_plan_data"][$dbw->field_by_name("LANGUAGE_ID")]["info"] = magic_quotes_to_req($dbw->field_by_name("INFO"));
      $_REQUEST["rate_plan_data"][$dbw->field_by_name("LANGUAGE_ID")]["addinfo"] = magic_quotes_to_req($dbw->field_by_name("ADDINFO"));
    }

    $dbw->free_result();

    $query = "SELECT SERVICE_ID
              FROM {$prfx}_HTL_RATE_PLAN_SERVICE
              WHERE RATE_PLAN_ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["rate_plan_services"][$dbw->field_by_name("SERVICE_ID")] = 1;
    }

    $dbw->free_result();
    
    $query = "SELECT ROOM_ID
              FROM {$prfx}_HTL_RATE_PLAN_ROOM
              WHERE RATEPLAN_ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["rooms"][$dbw->field_by_name("ROOM_ID")] = 1;
    }

    $dbw->free_result();
    
    // advanced prices
    
    $query = "SELECT VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID = $id AND DTYPE = 'A'";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["val1"] = $dbw->field_by_name("VAL1");
      $_REQUEST["val2"] = $dbw->field_by_name("VAL2");
      $_REQUEST["val3"] = $dbw->field_by_name("VAL3");
      $_REQUEST["val4"] = $dbw->field_by_name("VAL4");
      $_REQUEST["val5"] = $dbw->field_by_name("VAL5");
      $_REQUEST["val6"] = $dbw->field_by_name("VAL6");
      $_REQUEST["val7"] = $dbw->field_by_name("VAL7");
    }

    $dbw->free_result();

    $query = "SELECT DAYS_MIN, DAYS_MAX, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID = $id AND DTYPE = 'EBLM'
              ORDER BY DAYS_MIN";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $i = 1;
    while($dbw->fetch_row())
    {
      $_REQUEST["eblm_discount$i"]["from"] = $dbw->field_by_name("DAYS_MIN");
      $_REQUEST["eblm_discount$i"]["to"] = $dbw->field_by_name("DAYS_MAX");

      $_REQUEST["eblm_discount$i"]["val0"] = $dbw->field_by_name("VAL0");
      $_REQUEST["eblm_discount$i"]["val1"] = $dbw->field_by_name("VAL1");
      $_REQUEST["eblm_discount$i"]["val2"] = $dbw->field_by_name("VAL2");
      $_REQUEST["eblm_discount$i"]["val3"] = $dbw->field_by_name("VAL3");
      $_REQUEST["eblm_discount$i"]["val4"] = $dbw->field_by_name("VAL4");
      $_REQUEST["eblm_discount$i"]["val5"] = $dbw->field_by_name("VAL5");
      $_REQUEST["eblm_discount$i"]["val6"] = $dbw->field_by_name("VAL6");
      $_REQUEST["eblm_discount$i"]["val7"] = $dbw->field_by_name("VAL7");
      
      $i++;
    }

    $dbw->free_result();
    
    $query = "SELECT DAYS_MIN, DAYS_MAX, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7
              FROM {$prfx}_HTL_RATE_DISCOUNTS
              WHERE RATEPLAN_ID = $id AND DTYPE = 'LS'
              ORDER BY DAYS_MIN";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    $i = 1;
    while($dbw->fetch_row())
    {
      $_REQUEST["ls_discount$i"]["from"] = $dbw->field_by_name("DAYS_MIN");
      $_REQUEST["ls_discount$i"]["to"] = $dbw->field_by_name("DAYS_MAX");

      $_REQUEST["ls_discount$i"]["val0"] = $dbw->field_by_name("VAL0");
      $_REQUEST["ls_discount$i"]["val1"] = $dbw->field_by_name("VAL1");
      $_REQUEST["ls_discount$i"]["val2"] = $dbw->field_by_name("VAL2");
      $_REQUEST["ls_discount$i"]["val3"] = $dbw->field_by_name("VAL3");
      $_REQUEST["ls_discount$i"]["val4"] = $dbw->field_by_name("VAL4");
      $_REQUEST["ls_discount$i"]["val5"] = $dbw->field_by_name("VAL5");
      $_REQUEST["ls_discount$i"]["val6"] = $dbw->field_by_name("VAL6");
      $_REQUEST["ls_discount$i"]["val7"] = $dbw->field_by_name("VAL7");
      
      $i++;
    }

    $dbw->free_result();

    return true;
  } // fetch_rate_plan_data
  //-----------------------------------------------------------------
  function fetch_groups_for_rate_plan()
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());
    $id = $dbw->escape(reqvar("id"));

    // fetch all groups
    $where_clause = "WHERE (FLAG = 0 OR FLAG = 4 OR FLAG = 2 OR FLAG = 1 OR FLAG = 1024)";
    if(!reqvar_empty("id"))
    {
      $where_clause .= " AND ID NOT IN (SELECT GROUP_ID FROM ${prfx}_HTL_RATE_PLAN_GROUP WHERE RATE_PLAN_ID = $id)";
    }

    $_REQUEST["all_groups"] = array();

    if(!$dbw->execute_query("select ID, NAME, FLAG from ${prfx}_GROUP
                             $where_clause
                             ORDER BY FLAG DESC, NAME
                            "))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["all_groups"][] = $dbw->field_by_name("ID");
    } // while($dbw->fetch_row())

    $dbw->free_result();

    if(reqvar_empty("id")) return true;

    // fetch selected groups
    $_REQUEST["selected_groups"] = array();
    if(!$dbw->execute_query("select ID, NAME, FLAG from ${prfx}_GROUP
                             WHERE (FLAG = 0 OR FLAG = 4 OR FLAG = 2 OR FLAG = 1 OR FLAG = 1024) AND ID IN (SELECT GROUP_ID FROM ${prfx}_HTL_RATE_PLAN_GROUP WHERE RATE_PLAN_ID = $id)
                             ORDER BY FLAG DESC, NAME
                            "))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $_REQUEST["selected_groups"][] = $dbw->field_by_name("ID");
    } // while($dbw->fetch_row())

    $dbw->free_result();

    return true;
  } // fetch_groups_for_rate_plan
  //-----------------------------------------------------------------
  function save_rate_plan_data()
  {
    global $MAY_CLOSE, $ERROR;
    global $ERR_DETAILS;
    global $ACTIVE_TAB;
    global $FOCUS_ELEMENT;
    global $INFO_MESSAGE;
    
    // validation
    if(reqvar_empty("plan_name"))
    {
      $ERROR = text("ErrPlanNameEmpty");
      $ACTIVE_TAB = "1";
      $FOCUS_ELEMENT = "plan_name";
      return false;
    }

    $begin_date = iso_date(reqvar("begin_date"), text("DateFormat"));
    if($begin_date == "error")
    {
      $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
      $FOCUS_ELEMENT = "begin_date";
      $ACTIVE_TAB = "1";
      return false;
    }

    $end_date = iso_date(reqvar("end_date"), text("DateFormat"));
    if($end_date == "error")
    {
      $ERROR = sprintf(text("ErrWrongDateFormat"), text("DateFormatExample"));
      $FOCUS_ELEMENT = "end_date";
      $ACTIVE_TAB = "1";
      return false;
    }
    
    $val = reqvar("val");
    if(!empty($val) && !is_numeric($val)) $val = "NULL";
    if((string)$val === "") $val = "NULL";

    $day_interval = reqvar("day_interval");
    if(!empty($day_interval) && !is_numeric($day_interval) && $day_interval < 0) $day_interval = "NULL";
    if((string)$day_interval === "") $day_interval = "NULL";

    $info_day_interval = reqvar("info_day_interval");
    if(!empty($info_day_interval) && !is_numeric($info_day_interval) && $info_day_interval < 0) $info_day_interval = "NULL";
    if((string)$info_day_interval === "") $info_day_interval = "NULL";

    $sort_order = reqvar("sort_order");
    if(!empty($sort_order) && !is_numeric($sort_order)) $sort_order = "NULL";
    if((string)$sort_order === "") $sort_order = "NULL";
    
    $max_persons = reqvar("max_persons");
    if(!empty($max_persons) && !is_numeric($max_persons)) $max_persons = "NULL";
    if((string)$max_persons === "") $max_persons = "NULL";

    $duration_from = reqvar("duration_from");
    if(!empty($duration_from) && !is_numeric($duration_from) && $duration_from < 0) $duration_from = "NULL";
    if((string)$duration_from === "") $duration_from = "NULL";

    $duration_to = reqvar("duration_to");
    if(!empty($duration_to) && !is_numeric($duration_to) && $duration_to < 0) $duration_to = "NULL";
    if((string)$duration_to === "") $duration_to = "NULL";
    
    $is_soffer = reqvar_empty("is_soffer") ? "0" : "1";
    $force_plan = reqvar_empty("force_plan") ? "0" : "1";
    $is_active = reqvar_empty("is_active") ? "0" : "1";
    $is_absolute = reqvar_empty("is_absolute") ? "0" : "1";
    $apply_to_alternative = reqvar_empty("apply_to_alternative") ? "0" : "1";    
    $apply_only_main_prices = reqvar_empty("apply_only_main_prices") ? "0" : "1";    

    $is_advanced = !reqvar_empty("is_advanced") || !reqvar_empty("is_advanced2") ? "1" : "0";
    
    $dbw = GetDBWorker();
    if(!$dbw) return false;
    
    $plan_code = null_if_empty($dbw->escape(reqvar("plan_code")));
    $coupons = null_if_empty($dbw->escape(reqvar("coupons")));
    $multiple_coupons = reqvar_empty("multiple_coupons") ? "0" : "1";    
    
    $payment_direct_debit = empty($_REQUEST["payments"]["payment_direct_debit"]) ? "0" : "1";    
    $payment_ccard = empty($_REQUEST["payments"]["payment_ccard"]) ? "0" : "1";    
    $payment_bill = empty($_REQUEST["payments"]["payment_bill"]) ? "0" : "1";    
    $payment_bill_cc = empty($_REQUEST["payments"]["payment_bill_cc"]) ? "0" : "1";    
    $payment_stripe = empty($_REQUEST["payments"]["payment_stripe"]) ? "0" : "1";    
    $payment_postfin_ccard = empty($_REQUEST["payments"]["payment_postfin_ccard"]) ? "0" : "1";    
    $payment_postfin_others = empty($_REQUEST["payments"]["payment_postfin_others"]) ? "0" : "1";    
    $payment_postbank_ccard = empty($_REQUEST["payments"]["payment_postbank_ccard"]) ? "0" : "1";    
    $payment_postbank_others = empty($_REQUEST["payments"]["payment_postbank_others"]) ? "0" : "1";    
    
    if(in_array(reqvar("plan_type"), array("earlybird", "lastminute", "regular", "coupon")))
    {
      if(!$is_advanced)
      {
        if($val == "NULL") 
        {
          $ERROR = text("ErrReductionEmpty");
          $ACTIVE_TAB = "1";
          $FOCUS_ELEMENT = "val";
          return false;
        }
      }
      else
      {
        if("".ifnull($_REQUEST["val1"]) === "" || !is_numeric($_REQUEST["val1"]) ||
           "".ifnull($_REQUEST["val2"]) === "" || !is_numeric($_REQUEST["val2"]) ||
           "".ifnull($_REQUEST["val3"]) === "" || !is_numeric($_REQUEST["val3"]) ||
           "".ifnull($_REQUEST["val4"]) === "" || !is_numeric($_REQUEST["val4"]) ||
           "".ifnull($_REQUEST["val5"]) === "" || !is_numeric($_REQUEST["val5"]) ||
           "".ifnull($_REQUEST["val6"]) === "" || !is_numeric($_REQUEST["val6"]) ||
           "".ifnull($_REQUEST["val7"]) === "" || !is_numeric($_REQUEST["val7"]) 
          ) 
        {
          $ERROR = text("RateAdvancedModePriceEmpty");
          $ACTIVE_TAB = "1";
          $FOCUS_ELEMENT = "val";
          return false;
        }
      }
    }
    else    
    {
      if(reqvar("plan_type") == "longstay" || reqvar("plan_type") == "additional")
      {
        if(!$is_advanced)
        {
          if($val == "NULL") 
          {
            $ERROR = text("ErrReductionEmpty");
            $ACTIVE_TAB = "1";
            $FOCUS_ELEMENT = "val";
            return false;
          }
        }
        else
        {
          if("".ifnull($_REQUEST["val1"]) === "" || !is_numeric($_REQUEST["val1"]) ||
             "".ifnull($_REQUEST["val2"]) === "" || !is_numeric($_REQUEST["val2"]) ||
             "".ifnull($_REQUEST["val3"]) === "" || !is_numeric($_REQUEST["val3"]) ||
             "".ifnull($_REQUEST["val4"]) === "" || !is_numeric($_REQUEST["val4"]) ||
             "".ifnull($_REQUEST["val5"]) === "" || !is_numeric($_REQUEST["val5"]) ||
             "".ifnull($_REQUEST["val6"]) === "" || !is_numeric($_REQUEST["val6"]) ||
             "".ifnull($_REQUEST["val7"]) === "" || !is_numeric($_REQUEST["val7"]) 
            ) 
          {
            $ERROR = text("RateAdvancedModePriceEmpty");
            $ACTIVE_TAB = "1";
            $FOCUS_ELEMENT = "val";
            return false;
          }
        }
      }
      
      for($i = 1; $i <= 5; $i++)
      {
        if(!empty($_REQUEST["eblm_discount".$i]["from"]) ||
           !empty($_REQUEST["eblm_discount".$i]["to"])
          ) 
        {
          if(empty($_REQUEST["eblm_discount".$i]["from"]) || 
             empty($_REQUEST["eblm_discount".$i]["to"])
            ) 
          {
            $ERROR = text("ErrDayAmountEmpty");
            $ACTIVE_TAB = "1";
            return false;
          }
          
          if(!$is_advanced)
          {
            if("".ifnull($_REQUEST["eblm_discount".$i]["val0"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val0"]))
            {
              $ERROR = text("ErrReductionEmpty");
              $ACTIVE_TAB = "1";
              return false;
            }
          }
          else
          {
            if("".ifnull($_REQUEST["eblm_discount".$i]["val1"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val1"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val2"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val2"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val3"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val3"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val4"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val4"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val5"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val5"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val6"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val6"]) ||
               "".ifnull($_REQUEST["eblm_discount".$i]["val7"]) === "" || !is_numeric($_REQUEST["eblm_discount".$i]["val7"]) 
              ) 
            {
              $ERROR = text("RateAdvancedModePriceEmpty");
              $ACTIVE_TAB = "1";
              return false;
            }
          }
        } // eblm   
        
        if(!empty($_REQUEST["ls_discount".$i]["from"]) ||
           !empty($_REQUEST["ls_discount".$i]["to"])
          ) 
        {
          if(empty($_REQUEST["ls_discount".$i]["from"]) || 
             empty($_REQUEST["ls_discount".$i]["to"])
            ) 
          {
            $ERROR = text("ErrDayAmountEmpty");
            $ACTIVE_TAB = "1";
            return false;
          }
          
          if(!$is_advanced)
          {
            if("".ifnull($_REQUEST["ls_discount".$i]["val0"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val0"]))
            {
              $ERROR = text("ErrReductionEmpty");
              $ACTIVE_TAB = "1";
              return false;
            }
          }
          else
          {
            if("".ifnull($_REQUEST["ls_discount".$i]["val1"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val1"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val2"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val2"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val3"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val3"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val4"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val4"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val5"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val5"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val6"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val6"]) ||
               "".ifnull($_REQUEST["ls_discount".$i]["val7"]) === "" || !is_numeric($_REQUEST["ls_discount".$i]["val7"]) 
              ) 
            {
              $ERROR = text("RateAdvancedModePriceEmpty");
              $ACTIVE_TAB = "1";
              return false;
            }
          }
        } // ls   
      } // for
    }
    
    if(in_array(reqvar("plan_type"), array("earlybird", "lastminute", "longstay")) &&
       $day_interval == "NULL")
    {
      $ERROR = text("ErrDayAmountEmpty");
      $ACTIVE_TAB = "1";
      $FOCUS_ELEMENT = "day_interval";
      return false;
    }         

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    // test unique
    $name = $dbw->escape(reqvar("plan_name"));
    $IS_INSERTING = reqvar_empty("id");
    if(!$IS_INSERTING)
    {
      $id = $dbw->escape(reqvar("id"));
      $query = "SELECT NAME FROM ${prfx}_HTL_RATE_PLAN WHERE NAME = '$name' AND ID <> $id";
    }
    else
    {
      $query = "SELECT NAME FROM ${prfx}_HTL_RATE_PLAN WHERE NAME = '$name'";
    } // if

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $ERROR = text("ErrPlanNameExists");
      $ACTIVE_TAB = "1";
      $FOCUS_ELEMENT = "plan_name";
      $dbw->free_result();
      return false;
    }

    $dbw->free_result();
    
    // room type check
    if(!reqvar_empty("max_persons") && !empty($_REQUEST["rooms"]))
    {
      $room_in_list = implode(", ", array_keys($_REQUEST["rooms"]));
      
      $query = "SELECT 1 FROM ${prfx}_HTL_ROOMS WHERE ROOM_TYPE NOT IN ('holiday_home_fixed', 'hotel_room_fixed') AND ID IN ($room_in_list)";
      
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      if($dbw->fetch_row())
      {
        $ERROR = text("ErrMaxPersonsOnlyFixed");
        $ACTIVE_TAB = "1";
        $FOCUS_ELEMENT = "max_persons";
        $dbw->free_result();
        return false;
      }

      $dbw->free_result();
    } // room type check
    
    if(!$dbw->start_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $plan_type = $dbw->escape(reqvar("plan_type"));
    
    if(empty($begin_date)) $begin_date = "NULL";
    else                 $begin_date = "'" . $dbw->format_datetime(strtotime(date("Ymd 00:00:00", strtotime($begin_date)))) . "'";

    if(empty($end_date)) $end_date = "NULL";
    else                 $end_date = "'" . $dbw->format_datetime(strtotime(date("Ymd 23:59:59", strtotime($end_date)))) . "'";
    
    if(!$IS_INSERTING)
    {
    $id = $dbw->escape(reqvar("id"));
      $query = "UPDATE ${prfx}_HTL_RATE_PLAN SET 
                NAME = '$name', 
                TP = '$plan_type', 
                DAY_INTERVAL = $day_interval, 
                INFO_DAY_INTERVAL = $info_day_interval, 
                SORT_ORDER = $sort_order, 
                IS_ACTIVE = '$is_active', 
                IS_SOFFER = '$is_soffer', 
                FORCE_PLAN = '$force_plan',

                MAX_PERSONS = $max_persons,
                CODE = $plan_code,
                COUPONS = $coupons,
                MULTIPLE_COUPONS = $multiple_coupons,
                
                DURATION_FROM = $duration_from,
                DURATION_TO = $duration_to,
                
                ADVANCED_PRICE_MODE = '$is_advanced',
                
                PAYMENT_DIRECT_DEBIT = '$payment_direct_debit',
                PAYMENT_CCARD = '$payment_ccard',
                PAYMENT_BILL = '$payment_bill',
                PAYMENT_BILL_CC = '$payment_bill_cc',
                PAYMENT_STRIPE = '$payment_stripe',
                PAYMENT_POSTFIN_CCARD = '$payment_postfin_ccard',
                PAYMENT_POSTFIN_OTHERS = '$payment_postfin_others',
                PAYMENT_POSTBANK_CCARD = '$payment_postbank_ccard',
                PAYMENT_POSTBANK_OTHERS = '$payment_postbank_others',

                IS_ABSOLUTE = '$is_absolute', 
                APPLY_TO_ALTERNATIVE = '$apply_to_alternative',
                APPLY_ONLY_MAIN_PRICES = '$apply_only_main_prices',
                VAL = $val,
                FROM_DATE = $begin_date, 
                TO_DATE = $end_date 
                WHERE ID = $id";
    }
    else
    {
      $query = "INSERT INTO ${prfx}_HTL_RATE_PLAN 
      (NAME, TP, IS_ACTIVE, IS_SOFFER, ADVANCED_PRICE_MODE, FORCE_PLAN, DURATION_FROM, DURATION_TO, MAX_PERSONS, CODE, COUPONS, MULTIPLE_COUPONS, PAYMENT_DIRECT_DEBIT, PAYMENT_CCARD, PAYMENT_BILL, PAYMENT_BILL_CC, PAYMENT_STRIPE, PAYMENT_POSTFIN_CCARD, PAYMENT_POSTFIN_OTHERS, PAYMENT_POSTBANK_CCARD, PAYMENT_POSTBANK_OTHERS, IS_ABSOLUTE, APPLY_TO_ALTERNATIVE, APPLY_ONLY_MAIN_PRICES, VAL, DAY_INTERVAL, INFO_DAY_INTERVAL, SORT_ORDER, FROM_DATE, TO_DATE) 
      VALUES 
      ('$name', '$plan_type', '$is_active', '$is_soffer', '$is_advanced', '$force_plan', $duration_from, $duration_to, $max_persons, $plan_code, $coupons, $multiple_coupons, '$payment_direct_debit', '$payment_ccard', '$payment_bill_cc', '$payment_bill', '$payment_stripe', '$payment_postfin_ccard', '$payment_postfin_others', '$payment_postbank_ccard', '$payment_postbank_others', '$is_absolute', '$apply_to_alternative', '$apply_only_main_prices', $val, $day_interval, $info_day_interval, $sort_order, $begin_date, $end_date)";
    } // if

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($IS_INSERTING)
    {
      $id = $dbw->insert_id();
    }

    if(!$dbw->execute_query("DELETE FROM ${prfx}_HTL_RATE_PLAN_INFO WHERE RATE_PLAN_ID = $id"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();

      return false;
    }
        
    if(isset($_REQUEST["rate_plan_data"]) && count($_REQUEST["rate_plan_data"]) > 0)
    {
      foreach($_REQUEST["rate_plan_data"] as $lid => &$rate_plan_data)
      {
        $is_active = empty($rate_plan_data["is_active"]) ? "0" : "1";
        
        if($is_active == "1" && empty($rate_plan_data["info"]))
        {
          $ERROR = text("ErrSiteCaptionEmpty");
          $FOCUS_ELEMENT = "rate_plan_data[$lid][info]";
          $dbw->rollback_transaction();
          return false;
        }       

        $lid = $dbw->escape($lid);
        
        $info = null_if_empty($dbw->escape(magic_quotes_from_req(ifnull($rate_plan_data["info"]))));
        $addinfo = null_if_empty($dbw->escape(magic_quotes_from_req(ifnull($rate_plan_data["addinfo"]))));

        if(!$dbw->execute_query("INSERT INTO ${prfx}_HTL_RATE_PLAN_INFO 
                                 (LANGUAGE_ID, RATE_PLAN_ID, IS_ACTIVE, INFO, ADDINFO)
                                 VALUES
                                 ($lid, $id, '$is_active', $info, $addinfo)"))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();

          return false;
        }
      } // foreach lang
    } // if

    // handle advanced prices
    if(!$dbw->execute_query("delete from ${prfx}_HTL_RATE_DISCOUNTS where RATEPLAN_ID = $id"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $dbw->rollback_transaction();
      return false;
    }

    $val1 = $dbw->escape($_REQUEST["val1"]);       
    if("".$val1 === "" || !is_numeric($val1)) $val1 = "NULL";

    $val2 = $dbw->escape($_REQUEST["val2"]);       
    if("".$val2 === "" || !is_numeric($val2)) $val2 = "NULL";

    $val3 = $dbw->escape($_REQUEST["val3"]);       
    if("".$val3 === "" || !is_numeric($val3)) $val3 = "NULL";

    $val4 = $dbw->escape($_REQUEST["val4"]);       
    if("".$val4 === "" || !is_numeric($val4)) $val4 = "NULL";

    $val5 = $dbw->escape($_REQUEST["val5"]);       
    if("".$val5 === "" || !is_numeric($val5)) $val5 = "NULL";

    $val6 = $dbw->escape($_REQUEST["val6"]);       
    if("".$val6 === "" || !is_numeric($val6)) $val6 = "NULL";

    $val7 = $dbw->escape($_REQUEST["val7"]);       
    if("".$val7 === "" || !is_numeric($val7)) $val7 = "NULL";
      
    if(!$dbw->execute_query("INSERT INTO ${prfx}_HTL_RATE_DISCOUNTS 
                             (RATEPLAN_ID, DTYPE, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7) 
                             VALUES 
                             ($id, 'A', $val1, $val2, $val3, $val4, $val5, $val6, $val7)"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $dbw->rollback_transaction();
      return false;
    }
    
    for($i = 1; $i <= 5; $i++)
    {
      if(!empty($_REQUEST["eblm_discount".$i]["from"]) &&
         !empty($_REQUEST["eblm_discount".$i]["to"]))
      {
        $min = $dbw->escape($_REQUEST["eblm_discount".$i]["from"]);
        $max = $dbw->escape($_REQUEST["eblm_discount".$i]["to"]);
        
        if($max < $min) { $tmp = $min; $min = $max; $max = $tmp; }

        $val0 = $dbw->escape($_REQUEST["eblm_discount".$i]["val0"]);       
        if("".$val0 === "" || !is_numeric($val0)) $val0 = "NULL";

        $val1 = $dbw->escape($_REQUEST["eblm_discount".$i]["val1"]);       
        if("".$val1 === "" || !is_numeric($val1)) $val1 = "NULL";

        $val2 = $dbw->escape($_REQUEST["eblm_discount".$i]["val2"]);       
        if("".$val2 === "" || !is_numeric($val2)) $val2 = "NULL";

        $val3 = $dbw->escape($_REQUEST["eblm_discount".$i]["val3"]);       
        if("".$val3 === "" || !is_numeric($val3)) $val3 = "NULL";

        $val4 = $dbw->escape($_REQUEST["eblm_discount".$i]["val4"]);       
        if("".$val4 === "" || !is_numeric($val4)) $val4 = "NULL";

        $val5 = $dbw->escape($_REQUEST["eblm_discount".$i]["val5"]);       
        if("".$val5 === "" || !is_numeric($val5)) $val5 = "NULL";

        $val6 = $dbw->escape($_REQUEST["eblm_discount".$i]["val6"]);       
        if("".$val6 === "" || !is_numeric($val6)) $val6 = "NULL";

        $val7 = $dbw->escape($_REQUEST["eblm_discount".$i]["val7"]);       
        if("".$val7 === "" || !is_numeric($val7)) $val7 = "NULL";
          
        if(!$dbw->execute_query("INSERT INTO ${prfx}_HTL_RATE_DISCOUNTS 
                                 (RATEPLAN_ID, DTYPE, DAYS_MIN, DAYS_MAX, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7) 
                                 VALUES 
                                 ($id, 'EBLM', $min, $max, $val0, $val1, $val2, $val3, $val4, $val5, $val6, $val7)"))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $dbw->rollback_transaction();
          return false;
        }
      }  
      
      if(!empty($_REQUEST["ls_discount".$i]["from"]) &&
         !empty($_REQUEST["ls_discount".$i]["to"]))
      {
        $min = $dbw->escape($_REQUEST["ls_discount".$i]["from"]);
        $max = $dbw->escape($_REQUEST["ls_discount".$i]["to"]);

        if($max < $min) { $tmp = $min; $min = $max; $max = $tmp; }
        
        $val0 = $dbw->escape($_REQUEST["ls_discount".$i]["val0"]);       
        if("".$val0 === "" || !is_numeric($val0)) $val0 = "NULL";

        $val1 = $dbw->escape($_REQUEST["ls_discount".$i]["val1"]);       
        if("".$val1 === "" || !is_numeric($val1)) $val1 = "NULL";

        $val2 = $dbw->escape($_REQUEST["ls_discount".$i]["val2"]);       
        if("".$val2 === "" || !is_numeric($val2)) $val2 = "NULL";

        $val3 = $dbw->escape($_REQUEST["ls_discount".$i]["val3"]);       
        if("".$val3 === "" || !is_numeric($val3)) $val3 = "NULL";

        $val4 = $dbw->escape($_REQUEST["ls_discount".$i]["val4"]);       
        if("".$val4 === "" || !is_numeric($val4)) $val4 = "NULL";

        $val5 = $dbw->escape($_REQUEST["ls_discount".$i]["val5"]);       
        if("".$val5 === "" || !is_numeric($val5)) $val5 = "NULL";

        $val6 = $dbw->escape($_REQUEST["ls_discount".$i]["val6"]);       
        if("".$val6 === "" || !is_numeric($val6)) $val6 = "NULL";

        $val7 = $dbw->escape($_REQUEST["ls_discount".$i]["val7"]);       
        if("".$val7 === "" || !is_numeric($val7)) $val7 = "NULL";
          
        if(!$dbw->execute_query("INSERT INTO ${prfx}_HTL_RATE_DISCOUNTS 
                                 (RATEPLAN_ID, DTYPE, DAYS_MIN, DAYS_MAX, VAL0, VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7) 
                                 VALUES 
                                 ($id, 'LS', $min, $max, $val0, $val1, $val2, $val3, $val4, $val5, $val6, $val7)"))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $dbw->rollback_transaction();
          return false;
        }
      }   
    }
     
    // handle groups
    if(!$dbw->execute_query("delete from ${prfx}_HTL_RATE_PLAN_GROUP where RATE_PLAN_ID = $id"))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();

      $dbw->rollback_transaction();
      return false;
    }

    if(isset($_REQUEST["selected_groups"]) && count($_REQUEST["selected_groups"]) > 0)
    {
      foreach($_REQUEST["selected_groups"] as $gid)
      {
        if(!$dbw->execute_query("INSERT INTO ${prfx}_HTL_RATE_PLAN_GROUP (GROUP_ID, RATE_PLAN_ID) VALUES ($gid, $id)"))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();

          $dbw->rollback_transaction();
          return false;
        }
      } // foreach
    } // if(count($_REQUEST["selected_pages"]) > 0)
    
    //first of all delete all rows that related with this plan
    $query = "DELETE FROM {$prfx}_HTL_RATE_PLAN_SERVICE WHERE RATE_PLAN_ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }//if

    if(!empty($_REQUEST["rate_plan_services"]))
    {
      //resave room references
      foreach($_REQUEST["rate_plan_services"] as $service_id => $service)
      {
        $query = "INSERT INTO {$prfx}_HTL_RATE_PLAN_SERVICE (SERVICE_ID, RATE_PLAN_ID) VALUES ($service_id, $id)";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if
      }//foreach
    }//if
  
    //first of all delete all rows that related with this plan
    $query = "DELETE FROM {$prfx}_HTL_RATE_PLAN_ROOM WHERE RATEPLAN_ID = $id";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }//if

    if(!empty($_REQUEST["rooms"]))
    {
      //resave room references
      foreach($_REQUEST["rooms"] as $room_id => $dummy)
      {
        $query = "INSERT INTO {$prfx}_HTL_RATE_PLAN_ROOM (ROOM_ID, RATEPLAN_ID) VALUES ($room_id, $id)";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          $dbw->rollback_transaction();
          return false;
        }//if
      }//foreach
    }//if

    if(!$dbw->commit_transaction())
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $INFO_MESSAGE = text("MsgDataSaved");

    if(reqvar("act") == "SaveClose")
      $MAY_CLOSE = true;

    $_REQUEST["id"] = magic_quotes_to_req($id);

    return true;
  } // save_rate_plan_data
  //-----------------------------------------------------------------
  function fetch_rate_plans_dropdown(&$rate_plans)
  {
    global $ERROR;
    global $ERR_DETAILS;

    $dbw = GetDBWorker();
    if(!$dbw) return false;

    $prfx = $dbw->escape(GetConnection()->get_current_prefix());

    $query = "SELECT ID, NAME
                FROM {$prfx}_HTL_RATE_PLAN
                WHERE TP IN ('additionalownprice')
                ";

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    while($dbw->fetch_row())
    {
      $rate_plans[$dbw->field_by_name("ID")] = $dbw->field_by_name("NAME");
    }

    $dbw->free_result();
    
    return true;
  } // fetch_rate_plans_dropdown
  //-----------------------------------------------------------------
  function create_room_booking_page(&$dbw, $prfx)
  {
    global $ERROR;
    global $ERR_DETAILS;

    // check if exists
    $I_NAME = $dbw->escape($_REQUEST["rooms_data"]["internal_name"]);
    
    $exists = false;
    
    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = '$I_NAME'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $exists = true;
    }

    $dbw->free_result();
    
    if($exists) return true;
    
    $site_id = "0";
    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE OTYPE = 'SITE'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $site_id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();
    
    // room root
    
    $room_root_id = "";
    
    $query = "SELECT ID FROM ${prfx}_SITE_OBJECT WHERE NAME = 'room-booking-pages'";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }

    if($dbw->fetch_row())
    {
      $room_root_id = $dbw->field_by_name("ID");
    }

    $dbw->free_result();
    
    if(empty($room_root_id))
    {
      $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('room-booking-pages', '0', 'SUBMENU')";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      $room_root_id = $dbw->insert_id();

      // get sort order
      $sort_id = 0;

      $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $site_id";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        $dbw->rollback_transaction();
        return false;
      }

      if($dbw->fetch_row())
      {
        $sort_id = $dbw->field_by_name("SORT_ORDER");
      }

      $dbw->free_result();

      // insert into tree
      $query = "INSERT INTO ${prfx}_SITE_TREE
                (ITEM_ID, PARENT_ID, SORT_ORDER)
                VALUES
                ($room_root_id, $site_id, $sort_id)";
      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }

      foreach($_REQUEST["rooms_data"]["type"] as $lang_id => $value)
      {
        $query = "INSERT INTO ${prfx}_SOBJECT_PROP
        (SOBJECT_ID, LANGUAGE_ID, PROP1, IS_ACTIVE)
        VALUES
        ($room_root_id, $lang_id, 'room-booking-pages', 1)
        ";

        if(!$dbw->execute_query($query))
        {
          $ERROR = text("ErrQueryFailed");
          $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                         $dbw->get_last_query();
          return false;
        }
      }
    } // room room insert
    
    $query = "INSERT INTO ${prfx}_SITE_OBJECT (NAME, SHOW_IN_MENU, OTYPE) VALUES ('$I_NAME', '0', 'PAGE')";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    $room_page_id = $dbw->insert_id();

    // get sort order
    $sort_id = 0;

    $query = "SELECT MAX(SORT_ORDER)+1 SORT_ORDER FROM ${prfx}_SITE_TREE WHERE PARENT_ID = $room_root_id";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      $dbw->rollback_transaction();
      return false;
    }

    if($dbw->fetch_row())
    {
      $sort_id = $dbw->field_by_name("SORT_ORDER");
    }

    $dbw->free_result();
    
    if(empty($sort_id)) $sort_id = 0;

    // insert into tree
    $query = "INSERT INTO ${prfx}_SITE_TREE
              (ITEM_ID, PARENT_ID, SORT_ORDER)
              VALUES
              ($room_page_id, $room_root_id, $sort_id)";
    if(!$dbw->execute_query($query))
    {
      $ERROR = text("ErrQueryFailed");
      $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                     $dbw->get_last_query();
      return false;
    }
    
    $text = "{HOTEL_ROOM_IBOOKING_FORM room:" . $I_NAME . "}";

    foreach($_REQUEST["rooms_data"]["type"] as $lang_id => $value)
    {
      $ROOM_TYPE = $dbw->escape(magic_quotes_from_req($value));
      $ACTIVE = !empty($_REQUEST["rooms_data"]["checkbox"][$lang_id]) ? 1 : 0;

      $query = "INSERT INTO ${prfx}_SOBJECT_PROP
      (SOBJECT_ID, LANGUAGE_ID, PROP1, IS_ACTIVE, CNT_TEXT, PUBLISHED_CNT)
      VALUES
      ($room_page_id, $lang_id, '$ROOM_TYPE', '$ACTIVE', '$text', '$text')
      ";

      if(!$dbw->execute_query($query))
      {
        $ERROR = text("ErrQueryFailed");
        $ERR_DETAILS = $dbw->get_last_error() . "\n\n" .
                       $dbw->get_last_query();
        return false;
      }
    }
    return true;
  } // create_room_booking_page
  //-----------------------------------------------------------------
} // class Hotel
?>
